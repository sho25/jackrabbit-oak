begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|compose
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUtils
operator|.
name|createIndexDefinition
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
operator|.
name|GET_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|equalTo
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|CoreMatchers
operator|.
name|hasItems
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBDataSourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|rdb
operator|.
name|RDBOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|CountingDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStoreBuilders
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentTestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStoreBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|CompositeNodeStoreTest
block|{
specifier|private
specifier|final
name|NodeStoreKind
name|root
decl_stmt|;
specifier|private
specifier|final
name|NodeStoreKind
name|mounts
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|NodeStoreRegistration
argument_list|>
name|registrations
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|CompositeNodeStore
name|store
decl_stmt|;
specifier|private
name|NodeStore
name|globalStore
decl_stmt|;
specifier|private
name|NodeStore
name|mountedStore
decl_stmt|;
specifier|private
name|NodeStore
name|deepMountedStore
decl_stmt|;
specifier|private
name|NodeStore
name|readOnlyStore
decl_stmt|;
specifier|private
name|MountInfoProvider
name|mip
decl_stmt|;
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"Root: {0}, Mounts: {1}"
argument_list|)
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
name|NodeStoreKind
operator|.
name|MEMORY
block|,
name|NodeStoreKind
operator|.
name|MEMORY
block|}
block|,
block|{
name|NodeStoreKind
operator|.
name|SEGMENT
block|,
name|NodeStoreKind
operator|.
name|SEGMENT
block|}
block|,
block|{
name|NodeStoreKind
operator|.
name|DOCUMENT_H2
block|,
name|NodeStoreKind
operator|.
name|DOCUMENT_H2
block|}
block|,
block|{
name|NodeStoreKind
operator|.
name|DOCUMENT_H2
block|,
name|NodeStoreKind
operator|.
name|SEGMENT
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|CompositeNodeStoreTest
parameter_list|(
name|NodeStoreKind
name|root
parameter_list|,
name|NodeStoreKind
name|mounts
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|mounts
operator|=
name|mounts
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|initStore
parameter_list|()
throws|throws
name|Exception
block|{
name|mip
operator|=
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"temp"
argument_list|,
literal|"/tmp"
argument_list|)
operator|.
name|mount
argument_list|(
literal|"deep"
argument_list|,
literal|"/libs/mount"
argument_list|)
operator|.
name|mount
argument_list|(
literal|"empty"
argument_list|,
literal|"/nowhere"
argument_list|)
operator|.
name|readOnlyMount
argument_list|(
literal|"readOnly"
argument_list|,
literal|"/readOnly"
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|globalStore
operator|=
name|register
argument_list|(
name|root
operator|.
name|create
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|mountedStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"temp"
argument_list|)
argument_list|)
expr_stmt|;
name|deepMountedStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"deep"
argument_list|)
argument_list|)
expr_stmt|;
name|readOnlyStore
operator|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"readOnly"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeStore
name|emptyStore
init|=
name|register
argument_list|(
name|mounts
operator|.
name|create
argument_list|(
literal|"empty"
argument_list|)
argument_list|)
decl_stmt|;
comment|// this NodeStore will always be empty
comment|// create a property on the root node
name|NodeBuilder
name|builder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a different sub-tree on the root store
name|builder
operator|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|libsBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"libs"
argument_list|)
decl_stmt|;
name|libsBuilder
operator|.
name|child
argument_list|(
literal|"first"
argument_list|)
expr_stmt|;
name|libsBuilder
operator|.
name|child
argument_list|(
literal|"second"
argument_list|)
expr_stmt|;
comment|// create an empty /apps node with a property
name|builder
operator|.
name|child
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a /tmp child on the mounted store and set a property
name|builder
operator|=
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|NodeBuilder
name|tmpBuilder
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"tmp"
argument_list|)
decl_stmt|;
name|tmpBuilder
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|tmpBuilder
operator|.
name|child
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|tmpBuilder
operator|.
name|child
argument_list|(
literal|"child2"
argument_list|)
expr_stmt|;
name|mountedStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate /libs/mount/third in the deep mount, and include a property
name|builder
operator|=
name|deepMountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|child
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|child
argument_list|(
literal|"third"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"mounted"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|deepMountedStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|deepMountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"third"
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"mounted"
argument_list|)
argument_list|)
expr_stmt|;
comment|// populate /readonly with a single node
name|builder
operator|=
name|readOnlyStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"readOnly"
argument_list|)
expr_stmt|;
name|readOnlyStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// don't use the builder since it would fail due to too many read-write stores
comment|// but for the purposes of testing the general correctness it's fine
name|List
argument_list|<
name|MountedNodeStore
argument_list|>
name|nonDefaultStores
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"temp"
argument_list|)
argument_list|,
name|mountedStore
argument_list|)
argument_list|)
expr_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"deep"
argument_list|)
argument_list|,
name|deepMountedStore
argument_list|)
argument_list|)
expr_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"empty"
argument_list|)
argument_list|,
name|emptyStore
argument_list|)
argument_list|)
expr_stmt|;
name|nonDefaultStores
operator|.
name|add
argument_list|(
operator|new
name|MountedNodeStore
argument_list|(
name|mip
operator|.
name|getMountByName
argument_list|(
literal|"readOnly"
argument_list|)
argument_list|,
name|readOnlyStore
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|=
operator|new
name|CompositeNodeStore
argument_list|(
name|mip
argument_list|,
name|globalStore
argument_list|,
name|nonDefaultStores
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|closeRepositories
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|NodeStoreRegistration
name|reg
range|:
name|registrations
control|)
block|{
name|reg
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|rootExists
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root exists"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|exists
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rootPropertyIsSet
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root[prop]"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"root[prop] = val"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"val"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nonMountedChildIsFound
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root.libs"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"libs"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedMountNodeIsVisible
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root.libs(childCount)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mixedMountsChildNodes
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root(childCount)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mountedChildIsFound
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root.tmp"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"tmp"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childrenUnderMountAreFound
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root.tmp(childCount)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|childNodeEntryForMountIsComposite
parameter_list|()
block|{
name|ChildNodeEntry
name|libsNode
init|=
name|Iterables
operator|.
name|find
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|ChildNodeEntry
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"libs"
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
literal|"root.libs(childCount)"
argument_list|,
name|libsNode
operator|.
name|getNodeState
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|3l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|contentBelongingToAnotherMountIsIgnored
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create a /tmp/oops child on the root store
comment|// these two nodes must be ignored
name|NodeBuilder
name|builder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|child
argument_list|(
literal|"oops"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"oops"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkpoint
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|checkpoint
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"checkpoint reference is null"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
comment|// create a new child /new in the root store
name|NodeBuilder
name|globalBuilder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|globalBuilder
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|globalBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// create a new child /tmp/new in the mounted store
name|NodeBuilder
name|mountedBuilder
init|=
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|mountedBuilder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|mountedStore
operator|.
name|merge
argument_list|(
name|mountedBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// create a new child /libs/mount/new in the deeply mounted store
name|NodeBuilder
name|deepMountBuilder
init|=
name|deepMountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|deepMountBuilder
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|deepMountedStore
operator|.
name|merge
argument_list|(
name|deepMountBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"store incorrectly exposes child at /new"
argument_list|,
name|store
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"store incorrectly exposes child at /tmp/new"
argument_list|,
name|store
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"store incorrectly exposes child at /libs/mount/new"
argument_list|,
name|store
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkpointInfo
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|info
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"key"
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
name|String
name|checkpoint
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|store
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|release
parameter_list|()
block|{
name|String
name|checkpoint
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|store
operator|.
name|release
argument_list|(
name|checkpoint
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|existingBlobsInRootStoreAreRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|root
operator|.
name|supportsBlobCreation
argument_list|()
argument_list|)
expr_stmt|;
name|Blob
name|createdBlob
init|=
name|globalStore
operator|.
name|createBlob
argument_list|(
name|createLargeBlob
argument_list|()
argument_list|)
decl_stmt|;
name|Blob
name|retrievedBlob
init|=
name|store
operator|.
name|getBlob
argument_list|(
name|createdBlob
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|retrievedBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|createdBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|existingBlobsInMountedStoreAreRetrieved
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|mounts
operator|.
name|supportsBlobCreation
argument_list|()
argument_list|)
expr_stmt|;
name|Blob
name|createdBlob
init|=
name|mountedStore
operator|.
name|createBlob
argument_list|(
name|createLargeBlob
argument_list|()
argument_list|)
decl_stmt|;
name|Blob
name|retrievedBlob
init|=
name|store
operator|.
name|getBlob
argument_list|(
name|createdBlob
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|retrievedBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|createdBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|blobCreation
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|root
operator|.
name|supportsBlobCreation
argument_list|()
argument_list|)
expr_stmt|;
name|Blob
name|createdBlob
init|=
name|store
operator|.
name|createBlob
argument_list|(
name|createLargeBlob
argument_list|()
argument_list|)
decl_stmt|;
name|Blob
name|retrievedBlob
init|=
name|store
operator|.
name|getBlob
argument_list|(
name|createdBlob
operator|.
name|getReference
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|retrievedBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|,
name|equalTo
argument_list|(
name|createdBlob
operator|.
name|getContentIdentity
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setPropertyOnRootStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
literal|"newProp"
argument_list|,
literal|"newValue"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Property must be visible in composite store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"newProp"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"newValue"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Property must be visible in owning (root) store"
argument_list|,
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"newProp"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"newValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removePropertyFromRootStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|removeProperty
argument_list|(
literal|"prop"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Property must be removed from composite store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Property must be removed from owning (root) store"
argument_list|,
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNodeInRootStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node must be added to composite store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node must be added to owning (root) store"
argument_list|,
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|createNodeInMountedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|child
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node must be added to composite store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node must be added to owning (mounted) store"
argument_list|,
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeNodeInRootStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node must be removed from the composite store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"apps"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node must be removed from the owning (root) store"
argument_list|,
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"apps"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeNodeInMountedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|child
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node must be added to composite store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"newNode"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node must be removed from the composite store"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node must be removed from the owning (composite) store"
argument_list|,
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderChildrenCountInRootStore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertThat
argument_list|(
literal|"root(childCount)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNodeCount
argument_list|(
literal|100
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|4l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderChildrenCountInMountedStore
parameter_list|()
block|{
name|assertThat
argument_list|(
literal|"root.tmp(childCount)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|2l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderChildNodeNamesInRootStore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertChildNodeNames
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
argument_list|,
literal|"libs"
argument_list|,
literal|"apps"
argument_list|,
literal|"tmp"
argument_list|,
literal|"readOnly"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderChildNodeNamesInMountedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|assertChildNodeNames
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
argument_list|,
literal|"child1"
argument_list|,
literal|"child2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderStateIsUpdatedBeforeMergeinGlobalStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newChild"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Newly created node should be visible in the builder's node state"
argument_list|,
name|builder
operator|.
name|hasChildNode
argument_list|(
literal|"newChild"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderStateIsUpdatedBeforeMergeinMountedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newChild"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Newly created node should be visible in the builder's node state"
argument_list|,
name|builder
operator|.
name|hasChildNode
argument_list|(
literal|"newChild"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderHasPropertyNameInRootStore
parameter_list|()
block|{
name|assertFalse
argument_list|(
literal|"Node 'nope' does not exist"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"nope"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node 'tmp' should exist (contributed by mount)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"tmp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node 'libs' should exist (contributed by root)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"libs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderHasPropertyNameInMountedStore
parameter_list|()
block|{
name|assertFalse
argument_list|(
literal|"Node 'nope' does not exist"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"nope"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node 'child1' should exist"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"child1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setChildNodeInRootStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"apps"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node apps must still exist"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"apps"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Node apps must not have any properties"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setChildNodeInMountStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"child1"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node child1 must still exist"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"child1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Node child1 must not have any properties"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|getPropertyCount
argument_list|()
argument_list|,
name|equalTo
argument_list|(
literal|0l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderBasedOnRootStoreChildNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|appsBuilder
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"apps"
argument_list|)
decl_stmt|;
name|appsBuilder
operator|.
name|removeProperty
argument_list|(
literal|"prop"
argument_list|)
expr_stmt|;
name|appsBuilder
operator|.
name|setChildNode
argument_list|(
literal|"child1"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node apps must have no properties (composite store)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node apps must have no properties (root store)"
argument_list|,
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"prop"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /apps/child1 must exist (composite store)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"child1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /apps/child1 must exist (root store)"
argument_list|,
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"apps"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"child1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderBasedOnMountStoreChildNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|tmpBuilder
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
decl_stmt|;
name|tmpBuilder
operator|.
name|removeProperty
argument_list|(
literal|"prop1"
argument_list|)
expr_stmt|;
name|tmpBuilder
operator|.
name|setChildNode
argument_list|(
literal|"child3"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node tmp must have no properties (composite store)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"prop1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Node tmp must have no properties (mounted store)"
argument_list|,
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasProperty
argument_list|(
literal|"prop1"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /tmp/build3 must exist (composite store)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"child3"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Node /tmp/child3 must exist (mounted store)"
argument_list|,
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"child3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|freshBuilderForGlobalStore
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isNew"
argument_list|,
name|builder
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isModified"
argument_list|,
name|builder
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isReplaced"
argument_list|,
name|builder
operator|.
name|isReplaced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|freshBuilderForMountedStore
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isNew"
argument_list|,
name|builder
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isModified"
argument_list|,
name|builder
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isReplaced"
argument_list|,
name|builder
operator|.
name|isReplaced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|newBuilderForGlobalStore
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
literal|"newChild"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"builder.isNew"
argument_list|,
name|builder
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isModified"
argument_list|,
name|builder
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isReplaced"
argument_list|,
name|builder
operator|.
name|isReplaced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|newBuilderForMountedStore
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|child
argument_list|(
literal|"newChild"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"builder.isNew"
argument_list|,
name|builder
operator|.
name|isNew
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isModified"
argument_list|,
name|builder
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"builder.isReplaced"
argument_list|,
name|builder
operator|.
name|isReplaced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replacedBuilderForGlobalStore
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|libsBuilder
init|=
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"libs"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"libsBuilder.isReplaced"
argument_list|,
name|libsBuilder
operator|.
name|isReplaced
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"builder.getChild('libs').isReplaced"
argument_list|,
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|isReplaced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|replacedBuilderForMountedStore
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|=
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"child1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"builder.isReplaced"
argument_list|,
name|builder
operator|.
name|isReplaced
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readChildNodeBasedOnPathFragment
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"multi-holder"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"multi-holder"
argument_list|)
operator|.
name|child
argument_list|(
literal|"oak:mount-temp"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|mountedStore
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeState
name|holderNode
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"multi-holder"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"/multi-holder/oak:mount-temp should be visible from the composite store"
argument_list|,
name|holderNode
operator|.
name|hasChildNode
argument_list|(
literal|"oak:mount-temp"
argument_list|)
argument_list|)
expr_stmt|;
name|assertChildNodeNames
argument_list|(
name|holderNode
argument_list|,
literal|"oak:mount-temp"
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"/multi-holder/ must have 1 child entry"
argument_list|,
name|holderNode
operator|.
name|getChildNodeCount
argument_list|(
literal|10
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|1l
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveNodeInSameStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|src
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|dst
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"dst"
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|src
operator|.
name|moveTo
argument_list|(
name|dst
argument_list|,
literal|"src"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"move result should be success"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"/src must no longer exist"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"/dst/src must exist (composite store)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"dst"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
argument_list|(
literal|"Test ignored, since only the default store is writeable"
argument_list|)
specifier|public
name|void
name|moveNodeBetweenStores
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|src
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"src"
argument_list|)
decl_stmt|;
name|NodeBuilder
name|dst
init|=
name|builder
operator|.
name|child
argument_list|(
literal|"tmp"
argument_list|)
decl_stmt|;
name|boolean
name|result
init|=
name|src
operator|.
name|moveTo
argument_list|(
name|dst
argument_list|,
literal|"src"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"move result should be success"
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"/src must no longer exist"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|hasChildNode
argument_list|(
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"/tmp/src must exist (composite store)"
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"src"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetOnGlobalStore
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newChild"
argument_list|)
expr_stmt|;
name|store
operator|.
name|reset
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Newly added child should no longer be visible after reset"
argument_list|,
name|builder
operator|.
name|hasChildNode
argument_list|(
literal|"newChild"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|resetOnMountedStore
parameter_list|()
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newChild"
argument_list|)
expr_stmt|;
name|store
operator|.
name|reset
argument_list|(
name|rootBuilder
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Newly added child should no longer be visible after reset"
argument_list|,
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newChild"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oldNodeStateDoesNotRefreshOnGlobalStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|old
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"old NodeState should not see newly added child node before merge "
argument_list|,
name|old
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"old NodeState should not see newly added child node after merge "
argument_list|,
name|old
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oldNodeStateDoesNotRefreshOnMountedStore
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|old
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|child
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"old NodeState should not see newly added child node before merge "
argument_list|,
name|old
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"old NodeState should not see newly added child node after merge "
argument_list|,
name|old
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// this test ensures that when going from State -> Builder -> State -> Builder the state is properly maintained
annotation|@
name|Test
specifier|public
name|void
name|nestedBuilderFromState
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|rootState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rootBuilder
operator|.
name|child
argument_list|(
literal|"newNode"
argument_list|)
expr_stmt|;
name|NodeState
name|baseState
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builderFromState
init|=
name|baseState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|builderFromState
operator|.
name|hasChildNode
argument_list|(
literal|"newNode"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|nestedBuilderWithNewPropertyFromState
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeState
name|rootState
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|rootState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|rootBuilder
operator|.
name|setProperty
argument_list|(
literal|"newProperty"
argument_list|,
literal|true
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|NodeState
name|baseState
init|=
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|baseState
operator|.
name|getBoolean
argument_list|(
literal|"newProperty"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builderFromState
init|=
name|baseState
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|builderFromState
operator|.
name|getBoolean
argument_list|(
literal|"newProperty"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|builderFromState
operator|.
name|getNodeState
argument_list|()
operator|.
name|getBoolean
argument_list|(
literal|"newProperty"
argument_list|)
argument_list|)
expr_stmt|;
comment|//assertTrue(builderFromState.getBaseState().getBoolean("newProperty")); // FIXME
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|readOnlyMountRejectsChanges
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|getChildNode
argument_list|(
literal|"readOnly"
argument_list|)
operator|.
name|child
argument_list|(
literal|"newChild"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|builderBasedOnCheckpoint
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|String
name|checkpoint
init|=
name|store
operator|.
name|checkpoint
argument_list|(
name|TimeUnit
operator|.
name|DAYS
operator|.
name|toMillis
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"checkpoint reference is null"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
comment|// create a new child /new in the root store
name|NodeBuilder
name|globalBuilder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|globalBuilder
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|globalBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// create a new child /tmp/new in the mounted store
name|NodeBuilder
name|mountedBuilder
init|=
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|mountedBuilder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|mountedStore
operator|.
name|merge
argument_list|(
name|mountedBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// create a new child /libs/mount/new in the deeply mounted store
name|NodeBuilder
name|deepMountBuilder
init|=
name|deepMountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|deepMountBuilder
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
expr_stmt|;
name|deepMountedStore
operator|.
name|merge
argument_list|(
name|deepMountBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeBuilder
name|rootCheckpointBuilder
init|=
name|store
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
operator|.
name|builder
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
literal|"store incorrectly exposes child at /new"
argument_list|,
name|rootCheckpointBuilder
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"store incorrectly exposes child at /tmp/new"
argument_list|,
name|rootCheckpointBuilder
operator|.
name|getChildNode
argument_list|(
literal|"tmp"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"store incorrectly exposes child at /libs/mount/new"
argument_list|,
name|rootCheckpointBuilder
operator|.
name|getChildNode
argument_list|(
literal|"libs"
argument_list|)
operator|.
name|getChildNode
argument_list|(
literal|"mount"
argument_list|)
operator|.
name|hasChildNode
argument_list|(
literal|"new"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|duplicatedChildren
parameter_list|()
throws|throws
name|CommitFailedException
block|{
comment|// create a new child /new in the root store
name|NodeBuilder
name|globalBuilder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|globalBuilder
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"store"
argument_list|,
literal|"global"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|globalBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// create a new child /tmp/new in the mounted store
name|NodeBuilder
name|mountedBuilder
init|=
name|mountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|mountedBuilder
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"store"
argument_list|,
literal|"mounted"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|mountedStore
operator|.
name|merge
argument_list|(
name|mountedBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
comment|// create a new child /libs/mount/new in the deeply mounted store
name|NodeBuilder
name|deepMountBuilder
init|=
name|deepMountedStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|deepMountBuilder
operator|.
name|child
argument_list|(
literal|"new"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"store"
argument_list|,
literal|"deepMounted"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|deepMountedStore
operator|.
name|merge
argument_list|(
name|deepMountBuilder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ChildNodeEntry
argument_list|>
name|children
init|=
name|newArrayList
argument_list|(
name|filter
argument_list|(
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
argument_list|,
name|compose
argument_list|(
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"new"
argument_list|)
argument_list|,
name|GET_NAME
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|children
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"global"
argument_list|,
name|children
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getNodeState
argument_list|()
operator|.
name|getString
argument_list|(
literal|"store"
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|rootBuilder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|childNames
init|=
name|newArrayList
argument_list|(
name|filter
argument_list|(
name|rootBuilder
operator|.
name|getChildNodeNames
argument_list|()
argument_list|,
name|Predicates
operator|.
name|equalTo
argument_list|(
literal|"new"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|childNames
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"global"
argument_list|,
name|rootBuilder
operator|.
name|getChildNode
argument_list|(
literal|"new"
argument_list|)
operator|.
name|getString
argument_list|(
literal|"store"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|propertyIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|globalBuilder
init|=
name|globalStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createIndexDefinition
argument_list|(
name|globalBuilder
operator|.
name|child
argument_list|(
name|INDEX_DEFINITIONS_NAME
argument_list|)
argument_list|,
literal|"foo"
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|EditorHook
name|hook
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|globalStore
operator|.
name|merge
argument_list|(
name|globalBuilder
argument_list|,
name|hook
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|hook
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|builder
operator|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"content"
argument_list|)
operator|.
name|removeProperty
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|hook
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
enum|enum
name|NodeStoreKind
block|{
name|MEMORY
block|{
annotation|@
name|Override
specifier|public
name|NodeStoreRegistration
name|create
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|NodeStoreRegistration
argument_list|()
block|{
specifier|private
name|MemoryNodeStore
name|instance
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|get
parameter_list|()
block|{
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"instance already created"
argument_list|)
throw|;
block|}
name|instance
operator|=
operator|new
name|MemoryNodeStore
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
comment|// does nothing
block|}
block|}
return|;
block|}
specifier|public
name|boolean
name|supportsBlobCreation
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
block|}
block|,
name|SEGMENT
block|{
annotation|@
name|Override
specifier|public
name|NodeStoreRegistration
name|create
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|NodeStoreRegistration
argument_list|()
block|{
specifier|private
name|SegmentNodeStore
name|instance
decl_stmt|;
specifier|private
name|FileStore
name|store
decl_stmt|;
specifier|private
name|File
name|storePath
decl_stmt|;
specifier|private
name|String
name|blobStorePath
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|get
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"instance already created"
argument_list|)
throw|;
block|}
comment|// TODO - don't use Unix directory separators
name|String
name|directoryName
init|=
name|name
operator|!=
literal|null
condition|?
literal|"segment-"
operator|+
name|name
else|:
literal|"segment"
decl_stmt|;
name|storePath
operator|=
operator|new
name|File
argument_list|(
literal|"target/classes/"
operator|+
name|directoryName
argument_list|)
expr_stmt|;
name|String
name|blobStoreDirectoryName
init|=
name|name
operator|!=
literal|null
condition|?
literal|"blob-"
operator|+
name|name
else|:
literal|"blob"
decl_stmt|;
name|blobStorePath
operator|=
literal|"target/classes/"
operator|+
name|blobStoreDirectoryName
expr_stmt|;
name|BlobStore
name|blobStore
init|=
operator|new
name|FileBlobStore
argument_list|(
name|blobStorePath
argument_list|)
decl_stmt|;
name|store
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|storePath
argument_list|)
operator|.
name|withBlobStore
argument_list|(
name|blobStore
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|instance
operator|=
name|SegmentNodeStoreBuilders
operator|.
name|builder
argument_list|(
name|store
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|storePath
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
operator|new
name|File
argument_list|(
name|blobStorePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
block|}
block|,
name|DOCUMENT_H2
block|{
comment|// TODO - copied from DocumentRdbFixture
specifier|private
name|DataSource
name|ds
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStoreRegistration
name|create
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|NodeStoreRegistration
argument_list|()
block|{
specifier|private
name|DocumentNodeStore
name|instance
decl_stmt|;
annotation|@
name|Override
specifier|public
name|NodeStore
name|get
parameter_list|()
throws|throws
name|Exception
block|{
name|RDBOptions
name|options
init|=
operator|new
name|RDBOptions
argument_list|()
operator|.
name|dropTablesOnClose
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|jdbcUrl
init|=
literal|"jdbc:h2:file:./target/classes/document"
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
name|jdbcUrl
operator|+=
literal|"-"
operator|+
name|name
expr_stmt|;
block|}
name|ds
operator|=
name|RDBDataSourceFactory
operator|.
name|forJdbcUrl
argument_list|(
name|jdbcUrl
argument_list|,
literal|"sa"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|instance
operator|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|setRDBConnection
argument_list|(
name|ds
argument_list|,
name|options
argument_list|)
operator|.
name|getNodeStore
argument_list|()
expr_stmt|;
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|Exception
block|{
name|instance
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|ds
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|ds
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
block|;
specifier|public
specifier|abstract
name|NodeStoreRegistration
name|create
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|supportsBlobCreation
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
block|}
specifier|private
interface|interface
name|NodeStoreRegistration
block|{
name|NodeStore
name|get
parameter_list|()
throws|throws
name|Exception
function_decl|;
name|void
name|close
parameter_list|()
throws|throws
name|Exception
function_decl|;
block|}
specifier|private
name|NodeStore
name|register
parameter_list|(
name|NodeStoreRegistration
name|reg
parameter_list|)
throws|throws
name|Exception
block|{
name|registrations
operator|.
name|add
argument_list|(
name|reg
argument_list|)
expr_stmt|;
return|return
name|reg
operator|.
name|get
argument_list|()
return|;
block|}
comment|// ensure blobs don't get inlined by the SegmentBlobStore
specifier|private
name|ByteArrayInputStream
name|createLargeBlob
parameter_list|()
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|SegmentTestConstants
operator|.
name|MEDIUM_LIMIT
condition|;
name|i
operator|++
control|)
block|{
name|out
operator|.
name|write
argument_list|(
literal|'a'
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertChildNodeNames
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|childNodeNames
init|=
name|builder
operator|.
name|getChildNodeNames
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"childNodeNames must not be empty"
argument_list|,
name|childNodeNames
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Incorrect number of elements"
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|childNodeNames
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|names
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Mismatched elements"
argument_list|,
name|childNodeNames
argument_list|,
name|hasItems
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertChildNodeNames
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
modifier|...
name|names
parameter_list|)
block|{
name|Iterable
argument_list|<
name|String
argument_list|>
name|childNodeNames
init|=
name|state
operator|.
name|getChildNodeNames
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"childNodeNames must not be empty"
argument_list|,
name|childNodeNames
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Incorrect number of elements"
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|childNodeNames
argument_list|)
argument_list|,
name|equalTo
argument_list|(
name|names
operator|.
name|length
argument_list|)
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
literal|"Mismatched elements"
argument_list|,
name|childNodeNames
argument_list|,
name|hasItems
argument_list|(
name|names
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

