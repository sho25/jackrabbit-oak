begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
operator|.
name|newConcurrentLinkedQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|concurrentlinkedhashmap
operator|.
name|ConcurrentLinkedHashMap
import|;
end_import

begin_comment
comment|/**  * A simple tracker for the source of commits (writes) in  * {@link SegmentNodeStore}. It provides two basic functionalities:  *<ul>  *<li>exposes the number of commits executed per thread</li>  *<li>exposes the threads (and possibly their details - i.e., stack traces)  * currently waiting on the commit semaphore  *</ul>  *   * This class delegates thread-safety to its underlying state variables.  */
end_comment

begin_class
class|class
name|CommitsTracker
block|{
specifier|private
specifier|final
name|String
index|[]
name|threadGroups
decl_stmt|;
specifier|private
specifier|final
name|int
name|otherWritersLimit
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|collectStackTraces
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queuedWritersMap
decl_stmt|;
specifier|private
specifier|final
name|Queue
argument_list|<
name|Commit
argument_list|>
name|commits
init|=
name|newConcurrentLinkedQueue
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
class|class
name|Commit
block|{
specifier|final
name|long
name|timeStamp
decl_stmt|;
specifier|final
name|String
name|thread
decl_stmt|;
name|Commit
parameter_list|(
name|long
name|timeStamp
parameter_list|,
name|String
name|thread
parameter_list|)
block|{
name|this
operator|.
name|timeStamp
operator|=
name|timeStamp
expr_stmt|;
name|this
operator|.
name|thread
operator|=
name|thread
expr_stmt|;
block|}
block|}
name|CommitsTracker
parameter_list|(
name|String
index|[]
name|threadGroups
parameter_list|,
name|int
name|otherWritersLimit
parameter_list|,
name|boolean
name|collectStackTraces
parameter_list|)
block|{
name|this
operator|.
name|threadGroups
operator|=
name|threadGroups
expr_stmt|;
name|this
operator|.
name|otherWritersLimit
operator|=
name|otherWritersLimit
expr_stmt|;
name|this
operator|.
name|collectStackTraces
operator|=
name|collectStackTraces
expr_stmt|;
name|this
operator|.
name|queuedWritersMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|trackQueuedCommitOf
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|String
name|writerDetails
init|=
literal|"N/A"
decl_stmt|;
if|if
condition|(
name|collectStackTraces
condition|)
block|{
name|StringBuilder
name|threadDetails
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Stream
operator|.
name|of
argument_list|(
name|t
operator|.
name|getStackTrace
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|threadDetails
operator|::
name|append
argument_list|)
expr_stmt|;
name|writerDetails
operator|=
name|threadDetails
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|queuedWritersMap
operator|.
name|put
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|writerDetails
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|trackDequedCommitOf
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|queuedWritersMap
operator|.
name|remove
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|trackExecutedCommitOf
parameter_list|(
name|Thread
name|thread
parameter_list|)
block|{
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|commits
operator|.
name|removeIf
argument_list|(
name|c
lambda|->
name|c
operator|.
name|timeStamp
operator|<
name|t
operator|-
literal|60000
argument_list|)
expr_stmt|;
name|commits
operator|.
name|offer
argument_list|(
operator|new
name|Commit
argument_list|(
name|t
argument_list|,
name|thread
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQueuedWritersMap
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|queuedWritersMap
argument_list|)
return|;
block|}
specifier|private
name|String
name|findGroupFor
parameter_list|(
name|String
name|thread
parameter_list|)
block|{
if|if
condition|(
name|threadGroups
operator|==
literal|null
condition|)
block|{
return|return
literal|"other"
return|;
block|}
for|for
control|(
name|String
name|group
range|:
name|threadGroups
control|)
block|{
if|if
condition|(
name|thread
operator|.
name|matches
argument_list|(
name|group
argument_list|)
condition|)
block|{
return|return
name|group
return|;
block|}
block|}
return|return
literal|"other"
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getCommitsCountPerGroupLastMinute
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|commitsPerGroup
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60000
decl_stmt|;
for|for
control|(
name|Commit
name|commit
range|:
name|commits
control|)
block|{
if|if
condition|(
name|commit
operator|.
name|timeStamp
operator|>
name|t
condition|)
block|{
name|String
name|group
init|=
name|findGroupFor
argument_list|(
name|commit
operator|.
name|thread
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"other"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|commitsPerGroup
operator|.
name|compute
argument_list|(
name|group
argument_list|,
operator|(
name|w
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|1
else|:
name|v
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|commitsPerGroup
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getCommitsCountOthers
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|commitsOther
init|=
operator|new
name|ConcurrentLinkedHashMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
operator|.
name|maximumWeightedCapacity
argument_list|(
name|otherWritersLimit
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
literal|60000
decl_stmt|;
for|for
control|(
name|Commit
name|commit
range|:
name|commits
control|)
block|{
if|if
condition|(
name|commit
operator|.
name|timeStamp
operator|>
name|t
condition|)
block|{
name|String
name|group
init|=
name|findGroupFor
argument_list|(
name|commit
operator|.
name|thread
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"other"
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
block|{
name|commitsOther
operator|.
name|compute
argument_list|(
name|commit
operator|.
name|thread
argument_list|,
operator|(
name|w
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|1
else|:
name|v
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|commitsOther
return|;
block|}
block|}
end_class

end_unit

