begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@link Descriptors} interface. Supports overlying of given default descriptors.  */
end_comment

begin_class
specifier|public
class|class
name|DescriptorsImpl
implements|implements
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
block|{
specifier|private
specifier|final
name|Descriptors
name|base
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Descriptor
argument_list|>
name|descriptors
init|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|String
argument_list|,
name|Descriptor
argument_list|>
argument_list|()
decl_stmt|;
comment|/**      * Constructs an empty descriptors set.      */
specifier|public
name|DescriptorsImpl
parameter_list|()
block|{
name|base
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Constructs a descriptors set that uses the given {@code base} descriptors as base.      * @param base the base descriptors or {@code null}      */
specifier|public
name|DescriptorsImpl
parameter_list|(
annotation|@
name|Nullable
name|Descriptors
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
comment|/**      * {@inheritDoc}      *      * Note: If this descriptors are based on default descriptors, the returns string array is a merge of this and the      * base's keys.      */
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getKeys
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|descriptors
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|Collections
operator|.
name|addAll
argument_list|(
name|keys
argument_list|,
name|base
operator|.
name|getKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      *      * Note: If the descriptor with {@code key} does not exist in this set, the call is delegated to the base descriptors.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isStandardDescriptor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
return|return
name|descriptors
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
name|descriptors
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|standard
operator|||
name|base
operator|!=
literal|null
operator|&&
name|base
operator|.
name|isStandardDescriptor
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      *      * Note: If the descriptor with {@code key} does not exist in this set, the call is delegated to the base descriptors.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleValueDescriptor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
return|return
name|descriptors
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
operator|&&
name|descriptors
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|singleValued
operator|||
name|base
operator|!=
literal|null
operator|&&
name|base
operator|.
name|isSingleValueDescriptor
argument_list|(
name|key
argument_list|)
return|;
block|}
comment|/**      * {@inheritDoc}      *      * Note: If the descriptor with {@code key} does not exist in this set, the call is delegated to the base descriptors.      */
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Value
name|getValue
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
name|Descriptor
name|d
init|=
name|descriptors
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
name|base
operator|==
literal|null
condition|?
literal|null
else|:
name|base
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
operator|!
name|d
operator|.
name|singleValued
condition|?
literal|null
else|:
name|d
operator|.
name|values
index|[
literal|0
index|]
return|;
block|}
comment|/**      * {@inheritDoc}      *      * Note: If the descriptor with {@code key} does not exist in this set, the call is delegated to the base descriptors.      */
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getValues
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
name|Descriptor
name|d
init|=
name|descriptors
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|null
condition|)
block|{
return|return
name|base
operator|==
literal|null
condition|?
literal|null
else|:
name|base
operator|.
name|getValues
argument_list|(
name|key
argument_list|)
return|;
block|}
return|return
name|d
operator|.
name|values
return|;
block|}
comment|/**      * Adds a new descriptor to this set of descriptors which overlay the ones from the base set.      * @param descriptor the descriptor to add.      */
specifier|public
name|void
name|put
parameter_list|(
annotation|@
name|Nonnull
name|Descriptor
name|descriptor
parameter_list|)
block|{
name|descriptors
operator|.
name|put
argument_list|(
name|descriptor
operator|.
name|name
argument_list|,
name|descriptor
argument_list|)
expr_stmt|;
block|}
comment|/**      * Internal Descriptor class      */
specifier|public
specifier|static
specifier|final
class|class
name|Descriptor
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|Value
index|[]
name|values
decl_stmt|;
specifier|final
name|boolean
name|singleValued
decl_stmt|;
specifier|final
name|boolean
name|standard
decl_stmt|;
specifier|public
name|Descriptor
parameter_list|(
name|String
name|name
parameter_list|,
name|Value
index|[]
name|values
parameter_list|,
name|boolean
name|singleValued
parameter_list|,
name|boolean
name|standard
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
name|this
operator|.
name|singleValued
operator|=
name|singleValued
expr_stmt|;
name|this
operator|.
name|standard
operator|=
name|standard
expr_stmt|;
block|}
specifier|public
name|Descriptor
parameter_list|(
name|String
name|name
parameter_list|,
name|Value
name|value
parameter_list|,
name|boolean
name|singleValued
parameter_list|,
name|boolean
name|standard
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
operator|new
name|Value
index|[]
block|{
name|value
block|}
argument_list|,
name|singleValued
argument_list|,
name|standard
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

