begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|MultiDocumentStoreTest
extends|extends
name|AbstractMultiDocumentStoreTest
block|{
specifier|public
name|MultiDocumentStoreTest
parameter_list|(
name|DocumentStoreFixture
name|dsf
parameter_list|)
block|{
name|super
argument_list|(
name|dsf
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterleavedUpdate
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterleavedUpdate"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds1
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_foo"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds1
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|long
name|increments
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|increments
condition|;
name|i
operator|++
control|)
block|{
name|up
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|increment
argument_list|(
literal|"_foo"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|==
literal|0
condition|)
block|{
name|super
operator|.
name|ds1
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|,
name|up
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|ds2
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|,
name|up
argument_list|)
expr_stmt|;
block|}
block|}
comment|// read uncached
name|nd
operator|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"_foo should have been incremented 10 times"
argument_list|,
name|increments
argument_list|,
name|nd
operator|.
name|get
argument_list|(
literal|"_foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInterleavedUpdate2
parameter_list|()
block|{
name|String
name|id
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInterleavedUpdate2"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd1
init|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd1
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds1
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds1
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|nd1
operator|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Number
name|n
init|=
name|nd1
operator|.
name|getModCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|!=
literal|null
condition|)
block|{
comment|// Document store uses modCount
name|int
name|n1
init|=
name|n
operator|.
name|intValue
argument_list|()
decl_stmt|;
comment|// get the document into ds2's cache
name|NodeDocument
name|nd2
init|=
name|super
operator|.
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|int
name|n2
init|=
name|nd2
operator|.
name|getModCount
argument_list|()
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|n1
argument_list|,
name|n2
argument_list|)
expr_stmt|;
name|UpdateOp
name|upds1
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds1
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|,
name|upds1
argument_list|)
expr_stmt|;
name|nd1
operator|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|int
name|oldn1
init|=
name|n1
decl_stmt|;
name|n1
operator|=
name|nd1
operator|.
name|getModCount
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|oldn1
operator|+
literal|1
argument_list|,
name|n1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|nd1
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify in DS2
name|UpdateOp
name|upds2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|upds2
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|upds2
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"qux"
argument_list|)
expr_stmt|;
name|upds2
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
literal|3L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds2
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|,
name|upds2
argument_list|)
expr_stmt|;
name|nd2
operator|=
name|super
operator|.
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|n2
operator|=
name|nd2
operator|.
name|getModCount
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|oldn1
operator|+
literal|1
argument_list|,
name|n2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"qux"
argument_list|,
name|nd2
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// both stores are now at the same modCount with different contents
name|upds1
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"barbar"
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|max
argument_list|(
literal|"_modified"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|NodeDocument
name|prev
init|=
name|super
operator|.
name|ds1
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|upds1
argument_list|)
decl_stmt|;
comment|// prev document should contain mod from DS2
name|assertEquals
argument_list|(
literal|"qux"
argument_list|,
name|prev
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|oldn1
operator|+
literal|2
argument_list|,
name|prev
operator|.
name|getModCount
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3L
argument_list|,
name|prev
operator|.
name|getModified
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// the new document must not have a _modified time smaller than
comment|// before the update
name|nd1
operator|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|super
operator|.
name|dsname
operator|+
literal|": _modified value must never ever get smaller"
argument_list|,
literal|3L
argument_list|,
name|nd1
operator|.
name|getModified
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify that _modified can indeed be *set* to a smaller value, see
comment|// https://jira.corp.adobe.com/browse/GRANITE-8903
name|upds1
operator|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"_modified"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds1
operator|.
name|findAndUpdate
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|upds1
argument_list|)
expr_stmt|;
name|nd1
operator|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|super
operator|.
name|dsname
operator|+
literal|": _modified value must be set to 0"
argument_list|,
literal|0L
argument_list|,
name|nd1
operator|.
name|getModified
argument_list|()
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidateCache
parameter_list|()
block|{
comment|// use a "proper" ID because otherwise Mongo's cache invalidation will fail
comment|// see OAK-2588
name|String
name|id
init|=
literal|"1:/"
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|".testInvalidateCache"
decl_stmt|;
comment|// remove if present
name|NodeDocument
name|nd
init|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|nd
operator|!=
literal|null
condition|)
block|{
name|super
operator|.
name|ds1
operator|.
name|remove
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|UpdateOp
name|up
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|up
operator|.
name|set
argument_list|(
literal|"_foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|super
operator|.
name|ds1
operator|.
name|create
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|up
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|removeMe
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|// fill both caches
name|NodeDocument
name|nd1
init|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|NodeDocument
name|nd2
init|=
name|super
operator|.
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|nd1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nd2
argument_list|)
expr_stmt|;
name|long
name|firstVersion
init|=
name|nd1
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|firstVersion
argument_list|,
name|nd2
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// letTimeElapse();
comment|// update through ds1
name|UpdateOp
name|upds1
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|upds1
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"qux"
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds1
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|,
name|upds1
argument_list|)
expr_stmt|;
name|nd1
operator|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"modcount should have changed in ds1"
argument_list|,
name|firstVersion
operator|+
literal|1
argument_list|,
name|nd1
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check cached version in ds2
name|nd2
operator|=
name|super
operator|.
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds2 should still be on first version"
argument_list|,
name|firstVersion
argument_list|,
name|nd2
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check uncached version in ds2
name|nd2
operator|=
name|super
operator|.
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"ds2 should now see the second version"
argument_list|,
name|firstVersion
operator|+
literal|1
argument_list|,
name|nd2
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// check cached version in ds2 (was the cache refreshed?)
name|NodeDocument
name|nd2b
init|=
name|super
operator|.
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"ds2 should now see the second version"
argument_list|,
name|firstVersion
operator|+
literal|1
argument_list|,
name|nd2b
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
comment|// update through ds2
name|UpdateOp
name|upds2
init|=
operator|new
name|UpdateOp
argument_list|(
name|id
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|upds2
operator|.
name|set
argument_list|(
literal|"_id"
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|upds2
operator|.
name|set
argument_list|(
literal|"foo"
argument_list|,
literal|"blub"
argument_list|)
expr_stmt|;
name|super
operator|.
name|ds2
operator|.
name|update
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|Collections
operator|.
name|singletonList
argument_list|(
name|id
argument_list|)
argument_list|,
name|upds1
argument_list|)
expr_stmt|;
name|nd2
operator|=
name|super
operator|.
name|ds2
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"modcount should have incremented again"
argument_list|,
name|firstVersion
operator|+
literal|2
argument_list|,
name|nd2
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|long
name|ds1checktime
init|=
name|nd1
operator|.
name|getLastCheckTime
argument_list|()
decl_stmt|;
name|letTimeElapse
argument_list|()
expr_stmt|;
comment|// try the invalidation
name|ds1
operator|.
name|invalidateCache
argument_list|()
expr_stmt|;
comment|// ds1 should see the same version even when doing a cached read
name|nd1
operator|=
name|super
operator|.
name|ds1
operator|.
name|find
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"modcount should have incremented again"
argument_list|,
name|firstVersion
operator|+
literal|2
argument_list|,
name|nd1
operator|.
name|getModCount
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nd1
operator|.
name|getLastCheckTime
argument_list|()
operator|>
name|ds1checktime
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|long
name|letTimeElapse
parameter_list|()
block|{
name|long
name|ts
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|==
name|ts
condition|)
block|{
comment|// busy wait
block|}
return|return
name|System
operator|.
name|currentTimeMillis
argument_list|()
return|;
block|}
block|}
end_class

end_unit

