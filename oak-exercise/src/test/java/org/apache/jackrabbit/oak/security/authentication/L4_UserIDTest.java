begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authentication  * =============================================================================  *  * Title: Session.getUserID()  * -----------------------------------------------------------------------------  *  * Goal:  * Understand the semantics of {@link javax.jcr.Session#getUserID()} and the  * difference to {@link org.apache.jackrabbit.api.security.user.User#getID()}.  * Understand, why this test is located in the 'Authentication' section instead  * of the 'UserManagement' section.  *  * Exercises:  *  * - Read JSR 283 and the JavaDoc of {@link javax.jcr.Session#getUserID()}  *   Question: What is the defined return value of this method? How does that  *   relate to {@link org.apache.jackrabbit.api.security.user.User#getID()}?  *  * - {@link #testGetUserIDReturnsNull()}  *   Run the test and explain why {@link javax.jcr.Session#getUserID()} returns  *   {@code null} after login with the admin credentials.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * - Identify what the nature of the API contract means for round trips between  *   {@link javax.jcr.Session#getUserID()} and {@link org.apache.jackrabbit.api.security.user.UserManager#getAuthorizable(String)}.  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link org.apache.jackrabbit.oak.security.authentication.L2_AuthInfoTest}  *  *</pre>  *  * @see javax.jcr.Session#getUserID()  * @see org.apache.jackrabbit.api.security.user.User#getID()  * @see org.apache.jackrabbit.oak.api.AuthInfo#getUserID()  */
end_comment

begin_class
specifier|public
class|class
name|L4_UserIDTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|Repository
name|repository
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|repository
operator|=
name|getHelper
argument_list|()
operator|.
name|getRepository
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testGetUserIDReturnsNull
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|LoginException
block|{
comment|// verify first that the admin-ID is not null in the default setup.
name|String
name|adminId
init|=
name|superuser
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|adminId
argument_list|)
expr_stmt|;
comment|// verify userID in SimpleCredentials is not null
name|Credentials
name|adminCredentials
init|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserCredentials
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
operator|(
operator|(
name|SimpleCredentials
operator|)
name|adminCredentials
operator|)
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|Session
name|adminSession
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// change the JAAS configuration
name|Configuration
operator|.
name|setConfiguration
argument_list|(
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
comment|// login again
name|adminSession
operator|=
name|repository
operator|.
name|login
argument_list|(
name|adminCredentials
argument_list|)
expr_stmt|;
comment|// EXERCISE : explain why the userID of the admin-session is now 'null'
name|assertNull
argument_list|(
name|adminSession
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|adminSession
operator|!=
literal|null
operator|&&
name|adminSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|adminSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|Configuration
operator|.
name|setConfiguration
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|applicationName
parameter_list|)
block|{
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
operator|new
name|AppConfigurationEntry
argument_list|(
name|UserIDTestLoginModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|REQUIRED
argument_list|,
name|Collections
operator|.
name|EMPTY_MAP
argument_list|)
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

