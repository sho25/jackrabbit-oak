begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|s3
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonClientException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|AmazonServiceException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|regions
operator|.
name|Regions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|AmazonS3Client
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|CopyObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|DeleteObjectsResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ListObjectsRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectListing
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|ObjectMetadata
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|PutObjectRequest
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|Region
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3Object
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|model
operator|.
name|S3ObjectSummary
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|Copy
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|TransferManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|services
operator|.
name|s3
operator|.
name|transfer
operator|.
name|Upload
import|;
end_import

begin_import
import|import
name|com
operator|.
name|amazonaws
operator|.
name|util
operator|.
name|StringUtils
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|AbstractIterator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|util
operator|.
name|NamedThreadFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractDataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|AbstractSharedBackend
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_comment
comment|/**  * A data store backend that stores data on Amazon S3.  */
end_comment

begin_class
specifier|public
class|class
name|S3Backend
extends|extends
name|AbstractSharedBackend
block|{
comment|/**      * Logger instance.      */
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|S3Backend
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|KEY_PREFIX
init|=
literal|"dataStore_"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|META_KEY_PREFIX
init|=
literal|"META/"
decl_stmt|;
specifier|private
name|AmazonS3Client
name|s3service
decl_stmt|;
specifier|private
name|String
name|bucket
decl_stmt|;
specifier|private
name|String
name|secret
decl_stmt|;
specifier|private
name|TransferManager
name|tmx
decl_stmt|;
specifier|private
name|Properties
name|properties
decl_stmt|;
specifier|private
name|Date
name|startTime
decl_stmt|;
specifier|private
name|S3RequestDecorator
name|s3ReqDecorator
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|startTime
operator|=
operator|new
name|Date
argument_list|()
expr_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"init"
argument_list|)
expr_stmt|;
name|s3ReqDecorator
operator|=
operator|new
name|S3RequestDecorator
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|s3service
operator|=
name|Utils
operator|.
name|openService
argument_list|(
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|bucket
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|bucket
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
name|bucket
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_BUCKET
argument_list|)
expr_stmt|;
block|}
name|secret
operator|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"secret"
argument_list|)
expr_stmt|;
name|String
name|region
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_REGION
argument_list|)
decl_stmt|;
name|Region
name|s3Region
decl_stmt|;
if|if
condition|(
name|StringUtils
operator|.
name|isNullOrEmpty
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|com
operator|.
name|amazonaws
operator|.
name|regions
operator|.
name|Region
name|ec2Region
init|=
name|Regions
operator|.
name|getCurrentRegion
argument_list|()
decl_stmt|;
if|if
condition|(
name|ec2Region
operator|!=
literal|null
condition|)
block|{
name|s3Region
operator|=
name|Region
operator|.
name|fromValue
argument_list|(
name|ec2Region
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AmazonClientException
argument_list|(
literal|"parameter ["
operator|+
name|S3Constants
operator|.
name|S3_REGION
operator|+
literal|"] not configured and cannot be derived from environment"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|Utils
operator|.
name|DEFAULT_AWS_BUCKET_REGION
operator|.
name|equals
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|s3Region
operator|=
name|Region
operator|.
name|US_Standard
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Region
operator|.
name|EU_Ireland
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
name|region
argument_list|)
condition|)
block|{
name|s3Region
operator|=
name|Region
operator|.
name|EU_Ireland
expr_stmt|;
block|}
else|else
block|{
name|s3Region
operator|=
name|Region
operator|.
name|fromValue
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|s3service
operator|.
name|doesBucketExist
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
name|s3service
operator|.
name|createBucket
argument_list|(
name|bucket
argument_list|,
name|s3Region
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Created bucket [{}] in [{}] "
argument_list|,
name|bucket
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Using bucket [{}] in [{}] "
argument_list|,
name|bucket
argument_list|,
name|region
argument_list|)
expr_stmt|;
block|}
name|int
name|writeThreads
init|=
literal|10
decl_stmt|;
name|String
name|writeThreadsStr
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_WRITE_THREADS
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeThreadsStr
operator|!=
literal|null
condition|)
block|{
name|writeThreads
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|writeThreadsStr
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"Using thread pool of [{}] threads in S3 transfer manager."
argument_list|,
name|writeThreads
argument_list|)
expr_stmt|;
name|tmx
operator|=
operator|new
name|TransferManager
argument_list|(
name|s3service
argument_list|,
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|writeThreads
argument_list|,
operator|new
name|NamedThreadFactory
argument_list|(
literal|"s3-transfer-manager-worker"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|renameKeyProp
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|S3Constants
operator|.
name|S3_RENAME_KEYS
argument_list|)
decl_stmt|;
name|boolean
name|renameKeyBool
init|=
operator|(
name|renameKeyProp
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|renameKeyProp
argument_list|)
operator|)
condition|?
literal|false
else|:
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|renameKeyProp
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Rename keys [{}]"
argument_list|,
name|renameKeyBool
argument_list|)
expr_stmt|;
if|if
condition|(
name|renameKeyBool
condition|)
block|{
name|renameKeys
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"S3 Backend initialized in [{}] ms"
argument_list|,
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|.
name|getTime
argument_list|()
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"  error "
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|filteredMap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|filteredMap
operator|=
name|Maps
operator|.
name|filterKeys
argument_list|(
name|Maps
operator|.
name|fromProperties
argument_list|(
name|properties
argument_list|)
argument_list|,
operator|new
name|Predicate
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|String
name|input
parameter_list|)
block|{
return|return
operator|!
name|input
operator|.
name|equals
argument_list|(
name|S3Constants
operator|.
name|ACCESS_KEY
argument_list|)
operator|&&
operator|!
name|input
operator|.
name|equals
argument_list|(
name|S3Constants
operator|.
name|SECRET_KEY
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Could not initialize S3 from "
operator|+
name|filteredMap
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * It uploads file to Amazon S3. If file size is greater than 5MB, this      * method uses parallel concurrent connections to upload.      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|,
name|File
name|file
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|ObjectMetadata
name|objectMetaData
init|=
literal|null
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// check if the same record already exists
try|try
block|{
name|objectMetaData
operator|=
name|s3service
operator|.
name|getObjectMetadata
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|ase
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|ase
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|404
operator|||
name|ase
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|403
operator|)
condition|)
block|{
throw|throw
name|ase
throw|;
block|}
block|}
if|if
condition|(
name|objectMetaData
operator|!=
literal|null
condition|)
block|{
name|long
name|l
init|=
name|objectMetaData
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|l
operator|!=
name|file
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Collision: "
operator|+
name|key
operator|+
literal|" new length: "
operator|+
name|file
operator|.
name|length
argument_list|()
operator|+
literal|" old length: "
operator|+
name|l
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"[{}]'s exists, lastmodified = [{}]"
argument_list|,
name|key
argument_list|,
name|objectMetaData
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|CopyObjectRequest
name|copReq
init|=
operator|new
name|CopyObjectRequest
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|,
name|bucket
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|copReq
operator|.
name|setNewObjectMetadata
argument_list|(
name|objectMetaData
argument_list|)
expr_stmt|;
name|Copy
name|copy
init|=
name|tmx
operator|.
name|copy
argument_list|(
name|s3ReqDecorator
operator|.
name|decorate
argument_list|(
name|copReq
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
operator|.
name|waitForCopyResult
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"lastModified of [{}] updated successfully."
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Could not upload "
operator|+
name|key
argument_list|,
name|e2
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|objectMetaData
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|// start multipart parallel upload using amazon sdk
name|Upload
name|up
init|=
name|tmx
operator|.
name|upload
argument_list|(
name|s3ReqDecorator
operator|.
name|decorate
argument_list|(
operator|new
name|PutObjectRequest
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|,
name|file
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// wait for upload to finish
name|up
operator|.
name|waitForUploadResult
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"synchronous upload to identifier [{}] completed."
argument_list|,
name|identifier
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Could not upload "
operator|+
name|key
argument_list|,
name|e2
argument_list|)
throw|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"write of [{}], length=[{}], in [{}]ms"
argument_list|,
name|identifier
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Check if record identified by identifier exists in Amazon S3.      */
annotation|@
name|Override
specifier|public
name|boolean
name|exists
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectMetadata
name|objectMetaData
init|=
name|s3service
operator|.
name|getObjectMetadata
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|objectMetaData
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"exists [{}]: [true] took [{}] ms."
argument_list|,
name|identifier
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|404
operator|||
name|e
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|403
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"exists [{}]: [false] took [{}] ms."
argument_list|,
name|identifier
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Error occured to getObjectMetadata for key ["
operator|+
name|identifier
operator|.
name|toString
argument_list|()
operator|+
literal|"]"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|read
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|S3Object
name|object
init|=
name|s3service
operator|.
name|getObject
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|object
operator|.
name|getObjectContent
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[{}] read took [{}]ms"
argument_list|,
name|identifier
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Object not found: "
operator|+
name|key
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataIdentifier
argument_list|>
name|getAllIdentifiers
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
operator|new
name|RecordsIterator
argument_list|<
name|DataIdentifier
argument_list|>
argument_list|(
operator|new
name|Function
argument_list|<
name|S3ObjectSummary
argument_list|,
name|DataIdentifier
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DataIdentifier
name|apply
parameter_list|(
name|S3ObjectSummary
name|input
parameter_list|)
block|{
return|return
operator|new
name|DataIdentifier
argument_list|(
name|getIdentifierName
argument_list|(
name|input
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|s3service
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Identifier [{}] deleted. It took [{}]ms."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|identifier
block|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Could not delete dataIdentifier "
operator|+
name|identifier
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// backend is closing. abort all mulitpart uploads from start.
if|if
condition|(
name|s3service
operator|.
name|doesBucketExist
argument_list|(
name|bucket
argument_list|)
condition|)
block|{
name|tmx
operator|.
name|abortMultipartUploads
argument_list|(
name|bucket
argument_list|,
name|startTime
argument_list|)
expr_stmt|;
block|}
name|tmx
operator|.
name|shutdownNow
argument_list|()
expr_stmt|;
name|s3service
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"S3Backend closed."
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getBucket
parameter_list|()
block|{
return|return
name|bucket
return|;
block|}
specifier|public
name|void
name|setBucket
parameter_list|(
name|String
name|bucket
parameter_list|)
block|{
name|this
operator|.
name|bucket
operator|=
name|bucket
expr_stmt|;
block|}
comment|/**      * Properties used to configure the backend. If provided explicitly      * before init is invoked then these take precedence      *      * @param properties  to configure S3Backend      */
specifier|public
name|void
name|setProperties
parameter_list|(
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
specifier|final
name|InputStream
name|input
parameter_list|,
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Upload
name|upload
init|=
name|tmx
operator|.
name|upload
argument_list|(
name|s3ReqDecorator
operator|.
name|decorate
argument_list|(
operator|new
name|PutObjectRequest
argument_list|(
name|bucket
argument_list|,
name|addMetaKeyPrefix
argument_list|(
name|name
argument_list|)
argument_list|,
name|input
argument_list|,
operator|new
name|ObjectMetadata
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|upload
operator|.
name|waitForUploadResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error in uploading"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Error in uploading"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addMetadataRecord
parameter_list|(
name|File
name|input
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Upload
name|upload
init|=
name|tmx
operator|.
name|upload
argument_list|(
name|s3ReqDecorator
operator|.
name|decorate
argument_list|(
operator|new
name|PutObjectRequest
argument_list|(
name|bucket
argument_list|,
name|addMetaKeyPrefix
argument_list|(
name|name
argument_list|)
argument_list|,
name|input
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|upload
operator|.
name|waitForUploadResult
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception in uploading metadata file {}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|input
block|,
name|e
block|}
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"Error in uploading metadata file"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectMetadata
name|meta
init|=
name|s3service
operator|.
name|getObjectMetadata
argument_list|(
name|bucket
argument_list|,
name|addMetaKeyPrefix
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|S3DataRecord
argument_list|(
name|this
argument_list|,
name|s3service
argument_list|,
name|bucket
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|name
argument_list|)
argument_list|,
name|meta
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|meta
operator|.
name|getContentLength
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|DataRecord
argument_list|>
name|getAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|List
argument_list|<
name|DataRecord
argument_list|>
name|metadataList
init|=
operator|new
name|ArrayList
argument_list|<
name|DataRecord
argument_list|>
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ListObjectsRequest
name|listObjectsRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|()
operator|.
name|withBucketName
argument_list|(
name|bucket
argument_list|)
operator|.
name|withPrefix
argument_list|(
name|addMetaKeyPrefix
argument_list|(
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectListing
name|prevObjectListing
init|=
name|s3service
operator|.
name|listObjects
argument_list|(
name|listObjectsRequest
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|S3ObjectSummary
name|s3ObjSumm
range|:
name|prevObjectListing
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|metadataList
operator|.
name|add
argument_list|(
operator|new
name|S3DataRecord
argument_list|(
name|this
argument_list|,
name|s3service
argument_list|,
name|bucket
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|stripMetaKeyPrefix
argument_list|(
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|s3ObjSumm
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|s3ObjSumm
operator|.
name|getSize
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|metadataList
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteMetadataRecord
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|s3service
operator|.
name|deleteObject
argument_list|(
name|bucket
argument_list|,
name|addMetaKeyPrefix
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|deleteAllMetadataRecords
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ListObjectsRequest
name|listObjectsRequest
init|=
operator|new
name|ListObjectsRequest
argument_list|()
operator|.
name|withBucketName
argument_list|(
name|bucket
argument_list|)
operator|.
name|withPrefix
argument_list|(
name|addMetaKeyPrefix
argument_list|(
name|prefix
argument_list|)
argument_list|)
decl_stmt|;
name|ObjectListing
name|metaList
init|=
name|s3service
operator|.
name|listObjects
argument_list|(
name|listObjectsRequest
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|deleteList
init|=
operator|new
name|ArrayList
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|S3ObjectSummary
name|s3ObjSumm
range|:
name|metaList
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|deleteList
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|deleteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DeleteObjectsRequest
name|delObjsReq
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
name|delObjsReq
operator|.
name|setKeys
argument_list|(
name|deleteList
argument_list|)
expr_stmt|;
name|s3service
operator|.
name|deleteObjects
argument_list|(
name|delObjsReq
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DataRecord
argument_list|>
name|getAllRecords
parameter_list|()
block|{
specifier|final
name|AbstractSharedBackend
name|backend
init|=
name|this
decl_stmt|;
return|return
operator|new
name|RecordsIterator
argument_list|<
name|DataRecord
argument_list|>
argument_list|(
operator|new
name|Function
argument_list|<
name|S3ObjectSummary
argument_list|,
name|DataRecord
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|DataRecord
name|apply
parameter_list|(
name|S3ObjectSummary
name|input
parameter_list|)
block|{
return|return
operator|new
name|S3DataRecord
argument_list|(
name|backend
argument_list|,
name|s3service
argument_list|,
name|bucket
argument_list|,
operator|new
name|DataIdentifier
argument_list|(
name|getIdentifierName
argument_list|(
name|input
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|input
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|input
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DataRecord
name|getRecord
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|key
init|=
name|getKeyName
argument_list|(
name|identifier
argument_list|)
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectMetadata
name|object
init|=
name|s3service
operator|.
name|getObjectMetadata
argument_list|(
name|bucket
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|S3DataRecord
name|record
init|=
operator|new
name|S3DataRecord
argument_list|(
name|this
argument_list|,
name|s3service
argument_list|,
name|bucket
argument_list|,
name|identifier
argument_list|,
name|object
operator|.
name|getLastModified
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|,
name|object
operator|.
name|getContentLength
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Identifier [{}]'s getRecord = [{}] took [{}]ms."
argument_list|,
name|identifier
argument_list|,
name|record
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
name|record
return|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|404
operator|||
name|e
operator|.
name|getStatusCode
argument_list|()
operator|==
literal|403
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"getRecord:Identifier [{}] not found. Took [{}] ms."
argument_list|,
name|identifier
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|byte
index|[]
name|getOrCreateReferenceKey
parameter_list|()
throws|throws
name|DataStoreException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|secret
argument_list|)
condition|)
block|{
return|return
name|secret
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
return|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"secret not defined"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DataStoreException
argument_list|(
literal|"secret not defined"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DataStoreException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Returns an iterator over the S3 objects      * @param<T>      */
class|class
name|RecordsIterator
parameter_list|<
name|T
parameter_list|>
extends|extends
name|AbstractIterator
argument_list|<
name|T
argument_list|>
block|{
name|ObjectListing
name|prevObjectListing
decl_stmt|;
name|Queue
argument_list|<
name|S3ObjectSummary
argument_list|>
name|queue
decl_stmt|;
name|long
name|size
decl_stmt|;
name|Function
argument_list|<
name|S3ObjectSummary
argument_list|,
name|T
argument_list|>
name|transformer
decl_stmt|;
specifier|public
name|RecordsIterator
parameter_list|(
name|Function
argument_list|<
name|S3ObjectSummary
argument_list|,
name|T
argument_list|>
name|transformer
parameter_list|)
block|{
name|queue
operator|=
name|Lists
operator|.
name|newLinkedList
argument_list|()
expr_stmt|;
name|this
operator|.
name|transformer
operator|=
name|transformer
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|T
name|computeNext
parameter_list|()
block|{
if|if
condition|(
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loadBatch
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|transformer
operator|.
name|apply
argument_list|(
name|queue
operator|.
name|remove
argument_list|()
argument_list|)
return|;
block|}
return|return
name|endOfData
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|loadBatch
parameter_list|()
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
comment|// initialize the listing the first time
if|if
condition|(
name|prevObjectListing
operator|==
literal|null
condition|)
block|{
name|prevObjectListing
operator|=
name|s3service
operator|.
name|listObjects
argument_list|(
name|bucket
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|prevObjectListing
operator|.
name|isTruncated
argument_list|()
condition|)
block|{
comment|//already initialized more objects available
name|prevObjectListing
operator|=
name|s3service
operator|.
name|listNextBatchOfObjects
argument_list|(
name|prevObjectListing
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no more available
return|return
literal|false
return|;
block|}
name|List
argument_list|<
name|S3ObjectSummary
argument_list|>
name|listing
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|filter
argument_list|(
name|prevObjectListing
operator|.
name|getObjectSummaries
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|S3ObjectSummary
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|S3ObjectSummary
name|input
parameter_list|)
block|{
return|return
operator|!
name|input
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|META_KEY_PREFIX
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
decl_stmt|;
comment|// After filtering no elements
if|if
condition|(
name|listing
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|size
operator|+=
name|listing
operator|.
name|size
argument_list|()
expr_stmt|;
name|queue
operator|.
name|addAll
argument_list|(
name|listing
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Loaded batch of size [{}] in [{}] ms."
argument_list|,
name|listing
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|AmazonServiceException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not list objects"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|addMetaKeyPrefix
parameter_list|(
name|String
name|key
parameter_list|)
block|{
return|return
name|META_KEY_PREFIX
operator|+
name|key
return|;
block|}
specifier|private
specifier|static
name|String
name|stripMetaKeyPrefix
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|META_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
name|name
operator|.
name|substring
argument_list|(
name|META_KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|name
return|;
block|}
comment|/**      * S3DataRecord which lazily retrieves the input stream of the record.      */
specifier|static
class|class
name|S3DataRecord
extends|extends
name|AbstractDataRecord
block|{
specifier|private
name|AmazonS3Client
name|s3service
decl_stmt|;
specifier|private
name|long
name|length
decl_stmt|;
specifier|private
name|long
name|lastModified
decl_stmt|;
specifier|private
name|String
name|bucket
decl_stmt|;
specifier|private
name|boolean
name|isMeta
decl_stmt|;
specifier|public
name|S3DataRecord
parameter_list|(
name|AbstractSharedBackend
name|backend
parameter_list|,
name|AmazonS3Client
name|s3service
parameter_list|,
name|String
name|bucket
parameter_list|,
name|DataIdentifier
name|key
parameter_list|,
name|long
name|lastModified
parameter_list|,
name|long
name|length
parameter_list|)
block|{
name|this
argument_list|(
name|backend
argument_list|,
name|s3service
argument_list|,
name|bucket
argument_list|,
name|key
argument_list|,
name|lastModified
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|S3DataRecord
parameter_list|(
name|AbstractSharedBackend
name|backend
parameter_list|,
name|AmazonS3Client
name|s3service
parameter_list|,
name|String
name|bucket
parameter_list|,
name|DataIdentifier
name|key
parameter_list|,
name|long
name|lastModified
parameter_list|,
name|long
name|length
parameter_list|,
name|boolean
name|isMeta
parameter_list|)
block|{
name|super
argument_list|(
name|backend
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|this
operator|.
name|s3service
operator|=
name|s3service
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
name|this
operator|.
name|length
operator|=
name|length
expr_stmt|;
name|this
operator|.
name|bucket
operator|=
name|bucket
expr_stmt|;
name|this
operator|.
name|isMeta
operator|=
name|isMeta
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLength
parameter_list|()
throws|throws
name|DataStoreException
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getStream
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|String
name|id
init|=
name|getKeyName
argument_list|(
name|getIdentifier
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|isMeta
condition|)
block|{
name|id
operator|=
name|addMetaKeyPrefix
argument_list|(
name|getIdentifier
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|s3service
operator|.
name|getObject
argument_list|(
name|bucket
argument_list|,
name|id
argument_list|)
operator|.
name|getObjectContent
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"S3DataRecord{"
operator|+
literal|"identifier="
operator|+
name|getIdentifier
argument_list|()
operator|+
literal|", length="
operator|+
name|length
operator|+
literal|", lastModified="
operator|+
name|lastModified
operator|+
literal|", bucket='"
operator|+
name|bucket
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
block|}
comment|/**      * This method rename object keys in S3 concurrently. The number of      * concurrent threads is defined by 'maxConnections' property in      * aws.properties. As S3 doesn't have "move" command, this method simulate      * move as copy object object to new key and then delete older key.      */
specifier|private
name|void
name|renameKeys
parameter_list|()
throws|throws
name|DataStoreException
block|{
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|long
name|count
init|=
literal|0
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|ObjectListing
name|prevObjectListing
init|=
name|s3service
operator|.
name|listObjects
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
name|deleteList
init|=
operator|new
name|ArrayList
argument_list|<
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|nThreads
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"maxConnections"
argument_list|)
argument_list|)
decl_stmt|;
name|ExecutorService
name|executor
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|nThreads
argument_list|,
operator|new
name|NamedThreadFactory
argument_list|(
literal|"s3-object-rename-worker"
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|taskAdded
init|=
literal|false
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
for|for
control|(
name|S3ObjectSummary
name|s3ObjSumm
range|:
name|prevObjectListing
operator|.
name|getObjectSummaries
argument_list|()
control|)
block|{
name|executor
operator|.
name|execute
argument_list|(
operator|new
name|KeyRenameThread
argument_list|(
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|taskAdded
operator|=
literal|true
expr_stmt|;
name|count
operator|++
expr_stmt|;
comment|// delete the object if it follows old key name format
if|if
condition|(
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
operator|.
name|startsWith
argument_list|(
name|KEY_PREFIX
argument_list|)
condition|)
block|{
name|deleteList
operator|.
name|add
argument_list|(
operator|new
name|DeleteObjectsRequest
operator|.
name|KeyVersion
argument_list|(
name|s3ObjSumm
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|prevObjectListing
operator|.
name|isTruncated
argument_list|()
condition|)
break|break;
name|prevObjectListing
operator|=
name|s3service
operator|.
name|listNextBatchOfObjects
argument_list|(
name|prevObjectListing
argument_list|)
expr_stmt|;
block|}
comment|// This will make the executor accept no new threads
comment|// and finish all existing threads in the queue
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Wait until all threads are finish
while|while
condition|(
name|taskAdded
operator|&&
operator|!
name|executor
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Rename S3 keys tasks timedout. Waiting again"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{              }
name|LOG
operator|.
name|info
argument_list|(
literal|"Renamed [{}] keys, time taken [{}]sec"
argument_list|,
name|count
argument_list|,
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|/
literal|1000
operator|)
argument_list|)
expr_stmt|;
comment|// Delete older keys.
if|if
condition|(
name|deleteList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|DeleteObjectsRequest
name|delObjsReq
init|=
operator|new
name|DeleteObjectsRequest
argument_list|(
name|bucket
argument_list|)
decl_stmt|;
name|int
name|batchSize
init|=
literal|500
decl_stmt|,
name|startIndex
init|=
literal|0
decl_stmt|,
name|size
init|=
name|deleteList
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|endIndex
init|=
name|batchSize
operator|<
name|size
condition|?
name|batchSize
else|:
name|size
decl_stmt|;
while|while
condition|(
name|endIndex
operator|<=
name|size
condition|)
block|{
name|delObjsReq
operator|.
name|setKeys
argument_list|(
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|deleteList
operator|.
name|subList
argument_list|(
name|startIndex
argument_list|,
name|endIndex
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DeleteObjectsResult
name|dobjs
init|=
name|s3service
operator|.
name|deleteObjects
argument_list|(
name|delObjsReq
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Records[{}] deleted in datastore from index [{}] to [{}]"
argument_list|,
name|dobjs
operator|.
name|getDeletedObjects
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|startIndex
argument_list|,
operator|(
name|endIndex
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|endIndex
operator|==
name|size
condition|)
block|{
break|break;
block|}
else|else
block|{
name|startIndex
operator|=
name|endIndex
expr_stmt|;
name|endIndex
operator|=
operator|(
name|startIndex
operator|+
name|batchSize
operator|)
operator|<
name|size
condition|?
operator|(
name|startIndex
operator|+
name|batchSize
operator|)
else|:
name|size
expr_stmt|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The method convert old key format to new format. For e.g. this method      * converts old key dataStore_004cb70c8f87d78f04da41e7547cb434094089ea to      * 004c-b70c8f87d78f04da41e7547cb434094089ea.      */
specifier|private
specifier|static
name|String
name|convertKey
parameter_list|(
name|String
name|oldKey
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
operator|!
name|oldKey
operator|.
name|startsWith
argument_list|(
name|KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
name|oldKey
return|;
block|}
name|String
name|key
init|=
name|oldKey
operator|.
name|substring
argument_list|(
name|KEY_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|Utils
operator|.
name|DASH
operator|+
name|key
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
return|;
block|}
comment|/**      * Get key from data identifier. Object is stored with key in S3.      */
specifier|private
specifier|static
name|String
name|getKeyName
parameter_list|(
name|DataIdentifier
name|identifier
parameter_list|)
block|{
name|String
name|key
init|=
name|identifier
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|Utils
operator|.
name|DASH
operator|+
name|key
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
return|;
block|}
comment|/**      * Get data identifier from key.      */
specifier|private
specifier|static
name|String
name|getIdentifierName
parameter_list|(
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
operator|!
name|key
operator|.
name|contains
argument_list|(
name|Utils
operator|.
name|DASH
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
elseif|else
if|if
condition|(
name|key
operator|.
name|contains
argument_list|(
name|META_KEY_PREFIX
argument_list|)
condition|)
block|{
return|return
name|key
return|;
block|}
return|return
name|key
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
operator|+
name|key
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
return|;
block|}
comment|/**      * The class renames object key in S3 in a thread.      */
specifier|private
class|class
name|KeyRenameThread
implements|implements
name|Runnable
block|{
specifier|private
name|String
name|oldKey
decl_stmt|;
specifier|public
name|void
name|run
parameter_list|()
block|{
name|ClassLoader
name|contextClassLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
try|try
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|getClass
argument_list|()
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newS3Key
init|=
name|convertKey
argument_list|(
name|oldKey
argument_list|)
decl_stmt|;
name|CopyObjectRequest
name|copReq
init|=
operator|new
name|CopyObjectRequest
argument_list|(
name|bucket
argument_list|,
name|oldKey
argument_list|,
name|bucket
argument_list|,
name|newS3Key
argument_list|)
decl_stmt|;
name|Copy
name|copy
init|=
name|tmx
operator|.
name|copy
argument_list|(
name|s3ReqDecorator
operator|.
name|decorate
argument_list|(
name|copReq
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|copy
operator|.
name|waitForCopyResult
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"[{}] renamed to [{}] "
argument_list|,
name|oldKey
argument_list|,
name|newS3Key
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ie
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|" Exception in renaming [{}] to [{}] "
argument_list|,
name|ie
argument_list|,
name|oldKey
argument_list|,
name|newS3Key
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|contextClassLoader
operator|!=
literal|null
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|contextClassLoader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|KeyRenameThread
parameter_list|(
name|String
name|oldKey
parameter_list|)
block|{
name|this
operator|.
name|oldKey
operator|=
name|oldKey
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

