begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|OrderedContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|OrderedPropertyIndexLookup
extends|extends
name|PropertyIndexLookup
block|{
specifier|private
name|NodeState
name|root
decl_stmt|;
comment|/**      * the standard Ascending ordered index      */
specifier|private
specifier|static
specifier|final
name|IndexStoreStrategy
name|STORE
init|=
operator|new
name|OrderedContentMirrorStoreStrategy
argument_list|()
decl_stmt|;
comment|/**      * the descending ordered index      */
specifier|private
specifier|static
specifier|final
name|IndexStoreStrategy
name|REVERSED_STORE
init|=
operator|new
name|OrderedContentMirrorStoreStrategy
argument_list|(
name|OrderDirection
operator|.
name|DESC
argument_list|)
decl_stmt|;
comment|/**      * we're slightly more expensive than the standard PropertyIndex.      */
specifier|private
specifier|static
specifier|final
name|double
name|COST_OVERHEAD
init|=
literal|3
decl_stmt|;
specifier|public
name|OrderedPropertyIndexLookup
parameter_list|(
name|NodeState
name|root
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
annotation|@
name|Override
name|IndexStoreStrategy
name|getStrategy
parameter_list|(
name|NodeState
name|indexMeta
parameter_list|)
block|{
if|if
condition|(
name|OrderDirection
operator|.
name|isAscending
argument_list|(
name|indexMeta
argument_list|)
condition|)
block|{
return|return
name|STORE
return|;
block|}
else|else
block|{
return|return
name|REVERSED_STORE
return|;
block|}
block|}
specifier|public
name|boolean
name|isAscending
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
return|return
name|OrderDirection
operator|.
name|isAscending
argument_list|(
name|indexMeta
argument_list|)
return|;
block|}
annotation|@
name|Override
name|String
name|getType
parameter_list|()
block|{
return|return
name|OrderedIndex
operator|.
name|TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|PropertyValue
name|value
parameter_list|)
block|{
name|double
name|cost
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMeta
operator|!=
literal|null
condition|)
block|{
comment|// we relay then on the standard property index for the cost
name|cost
operator|=
name|COST_OVERHEAD
operator|+
name|getStrategy
argument_list|(
name|indexMeta
argument_list|)
operator|.
name|count
argument_list|(
name|indexMeta
argument_list|,
name|PropertyIndex
operator|.
name|encode
argument_list|(
name|value
argument_list|)
argument_list|,
name|MAX_COST
argument_list|)
expr_stmt|;
block|}
return|return
name|cost
return|;
block|}
comment|/**      * query the strategy for the provided constrains      *       * @param filter      * @param propertyName      * @param pr      * @return the result set      */
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|String
name|propertyName
parameter_list|,
name|PropertyRestriction
name|pr
parameter_list|)
block|{
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexMeta
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No index for "
operator|+
name|propertyName
argument_list|)
throw|;
block|}
return|return
operator|(
operator|(
name|OrderedContentMirrorStoreStrategy
operator|)
name|getStrategy
argument_list|(
name|indexMeta
argument_list|)
operator|)
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|propertyName
argument_list|,
name|indexMeta
argument_list|,
name|pr
argument_list|)
return|;
block|}
comment|/**      * return an estimated count to be used in IndexPlans.      *       * @param propertyName      * @param value      * @param filter      * @param pr      * @return the estimated count      */
specifier|public
name|long
name|getEstimatedEntryCount
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|PropertyValue
name|value
parameter_list|,
name|Filter
name|filter
parameter_list|,
name|PropertyRestriction
name|pr
parameter_list|)
block|{
name|NodeState
name|indexMeta
init|=
name|getIndexNode
argument_list|(
name|root
argument_list|,
name|propertyName
argument_list|,
name|filter
argument_list|)
decl_stmt|;
name|OrderedContentMirrorStoreStrategy
name|strategy
init|=
operator|(
name|OrderedContentMirrorStoreStrategy
operator|)
name|getStrategy
argument_list|(
name|indexMeta
argument_list|)
decl_stmt|;
return|return
name|strategy
operator|.
name|count
argument_list|(
name|indexMeta
argument_list|,
name|pr
argument_list|,
name|MAX_COST
argument_list|)
return|;
block|}
block|}
end_class

end_unit

