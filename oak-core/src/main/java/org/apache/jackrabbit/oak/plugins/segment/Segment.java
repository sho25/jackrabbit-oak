begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentWriter
operator|.
name|BLOCK_SIZE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|cache
operator|.
name|Weigher
import|;
end_import

begin_class
class|class
name|Segment
block|{
comment|/**      * Number of bytes used for storing a record identifier. One byte      * is used for identifying the segment and two for the record offset      * within that segment.      */
specifier|static
specifier|final
name|int
name|RECORD_ID_BYTES
init|=
literal|1
operator|+
literal|2
decl_stmt|;
comment|/**      * The limit on segment references within one segment. Since record      * identifiers use one byte to indicate the referenced segment, a single      * segment can hold references to up to 256 segments.      */
specifier|static
specifier|final
name|int
name|SEGMENT_REFERENCE_LIMIT
init|=
literal|1
operator|<<
literal|8
decl_stmt|;
comment|// 256
comment|/**      * The number of bytes (or bits of address space) to use for the      * alignment boundary of segment records.      */
specifier|static
specifier|final
name|int
name|RECORD_ALIGN_BITS
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|int
name|RECORD_ALIGN_BYTES
init|=
literal|1
operator|<<
name|RECORD_ALIGN_BITS
decl_stmt|;
comment|// 4
comment|/**      * Maximum segment size. Record identifiers are stored as three-byte      * sequences with the first byte indicating the segment and the next      * two the offset within that segment. Since all records are aligned      * at four-byte boundaries, the two bytes can address up to 256kB of      * record data.      */
specifier|static
specifier|final
name|int
name|MAX_SEGMENT_SIZE
init|=
literal|1
operator|<<
operator|(
literal|16
operator|+
name|RECORD_ALIGN_BITS
operator|)
decl_stmt|;
comment|// 256kB
comment|/**      * The size limit for small values. The variable length of small values      * is encoded as a single byte with the high bit as zero, which gives us      * seven bits for encoding the length of the value.      */
specifier|static
specifier|final
name|int
name|SMALL_LIMIT
init|=
literal|1
operator|<<
literal|7
decl_stmt|;
comment|/**      * The size limit for medium values. The variable length of medium values      * is encoded as two bytes with the highest bits of the first byte set to      * one and zero, which gives us 14 bits for encoding the length of the      * value. And since small values are never stored as medium ones, we can      * extend the size range to cover that many longer values.      */
specifier|static
specifier|final
name|int
name|MEDIUM_LIMIT
init|=
literal|1
operator|<<
operator|(
literal|16
operator|-
literal|2
operator|)
operator|+
name|SMALL_LIMIT
decl_stmt|;
specifier|static
specifier|final
name|Weigher
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
name|WEIGHER
init|=
operator|new
name|Weigher
argument_list|<
name|UUID
argument_list|,
name|Segment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|weigh
parameter_list|(
name|UUID
name|key
parameter_list|,
name|Segment
name|value
parameter_list|)
block|{
return|return
name|value
operator|.
name|size
argument_list|()
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|UUID
name|uuid
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|data
decl_stmt|;
specifier|private
specifier|final
name|UUID
index|[]
name|uuids
decl_stmt|;
specifier|private
specifier|final
name|OffsetCache
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|new
name|OffsetCache
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|String
name|load
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|int
name|pos
init|=
name|offset
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|length
operator|)
decl_stmt|;
name|checkElementIndex
argument_list|(
name|pos
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|internalReadLength
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
name|SMALL_LIMIT
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|pos
operator|+
literal|1
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|length
operator|<
name|MEDIUM_LIMIT
condition|)
block|{
return|return
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|pos
operator|+
literal|2
argument_list|,
operator|(
name|int
operator|)
name|length
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|length
operator|<
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
name|int
name|size
init|=
call|(
name|int
call|)
argument_list|(
operator|(
name|length
operator|+
name|BLOCK_SIZE
operator|-
literal|1
operator|)
operator|/
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
name|ListRecord
name|list
init|=
operator|new
name|ListRecord
argument_list|(
name|readRecordId
argument_list|(
name|offset
operator|+
literal|8
argument_list|)
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|SegmentStream
name|stream
init|=
operator|new
name|SegmentStream
argument_list|(
operator|new
name|SegmentReader
argument_list|(
name|store
argument_list|)
argument_list|,
operator|new
name|RecordId
argument_list|(
name|uuid
argument_list|,
name|offset
argument_list|)
argument_list|,
name|list
argument_list|,
name|length
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|stream
operator|.
name|getString
argument_list|()
return|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"String is too long: "
operator|+
name|length
argument_list|)
throw|;
block|}
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|OffsetCache
argument_list|<
name|Template
argument_list|>
name|templates
init|=
operator|new
name|OffsetCache
argument_list|<
name|Template
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Template
name|load
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
name|Segment
parameter_list|(
name|SegmentStore
name|store
parameter_list|,
name|UUID
name|uuid
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|Collection
argument_list|<
name|UUID
argument_list|>
name|uuids
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|uuid
operator|=
name|uuid
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
name|this
operator|.
name|uuids
operator|=
name|uuids
operator|.
name|toArray
argument_list|(
operator|new
name|UUID
index|[
name|uuids
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|UUID
name|getSegmentId
parameter_list|()
block|{
return|return
name|uuid
return|;
block|}
specifier|public
name|byte
index|[]
name|getData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|UUID
index|[]
name|getUUIDs
parameter_list|()
block|{
return|return
name|uuids
return|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|data
operator|.
name|length
return|;
block|}
specifier|public
name|byte
name|readByte
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|int
name|pos
init|=
name|position
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|length
operator|)
decl_stmt|;
name|checkElementIndex
argument_list|(
name|pos
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|data
index|[
name|pos
index|]
return|;
block|}
comment|/**      * Reads the given number of bytes starting from the given position      * in this segment.      *      * @param position position within segment      * @param buffer target buffer      * @param offset offset within target buffer      * @param length number of bytes to read      */
specifier|public
name|void
name|readBytes
parameter_list|(
name|int
name|position
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|int
name|pos
init|=
name|position
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|length
operator|)
decl_stmt|;
name|checkPositionIndexes
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|length
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|readRecordId
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|int
name|pos
init|=
name|position
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|length
operator|)
decl_stmt|;
name|checkPositionIndexes
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
name|RECORD_ID_BYTES
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
operator|new
name|RecordId
argument_list|(
name|uuids
index|[
name|data
index|[
name|pos
index|]
operator|&
literal|0xff
index|]
argument_list|,
operator|(
name|data
index|[
name|pos
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
operator|(
literal|8
operator|+
name|Segment
operator|.
name|RECORD_ALIGN_BITS
operator|)
operator||
operator|(
name|data
index|[
name|pos
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
name|Segment
operator|.
name|RECORD_ALIGN_BITS
argument_list|)
return|;
block|}
specifier|public
name|int
name|readInt
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|int
name|pos
init|=
name|position
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|length
operator|)
decl_stmt|;
name|checkPositionIndexes
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
literal|4
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
operator|.
name|getInt
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|long
name|readLong
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|int
name|pos
init|=
name|position
operator|-
operator|(
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|length
operator|)
decl_stmt|;
name|checkPositionIndexes
argument_list|(
name|pos
argument_list|,
name|pos
operator|+
literal|8
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|data
argument_list|)
operator|.
name|getLong
argument_list|(
name|pos
argument_list|)
return|;
block|}
name|String
name|readString
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
return|return
name|strings
operator|.
name|get
argument_list|(
name|offset
argument_list|)
return|;
block|}
name|String
name|readString
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|Segment
name|segment
init|=
name|this
decl_stmt|;
if|if
condition|(
operator|!
name|uuid
operator|.
name|equals
argument_list|(
name|id
operator|.
name|getSegmentId
argument_list|()
argument_list|)
condition|)
block|{
name|segment
operator|=
name|store
operator|.
name|readSegment
argument_list|(
name|id
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|segment
operator|.
name|readString
argument_list|(
name|id
operator|.
name|getOffset
argument_list|()
argument_list|)
return|;
block|}
name|long
name|readLength
parameter_list|(
name|int
name|position
parameter_list|)
block|{
name|int
name|pos
init|=
name|position
operator|-
operator|(
name|MAX_SEGMENT_SIZE
operator|-
name|data
operator|.
name|length
operator|)
decl_stmt|;
name|checkElementIndex
argument_list|(
name|pos
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|internalReadLength
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|private
name|long
name|internalReadLength
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|int
name|length
init|=
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
decl_stmt|;
if|if
condition|(
operator|(
name|length
operator|&
literal|0x80
operator|)
operator|==
literal|0
condition|)
block|{
return|return
name|length
return|;
block|}
elseif|else
if|if
condition|(
operator|(
name|length
operator|&
literal|0x40
operator|)
operator|==
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|length
operator|&
literal|0x3f
operator|)
operator|<<
literal|8
operator||
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
operator|)
operator|+
name|SMALL_LIMIT
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
operator|(
name|long
operator|)
name|length
operator|&
literal|0x3f
operator|)
operator|<<
literal|56
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|48
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|40
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|32
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|24
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|16
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|<<
literal|8
operator||
operator|(
call|(
name|long
call|)
argument_list|(
name|data
index|[
name|pos
operator|++
index|]
operator|&
literal|0xff
argument_list|)
operator|)
operator|)
operator|+
name|MEDIUM_LIMIT
return|;
block|}
block|}
block|}
end_class

end_unit

