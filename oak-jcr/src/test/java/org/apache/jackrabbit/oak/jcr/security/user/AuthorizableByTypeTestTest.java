begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableTypeException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_class
specifier|public
class|class
name|AuthorizableByTypeTestTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
name|Authorizable
name|auth
decl_stmt|;
specifier|private
name|Group
name|testGroup
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|uid
init|=
name|superuser
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|auth
operator|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
expr_stmt|;
if|if
condition|(
name|auth
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Group
name|createTestGroup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|testGroup
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|testGroup
return|;
block|}
specifier|public
name|void
name|testByIdAndType
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|user
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Equal ID expected"
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|Authorizable
name|auth2
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|auth
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Equal ID expected"
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|auth2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|auth2
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|auth2
operator|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|Authorizable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Equal ID expected"
argument_list|,
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|auth2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|auth2
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testByIdAndWrongType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|auth
operator|.
name|getID
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wrong Authorizable type is not detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableTypeException
name|ignore
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testNonExistingByIdAndType
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|Authorizable
name|nonExisting
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
literal|"nonExistingAuthorizable"
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nonExisting
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
literal|"nonExistingAuthorizable"
argument_list|,
name|Authorizable
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
literal|"nonExistingAuthorizable"
argument_list|,
name|User
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
literal|"nonExistingAuthorizable"
argument_list|,
name|Group
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGroupByIdAndType
parameter_list|()
throws|throws
name|Exception
block|{
name|Group
name|testGroup
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|Group
name|gr
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|Group
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Equal ID expected"
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|Authorizable
name|auth2
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|testGroup
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Equal ID expected"
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|auth2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|auth2
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
name|auth2
operator|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|Authorizable
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Equal ID expected"
argument_list|,
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|auth2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|auth2
operator|.
name|isGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGroupByIdAndWrongType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Group
name|testGroup
init|=
name|createTestGroup
argument_list|()
decl_stmt|;
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroup
operator|.
name|getID
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wrong Authorizable type is not detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableTypeException
name|ignore
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testByIdAndNullType
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|superuser
operator|.
name|getUserID
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Wrong Authorizable type is not detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableTypeException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
specifier|public
name|void
name|testNonExistingByNullType
parameter_list|()
throws|throws
name|Exception
block|{
name|Authorizable
name|authorizable
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
literal|"nonExistingAuthorizable"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|authorizable
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

