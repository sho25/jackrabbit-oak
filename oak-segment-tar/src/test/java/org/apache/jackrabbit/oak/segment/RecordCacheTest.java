begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordCache
operator|.
name|newRecordCache
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|TestUtils
operator|.
name|newRecordId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|RecordCacheTest
block|{
specifier|private
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|MemoryStore
name|store
init|=
operator|new
name|MemoryStore
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SegmentIdProvider
name|idProvider
init|=
name|store
operator|.
name|getSegmentIdProvider
argument_list|()
decl_stmt|;
specifier|public
name|RecordCacheTest
parameter_list|()
throws|throws
name|IOException
block|{}
annotation|@
name|Test
specifier|public
name|void
name|emptyCache
parameter_list|()
block|{
name|RecordCache
argument_list|<
name|String
argument_list|>
name|cache
init|=
name|newRecordCache
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
operator|(
name|newRecordId
argument_list|(
name|idProvider
argument_list|,
name|rnd
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|putAndGet
parameter_list|()
block|{
name|RecordCache
argument_list|<
name|String
argument_list|>
name|cache
init|=
name|newRecordCache
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|cache
operator|.
name|get
argument_list|(
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
name|RecordId
name|value
init|=
name|newRecordId
argument_list|(
name|idProvider
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
name|cache
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|value
argument_list|,
name|cache
operator|.
name|get
argument_list|(
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidate
parameter_list|()
block|{
name|RecordCache
argument_list|<
name|String
argument_list|>
name|cache
init|=
name|newRecordCache
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|keys
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|10
condition|;
name|k
operator|++
control|)
block|{
name|String
name|key
init|=
literal|"key-"
operator|+
name|k
decl_stmt|;
name|RecordId
name|value
init|=
name|newRecordId
argument_list|(
name|idProvider
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
name|keys
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|keys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" should be in the cache"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|value
init|=
name|newRecordId
argument_list|(
name|idProvider
argument_list|,
name|rnd
argument_list|)
decl_stmt|;
comment|// This should invalidate "key-0", which is the least recently accessed key
name|cache
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|keys
operator|.
name|put
argument_list|(
literal|"key"
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|keys
operator|.
name|remove
argument_list|(
literal|"key-0"
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|keys
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|" should be in the cache"
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|cache
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

