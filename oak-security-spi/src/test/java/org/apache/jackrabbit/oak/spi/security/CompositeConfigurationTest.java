begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|MoveTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ThreeWayConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|CompositeInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|CompositeWorkspaceInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|WorkspaceInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ProtectedItemImporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeConfigurationTest
extends|extends
name|AbstractCompositeConfigurationTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NAME
init|=
literal|"test"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|compositeConfiguration
operator|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"test"
argument_list|,
operator|new
name|SecurityProvider
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|(
annotation|@
name|Nullable
name|String
name|name
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|SecurityConfiguration
argument_list|>
name|getConfigurations
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|getConfiguration
parameter_list|(
annotation|@
name|Nonnull
name|Class
argument_list|<
name|T
argument_list|>
name|configClass
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
argument_list|)
block|{}
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|NAME
argument_list|,
name|compositeConfiguration
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmpty
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|compositeConfiguration
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetDefaultConfig
parameter_list|()
block|{
name|assertNull
argument_list|(
name|compositeConfiguration
operator|.
name|getDefaultConfig
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|sc
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|sc
argument_list|,
name|compositeConfiguration
operator|.
name|getDefaultConfig
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetDefaultConfig
parameter_list|()
block|{
name|SecurityConfiguration
name|sc
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityConfiguration
argument_list|>
name|configurations
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sc
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddConfiguration
parameter_list|()
block|{
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|SecurityConfiguration
argument_list|>
name|configurations
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|def
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|configurations
operator|=
name|getConfigurations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|configurations
operator|.
name|contains
argument_list|(
name|def
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddConfigurationWithRanking
parameter_list|()
block|{
name|SecurityConfiguration
name|r100
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|r100
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|r200
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|r200
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|r150
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|CompositeConfiguration
operator|.
name|PARAM_RANKING
argument_list|,
literal|150
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|r150
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|r50
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|CompositeConfiguration
operator|.
name|PARAM_RANKING
argument_list|,
literal|50
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|r50
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|rUndef
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|rUndef
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|r200second
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|r200second
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|List
name|l
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|SecurityConfiguration
index|[]
block|{
name|r200
block|,
name|r200second
block|,
name|r150
block|,
name|r100
block|,
name|r50
block|,
name|rUndef
block|}
argument_list|,
name|l
operator|.
name|toArray
argument_list|(
operator|new
name|SecurityConfiguration
index|[
name|l
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
comment|// remove and add new
name|removeConfiguration
argument_list|(
name|r150
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|r50
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|r100
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|r75
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|compositeConfiguration
operator|.
name|addConfiguration
argument_list|(
name|r75
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|75
argument_list|)
argument_list|)
expr_stmt|;
name|l
operator|=
name|getConfigurations
argument_list|()
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|SecurityConfiguration
index|[]
block|{
name|r200
block|,
name|r200second
block|,
name|r75
block|,
name|rUndef
block|}
argument_list|,
name|l
operator|.
name|toArray
argument_list|(
operator|new
name|SecurityConfiguration
index|[
name|l
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveConfiguration
parameter_list|()
block|{
name|SecurityConfiguration
name|def
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|setDefault
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|sc
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
decl_stmt|;
name|addConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|def
argument_list|)
expr_stmt|;
name|List
name|configurations
init|=
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|sc
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|removeConfiguration
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|configurations
operator|=
name|getConfigurations
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|configurations
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|def
argument_list|,
name|configurations
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetSecurityProviderNotInitialized
parameter_list|()
block|{
name|CompositeConfiguration
name|cc
init|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"name"
argument_list|)
block|{}
decl_stmt|;
name|cc
operator|.
name|getSecurityProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testSetSecurityProvider
parameter_list|()
block|{
name|CompositeConfiguration
name|cc
init|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"name"
argument_list|)
block|{}
decl_stmt|;
name|SecurityProvider
name|securityProvider
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|cc
operator|.
name|setSecurityProvider
argument_list|(
name|securityProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|securityProvider
argument_list|,
name|cc
operator|.
name|getSecurityProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetRootProviderNotInitialized
parameter_list|()
block|{
name|CompositeConfiguration
name|cc
init|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"name"
argument_list|)
block|{}
decl_stmt|;
name|cc
operator|.
name|getRootProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testSetRootProvider
parameter_list|()
block|{
name|CompositeConfiguration
name|cc
init|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"name"
argument_list|)
block|{}
decl_stmt|;
name|RootProvider
name|rootProvider
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|RootProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|cc
operator|.
name|setRootProvider
argument_list|(
name|rootProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|rootProvider
argument_list|,
name|cc
operator|.
name|getRootProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testGetTreeProviderNotInitialized
parameter_list|()
block|{
name|CompositeConfiguration
name|cc
init|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"name"
argument_list|)
block|{}
decl_stmt|;
name|cc
operator|.
name|getTreeProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|()
specifier|public
name|void
name|testSetTreeProvider
parameter_list|()
block|{
name|CompositeConfiguration
name|cc
init|=
operator|new
name|CompositeConfiguration
argument_list|(
literal|"name"
argument_list|)
block|{}
decl_stmt|;
name|TreeProvider
name|treeProvider
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TreeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|cc
operator|.
name|setTreeProvider
argument_list|(
name|treeProvider
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|treeProvider
argument_list|,
name|cc
operator|.
name|getTreeProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetProtectedItemImporters
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getProtectedItemImporters
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getProtectedItemImporters
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|withImporter
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ProtectedItemImporter
argument_list|>
name|getProtectedItemImporters
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ProtectedItemImporter
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withImporter
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compositeConfiguration
operator|.
name|getProtectedItemImporters
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetConflictHandlers
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getConflictHandlers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getConflictHandlers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|withConflictHandler
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ThreeWayConflictHandler
argument_list|>
name|getConflictHandlers
parameter_list|()
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ThreeWayConflictHandler
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withConflictHandler
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compositeConfiguration
operator|.
name|getConflictHandlers
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetCommitHooks
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getCommitHooks
argument_list|(
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getCommitHooks
argument_list|(
literal|null
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|withCommitHook
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|CommitHook
argument_list|>
name|getCommitHooks
parameter_list|(
annotation|@
name|Nonnull
name|String
name|workspaceName
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|CommitHook
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withCommitHook
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compositeConfiguration
operator|.
name|getCommitHooks
argument_list|(
literal|null
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetValidators
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getValidators
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|MoveTracker
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getValidators
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|MoveTracker
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|withValidator
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|ValidatorProvider
argument_list|>
name|getValidators
parameter_list|(
annotation|@
name|Nonnull
name|String
name|workspaceName
parameter_list|,
annotation|@
name|Nonnull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|Nonnull
name|MoveTracker
name|moveTracker
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
name|of
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|ValidatorProvider
operator|.
name|class
argument_list|)
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withValidator
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|compositeConfiguration
operator|.
name|getValidators
argument_list|(
literal|null
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|,
operator|new
name|MoveTracker
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetWorkspaceInitializer
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getWorkspaceInitializer
argument_list|()
operator|instanceof
name|CompositeWorkspaceInitializer
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getWorkspaceInitializer
argument_list|()
operator|instanceof
name|CompositeWorkspaceInitializer
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|withWorkspaceInitializer
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|WorkspaceInitializer
name|getWorkspaceInitializer
parameter_list|()
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|WorkspaceInitializer
operator|.
name|class
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withWorkspaceInitializer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getWorkspaceInitializer
argument_list|()
operator|instanceof
name|CompositeWorkspaceInitializer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepositoryInitializer
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getRepositoryInitializer
argument_list|()
operator|instanceof
name|CompositeInitializer
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getRepositoryInitializer
argument_list|()
operator|instanceof
name|CompositeInitializer
argument_list|)
expr_stmt|;
name|SecurityConfiguration
name|withRepositoryInitializer
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RepositoryInitializer
name|getRepositoryInitializer
parameter_list|()
block|{
return|return
name|Mockito
operator|.
name|mock
argument_list|(
name|RepositoryInitializer
operator|.
name|class
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withRepositoryInitializer
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|compositeConfiguration
operator|.
name|getRepositoryInitializer
argument_list|()
operator|instanceof
name|CompositeInitializer
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetParameters
parameter_list|()
block|{
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|compositeConfiguration
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|addConfiguration
argument_list|(
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|compositeConfiguration
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|params
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"valueA"
argument_list|,
literal|"b"
argument_list|,
literal|"valueB"
argument_list|)
decl_stmt|;
name|SecurityConfiguration
name|withParams
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|()
block|{
return|return
name|params
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withParams
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|params
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|compositeConfiguration
operator|.
name|getParameters
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|params2
init|=
name|ConfigurationParameters
operator|.
name|of
argument_list|(
literal|"a"
argument_list|,
literal|"valueA2"
argument_list|,
literal|"c"
argument_list|,
literal|"valueC"
argument_list|)
decl_stmt|;
name|SecurityConfiguration
name|withParams2
init|=
operator|new
name|SecurityConfiguration
operator|.
name|Default
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|ConfigurationParameters
name|getParameters
parameter_list|()
block|{
return|return
name|params2
return|;
block|}
block|}
decl_stmt|;
name|addConfiguration
argument_list|(
name|withParams2
argument_list|)
expr_stmt|;
name|ConfigurationParameters
name|compositeParams
init|=
name|compositeConfiguration
operator|.
name|getParameters
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|compositeParams
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|params
argument_list|,
name|params2
argument_list|)
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|compositeParams
operator|.
name|keySet
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"valueA2"
argument_list|,
name|compositeParams
operator|.
name|getConfigValue
argument_list|(
literal|"a"
argument_list|,
literal|"def"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

