begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|elements
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|GlobbingPathFilter
operator|.
name|STAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|GlobbingPathFilter
operator|.
name|STAR_STAR
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|impl
operator|.
name|ImmutableTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|GlobbingPathFilterTest
block|{
specifier|private
name|ImmutableTree
name|tree
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|NodeBuilder
name|root
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createPath
argument_list|(
name|root
argument_list|,
literal|"a/b/c/d"
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
name|root
argument_list|,
literal|"q"
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
name|root
argument_list|,
literal|"x/y/x/y/z"
argument_list|)
expr_stmt|;
name|createPath
argument_list|(
name|root
argument_list|,
literal|"r/s/t/u/v/r/s/t/u/v/r/s/t/u/v/w"
argument_list|)
expr_stmt|;
name|tree
operator|=
operator|new
name|ImmutableTree
argument_list|(
name|root
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createPath
parameter_list|(
name|NodeBuilder
name|root
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * An empty path pattern should match no path      */
annotation|@
name|Test
specifier|public
name|void
name|emptyMatchesNothing
parameter_list|()
block|{
name|EventFilter
name|rootFilter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|NodeState
name|a
init|=
name|tree
operator|.
name|getChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rootFilter
operator|.
name|includeAdd
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rootFilter
operator|.
name|create
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * q should match q      */
annotation|@
name|Test
specifier|public
name|void
name|singleMatchesSingle
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"q"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"q"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * * should match q      */
annotation|@
name|Test
specifier|public
name|void
name|starMatchesSingle
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
name|STAR
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"q"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|wildcardMatches
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"*.*"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"a"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|".b"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"a.b"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"a."
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"*.html"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"a.b"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"html"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|".html"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"a.html"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"*foo*.html"
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"a.b"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"a.html"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"foo.html"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"my-foo-bar.html"
argument_list|,
name|tree
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * match ** 'in the middle'      */
annotation|@
name|Test
specifier|public
name|void
name|inTheMiddle
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"/foo/"
operator|+
name|STAR_STAR
operator|+
literal|"/bar"
argument_list|)
decl_stmt|;
name|ImmutableTree
name|t
init|=
name|tree
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
literal|"foo/a/b/c"
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
literal|"bar"
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * ** should match every path      */
annotation|@
name|Test
specifier|public
name|void
name|all
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
name|STAR_STAR
argument_list|)
decl_stmt|;
name|ImmutableTree
name|t
init|=
name|tree
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
literal|"a/b/c/d"
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * a/b/c should match a/b/c      */
annotation|@
name|Test
specifier|public
name|void
name|literal
parameter_list|()
block|{
name|EventFilter
name|rootFilter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"a/b/c"
argument_list|)
decl_stmt|;
name|NodeState
name|a
init|=
name|tree
operator|.
name|getChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rootFilter
operator|.
name|includeAdd
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|aFilter
init|=
name|rootFilter
operator|.
name|create
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|aFilter
argument_list|)
expr_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|aFilter
operator|.
name|includeAdd
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|bFilter
init|=
name|aFilter
operator|.
name|create
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bFilter
argument_list|)
expr_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bFilter
operator|.
name|includeAdd
argument_list|(
literal|"c"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bFilter
operator|.
name|includeAdd
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bFilter
operator|.
name|create
argument_list|(
literal|"c"
argument_list|,
name|c
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * a/*&#47c should match a/b/c      */
annotation|@
name|Test
specifier|public
name|void
name|starGlob
parameter_list|()
block|{
name|EventFilter
name|rootFilter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"a/*/c"
argument_list|)
decl_stmt|;
name|NodeState
name|a
init|=
name|tree
operator|.
name|getChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rootFilter
operator|.
name|includeAdd
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|aFilter
init|=
name|rootFilter
operator|.
name|create
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|aFilter
argument_list|)
expr_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|aFilter
operator|.
name|includeAdd
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|bFilter
init|=
name|aFilter
operator|.
name|create
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bFilter
argument_list|)
expr_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bFilter
operator|.
name|includeAdd
argument_list|(
literal|"c"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bFilter
operator|.
name|includeAdd
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|bFilter
operator|.
name|create
argument_list|(
literal|"c"
argument_list|,
name|c
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * **&#47/y/z should match x/y/x/y/z      */
annotation|@
name|Test
specifier|public
name|void
name|starStarGlob
parameter_list|()
block|{
name|EventFilter
name|rootFilter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"**/y/z"
argument_list|)
decl_stmt|;
name|NodeState
name|x1
init|=
name|tree
operator|.
name|getChild
argument_list|(
literal|"x"
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rootFilter
operator|.
name|includeAdd
argument_list|(
literal|"x"
argument_list|,
name|x1
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|x1Filter
init|=
name|rootFilter
operator|.
name|create
argument_list|(
literal|"x"
argument_list|,
name|x1
argument_list|,
name|x1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|x1Filter
argument_list|)
expr_stmt|;
name|NodeState
name|y1
init|=
name|x1
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x1Filter
operator|.
name|includeAdd
argument_list|(
literal|"y"
argument_list|,
name|y1
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|y1Filter
init|=
name|x1Filter
operator|.
name|create
argument_list|(
literal|"y"
argument_list|,
name|y1
argument_list|,
name|y1
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|y1Filter
argument_list|)
expr_stmt|;
name|NodeState
name|x2
init|=
name|y1
operator|.
name|getChildNode
argument_list|(
literal|"x"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|y1Filter
operator|.
name|includeAdd
argument_list|(
literal|"x"
argument_list|,
name|x2
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|x2Filter
init|=
name|y1Filter
operator|.
name|create
argument_list|(
literal|"x"
argument_list|,
name|x2
argument_list|,
name|x2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|x2Filter
argument_list|)
expr_stmt|;
name|NodeState
name|y2
init|=
name|x2
operator|.
name|getChildNode
argument_list|(
literal|"y"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|x2Filter
operator|.
name|includeAdd
argument_list|(
literal|"y"
argument_list|,
name|y2
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|y2Filter
init|=
name|x2Filter
operator|.
name|create
argument_list|(
literal|"y"
argument_list|,
name|y2
argument_list|,
name|y2
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|y2Filter
argument_list|)
expr_stmt|;
name|NodeState
name|z
init|=
name|y2
operator|.
name|getChildNode
argument_list|(
literal|"z"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|y2Filter
operator|.
name|includeAdd
argument_list|(
literal|"z"
argument_list|,
name|z
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|zFilter
init|=
operator|(
name|y2Filter
operator|.
name|create
argument_list|(
literal|"z"
argument_list|,
name|z
argument_list|,
name|z
argument_list|)
operator|)
decl_stmt|;
name|assertFalse
argument_list|(
name|zFilter
operator|.
name|includeAdd
argument_list|(
literal|"x"
argument_list|,
name|EMPTY_NODE
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * **&#47a/b/c should match a/b/c      */
annotation|@
name|Test
specifier|public
name|void
name|matchAtStart
parameter_list|()
block|{
name|EventFilter
name|rootFilter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"**/a/b/c"
argument_list|)
decl_stmt|;
name|NodeState
name|a
init|=
name|tree
operator|.
name|getChild
argument_list|(
literal|"a"
argument_list|)
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rootFilter
operator|.
name|includeAdd
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|aFilter
init|=
name|rootFilter
operator|.
name|create
argument_list|(
literal|"a"
argument_list|,
name|a
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|aFilter
argument_list|)
expr_stmt|;
name|NodeState
name|b
init|=
name|a
operator|.
name|getChildNode
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|aFilter
operator|.
name|includeAdd
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|EventFilter
name|bFilter
init|=
name|aFilter
operator|.
name|create
argument_list|(
literal|"b"
argument_list|,
name|b
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|bFilter
argument_list|)
expr_stmt|;
name|NodeState
name|c
init|=
name|b
operator|.
name|getChildNode
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bFilter
operator|.
name|includeAdd
argument_list|(
literal|"c"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bFilter
operator|.
name|includeAdd
argument_list|(
literal|"x"
argument_list|,
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * **&#47r/s/t/u/v should match r/s/t/u/v and r/s/t/u/v/r/s/t/u/v and r/s/t/u/v/r/s/t/u/v/r/s/t/u/v      */
annotation|@
name|Test
specifier|public
name|void
name|multipleMatches
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"**/r/s/t/u/v"
argument_list|)
decl_stmt|;
name|ImmutableTree
name|t
init|=
name|tree
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
literal|2
condition|;
name|c
operator|++
control|)
block|{
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
literal|"r/s/t/u"
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
literal|"v"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"v"
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
literal|"v"
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * **&#47r/s/t/u/v/w should match r/s/t/u/v/r/s/t/u/v/r/s/t/u/v/w      */
annotation|@
name|Test
specifier|public
name|void
name|matchAtEnd
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"**/r/s/t/u/v/w"
argument_list|)
decl_stmt|;
name|ImmutableTree
name|t
init|=
name|tree
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
literal|"r/s/t/u/v/r/s/t/u/v/r/s/t/u/v"
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
literal|"w"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
literal|"w"
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
literal|"w"
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
comment|/**      * r/s/t&#47** should match r/s/t and all its descendants      */
annotation|@
name|Test
specifier|public
name|void
name|matchSuffix
parameter_list|()
block|{
name|EventFilter
name|filter
init|=
operator|new
name|GlobbingPathFilter
argument_list|(
literal|"r/s/t/**"
argument_list|)
decl_stmt|;
name|ImmutableTree
name|t
init|=
name|tree
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
literal|"r/s"
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|name
range|:
name|elements
argument_list|(
literal|"t/u/v/r/s/t/u/v/r/s/t/u/v/w"
argument_list|)
control|)
block|{
name|t
operator|=
name|t
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|filter
operator|.
name|includeAdd
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|filter
operator|=
name|filter
operator|.
name|create
argument_list|(
name|name
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|t
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

