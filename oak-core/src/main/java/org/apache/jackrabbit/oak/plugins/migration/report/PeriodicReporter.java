begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
operator|.
name|report
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Abstract class that simplifies development of a Reporter  * that should only report every nth event (node or property seen).  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|PeriodicReporter
implements|implements
name|Reporter
block|{
specifier|private
specifier|final
name|int
name|nodeLogInterval
decl_stmt|;
specifier|private
specifier|final
name|int
name|propertyLogInterval
decl_stmt|;
specifier|private
name|AtomicLong
name|nodes
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
name|AtomicLong
name|properties
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|protected
name|PeriodicReporter
parameter_list|(
specifier|final
name|int
name|nodeLogInterval
parameter_list|,
specifier|final
name|int
name|propertyLogInterval
parameter_list|)
block|{
name|this
operator|.
name|nodeLogInterval
operator|=
name|nodeLogInterval
expr_stmt|;
name|this
operator|.
name|propertyLogInterval
operator|=
name|propertyLogInterval
expr_stmt|;
block|}
comment|/**      * Reset the node and property counts to 0. Inheriting implementations      * may reset their own internal state.      */
specifier|protected
name|void
name|reset
parameter_list|()
block|{
name|nodes
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|properties
operator|.
name|set
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback called every nth time a node is accessed.      *      * @param count The count of reported nodes.      * @param nodeState The node that was reported.      */
specifier|protected
specifier|abstract
name|void
name|reportPeriodicNode
parameter_list|(
specifier|final
name|long
name|count
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|nodeState
parameter_list|)
function_decl|;
comment|/**      * Callback called every nth time a property is accessed.      *      * @param count The count of reported properties.      * @param parent The parent node of the reported property.      * @param propertyName The name of the reported property.      */
specifier|protected
specifier|abstract
name|void
name|reportPeriodicProperty
parameter_list|(
specifier|final
name|long
name|count
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|parent
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|String
name|propertyName
parameter_list|)
function_decl|;
specifier|protected
name|boolean
name|skipNodeState
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|nodeState
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|reportNode
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|nodeState
parameter_list|)
block|{
if|if
condition|(
name|nodeLogInterval
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|skipNodeState
argument_list|(
name|nodeState
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|count
init|=
name|nodes
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|%
name|nodeLogInterval
operator|==
literal|0
condition|)
block|{
name|reportPeriodicNode
argument_list|(
name|count
argument_list|,
name|nodeState
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|reportProperty
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|ReportingNodeState
name|parent
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|String
name|propertyName
parameter_list|)
block|{
if|if
condition|(
name|propertyLogInterval
operator|==
operator|-
literal|1
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|count
init|=
name|properties
operator|.
name|incrementAndGet
argument_list|()
decl_stmt|;
if|if
condition|(
name|count
operator|%
name|propertyLogInterval
operator|==
literal|0
condition|)
block|{
name|reportPeriodicProperty
argument_list|(
name|count
argument_list|,
name|parent
argument_list|,
name|propertyName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

