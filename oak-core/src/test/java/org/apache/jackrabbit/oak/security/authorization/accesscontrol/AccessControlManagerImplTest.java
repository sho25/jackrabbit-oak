begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|GlobalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|LocalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AbstractAccessControlTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|TestACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for the default {@code AccessControlManager} implementation.  */
end_comment

begin_class
specifier|public
class|class
name|AccessControlManagerImplTest
extends|extends
name|AbstractAccessControlTest
implements|implements
name|AccessControlConstants
block|{
specifier|public
specifier|static
specifier|final
name|String
name|TEST_LOCAL_PREFIX
init|=
literal|"test"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_PREFIX
init|=
literal|"jr"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TEST_URI
init|=
literal|"http://jackrabbit.apache.org"
decl_stmt|;
specifier|private
specifier|final
name|String
name|testName
init|=
name|TEST_PREFIX
operator|+
literal|":testRoot"
decl_stmt|;
specifier|private
specifier|final
name|String
name|testPath
init|=
literal|'/'
operator|+
name|testName
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
specifier|private
name|Root
name|testRoot
decl_stmt|;
specifier|private
name|NamePathMapper
name|npMapper
decl_stmt|;
specifier|private
name|AccessControlManagerImpl
name|acMgr
decl_stmt|;
specifier|private
name|ValueFactory
name|valueFactory
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|registerNamespace
argument_list|(
name|TEST_PREFIX
argument_list|,
name|TEST_URI
argument_list|)
expr_stmt|;
name|NameMapper
name|nameMapper
init|=
operator|new
name|GlobalNameMapper
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|npMapper
operator|=
operator|new
name|NamePathMapperImpl
argument_list|(
name|nameMapper
argument_list|)
expr_stmt|;
name|acMgr
operator|=
name|getAccessControlManager
argument_list|(
name|npMapper
argument_list|)
expr_stmt|;
name|valueFactory
operator|=
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
name|npMapper
argument_list|)
expr_stmt|;
name|NodeUtil
name|rootNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|npMapper
argument_list|)
decl_stmt|;
name|rootNode
operator|.
name|addChild
argument_list|(
name|testName
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testPrivileges
operator|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|testPrincipal
operator|=
name|getTestPrincipal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
if|if
condition|(
name|testRoot
operator|!=
literal|null
condition|)
block|{
name|testRoot
operator|.
name|getContentSession
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
name|testRoot
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|NamePathMapper
name|getNamePathMapper
parameter_list|()
block|{
return|return
name|npMapper
return|;
block|}
specifier|private
name|AccessControlManagerImpl
name|getAccessControlManager
parameter_list|(
name|NamePathMapper
name|npMapper
parameter_list|)
block|{
return|return
operator|new
name|AccessControlManagerImpl
argument_list|(
name|root
argument_list|,
name|npMapper
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Root
name|getTestRoot
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|testRoot
operator|==
literal|null
condition|)
block|{
name|testRoot
operator|=
name|createTestSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
block|}
return|return
name|testRoot
return|;
block|}
specifier|private
name|AccessControlManagerImpl
name|getTestAccessControlManager
parameter_list|()
throws|throws
name|Exception
block|{
return|return
operator|new
name|AccessControlManagerImpl
argument_list|(
name|getTestRoot
argument_list|()
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|,
name|getSecurityProvider
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|ACL
name|getApplicablePolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
operator|(
name|ACL
operator|)
name|itr
operator|.
name|nextAccessControlPolicy
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"No applicable policy found."
argument_list|)
throw|;
block|}
block|}
specifier|private
name|ACL
name|createPolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
block|{
specifier|final
name|PrincipalManager
name|pm
init|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|PrivilegeManager
name|pvMgr
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
specifier|final
name|RestrictionProvider
name|rp
init|=
name|getRestrictionProvider
argument_list|()
decl_stmt|;
return|return
operator|new
name|ACL
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
block|{
annotation|@
name|Override
name|ACE
name|createACE
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|PrivilegeBits
name|privilegeBits
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
name|boolean
name|checkValidPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|Util
operator|.
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
name|pm
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|PrivilegeManager
name|getPrivilegeManager
parameter_list|()
block|{
return|return
name|pvMgr
return|;
block|}
annotation|@
name|Override
name|PrivilegeBits
name|getPrivilegeBits
parameter_list|(
name|Privilege
index|[]
name|privileges
parameter_list|)
block|{
return|return
name|getBitsProvider
argument_list|()
operator|.
name|getBits
argument_list|(
name|privileges
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|rp
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|ACL
name|setupPolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|Nullable
name|Privilege
modifier|...
name|privileges
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|privs
init|=
operator|(
name|privileges
operator|==
literal|null
operator|||
name|privileges
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
name|testPrivileges
else|:
name|privileges
decl_stmt|;
name|ACL
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|policy
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|getGlobRestriction
parameter_list|(
annotation|@
name|Nonnull
name|String
name|value
parameter_list|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
name|REP_GLOB
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getInvalidPaths
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"../../jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"jcr:testRoot"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"jcr:test/Root"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"./jcr:testRoot"
argument_list|)
expr_stmt|;
return|return
name|invalid
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|getAcContentPaths
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ACL
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|String
name|aclPath
init|=
name|testPath
operator|+
literal|'/'
operator|+
name|REP_POLICY
decl_stmt|;
name|Tree
name|acl
init|=
name|root
operator|.
name|getTree
argument_list|(
name|aclPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|aces
init|=
name|acl
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|aces
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|ace
init|=
name|aces
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|ace
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|acContentPath
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|acContentPath
operator|.
name|add
argument_list|(
name|aclPath
argument_list|)
expr_stmt|;
name|acContentPath
operator|.
name|add
argument_list|(
name|ace
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|rest
init|=
name|ace
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
if|if
condition|(
name|rest
operator|.
name|exists
argument_list|()
condition|)
block|{
name|acContentPath
operator|.
name|add
argument_list|(
name|rest
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|acContentPath
return|;
block|}
specifier|private
name|Set
argument_list|<
name|Principal
argument_list|>
name|getPrincipals
parameter_list|(
name|ContentSession
name|session
parameter_list|)
block|{
return|return
name|session
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
return|;
block|}
comment|//---------------------------------------------< getSupportedPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/jcr:system"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|testPaths
control|)
block|{
name|Privilege
index|[]
name|supported
init|=
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|supported
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allPrivileges
operator|.
name|size
argument_list|()
argument_list|,
name|supported
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivileges
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|supported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Expects valid node path, found: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
literal|"/jcr:primaryType"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Property path -> PathNotFoundException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesNonExistingPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
literal|"/non/existing/node"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Nonexisting node -> PathNotFoundException expected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedPrivilegesIncludingPathConversion
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|testPaths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|'/'
operator|+
name|TEST_LOCAL_PREFIX
operator|+
literal|":testRoot"
argument_list|)
expr_stmt|;
name|testPaths
operator|.
name|add
argument_list|(
literal|"/{"
operator|+
name|TEST_URI
operator|+
literal|"}testRoot"
argument_list|)
expr_stmt|;
name|NameMapper
name|remapped
init|=
operator|new
name|LocalNameMapper
argument_list|(
name|root
argument_list|,
name|singletonMap
argument_list|(
name|TEST_LOCAL_PREFIX
argument_list|,
name|TEST_URI
argument_list|)
argument_list|)
decl_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
operator|new
name|NamePathMapperImpl
argument_list|(
name|remapped
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|testPaths
control|)
block|{
name|Privilege
index|[]
name|supported
init|=
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|supported
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allPrivileges
operator|.
name|size
argument_list|()
argument_list|,
name|supported
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivileges
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|supported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSupportedForPrivilegesAcContent
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|acPath
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|Privilege
index|[]
name|supported
init|=
name|acMgr
operator|.
name|getSupportedPrivileges
argument_list|(
name|acPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|supported
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allPrivileges
operator|.
name|size
argument_list|()
argument_list|,
name|supported
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|allPrivileges
operator|.
name|containsAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|supported
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//--------------------------------------------------< privilegeFromName>---
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Privilege
argument_list|>
name|allPrivileges
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getRegisteredPrivileges
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
name|privilege
range|:
name|allPrivileges
control|)
block|{
name|Privilege
name|p
init|=
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilege
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|privilege
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromExpandedName
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
name|readPriv
init|=
name|getPrivilegeManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrivilege
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|readPriv
argument_list|,
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|Privilege
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromInvalidName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"test:read"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|invalid
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilegeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrivilegeFromUnknownName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"unknownPrivilege"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|'{'
operator|+
name|NamespaceRegistry
operator|.
name|NAMESPACE_JCR
operator|+
literal|"}unknown"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|invalid
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|privilegeName
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|//------------------------------------------------------< hasPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testHasNullPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasEmptyPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesForPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|propertyPath
init|=
literal|"/jcr:primaryType"
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|propertyPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|propertyPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesInvalidPaths
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesAccessControlledNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @since OAK 1.0 As of OAK AccessControlManager#hasPrivilege will throw      * PathNotFoundException in case the node associated with a given path is      * not readable to the editing session (compatibility with the specification      * which was missing in jackrabbit).      */
annotation|@
name|Test
specifier|public
name|void
name|testHasPrivilegesNotAccessiblePath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|notAccessible
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|notAccessible
operator|.
name|addAll
argument_list|(
name|getAcContentPaths
argument_list|()
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|AccessControlManagerImpl
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|getTestRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#hasPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionHasPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessControlManagerImpl
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
comment|// granted privileges
name|List
argument_list|<
name|Privilege
index|[]
argument_list|>
name|granted
init|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_READ_PROPERTIES
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|granted
operator|.
name|add
argument_list|(
name|testPrivileges
argument_list|)
expr_stmt|;
for|for
control|(
name|Privilege
index|[]
name|privileges
range|:
name|granted
control|)
block|{
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|getTestRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// denied privileges
name|List
argument_list|<
name|Privilege
index|[]
argument_list|>
name|denied
init|=
operator|new
name|ArrayList
argument_list|<
name|Privilege
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|denied
operator|.
name|add
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LOCK_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Privilege
index|[]
name|privileges
range|:
name|denied
control|)
block|{
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|getTestRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionHasPrivilegesForPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessControlManagerImpl
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
comment|// but for 'admin' the test-session doesn't have sufficient privileges
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testSession doesn't have sufficient permission to read access control information at testPath"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHasRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionHasRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManagerImpl
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|getTestRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
argument_list|)
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
comment|// but for 'admin' the test-session doesn't have sufficient privileges
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testSession doesn't have sufficient permission to read access control information"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//------------------------------------------------------< getPrivileges>---
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesForPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|propertyPath
init|=
literal|"/jcr:primaryType"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|propertyPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|propertyPath
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|nonExistingPath
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesInvalidPaths
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges  for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesAccessControlledNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|expected
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesForPrincipalsAccessControlledNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|expected
init|=
operator|new
name|Privilege
index|[
literal|0
index|]
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @since OAK 1.0 As of OAK AccessControlManager#hasPrivilege will throw      * PathNotFoundException in case the node associated with a given path is      * not readable to the editing session.      */
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesNotAccessiblePath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|notAccessible
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|notAccessible
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|notAccessible
operator|.
name|addAll
argument_list|(
name|getAcContentPaths
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|getTestAccessControlManager
argument_list|()
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|notAccessible
control|)
block|{
try|try
block|{
name|getTestAccessControlManager
argument_list|()
operator|.
name|getPrivileges
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"AccessControlManager#getPrivileges for node that is not accessible should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessControlManagerImpl
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
init|=
name|getPrincipals
argument_list|(
name|getTestRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testPrivileges
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|privs
operator|=
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|testPrincipals
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testPrivileges
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
comment|// but for 'admin' the test-session doesn't have sufficient privileges
try|try
block|{
name|testAcMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"testSession doesn't have sufficient permission to read access control information at testPath"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPrivileges
parameter_list|()
throws|throws
name|Exception
block|{
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesForPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|adminPrincipals
init|=
name|getPrincipals
argument_list|(
name|adminSession
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|expected
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_ALL
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|"/"
argument_list|,
name|adminPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|adminPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|expected
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|adminPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|testPrincipals
init|=
name|Collections
operator|.
name|singleton
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|null
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|,
name|acMgr
operator|.
name|getPrivileges
argument_list|(
literal|"/"
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|testPrivileges
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|acMgr
operator|.
name|getPrivileges
argument_list|(
name|testPath
argument_list|,
name|testPrincipals
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------< getApplicablePolicies(String)>---
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|itr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|itr
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policy
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
argument_list|,
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesOnAccessControllable
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|node
operator|.
name|setNames
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|MIX_REP_ACCESS_CONTROLLABLE
argument_list|)
expr_stmt|;
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|itr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicableRepoPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|itr
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|itr
operator|.
name|nextAccessControlPolicy
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policy
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policy
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesWithCollidingNode
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|testTree
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
decl_stmt|;
name|testTree
operator|.
name|addChild
argument_list|(
name|REP_POLICY
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|itr
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesForAccessControlled
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|itr
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|itr
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|invalid
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting applicable policies for an invalid path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testApplicablePoliciesForPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|propertyPath
init|=
literal|"/jcr:primaryType"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|propertyPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting applicable policies for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|nonExistingPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting applicable policies for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesForAcContentPaths
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting applicable policies for access control content should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|//------------------------------------------------< getPolicies(String)>---
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
argument_list|,
name|acl
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesNodeNotAccessControlled
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesAfterSet
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesAfterRemove
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|testPath
argument_list|,
name|policies
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPolicyWithInvalidPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|NodeUtil
name|aclNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
operator|+
literal|'/'
operator|+
name|REP_POLICY
argument_list|)
argument_list|)
decl_stmt|;
name|NodeUtil
name|aceNode
init|=
name|aclNode
operator|.
name|addChild
argument_list|(
literal|"testACE"
argument_list|,
name|NT_REP_DENY_ACE
argument_list|)
decl_stmt|;
name|aceNode
operator|.
name|setString
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
literal|"invalidPrincipal"
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setNames
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
comment|// reading policies with unknown principal name should not fail.
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|principalNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|principalNames
operator|.
name|add
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|principalNames
operator|.
name|remove
argument_list|(
literal|"invalidPrincipal"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|principalNames
operator|.
name|remove
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|principalNames
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRepoPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|null
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
operator|.
name|nextAccessControlPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|acl
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|invalid
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting policies for an invalid path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|propertyPath
init|=
literal|"/jcr:primaryType"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|propertyPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting policies for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|nonExistingPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting policies for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesAcContentPaths
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting policies for access control content should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|//---------------------------------------< getEffectivePolicies(String)>---
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesNewPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectiveModifiedPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|AccessControlEntry
index|[]
name|aces
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|AccessControlList
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|effectiveAces
init|=
operator|(
operator|(
name|AccessControlList
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|aces
argument_list|,
name|effectiveAces
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|effectiveAces
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|invalid
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|invalid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting policies for an invalid path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesForPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|propertyPath
init|=
literal|"/jcr:primaryType"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|propertyPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting policies for property should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|nonExistingPath
init|=
literal|"/not/existing"
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|nonExistingPath
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting policies for node that doesn't exist should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesForAcContentPaths
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|path
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Getting effective policies for access control content should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|/**      * @since OAK 1.0      */
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePolicies
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' READ + READ_AC privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
argument_list|)
expr_stmt|;
comment|// diff to jr core: getEffectivePolicies will just return the policies
comment|// accessible for the editing session but not throw an exception.
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|effective
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0      */
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePolicies2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// diff to jr core: getEffectivePolicies will just return the policies
comment|// accessible for the editing session but not throw an exception.
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|effective
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePoliciesWithoutPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant 'testUser' READ + READ_AC privileges at 'path'
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|AccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPath
argument_list|,
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|path
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"READ_ACCESS_CONTROL is not granted at "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
comment|//-----------------------------< setPolicy(String, AccessControlPolicy)>---
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*/something"
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|root2
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|getAccessControlManager
argument_list|(
name|root2
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|,
operator|(
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetRepoPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|getApplicablePolicy
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_NAMESPACE_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|root2
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|getAccessControlManager
argument_list|(
name|root2
argument_list|)
operator|.
name|getPolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|,
operator|(
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyWritesAcContent
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*/something"
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|root2
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|tree
init|=
name|root2
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tree
operator|.
name|hasChild
argument_list|(
name|REP_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|policyTree
init|=
name|tree
operator|.
name|getChild
argument_list|(
name|REP_POLICY
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NT_REP_ACL
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|policyTree
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policyTree
operator|.
name|getChildrenCount
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|children
init|=
name|policyTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|Tree
name|ace
init|=
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NT_REP_GRANT_ACE
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|ace
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|ace
argument_list|,
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|testPrivileges
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|privilegesFromNames
argument_list|(
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|ace
argument_list|,
name|REP_PRIVILEGES
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ace
operator|.
name|hasChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|ace2
init|=
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|NT_REP_DENY_ACE
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|ace2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|,
name|ace2
operator|.
name|getProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|TreeUtil
operator|.
name|getNames
argument_list|(
name|ace2
argument_list|,
name|REP_PRIVILEGES
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|testPrivileges
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ace2
operator|.
name|hasChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|restr
init|=
name|ace2
operator|.
name|getChild
argument_list|(
name|REP_RESTRICTIONS
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"*/something"
argument_list|,
name|restr
operator|.
name|getProperty
argument_list|(
name|REP_GLOB
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifyExistingPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|allowTest
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|acl
operator|=
operator|(
name|ACL
operator|)
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*/something"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|aces
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aces
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|denyEveryone
init|=
name|aces
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|denyEveryone
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|.
name|orderBefore
argument_list|(
name|denyEveryone
argument_list|,
name|allowTest
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|acl
operator|=
operator|(
name|ACL
operator|)
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|aces
operator|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|aces
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|denyEveryone
argument_list|,
name|aces
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allowTest
argument_list|,
name|aces
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|readAc
init|=
operator|new
name|Privilege
index|[]
block|{
name|acMgr
operator|.
name|privilegeFromName
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readAc
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|denyTest
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|2
index|]
decl_stmt|;
name|acl
operator|.
name|orderBefore
argument_list|(
name|denyTest
argument_list|,
name|allowTest
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|acl
operator|=
operator|(
name|ACL
operator|)
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
index|[
literal|0
index|]
expr_stmt|;
name|aces
operator|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|aces
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|denyEveryone
argument_list|,
name|aces
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|denyTest
argument_list|,
name|aces
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|allowTest
argument_list|,
name|aces
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetInvalidPolicy
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
operator|new
name|TestACL
argument_list|(
name|testPath
argument_list|,
name|getRestrictionProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting invalid policy must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|ACL
name|acl
init|=
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
operator|new
name|TestACL
argument_list|(
name|testPath
argument_list|,
name|getRestrictionProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting invalid policy must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|ACL
name|repoAcl
init|=
name|setupPolicy
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|repoAcl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting invalid policy must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting invalid policy must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|invalid
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|invalid
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|invalid
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting access control policy with invalid path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|path
init|=
literal|"/jcr:primaryType"
decl_stmt|;
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting access control policy at property path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|path
init|=
literal|"/non/existing"
decl_stmt|;
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting access control policy for non-existing node path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyAcContent
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|acPath
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
try|try
block|{
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|acPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting access control policy to access control content should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPolicyAtDifferentPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|ACL
name|acl
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|"/"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting access control policy at a different node path must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//--------------------------< removePolicy(String, AccessControlPolicy)>---
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPath
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRepoPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|setupPolicy
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|null
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|String
operator|)
literal|null
argument_list|)
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveInvalidPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|ACL
name|acl
init|=
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|testPath
argument_list|,
operator|new
name|TestACL
argument_list|(
name|testPath
argument_list|,
name|getRestrictionProvider
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid policy -> removal must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|ACL
name|repoAcl
init|=
name|setupPolicy
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|testPath
argument_list|,
name|repoAcl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting invalid policy must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|null
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Setting invalid policy must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicyInvalidPath
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|invalid
range|:
name|getInvalidPaths
argument_list|()
control|)
block|{
try|try
block|{
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|invalid
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|invalid
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing access control policy with invalid path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicyPropertyPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|path
init|=
literal|"/jcr:primaryType"
decl_stmt|;
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing access control policy at property path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicyNonExistingNodePath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|String
name|path
init|=
literal|"/non/existing"
decl_stmt|;
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing access control policy for non-existing node path should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicyAcContent
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|String
name|acPath
range|:
name|getAcContentPaths
argument_list|()
control|)
block|{
try|try
block|{
name|AccessControlPolicy
name|acl
init|=
name|createPolicy
argument_list|(
name|acPath
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|acPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing access control policy to access control content should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePolicyAtDifferentPath
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
name|getApplicablePolicy
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing access control policy at a different node path must fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|//-----------------------------------< getApplicablePolicies(Principal)>---
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
operator|(
name|Principal
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Null is not a valid principal"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesInvalidPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|unknown
init|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|unknown
operator|!=
literal|null
condition|)
block|{
name|unknown
operator|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|unknown
operator|=
operator|new
name|InvalidTestPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|unknown
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unknown principal should be detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesInternalPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|unknown
init|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|unknown
operator|!=
literal|null
condition|)
block|{
name|unknown
operator|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|unknown
operator|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|unknown
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
name|AccessControlPolicy
index|[]
name|applicable
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|applicable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetApplicablePoliciesByPrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
comment|// changes not yet persisted -> no existing policies found for user
name|AccessControlPolicy
index|[]
name|applicable
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|applicable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
comment|// after persisting changes -> no applicable policies present any more.
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|applicable
operator|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPrincipal
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|applicable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetApplicablePolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
comment|// testRoot can't read access control content -> doesn't see
comment|// the existing policies and creates a new applicable policy.
name|AccessControlPolicy
index|[]
name|applicable
init|=
name|testAcMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|applicable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
block|}
block|}
comment|//---------------------------------------------< getPolicies(Principal)>---
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
operator|(
name|Principal
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Null is not a valid principal"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesInvalidPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|unknown
init|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|unknown
operator|!=
literal|null
condition|)
block|{
name|unknown
operator|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|unknown
operator|=
operator|new
name|InvalidTestPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|unknown
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unknown principal should be detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesInternalPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|unknown
init|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|unknown
operator|!=
literal|null
condition|)
block|{
name|unknown
operator|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|unknown
operator|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|unknown
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPoliciesByPrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
comment|// changes not yet persisted -> no existing policies found for user
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// after persisting changes -> policies must be found
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetPolicies
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|PrincipalManager
name|testPrincipalMgr
init|=
name|getPrincipalManager
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
if|if
condition|(
name|testPrincipalMgr
operator|.
name|hasPrincipal
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|// testRoot can't read access control content -> doesn't see
comment|// the existing policies and creates a new applicable policy.
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// testRoot can't read principal -> no policies for that principal
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|testAcMgr
operator|.
name|getPolicies
argument_list|(
name|principal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//-------------------------------< getEffectivePolicies(Set<Principal>)>---
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
operator|(
name|Set
operator|)
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Null principal set not allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
operator|new
name|HashSet
argument_list|<
name|Principal
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
literal|null
argument_list|,
name|testPrincipal
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Null principal set not allowed"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesInvalidPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|unknown
init|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|unknown
operator|!=
literal|null
condition|)
block|{
name|unknown
operator|=
name|getPrincipalManager
argument_list|(
name|root
argument_list|)
operator|.
name|getPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|unknown
operator|=
operator|new
name|InvalidTestPrincipal
argument_list|(
literal|"unknown"
operator|+
name|i
argument_list|)
expr_stmt|;
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|unknown
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unknown principal should be detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|unknown
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|testPrincipal
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unknown principal should be detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEffectivePoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// no ACLs containing entries for the specified principals
comment|// -> no effective policies expected
name|Set
argument_list|<
name|Set
argument_list|<
name|Principal
argument_list|>
argument_list|>
name|principalSets
init|=
operator|new
name|HashSet
argument_list|<
name|Set
argument_list|<
name|Principal
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
name|principalSets
operator|.
name|add
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|principalSets
operator|.
name|add
argument_list|(
name|Collections
operator|.
expr|<
name|Principal
operator|>
name|singleton
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|principalSets
operator|.
name|add
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
range|:
name|principalSets
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
comment|// changes not yet persisted -> no effecitve policies found for testprincipal
for|for
control|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
range|:
name|principalSets
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// after persisting changes -> the policy must be found
for|for
control|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
range|:
name|principalSets
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
if|if
condition|(
name|principals
operator|.
name|contains
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
comment|// changes not yet persisted -> no effecitve policies found for testprincipal
for|for
control|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
range|:
name|principalSets
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
if|if
condition|(
name|principals
operator|.
name|contains
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// after persisting changes -> the policy must be found
for|for
control|(
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
range|:
name|principalSets
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
if|if
condition|(
name|principals
operator|.
name|contains
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNoEffectiveDuplicateEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principalSet
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
comment|// create first policy with multiple ACEs for the test principal set.
name|ACL
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|policy
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principalSet
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add another policy
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principalSet
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectiveSorting
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principalSet
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|ACL
name|nullPathPolicy
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// 1. policy at 'testPath'
name|ACL
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
comment|// 2. policy at child node
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
comment|// 3. policy for null-path
name|nullPathPolicy
operator|=
name|getApplicablePolicy
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|nullPathPolicy
argument_list|)
expr_stmt|;
name|nullPathPolicy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|null
argument_list|,
name|nullPathPolicy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessControlPolicy
index|[]
name|effectivePolicies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principalSet
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|effectivePolicies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
operator|(
operator|(
name|JackrabbitAccessControlPolicy
operator|)
name|effectivePolicies
index|[
literal|0
index|]
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testPath
argument_list|,
operator|(
operator|(
name|JackrabbitAccessControlPolicy
operator|)
name|effectivePolicies
index|[
literal|1
index|]
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|childPath
argument_list|,
operator|(
operator|(
name|JackrabbitAccessControlPolicy
operator|)
name|effectivePolicies
index|[
literal|2
index|]
operator|)
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|nullPathPolicy
operator|!=
literal|null
condition|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
literal|null
argument_list|,
name|nullPathPolicy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEffectivePoliciesFiltering
parameter_list|()
throws|throws
name|Exception
block|{
comment|// create first policy with multiple ACEs for the test principal set.
name|ACL
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|policy
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|policy
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// different ways to create the principal-set to make sure the filtering
comment|// doesn't rely on principal equality but rather on the name.
name|List
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|testPrincipal
argument_list|,
operator|new
name|PrincipalImpl
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|testPrincipal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
for|for
control|(
name|Principal
name|princ
range|:
name|principals
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|princ
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|AccessControlList
argument_list|)
expr_stmt|;
name|AccessControlList
name|acl
init|=
operator|(
name|AccessControlList
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|princ
operator|.
name|getName
argument_list|()
argument_list|,
name|ace
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePoliciesByPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|effective
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 Policy at testPath not accessible -> getEffectivePolicies      * only returns the readable policy but doesn't fail.      */
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePoliciesByPrincipal2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
comment|// policy at testPath: ac content was visible but the policy can't be
comment|// retrieved from AcMgr as the accesscontrolled node is not visible.
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
comment|// policy at childPath: will be found by the getEffectivePolicies
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|effective
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 Policy at testPath not accessible -> getEffectivePolicies      * only returns the readable policy but doesn't fail.      */
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePoliciesByPrincipal3
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|effective
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|effective
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|effective
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePoliciesByPrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|setupPolicy
argument_list|(
name|testPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|getApplicablePolicy
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|privs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|childPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since OAK 1.0 : only accessible policies are returned but not exception      * is raised.      */
annotation|@
name|Test
specifier|public
name|void
name|testTestSessionGetEffectivePoliciesByPrincipals2
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeUtil
name|child
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|testPath
argument_list|)
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|getTree
argument_list|()
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
comment|// create policy on testPath -> but deny access to test session
name|JackrabbitAccessControlList
name|acl
init|=
name|getApplicablePolicy
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|,
name|privs
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|testPath
argument_list|,
name|acl
argument_list|)
expr_stmt|;
comment|// grant access at childpath
name|setupPolicy
argument_list|(
name|childPath
argument_list|,
name|privilegesFromNames
argument_list|(
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|testRoot
init|=
name|getTestRoot
argument_list|()
decl_stmt|;
name|testRoot
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlManager
name|testAcMgr
init|=
name|getTestAccessControlManager
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestPrincipal
argument_list|()
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|testAcMgr
operator|.
name|getEffectivePolicies
argument_list|(
name|principals
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------< setPrincipalPolicy()>---
annotation|@
name|Test
specifier|public
name|void
name|testSetPrincipalPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
index|[]
name|applicable
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|applicable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|applicable
index|[
literal|0
index|]
decl_stmt|;
name|Value
name|pathValue
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|testPath
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_NODE_PATH
argument_list|,
name|pathValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|root2
init|=
name|adminSession
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|getAccessControlManager
argument_list|(
name|root2
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
operator|(
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|policies
operator|=
name|getAccessControlManager
argument_list|(
name|root2
argument_list|)
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|,
operator|(
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetPrincipalPolicy2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|JackrabbitAccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
argument_list|()
decl_stmt|;
name|restrictions
operator|.
name|put
argument_list|(
name|REP_NODE_PATH
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|testPath
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|)
argument_list|)
expr_stmt|;
name|restrictions
operator|.
name|putAll
argument_list|(
name|getGlobRestriction
argument_list|(
literal|"*"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
operator|(
operator|(
name|ACL
operator|)
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
index|[
literal|0
index|]
operator|)
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------< removePrincipalPolicy()>---
annotation|@
name|Test
specifier|public
name|void
name|testRemovePrincipalPolicy
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlPolicy
index|[]
name|applicable
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|applicable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|applicable
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|applicable
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|applicable
index|[
literal|0
index|]
decl_stmt|;
name|Value
name|pathValue
init|=
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|testPath
argument_list|,
name|PropertyType
operator|.
name|PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_NODE_PATH
argument_list|,
name|pathValue
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemovePrincipalPolicy2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPolicy
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|policies
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|policies
index|[
literal|0
index|]
operator|instanceof
name|ACL
argument_list|)
expr_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|policies
index|[
literal|0
index|]
decl_stmt|;
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPath
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
name|policies
operator|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|testPrincipal
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|policies
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

