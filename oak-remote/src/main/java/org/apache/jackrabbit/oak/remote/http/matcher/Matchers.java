begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|matcher
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Collection of matchers for HTTP requests.  */
end_comment

begin_class
specifier|public
class|class
name|Matchers
block|{
specifier|private
name|Matchers
parameter_list|()
block|{     }
comment|/**      * Create a matcher that will be satisfied when given requests have a method      * matching the one provided as a parameter.      *      * @param method Method that requests must have for the matcher to be      *               satisfied.      * @return An instance of {@code Matcher}.      */
specifier|public
specifier|static
name|Matcher
name|matchesMethod
parameter_list|(
name|String
name|method
parameter_list|)
block|{
if|if
condition|(
name|method
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"method not provided"
argument_list|)
throw|;
block|}
return|return
operator|new
name|MethodMatcher
argument_list|(
name|method
argument_list|)
return|;
block|}
comment|/**      * Create a matcher that will be satisfied when given requests have a patch      * matching the pattern provided as a parameter.      *      * @param pattern The pattern to use when checking the requests given to the      *                matcher.      * @return An instance of {@code Matcher}.      */
specifier|public
specifier|static
name|Matcher
name|matchesPath
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
if|if
condition|(
name|pattern
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"pattern not provided"
argument_list|)
throw|;
block|}
return|return
operator|new
name|PathMatcher
argument_list|(
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Create a matcher that will be satisfied when the given requests satisfies      * every matcher provided as parameters. Calling this method is equivalent      * as checking every provided matcher individually and chaining each result      * as a short-circuit and.      *      * @param matchers The matchers that have to be satisfied for the returned      *                 matcher to be satisfied.      * @return An instance of {@code Matcher}.      */
specifier|public
specifier|static
name|Matcher
name|matchesAll
parameter_list|(
name|Matcher
modifier|...
name|matchers
parameter_list|)
block|{
if|if
condition|(
name|matchers
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"matchers not provided"
argument_list|)
throw|;
block|}
for|for
control|(
name|Matcher
name|matcher
range|:
name|matchers
control|)
block|{
if|if
condition|(
name|matcher
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"invalid matcher"
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|AllMatcher
argument_list|(
name|matchers
argument_list|)
return|;
block|}
comment|/**      * Create a matcher that will be satisifed when the given requests match the      * provided method and path.      *      * @param method The method that requests must have for the matcher to be      *               satisfied.      * @param path   The pattern to use when checking the requests given to the      *               matcher.      * @return An instance of {@code Matcher}.      */
specifier|public
specifier|static
name|Matcher
name|matchesRequest
parameter_list|(
name|String
name|method
parameter_list|,
name|String
name|path
parameter_list|)
block|{
return|return
name|matchesAll
argument_list|(
name|matchesMethod
argument_list|(
name|method
argument_list|)
argument_list|,
name|matchesPath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

