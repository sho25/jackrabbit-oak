begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Binary
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|BaseEncoding
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|ReferenceBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|SimpleReferenceBinary
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|RandomInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|OakFileDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|FileBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeStoreFixture
operator|.
name|DocumentFixture
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ReferenceBinaryIT
block|{
comment|//Taken from org.apache.jackrabbit.oak.plugins.segment.Segment
comment|//As SegmentStore inlines binary content with size less then MEDIUM_LIMIT
specifier|static
specifier|final
name|int
name|SMALL_LIMIT
init|=
literal|1
operator|<<
literal|7
decl_stmt|;
specifier|static
specifier|final
name|int
name|MEDIUM_LIMIT
init|=
operator|(
literal|1
operator|<<
operator|(
literal|16
operator|-
literal|2
operator|)
operator|)
operator|+
name|SMALL_LIMIT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|STREAM_LENGTH
init|=
name|MEDIUM_LIMIT
operator|+
literal|1000
decl_stmt|;
specifier|private
specifier|final
name|NodeStoreFixture
name|fixture
decl_stmt|;
specifier|private
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|private
name|Repository
name|repository
decl_stmt|;
specifier|public
name|ReferenceBinaryIT
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|this
operator|.
name|fixture
operator|=
name|fixture
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nodeStore
operator|=
name|fixture
operator|.
name|createNodeStore
argument_list|()
expr_stmt|;
name|repository
operator|=
operator|new
name|Jcr
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
block|}
comment|/**      * Taken from org.apache.jackrabbit.core.value.ReferenceBinaryTest      * @throws Exception      */
annotation|@
name|Test
specifier|public
name|void
name|testReferenceBinaryExchangeWithSharedRepository
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|firstSession
init|=
name|createAdminSession
argument_list|()
decl_stmt|;
comment|// create a binary
name|Binary
name|b
init|=
name|firstSession
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createBinary
argument_list|(
operator|new
name|RandomInputStream
argument_list|(
literal|1
argument_list|,
name|STREAM_LENGTH
argument_list|)
argument_list|)
decl_stmt|;
name|ReferenceBinary
name|referenceBinary
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|b
operator|instanceof
name|ReferenceBinary
condition|)
block|{
name|referenceBinary
operator|=
operator|(
name|ReferenceBinary
operator|)
name|b
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|referenceBinary
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|referenceBinary
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
comment|// in the current test the message is exchanged via repository which is shared as well
comment|// put the reference message value in a property on a node
name|String
name|newNode
init|=
literal|"sample_"
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
name|firstSession
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|newNode
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"reference"
argument_list|,
name|referenceBinary
operator|.
name|getReference
argument_list|()
argument_list|)
expr_stmt|;
comment|// save the first session
name|firstSession
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// get a second session over the same repository / ds
name|Session
name|secondSession
init|=
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// read the binary referenced by the referencing binary
name|String
name|reference
init|=
name|secondSession
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
name|newNode
argument_list|)
operator|.
name|getProperty
argument_list|(
literal|"reference"
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
name|ReferenceBinary
name|ref
init|=
operator|new
name|SimpleReferenceBinary
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|b
argument_list|,
name|secondSession
operator|.
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
name|ref
argument_list|)
operator|.
name|getBinary
argument_list|()
argument_list|)
expr_stmt|;
name|safeLogout
argument_list|(
name|firstSession
argument_list|)
expr_stmt|;
name|safeLogout
argument_list|(
name|secondSession
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|repository
operator|instanceof
name|JackrabbitRepository
condition|)
block|{
operator|(
operator|(
name|JackrabbitRepository
operator|)
name|repository
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|fixture
operator|.
name|dispose
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|file
init|=
name|getTestDir
argument_list|(
literal|"tar"
argument_list|)
decl_stmt|;
name|SegmentStore
name|segmentStore
init|=
operator|new
name|FileStore
argument_list|(
name|createBlobStore
argument_list|()
argument_list|,
name|file
argument_list|,
literal|266
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeStoreFixture
operator|.
name|SegmentFixture
name|segmentFixture
init|=
operator|new
name|NodeStoreFixture
operator|.
name|SegmentFixture
argument_list|(
name|segmentStore
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentFixture
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|segmentFixture
block|}
argument_list|)
expr_stmt|;
block|}
name|FileBlobStore
name|fbs
init|=
operator|new
name|FileBlobStore
argument_list|(
name|getTestDir
argument_list|(
literal|"fbs1"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|fbs
operator|.
name|setReferenceKeyPlainText
argument_list|(
literal|"foobar"
argument_list|)
expr_stmt|;
name|SegmentStore
name|segmentStoreWithFBS
init|=
operator|new
name|FileStore
argument_list|(
name|fbs
argument_list|,
name|getTestDir
argument_list|(
literal|"tar2"
argument_list|)
argument_list|,
literal|266
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|NodeStoreFixture
operator|.
name|SegmentFixture
name|segmentFixtureFBS
init|=
operator|new
name|NodeStoreFixture
operator|.
name|SegmentFixture
argument_list|(
name|segmentStoreWithFBS
argument_list|)
decl_stmt|;
if|if
condition|(
name|segmentFixtureFBS
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|segmentFixtureFBS
block|}
argument_list|)
expr_stmt|;
block|}
name|DocumentFixture
name|documentFixture
init|=
operator|new
name|DocumentFixture
argument_list|(
name|DocumentFixture
operator|.
name|DEFAULT_URI
argument_list|,
literal|false
argument_list|,
name|createBlobStore
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentFixture
operator|.
name|isAvailable
argument_list|()
condition|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|documentFixture
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|fixtures
return|;
block|}
specifier|private
specifier|static
name|BlobStore
name|createBlobStore
parameter_list|()
block|{
name|File
name|file
init|=
name|getTestDir
argument_list|(
literal|"datastore"
argument_list|)
decl_stmt|;
name|OakFileDataStore
name|fds
init|=
operator|new
name|OakFileDataStore
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
operator|new
name|Random
argument_list|()
operator|.
name|nextBytes
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|fds
operator|.
name|setReferenceKeyEncoded
argument_list|(
name|BaseEncoding
operator|.
name|base64
argument_list|()
operator|.
name|encode
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|fds
operator|.
name|setMinRecordLength
argument_list|(
literal|4092
argument_list|)
expr_stmt|;
name|fds
operator|.
name|init
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|DataStoreBlobStore
argument_list|(
name|fds
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|File
name|getTestDir
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
operator|new
name|File
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|,
name|prefix
operator|+
literal|"."
operator|+
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Session
name|createAdminSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
return|return
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|safeLogout
parameter_list|(
name|Session
name|session
parameter_list|)
block|{
try|try
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{}
block|}
block|}
end_class

end_unit

