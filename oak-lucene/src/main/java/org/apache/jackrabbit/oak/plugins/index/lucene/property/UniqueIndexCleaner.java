begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|property
operator|.
name|HybridPropertyIndexUtil
operator|.
name|PROP_CREATED
import|;
end_import

begin_class
class|class
name|UniqueIndexCleaner
block|{
specifier|private
specifier|final
name|long
name|createTimeMarginMillis
decl_stmt|;
specifier|public
name|UniqueIndexCleaner
parameter_list|(
name|TimeUnit
name|timeUnit
parameter_list|,
name|long
name|createTimeMargin
parameter_list|)
block|{
name|this
operator|.
name|createTimeMarginMillis
operator|=
name|timeUnit
operator|.
name|toMillis
argument_list|(
name|createTimeMargin
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|clean
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|long
name|lastIndexedTo
parameter_list|)
block|{
name|int
name|removalCount
init|=
literal|0
decl_stmt|;
name|NodeState
name|baseState
init|=
name|builder
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|e
range|:
name|baseState
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|long
name|entryCreationTime
init|=
name|e
operator|.
name|getNodeState
argument_list|()
operator|.
name|getLong
argument_list|(
name|PROP_CREATED
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryCovered
argument_list|(
name|entryCreationTime
argument_list|,
name|lastIndexedTo
argument_list|)
condition|)
block|{
name|builder
operator|.
name|child
argument_list|(
name|e
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|removalCount
operator|++
expr_stmt|;
block|}
block|}
return|return
name|removalCount
return|;
block|}
specifier|private
name|boolean
name|entryCovered
parameter_list|(
name|long
name|entryCreationTime
parameter_list|,
name|long
name|lastIndexedTo
parameter_list|)
block|{
comment|//Would be safer to add some margin as entryCreationTime as recorded
comment|//is not same as actual commit time
return|return
operator|(
name|lastIndexedTo
operator|-
name|entryCreationTime
operator|)
operator|>=
name|createTimeMarginMillis
return|;
block|}
block|}
end_class

end_unit

