begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|blob
operator|.
name|BlobDownloadOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DataRecordDownloadOptionsTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_IMAGE_PNG
init|=
literal|"image/png"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MEDIA_TYPE_TEXT_PLAIN
init|=
literal|"text/plain"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHARACTER_ENCODING_UTF_8
init|=
literal|"utf-8"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|CHARACTER_ENCODING_ISO_8859_1
init|=
literal|"ISO-8859-1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME_IMAGE
init|=
literal|"amazing summer sunset.png"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENCODED_FILE_NAME_IMAGE
init|=
literal|"amazing%20summer%20sunset.png"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FILE_NAME_TEXT
init|=
literal|"journal_entry_01-01-2000.txt"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ENCODED_FILE_NAME_TEXT
init|=
name|FILE_NAME_TEXT
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISPOSITION_TYPE_INLINE
init|=
literal|"inline"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DISPOSITION_TYPE_ATTACHMENT
init|=
literal|"attachment"
decl_stmt|;
specifier|private
name|void
name|verifyDownloadOptions
parameter_list|(
name|DataRecordDownloadOptions
name|options
parameter_list|,
name|String
name|mediaType
parameter_list|,
name|String
name|characterEncoding
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|dispositionType
parameter_list|)
block|{
name|assertNotNull
argument_list|(
name|options
argument_list|)
expr_stmt|;
if|if
condition|(
literal|null
operator|!=
name|mediaType
condition|)
block|{
name|assertEquals
argument_list|(
name|mediaType
argument_list|,
name|options
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|options
operator|.
name|getMediaType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|characterEncoding
condition|)
block|{
name|assertEquals
argument_list|(
name|characterEncoding
argument_list|,
name|options
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|options
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|dispositionType
condition|)
block|{
name|assertEquals
argument_list|(
name|dispositionType
argument_list|,
name|options
operator|.
name|getDispositionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|DISPOSITION_TYPE_ATTACHMENT
argument_list|,
name|options
operator|.
name|getDispositionType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|null
operator|!=
name|fileName
condition|)
block|{
name|assertEquals
argument_list|(
name|fileName
argument_list|,
name|options
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertNull
argument_list|(
name|options
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyContentTypeHeader
parameter_list|(
name|DataRecordDownloadOptions
name|options
parameter_list|,
name|String
name|contentTypeHeader
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|contentTypeHeader
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|options
operator|.
name|getContentTypeHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|contentTypeHeader
argument_list|,
name|options
operator|.
name|getContentTypeHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|verifyContentDispositionHeader
parameter_list|(
name|DataRecordDownloadOptions
name|options
parameter_list|,
name|String
name|contentDispositionHeader
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|contentDispositionHeader
argument_list|)
condition|)
block|{
name|assertNull
argument_list|(
name|options
operator|.
name|getContentDispositionHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|contentDispositionHeader
argument_list|,
name|options
operator|.
name|getContentDispositionHeader
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|DataRecordDownloadOptions
name|getOptions
parameter_list|(
name|String
name|mediaType
parameter_list|,
name|String
name|characterEncoding
parameter_list|,
name|String
name|fileName
parameter_list|,
name|String
name|dispositionType
parameter_list|)
block|{
if|if
condition|(
literal|null
operator|==
name|dispositionType
condition|)
block|{
name|dispositionType
operator|=
name|DataRecordDownloadOptions
operator|.
name|DISPOSITION_TYPE_INLINE
expr_stmt|;
block|}
return|return
name|DataRecordDownloadOptions
operator|.
name|fromBlobDownloadOptions
argument_list|(
operator|new
name|BlobDownloadOptions
argument_list|(
name|mediaType
argument_list|,
name|characterEncoding
argument_list|,
name|fileName
argument_list|,
name|dispositionType
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|String
name|getContentTypeHeader
parameter_list|(
name|String
name|mediaType
parameter_list|,
name|String
name|characterEncoding
parameter_list|)
block|{
return|return
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|mediaType
argument_list|)
condition|?
literal|null
else|:
operator|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|characterEncoding
argument_list|)
condition|?
name|mediaType
else|:
name|Joiner
operator|.
name|on
argument_list|(
literal|"; charset="
argument_list|)
operator|.
name|join
argument_list|(
name|mediaType
argument_list|,
name|characterEncoding
argument_list|)
operator|)
return|;
block|}
specifier|private
name|String
name|getContentDispositionHeader
parameter_list|(
name|String
name|fileName
parameter_list|,
name|String
name|encodedFileName
parameter_list|,
name|String
name|dispositionType
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
if|if
condition|(
name|dispositionType
operator|.
name|equals
argument_list|(
name|DISPOSITION_TYPE_ATTACHMENT
argument_list|)
condition|)
block|{
return|return
name|DISPOSITION_TYPE_ATTACHMENT
return|;
block|}
return|return
literal|null
return|;
block|}
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|dispositionType
argument_list|)
condition|)
block|{
name|dispositionType
operator|=
name|DISPOSITION_TYPE_INLINE
expr_stmt|;
block|}
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%s; filename=\"%s\"; filename*=UTF-8''%s"
argument_list|,
name|dispositionType
argument_list|,
name|fileName
argument_list|,
name|encodedFileName
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstruct
parameter_list|()
block|{
name|BlobDownloadOptions
name|blobDownloadOptions
init|=
operator|new
name|BlobDownloadOptions
argument_list|(
name|MEDIA_TYPE_TEXT_PLAIN
argument_list|,
name|CHARACTER_ENCODING_UTF_8
argument_list|,
name|FILE_NAME_TEXT
argument_list|,
name|DISPOSITION_TYPE_ATTACHMENT
argument_list|)
decl_stmt|;
name|DataRecordDownloadOptions
name|options
init|=
name|DataRecordDownloadOptions
operator|.
name|fromBlobDownloadOptions
argument_list|(
name|blobDownloadOptions
argument_list|)
decl_stmt|;
name|verifyDownloadOptions
argument_list|(
name|options
argument_list|,
name|MEDIA_TYPE_TEXT_PLAIN
argument_list|,
name|CHARACTER_ENCODING_UTF_8
argument_list|,
name|FILE_NAME_TEXT
argument_list|,
name|DISPOSITION_TYPE_ATTACHMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefault
parameter_list|()
block|{
name|verifyDownloadOptions
argument_list|(
name|DataRecordDownloadOptions
operator|.
name|DEFAULT
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_TYPE_INLINE
argument_list|)
expr_stmt|;
name|verifyDownloadOptions
argument_list|(
name|DataRecordDownloadOptions
operator|.
name|fromBlobDownloadOptions
argument_list|(
name|BlobDownloadOptions
operator|.
name|DEFAULT
argument_list|)
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_TYPE_INLINE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testConstructFromNullThrowsException
parameter_list|()
block|{
try|try
block|{
name|DataRecordDownloadOptions
operator|.
name|fromBlobDownloadOptions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NullPointerException
decl||
name|IllegalArgumentException
name|e
parameter_list|)
block|{ }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentTypeHeader
parameter_list|()
block|{
for|for
control|(
name|String
name|mediaType
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|MEDIA_TYPE_TEXT_PLAIN
argument_list|,
name|MEDIA_TYPE_IMAGE_PNG
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|characterEncoding
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|CHARACTER_ENCODING_UTF_8
argument_list|,
name|CHARACTER_ENCODING_ISO_8859_1
argument_list|)
control|)
block|{
name|verifyContentTypeHeader
argument_list|(
name|getOptions
argument_list|(
name|mediaType
argument_list|,
name|characterEncoding
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|getContentTypeHeader
argument_list|(
name|mediaType
argument_list|,
name|characterEncoding
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentTypeHeaderWithNoCharacterEncoding
parameter_list|()
block|{
name|verifyContentTypeHeader
argument_list|(
name|getOptions
argument_list|(
name|MEDIA_TYPE_IMAGE_PNG
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
name|MEDIA_TYPE_IMAGE_PNG
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentTypeHeaderWithNoMediaType
parameter_list|()
block|{
name|verifyContentTypeHeader
argument_list|(
name|getOptions
argument_list|(
literal|null
argument_list|,
name|CHARACTER_ENCODING_ISO_8859_1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentTypeHeaderWithNoMediaTypeOrCharacterEncoding
parameter_list|()
block|{
name|verifyContentTypeHeader
argument_list|(
name|getOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentDisposition
parameter_list|()
block|{
for|for
control|(
name|String
name|fileName
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|FILE_NAME_IMAGE
argument_list|,
name|FILE_NAME_TEXT
argument_list|)
control|)
block|{
for|for
control|(
name|String
name|dispositionType
range|:
name|Lists
operator|.
name|newArrayList
argument_list|(
name|DISPOSITION_TYPE_INLINE
argument_list|,
name|DISPOSITION_TYPE_ATTACHMENT
argument_list|)
control|)
block|{
name|verifyContentDispositionHeader
argument_list|(
name|getOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|fileName
argument_list|,
name|dispositionType
argument_list|)
argument_list|,
name|getContentDispositionHeader
argument_list|(
name|fileName
argument_list|,
name|fileName
operator|.
name|equals
argument_list|(
name|FILE_NAME_IMAGE
argument_list|)
condition|?
name|ENCODED_FILE_NAME_IMAGE
else|:
name|ENCODED_FILE_NAME_TEXT
argument_list|,
name|dispositionType
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentDispositionWithNoDispositionType
parameter_list|()
block|{
comment|// Ensures that the default disposition type is "inline"
name|verifyContentDispositionHeader
argument_list|(
name|getOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|FILE_NAME_IMAGE
argument_list|,
literal|null
argument_list|)
argument_list|,
name|getContentDispositionHeader
argument_list|(
name|FILE_NAME_IMAGE
argument_list|,
name|ENCODED_FILE_NAME_IMAGE
argument_list|,
name|DISPOSITION_TYPE_INLINE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentDispositionWithNoFileName
parameter_list|()
block|{
name|verifyContentDispositionHeader
argument_list|(
name|getOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_TYPE_INLINE
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|verifyContentDispositionHeader
argument_list|(
name|getOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|DISPOSITION_TYPE_ATTACHMENT
argument_list|)
argument_list|,
name|DISPOSITION_TYPE_ATTACHMENT
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetContentDispositionWithNoDispositionTypeOrFileName
parameter_list|()
block|{
name|verifyContentDispositionHeader
argument_list|(
name|getOptions
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

