begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|InvalidItemStateException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@code PrivilegeManager} implementation reading from and storing privileges  * into the repository.  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeManagerImpl
extends|extends
name|ReadOnlyPrivilegeManager
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PrivilegeManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ContentSession
name|contentSession
decl_stmt|;
specifier|public
name|PrivilegeManagerImpl
parameter_list|(
name|Root
name|root
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|,
name|ContentSession
name|contentSession
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentSession
operator|=
name|contentSession
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
name|registerPrivilege
parameter_list|(
name|String
name|privilegeName
parameter_list|,
name|boolean
name|isAbstract
parameter_list|,
name|String
index|[]
name|declaredAggregateNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|root
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|InvalidItemStateException
argument_list|(
literal|"Attempt to register a new privilege while there are pending changes."
argument_list|)
throw|;
block|}
if|if
condition|(
name|privilegeName
operator|==
literal|null
operator|||
name|privilegeName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
throw|;
block|}
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|privilegeName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NamespaceException
argument_list|(
literal|"Invalid privilege name "
operator|+
name|privilegeName
argument_list|)
throw|;
block|}
name|PrivilegeDefinition
name|definition
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|oakName
argument_list|,
name|isAbstract
argument_list|,
name|getOakNames
argument_list|(
name|declaredAggregateNames
argument_list|)
argument_list|)
decl_stmt|;
name|PrivilegeDefinitionWriter
name|writer
init|=
operator|new
name|PrivilegeDefinitionWriter
argument_list|(
name|contentSession
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|writeDefinition
argument_list|(
name|definition
argument_list|)
expr_stmt|;
comment|// refresh the current root to make sure the definition is visible
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
return|return
name|getPrivilege
argument_list|(
name|definition
argument_list|)
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getOakNames
parameter_list|(
name|String
index|[]
name|jcrNames
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|oakNames
decl_stmt|;
if|if
condition|(
name|jcrNames
operator|==
literal|null
operator|||
name|jcrNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|oakNames
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|oakNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|jcrNames
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|jcrName
range|:
name|jcrNames
control|)
block|{
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|jcrName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oakName
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Invalid name "
operator|+
name|jcrName
argument_list|)
throw|;
block|}
name|oakNames
operator|.
name|add
argument_list|(
name|oakName
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|oakNames
return|;
block|}
block|}
end_class

end_unit

