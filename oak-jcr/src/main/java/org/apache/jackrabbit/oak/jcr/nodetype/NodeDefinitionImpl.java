begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|nodetype
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_class
class|class
name|NodeDefinitionImpl
extends|extends
name|ItemDefinitionImpl
implements|implements
name|NodeDefinition
block|{
specifier|private
specifier|final
name|NodeTypeManager
name|manager
decl_stmt|;
specifier|private
specifier|final
name|NodeDefinitionDelegate
name|dlg
decl_stmt|;
specifier|protected
name|NodeDefinitionImpl
parameter_list|(
name|NodeTypeManager
name|manager
parameter_list|,
name|NodeType
name|type
parameter_list|,
name|NameMapper
name|mapper
parameter_list|,
name|NodeDefinitionDelegate
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|mapper
argument_list|,
name|delegate
argument_list|)
expr_stmt|;
name|this
operator|.
name|manager
operator|=
name|manager
expr_stmt|;
name|this
operator|.
name|dlg
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
index|[]
name|getRequiredPrimaryTypes
parameter_list|()
block|{
name|String
index|[]
name|names
init|=
name|getRequiredPrimaryTypeNames
argument_list|()
decl_stmt|;
name|NodeType
index|[]
name|types
init|=
operator|new
name|NodeType
index|[
name|names
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|types
index|[
name|i
index|]
operator|=
name|manager
operator|.
name|getNodeType
argument_list|(
name|names
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Inconsistent node definition: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
return|return
name|types
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getRequiredPrimaryTypeNames
parameter_list|()
block|{
name|String
index|[]
name|requiredPrimaryTypeNames
init|=
name|dlg
operator|.
name|getRequiredPrimaryTypeNames
argument_list|()
decl_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|requiredPrimaryTypeNames
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|result
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|result
index|[
name|i
index|]
operator|=
name|mapper
operator|.
name|getJcrName
argument_list|(
name|requiredPrimaryTypeNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeType
name|getDefaultPrimaryType
parameter_list|()
block|{
try|try
block|{
name|String
name|defaultName
init|=
name|getDefaultPrimaryTypeName
argument_list|()
decl_stmt|;
return|return
name|defaultName
operator|==
literal|null
condition|?
literal|null
else|:
name|manager
operator|.
name|getNodeType
argument_list|(
name|getDefaultPrimaryTypeName
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Inconsistent node definition: "
operator|+
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultPrimaryTypeName
parameter_list|()
block|{
name|String
name|defaultPrimaryTypeName
init|=
name|dlg
operator|.
name|getDefaultPrimaryTypeName
argument_list|()
decl_stmt|;
return|return
name|defaultPrimaryTypeName
operator|==
literal|null
condition|?
literal|null
else|:
name|mapper
operator|.
name|getJcrName
argument_list|(
name|defaultPrimaryTypeName
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|allowsSameNameSiblings
parameter_list|()
block|{
return|return
name|dlg
operator|.
name|allowsSameNameSiblings
argument_list|()
return|;
block|}
block|}
end_class

end_unit

