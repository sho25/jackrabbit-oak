begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|client
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|BoundedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|ChunkedInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|ChunkedOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|EOFException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|Socket
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLEncoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Executes commands as HTTP requests.  *<p>  * This class is NOT thread-safe: its execute() method should operate within a  * lock, which must be held if a result input stream is returned UNTIL this  * stream is consumed or closed.  */
end_comment

begin_class
class|class
name|HttpExecutor
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Socket
name|socket
decl_stmt|;
specifier|private
name|InputStream
name|socketIn
decl_stmt|;
specifier|private
name|OutputStream
name|socketOut
decl_stmt|;
specifier|private
specifier|final
name|ChunkedOutputStream
name|bodyOut
init|=
operator|new
name|ChunkedOutputStream
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ChunkedInputStream
name|bodyIn
init|=
operator|new
name|ChunkedInputStream
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|connectionClosed
decl_stmt|;
comment|/**      * Create a new instance of this class.      *       * @param socket socket      */
specifier|public
name|HttpExecutor
parameter_list|(
name|Socket
name|socket
parameter_list|)
block|{
name|this
operator|.
name|socket
operator|=
name|socket
expr_stmt|;
block|}
comment|/**      * Execute a request.      *       * @param command command to execute      * @param params arguments to command      * @param in bytes to pass      * @return result input stream      *       * @throws IOException if an I/O error occurs      */
specifier|public
name|InputStream
name|execute
parameter_list|(
name|String
name|command
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
comment|// send request
if|if
condition|(
name|socketOut
operator|==
literal|null
condition|)
block|{
name|socketOut
operator|=
operator|new
name|BufferedOutputStream
argument_list|(
name|socket
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|contentType
init|=
literal|"application/x-www-form-urlencoded"
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|contentType
operator|=
literal|"multipart/form-data"
expr_stmt|;
block|}
name|writeLine
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"POST /%s HTTP/1.1"
argument_list|,
name|command
argument_list|)
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Content-Type: %s"
argument_list|,
name|contentType
argument_list|)
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
literal|"Transfer-Encoding: chunked"
argument_list|)
expr_stmt|;
name|writeLine
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|bodyOut
operator|.
name|recycle
argument_list|(
name|socketOut
argument_list|)
expr_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
name|String
name|boundary
init|=
name|getBoundary
argument_list|()
decl_stmt|;
name|bodyOut
operator|.
name|write
argument_list|(
name|boundary
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|bodyOut
operator|.
name|write
argument_list|(
literal|"\r\n\r\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|bodyOut
argument_list|)
expr_stmt|;
name|bodyOut
operator|.
name|write
argument_list|(
literal|"\r\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|bodyOut
operator|.
name|write
argument_list|(
name|boundary
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|param
range|:
name|params
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|s
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s=%s&"
argument_list|,
name|URLEncoder
operator|.
name|encode
argument_list|(
name|param
operator|.
name|getKey
argument_list|()
argument_list|,
literal|"8859_1"
argument_list|)
argument_list|,
name|URLEncoder
operator|.
name|encode
argument_list|(
name|param
operator|.
name|getValue
argument_list|()
argument_list|,
literal|"8859_1"
argument_list|)
argument_list|)
decl_stmt|;
name|bodyOut
operator|.
name|write
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|bodyOut
operator|.
name|close
argument_list|()
expr_stmt|;
name|socketOut
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// read response
if|if
condition|(
name|socketIn
operator|==
literal|null
condition|)
block|{
name|socketIn
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|socket
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|responseLine
init|=
name|readLine
argument_list|(
name|socketIn
argument_list|)
decl_stmt|;
name|String
index|[]
name|parts
init|=
name|responseLine
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Malformed HTTP response line: %s"
argument_list|,
name|responseLine
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|int
name|statusCode
decl_stmt|;
try|try
block|{
name|statusCode
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parts
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Malformed HTTP response line: %s"
argument_list|,
name|responseLine
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|headers
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|String
name|headerLine
init|=
name|readLine
argument_list|(
name|socketIn
argument_list|)
decl_stmt|;
if|if
condition|(
name|headerLine
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|parts
operator|=
name|headerLine
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
expr_stmt|;
if|if
condition|(
name|parts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|headers
operator|.
name|put
argument_list|(
name|parts
index|[
literal|0
index|]
operator|.
name|trim
argument_list|()
argument_list|,
name|parts
index|[
literal|1
index|]
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|InputStream
name|reqIn
decl_stmt|;
name|String
name|encoding
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"Transfer-Encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"chunked"
operator|.
name|equalsIgnoreCase
argument_list|(
name|encoding
argument_list|)
condition|)
block|{
name|bodyIn
operator|.
name|recycle
argument_list|(
name|socketIn
argument_list|)
expr_stmt|;
name|reqIn
operator|=
name|bodyIn
expr_stmt|;
block|}
else|else
block|{
name|int
name|contentLength
init|=
operator|-
literal|1
decl_stmt|;
name|String
name|s
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"Content-Length"
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|contentLength
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
comment|/* ignore */
block|}
block|}
if|if
condition|(
name|contentLength
operator|==
operator|-
literal|1
condition|)
block|{
name|contentLength
operator|=
literal|0
expr_stmt|;
block|}
name|reqIn
operator|=
operator|new
name|BoundedInputStream
argument_list|(
name|socketIn
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
block|}
name|String
name|connectionState
init|=
name|headers
operator|.
name|get
argument_list|(
literal|"Connection"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"close"
operator|.
name|equalsIgnoreCase
argument_list|(
name|connectionState
argument_list|)
condition|)
block|{
name|connectionClosed
operator|=
literal|true
expr_stmt|;
block|}
switch|switch
condition|(
name|statusCode
condition|)
block|{
case|case
literal|200
case|:
return|return
name|reqIn
return|;
case|case
literal|500
case|:
try|try
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|readLine
argument_list|(
name|reqIn
argument_list|)
argument_list|)
throw|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|reqIn
argument_list|)
expr_stmt|;
block|}
default|default:
name|String
name|msg
init|=
name|String
operator|.
name|format
argument_list|(
literal|"HTTP request failed with status code: %d"
argument_list|,
name|statusCode
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
block|}
comment|/**      * Return a flag indicating whether the executor is alive.      *      * @return {@code true} if it is alive; {@code false} otherwise      */
specifier|public
name|boolean
name|isAlive
parameter_list|()
block|{
return|return
operator|!
name|connectionClosed
operator|&&
operator|!
name|socket
operator|.
name|isClosed
argument_list|()
return|;
block|}
comment|/**      * Close this executor.      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|socketOut
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|socketIn
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write a request header.      *       * @param s line      * @throws IOException if an I/O error occurs      */
specifier|private
name|void
name|writeLine
parameter_list|(
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
name|socketOut
operator|.
name|write
argument_list|(
name|s
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|socketOut
operator|.
name|write
argument_list|(
literal|"\r\n"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Read a single line, terminated by a CR LF combination from an input.      *       * @return line      * @throws IOException if an I/O error occurs      */
specifier|private
specifier|static
name|String
name|readLine
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|line
init|=
operator|new
name|StringBuilder
argument_list|(
literal|128
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|c
init|=
name|in
operator|.
name|read
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'\r'
case|:
comment|// swallow
break|break;
case|case
literal|'\n'
case|:
return|return
name|line
operator|.
name|toString
argument_list|()
return|;
case|case
operator|-
literal|1
case|:
throw|throw
operator|new
name|EOFException
argument_list|()
throw|;
default|default:
name|line
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Boundary.      */
specifier|private
specifier|static
name|String
name|boundary
decl_stmt|;
comment|/**      * Boundary characters.      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|BOUNDARY_CHARACTERS
init|=
literal|"-_1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
comment|/**      * Return a multipart boundary.      *       * @return boundary      */
specifier|private
specifier|static
name|String
name|getBoundary
parameter_list|()
block|{
if|if
condition|(
name|boundary
operator|==
literal|null
condition|)
block|{
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Random
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|BOUNDARY_CHARACTERS
index|[
name|random
operator|.
name|nextInt
argument_list|(
name|BOUNDARY_CHARACTERS
operator|.
name|length
argument_list|)
index|]
argument_list|)
expr_stmt|;
block|}
name|boundary
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"------ClientFormBoundary%s--"
argument_list|,
name|b
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|boundary
return|;
block|}
block|}
end_class

end_unit

