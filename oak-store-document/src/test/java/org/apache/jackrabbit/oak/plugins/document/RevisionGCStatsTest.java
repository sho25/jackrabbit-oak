begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ScheduledExecutorService
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Counter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Meter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|codahale
operator|.
name|metrics
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
operator|.
name|ExecutorCloser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|VersionGarbageCollector
operator|.
name|VersionGCStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|metric
operator|.
name|MetricStatisticsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|NANOSECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionGCStats
operator|.
name|RGC
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|RevisionGCStatsTest
block|{
specifier|private
name|ScheduledExecutorService
name|executor
init|=
name|newSingleThreadScheduledExecutor
argument_list|()
decl_stmt|;
specifier|private
name|MetricStatisticsProvider
name|statsProvider
init|=
operator|new
name|MetricStatisticsProvider
argument_list|(
name|getPlatformMBeanServer
argument_list|()
argument_list|,
name|executor
argument_list|)
decl_stmt|;
specifier|private
name|RevisionGCStats
name|stats
init|=
operator|new
name|RevisionGCStats
argument_list|(
name|statsProvider
argument_list|)
decl_stmt|;
annotation|@
name|After
specifier|public
name|void
name|shutDown
parameter_list|()
block|{
name|statsProvider
operator|.
name|close
argument_list|()
expr_stmt|;
operator|new
name|ExecutorCloser
argument_list|(
name|executor
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getReadDocCount
parameter_list|()
block|{
name|Meter
name|m
init|=
name|getMeter
argument_list|(
name|RevisionGCStats
operator|.
name|READ_DOC
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|m
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|stats
operator|.
name|documentRead
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|1
argument_list|,
name|m
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|1
argument_list|,
name|stats
operator|.
name|getReadDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDeletedDocCount
parameter_list|()
block|{
name|Meter
name|m
init|=
name|getMeter
argument_list|(
name|RevisionGCStats
operator|.
name|DELETE_DOC
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|m
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|stats
operator|.
name|documentsDeleted
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|m
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|stats
operator|.
name|getDeletedDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDeletedLeafDocCount
parameter_list|()
block|{
name|Meter
name|m
init|=
name|getMeter
argument_list|(
name|RevisionGCStats
operator|.
name|DELETE_LEAF_DOC
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|m
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|stats
operator|.
name|leafDocumentsDeleted
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|m
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|stats
operator|.
name|getDeletedLeafDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDeletedSplitDocCount
parameter_list|()
block|{
name|Meter
name|m
init|=
name|getMeter
argument_list|(
name|RevisionGCStats
operator|.
name|DELETE_SPLIT_DOC
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|m
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|stats
operator|.
name|splitDocumentsDeleted
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|m
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|stats
operator|.
name|getDeletedSplitDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDeletedIntSplitDocCount
parameter_list|()
block|{
name|Meter
name|m
init|=
name|getMeter
argument_list|(
name|RevisionGCStats
operator|.
name|DELETE_INT_SPLIT_DOC
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|m
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|stats
operator|.
name|intermediateSplitDocumentsDeleted
argument_list|(
literal|17
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|m
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|17
argument_list|,
name|stats
operator|.
name|getDeletedIntSplitDocCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getResetDeletedFlagCount
parameter_list|()
block|{
name|Meter
name|m
init|=
name|getMeter
argument_list|(
name|RevisionGCStats
operator|.
name|RESET_DELETED_FLAG
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|m
operator|.
name|getCount
argument_list|()
decl_stmt|;
name|stats
operator|.
name|deletedOnceFlagReset
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|1
argument_list|,
name|m
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|count
operator|+
literal|1
argument_list|,
name|stats
operator|.
name|getResetDeletedFlagCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|timers
parameter_list|()
block|{
name|VersionGCStats
name|vgcs
init|=
operator|new
name|VersionGCStats
argument_list|()
decl_stmt|;
name|vgcs
operator|.
name|collectDeletedDocsElapsed
operator|=
name|MILLISECONDS
operator|.
name|toMicros
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|vgcs
operator|.
name|checkDeletedDocsElapsed
operator|=
name|MILLISECONDS
operator|.
name|toMicros
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|vgcs
operator|.
name|deleteDeletedDocsElapsed
operator|=
name|MILLISECONDS
operator|.
name|toMicros
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|vgcs
operator|.
name|collectAndDeleteSplitDocsElapsed
operator|=
name|MILLISECONDS
operator|.
name|toMicros
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|vgcs
operator|.
name|sortDocIdsElapsed
operator|=
name|MILLISECONDS
operator|.
name|toMicros
argument_list|(
literal|11
argument_list|)
expr_stmt|;
name|vgcs
operator|.
name|updateResurrectedDocumentsElapsed
operator|=
name|MILLISECONDS
operator|.
name|toMicros
argument_list|(
literal|13
argument_list|)
expr_stmt|;
name|vgcs
operator|.
name|active
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|vgcs
operator|.
name|active
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
operator|<
literal|5
condition|)
block|{
comment|// busy wait
name|assertTrue
argument_list|(
name|vgcs
operator|.
name|active
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|vgcs
operator|.
name|active
operator|.
name|stop
argument_list|()
expr_stmt|;
name|stats
operator|.
name|finished
argument_list|(
name|vgcs
argument_list|)
expr_stmt|;
name|assertTimer
argument_list|(
name|vgcs
operator|.
name|active
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|RevisionGCStats
operator|.
name|ACTIVE_TIMER
argument_list|)
expr_stmt|;
name|assertTimer
argument_list|(
literal|2
argument_list|,
name|RevisionGCStats
operator|.
name|READ_DOC_TIMER
argument_list|)
expr_stmt|;
name|assertTimer
argument_list|(
literal|3
argument_list|,
name|RevisionGCStats
operator|.
name|CHECK_DELETED_TIMER
argument_list|)
expr_stmt|;
name|assertTimer
argument_list|(
literal|5
argument_list|,
name|RevisionGCStats
operator|.
name|DELETE_DOC_TIMER
argument_list|)
expr_stmt|;
name|assertTimer
argument_list|(
literal|7
argument_list|,
name|RevisionGCStats
operator|.
name|DELETE_SPLIT_DOC_TIMER
argument_list|)
expr_stmt|;
name|assertTimer
argument_list|(
literal|11
argument_list|,
name|RevisionGCStats
operator|.
name|SORT_IDS_TIMER
argument_list|)
expr_stmt|;
name|assertTimer
argument_list|(
literal|13
argument_list|,
name|RevisionGCStats
operator|.
name|RESET_DELETED_FLAG_TIMER
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|counters
parameter_list|()
block|{
name|Counter
name|counter
init|=
name|getCounter
argument_list|(
name|RevisionGCStats
operator|.
name|COUNTER
argument_list|)
decl_stmt|;
name|Counter
name|failureCounter
init|=
name|getCounter
argument_list|(
name|RevisionGCStats
operator|.
name|FAILURE_COUNTER
argument_list|)
decl_stmt|;
name|VersionGCStats
name|vgcs
init|=
operator|new
name|VersionGCStats
argument_list|()
decl_stmt|;
name|stats
operator|.
name|started
argument_list|()
expr_stmt|;
name|stats
operator|.
name|finished
argument_list|(
name|vgcs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|counter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|failureCounter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|vgcs
operator|.
name|success
operator|=
literal|false
expr_stmt|;
name|stats
operator|.
name|started
argument_list|()
expr_stmt|;
name|stats
operator|.
name|finished
argument_list|(
name|vgcs
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|counter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|failureCounter
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertTimer
parameter_list|(
name|long
name|expected
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
name|getTimer
argument_list|(
name|name
argument_list|)
operator|.
name|getSnapshot
argument_list|()
operator|.
name|getMax
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Timer
name|getTimer
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|statsProvider
operator|.
name|getRegistry
argument_list|()
operator|.
name|getTimers
argument_list|()
operator|.
name|get
argument_list|(
name|RGC
operator|+
literal|"."
operator|+
name|name
argument_list|)
return|;
block|}
specifier|private
name|Meter
name|getMeter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|statsProvider
operator|.
name|getRegistry
argument_list|()
operator|.
name|getMeters
argument_list|()
operator|.
name|get
argument_list|(
name|RGC
operator|+
literal|"."
operator|+
name|name
argument_list|)
return|;
block|}
specifier|private
name|Counter
name|getCounter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|statsProvider
operator|.
name|getRegistry
argument_list|()
operator|.
name|getCounters
argument_list|()
operator|.
name|get
argument_list|(
name|RGC
operator|+
literal|"."
operator|+
name|name
argument_list|)
return|;
block|}
block|}
end_class

end_unit

