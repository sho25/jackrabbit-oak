begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|store
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MalformedObjectNameException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|StandardMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|jmx
operator|.
name|ObservablePartnerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|CommunicationObserver
block|{
specifier|static
specifier|final
name|int
name|MAX_CLIENT_STATISTICS
init|=
literal|10
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommunicationObserver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CommunicationPartnerMBean
argument_list|>
name|partnerDetails
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|public
name|CommunicationObserver
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
name|void
name|unregisterCommunicationPartner
parameter_list|(
name|CommunicationPartnerMBean
name|m
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|unregisterMBean
argument_list|(
name|m
operator|.
name|getMBeanName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|registerCommunicationPartner
parameter_list|(
name|CommunicationPartnerMBean
name|m
parameter_list|)
throws|throws
name|Exception
block|{
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
operator|.
name|registerMBean
argument_list|(
operator|new
name|StandardMBean
argument_list|(
name|m
argument_list|,
name|ObservablePartnerMBean
operator|.
name|class
argument_list|)
argument_list|,
name|m
operator|.
name|getMBeanName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|safeUnregisterCommunicationPartner
parameter_list|(
name|CommunicationPartnerMBean
name|m
parameter_list|)
block|{
try|try
block|{
name|unregisterCommunicationPartner
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to unregister MBean for client %s"
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|safeRegisterCommunicationPartner
parameter_list|(
name|CommunicationPartnerMBean
name|m
parameter_list|)
block|{
try|try
block|{
name|registerCommunicationPartner
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Unable to register MBean for client %s"
argument_list|,
name|m
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unregister
parameter_list|()
block|{
for|for
control|(
name|CommunicationPartnerMBean
name|m
range|:
name|partnerDetails
operator|.
name|values
argument_list|()
control|)
block|{
name|safeUnregisterCommunicationPartner
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|gotMessageFrom
parameter_list|(
name|String
name|client
parameter_list|,
name|String
name|request
parameter_list|,
name|String
name|address
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|MalformedObjectNameException
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Message '{}' received from client {}"
argument_list|,
name|request
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|CommunicationPartnerMBean
name|m
init|=
name|partnerDetails
operator|.
name|get
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|boolean
name|register
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|m
operator|==
literal|null
condition|)
block|{
name|cleanUp
argument_list|()
expr_stmt|;
name|m
operator|=
operator|new
name|CommunicationPartnerMBean
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|m
operator|.
name|setRemoteAddress
argument_list|(
name|address
argument_list|)
expr_stmt|;
name|m
operator|.
name|setRemotePort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|register
operator|=
literal|true
expr_stmt|;
block|}
name|m
operator|.
name|setLastSeen
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|.
name|setLastRequest
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|partnerDetails
operator|.
name|put
argument_list|(
name|client
argument_list|,
name|m
argument_list|)
expr_stmt|;
if|if
condition|(
name|register
condition|)
block|{
name|safeRegisterCommunicationPartner
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|didSendSegmentBytes
parameter_list|(
name|String
name|client
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Segment with size {} sent to client {}"
argument_list|,
name|size
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|CommunicationPartnerMBean
name|m
init|=
name|partnerDetails
operator|.
name|get
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|m
operator|.
name|onSegmentSent
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|partnerDetails
operator|.
name|put
argument_list|(
name|client
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|didSendBinariesBytes
parameter_list|(
name|String
name|client
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Binary with size {} sent to client {}"
argument_list|,
name|size
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|CommunicationPartnerMBean
name|m
init|=
name|partnerDetails
operator|.
name|get
argument_list|(
name|client
argument_list|)
decl_stmt|;
name|m
operator|.
name|onBinarySent
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|partnerDetails
operator|.
name|put
argument_list|(
name|client
argument_list|,
name|m
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getID
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|private
name|void
name|cleanUp
parameter_list|()
block|{
while|while
condition|(
name|partnerDetails
operator|.
name|size
argument_list|()
operator|>=
name|MAX_CLIENT_STATISTICS
condition|)
block|{
name|CommunicationPartnerMBean
name|oldestEntry
init|=
name|oldestEntry
argument_list|()
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Housekeeping: Removing statistics for client "
operator|+
name|oldestEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|safeUnregisterCommunicationPartner
argument_list|(
name|oldestEntry
argument_list|)
expr_stmt|;
name|partnerDetails
operator|.
name|remove
argument_list|(
name|oldestEntry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|CommunicationPartnerMBean
name|oldestEntry
parameter_list|()
block|{
name|CommunicationPartnerMBean
name|ret
init|=
literal|null
decl_stmt|;
for|for
control|(
name|CommunicationPartnerMBean
name|m
range|:
name|partnerDetails
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|ret
operator|==
literal|null
operator|||
name|ret
operator|.
name|getLastSeen
argument_list|()
operator|.
name|after
argument_list|(
name|m
operator|.
name|getLastSeen
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|=
name|m
expr_stmt|;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
end_class

end_unit

