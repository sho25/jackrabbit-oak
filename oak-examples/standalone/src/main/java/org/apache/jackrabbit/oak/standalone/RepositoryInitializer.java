begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|standalone
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PostConstruct
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|PreDestroy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|connect
operator|.
name|launch
operator|.
name|PojoServiceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|osgi
operator|.
name|OakOSGiRepositoryFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|osgi
operator|.
name|ServiceRegistryProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleActivator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Autowired
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|beans
operator|.
name|factory
operator|.
name|annotation
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|boot
operator|.
name|ApplicationArguments
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Bean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|context
operator|.
name|annotation
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|ClassPathResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|springframework
operator|.
name|core
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_class
annotation|@
name|Configuration
specifier|public
class|class
name|RepositoryInitializer
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ARG_MONGO
init|=
literal|"mongo"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Autowired
specifier|private
name|ServletContext
name|servletContext
decl_stmt|;
specifier|private
name|Repository
name|repository
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"classpath:/repository-config.json"
argument_list|)
specifier|private
name|Resource
name|defaultRepoConfig
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${repo.home}"
argument_list|)
specifier|private
name|String
name|repoHome
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${oak.mongo.db}"
argument_list|)
specifier|private
name|String
name|mongoDbName
decl_stmt|;
annotation|@
name|Value
argument_list|(
literal|"${oak.mongo.uri}"
argument_list|)
specifier|private
name|String
name|mongouri
decl_stmt|;
annotation|@
name|Autowired
specifier|private
name|ApplicationArguments
name|args
decl_stmt|;
annotation|@
name|PostConstruct
specifier|public
name|void
name|initialize
parameter_list|()
throws|throws
name|Exception
block|{
name|initRepository
argument_list|()
expr_stmt|;
block|}
annotation|@
name|PreDestroy
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|repository
operator|instanceof
name|JackrabbitRepository
condition|)
block|{
operator|(
operator|(
name|JackrabbitRepository
operator|)
name|repository
operator|)
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Repository shutdown complete"
argument_list|)
expr_stmt|;
name|repository
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Bean
argument_list|(
name|name
operator|=
literal|"repository"
argument_list|)
specifier|public
name|Repository
name|getRepository
parameter_list|()
block|{
return|return
name|repository
return|;
block|}
annotation|@
name|Bean
specifier|public
name|PojoServiceRegistry
name|getServiceRegistry
parameter_list|()
block|{
return|return
operator|(
operator|(
name|ServiceRegistryProvider
operator|)
name|repository
operator|)
operator|.
name|getServiceRegistry
argument_list|()
return|;
block|}
specifier|private
name|void
name|initRepository
parameter_list|()
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
name|File
name|repoHomeDir
init|=
operator|new
name|File
argument_list|(
name|repoHome
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|repoHomeDir
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configFileNames
init|=
name|determineConfigFileNamesToCopy
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|configFilePaths
init|=
name|copyConfigs
argument_list|(
name|repoHomeDir
argument_list|,
name|configFileNames
argument_list|)
decl_stmt|;
name|repository
operator|=
name|createRepository
argument_list|(
name|configFilePaths
argument_list|,
name|repoHomeDir
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Repository
name|createRepository
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repoConfigs
parameter_list|,
name|File
name|repoHomeDir
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|config
operator|.
name|put
argument_list|(
name|OakOSGiRepositoryFactory
operator|.
name|REPOSITORY_HOME
argument_list|,
name|repoHomeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|OakOSGiRepositoryFactory
operator|.
name|REPOSITORY_CONFIG_FILE
argument_list|,
name|commaSepFilePaths
argument_list|(
name|repoConfigs
argument_list|)
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|OakOSGiRepositoryFactory
operator|.
name|REPOSITORY_SHUTDOWN_ON_TIMEOUT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|OakOSGiRepositoryFactory
operator|.
name|REPOSITORY_ENV_SPRING_BOOT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
name|OakOSGiRepositoryFactory
operator|.
name|REPOSITORY_TIMEOUT_IN_SECS
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"repo.home"
argument_list|,
name|repoHomeDir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"oak.mongo.db"
argument_list|,
name|mongoDbName
argument_list|)
expr_stmt|;
name|config
operator|.
name|put
argument_list|(
literal|"oak.mongo.uri"
argument_list|,
name|getMongoURI
argument_list|()
argument_list|)
expr_stmt|;
name|configureActivator
argument_list|(
name|config
argument_list|)
expr_stmt|;
return|return
operator|new
name|OakOSGiRepositoryFactory
argument_list|()
operator|.
name|getRepository
argument_list|(
name|config
argument_list|)
return|;
block|}
specifier|private
name|String
name|getMongoURI
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|mongoOpts
init|=
name|args
operator|.
name|getOptionValues
argument_list|(
name|ARG_MONGO
argument_list|)
decl_stmt|;
if|if
condition|(
name|mongoOpts
operator|!=
literal|null
operator|&&
operator|!
name|mongoOpts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mongoOpts
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
return|return
name|mongouri
return|;
block|}
specifier|private
name|Object
name|commaSepFilePaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|repoConfigs
parameter_list|)
block|{
return|return
name|Joiner
operator|.
name|on
argument_list|(
literal|","
argument_list|)
operator|.
name|join
argument_list|(
name|repoConfigs
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|copyConfigs
parameter_list|(
name|File
name|repoHomeDir
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|configFileNames
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|filePaths
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|configName
range|:
name|configFileNames
control|)
block|{
name|File
name|dest
init|=
operator|new
name|File
argument_list|(
name|repoHomeDir
argument_list|,
name|configName
argument_list|)
decl_stmt|;
name|Resource
name|source
init|=
operator|new
name|ClassPathResource
argument_list|(
literal|"config-templates/"
operator|+
name|configName
argument_list|)
decl_stmt|;
name|copyDefaultConfig
argument_list|(
name|dest
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|filePaths
operator|.
name|add
argument_list|(
name|dest
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|filePaths
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|determineConfigFileNamesToCopy
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|configNames
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|configNames
operator|.
name|add
argument_list|(
literal|"repository-config.json"
argument_list|)
expr_stmt|;
comment|//Mongo mode can be selected via --mongo
if|if
condition|(
name|args
operator|.
name|containsOption
argument_list|(
name|ARG_MONGO
argument_list|)
condition|)
block|{
name|configNames
operator|.
name|add
argument_list|(
literal|"mongomk-config.json"
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Using Mongo persistence"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|configNames
operator|.
name|add
argument_list|(
literal|"segmentmk-config.json"
argument_list|)
expr_stmt|;
block|}
return|return
name|configNames
return|;
block|}
specifier|private
name|void
name|copyDefaultConfig
parameter_list|(
name|File
name|repoConfig
parameter_list|,
name|Resource
name|defaultRepoConfig
parameter_list|)
throws|throws
name|IOException
throws|,
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|repoConfig
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Copying default repository config to {}"
argument_list|,
name|repoConfig
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|InputStream
name|in
init|=
name|defaultRepoConfig
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"No config file found in classpath "
operator|+
name|defaultRepoConfig
argument_list|)
throw|;
block|}
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|FileUtils
operator|.
name|openOutputStream
argument_list|(
name|repoConfig
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|os
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|configureActivator
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|config
parameter_list|)
block|{
name|config
operator|.
name|put
argument_list|(
name|BundleActivator
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
operator|new
name|BundleActivator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
throws|throws
name|Exception
block|{
name|servletContext
operator|.
name|setAttribute
argument_list|(
name|BundleContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|bundleContext
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|(
name|BundleContext
name|bundleContext
parameter_list|)
throws|throws
name|Exception
block|{
name|servletContext
operator|.
name|removeAttribute
argument_list|(
name|BundleContext
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

