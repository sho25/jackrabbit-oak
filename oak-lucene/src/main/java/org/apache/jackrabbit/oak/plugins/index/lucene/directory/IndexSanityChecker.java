begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|directory
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|store
operator|.
name|Directory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Checks that all files in local which are present in remote have same file length.  * If there is a size mismatch in any one of the file then whole of local index content  * would be purged  */
end_comment

begin_class
specifier|public
class|class
name|IndexSanityChecker
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Directory
name|local
decl_stmt|;
specifier|private
specifier|final
name|Directory
name|remote
decl_stmt|;
specifier|private
specifier|final
name|String
name|indexPath
decl_stmt|;
specifier|private
name|int
name|localFileCount
decl_stmt|;
specifier|private
name|int
name|remoteFileCount
decl_stmt|;
specifier|private
name|long
name|localDirSize
decl_stmt|;
specifier|private
name|long
name|remoteDirSize
decl_stmt|;
specifier|public
name|IndexSanityChecker
parameter_list|(
name|String
name|indexPath
parameter_list|,
name|Directory
name|local
parameter_list|,
name|Directory
name|remote
parameter_list|)
block|{
name|this
operator|.
name|local
operator|=
name|local
expr_stmt|;
name|this
operator|.
name|remote
operator|=
name|remote
expr_stmt|;
name|this
operator|.
name|indexPath
operator|=
name|indexPath
expr_stmt|;
block|}
specifier|public
name|boolean
name|check
parameter_list|()
throws|throws
name|IOException
block|{
name|boolean
name|allFine
init|=
literal|true
decl_stmt|;
comment|//TODO Add support for checksum based checks
if|if
condition|(
name|isThereASizeMismatch
argument_list|()
condition|)
block|{
comment|//In case of any mismatch just purge all local files
name|deleteAllFiles
argument_list|(
name|local
argument_list|)
expr_stmt|;
name|allFine
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
comment|//Remove local files which are not found in remote
for|for
control|(
name|String
name|fileName
range|:
name|local
operator|.
name|listAll
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|remote
operator|.
name|fileExists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|local
operator|.
name|deleteFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|allFine
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Local index directory content found to be valid for index [{}]. "
operator|+
literal|"Stats Local: {} files ({}), Remote: {} files ({})"
argument_list|,
name|indexPath
argument_list|,
name|localFileCount
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|localDirSize
argument_list|)
argument_list|,
name|remoteFileCount
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|remoteDirSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Local index directory content were not found to be in sync with remote for index [{}]. "
operator|+
literal|"Local directory content has been purged and would be synced again from remote"
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
block|}
return|return
name|allFine
return|;
block|}
specifier|private
name|boolean
name|isThereASizeMismatch
parameter_list|()
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|fileName
range|:
name|remote
operator|.
name|listAll
argument_list|()
control|)
block|{
name|long
name|localLength
init|=
name|DirectoryUtils
operator|.
name|getFileLength
argument_list|(
name|local
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|long
name|remoteLength
init|=
name|remote
operator|.
name|fileLength
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|//This is a weak check based on length.
if|if
condition|(
name|localLength
operator|>
literal|0
operator|&&
name|localLength
operator|!=
name|remoteLength
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"[{}] Found local copy for {} in {} but size of local {} differs from remote {}. "
argument_list|,
name|indexPath
argument_list|,
name|fileName
argument_list|,
name|local
argument_list|,
name|localLength
argument_list|,
name|remoteLength
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|localLength
operator|>
literal|0
condition|)
block|{
name|localDirSize
operator|+=
name|localLength
expr_stmt|;
name|localFileCount
operator|++
expr_stmt|;
block|}
name|remoteDirSize
operator|+=
name|remoteLength
expr_stmt|;
name|remoteFileCount
operator|++
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|deleteAllFiles
parameter_list|(
name|Directory
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
for|for
control|(
name|String
name|fileName
range|:
name|dir
operator|.
name|listAll
argument_list|()
control|)
block|{
name|dir
operator|.
name|deleteFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

