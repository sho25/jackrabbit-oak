begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
operator|.
name|REP_GLOB
import|;
end_import

begin_class
specifier|final
class|class
name|TestUtility
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TestUtility
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|TestUtility
parameter_list|()
block|{}
annotation|@
name|NotNull
specifier|static
name|ACL
name|getApplicablePolicy
parameter_list|(
annotation|@
name|NotNull
name|AccessControlManager
name|acMgr
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlPolicyIterator
name|itr
init|=
name|acMgr
operator|.
name|getApplicablePolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|itr
operator|.
name|hasNext
argument_list|()
condition|)
block|{
return|return
operator|(
name|ACL
operator|)
name|itr
operator|.
name|nextAccessControlPolicy
argument_list|()
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"No applicable policy found."
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
specifier|static
name|ACL
name|setupPolicy
parameter_list|(
annotation|@
name|NotNull
name|AccessControlManager
name|acMgr
parameter_list|,
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|testPrincipal
parameter_list|,
annotation|@
name|NotNull
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|,
annotation|@
name|Nullable
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|ACL
name|policy
init|=
name|getApplicablePolicy
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|policy
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|policy
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
name|isAllow
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
expr_stmt|;
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|path
argument_list|,
name|policy
argument_list|)
expr_stmt|;
return|return
name|policy
return|;
block|}
annotation|@
name|NotNull
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|getGlobRestriction
parameter_list|(
annotation|@
name|NotNull
name|String
name|value
parameter_list|,
annotation|@
name|NotNull
name|ValueFactory
name|valueFactory
parameter_list|)
block|{
return|return
name|ImmutableMap
operator|.
name|of
argument_list|(
name|REP_GLOB
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

