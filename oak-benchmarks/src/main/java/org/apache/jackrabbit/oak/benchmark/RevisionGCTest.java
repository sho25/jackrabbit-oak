begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|JcrCreator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|OakRepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|RepositoryFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_comment
comment|/**  * A benchmark to run RevisionGC.  */
end_comment

begin_class
specifier|public
class|class
name|RevisionGCTest
extends|extends
name|Benchmark
block|{
specifier|protected
specifier|static
specifier|final
name|float
name|GARBAGE_RATIO
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"garbageRatio"
argument_list|,
literal|"0.5"
argument_list|)
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|NODE_TYPE
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"nodeType"
argument_list|,
literal|"nt:unstructured"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|int
name|SCALE
init|=
name|AbstractTest
operator|.
name|getScale
argument_list|(
literal|100
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
name|Iterable
argument_list|<
name|RepositoryFixture
argument_list|>
name|fixtures
parameter_list|)
block|{
for|for
control|(
name|RepositoryFixture
name|fixture
range|:
name|fixtures
control|)
block|{
if|if
condition|(
name|fixture
operator|.
name|isAvailable
argument_list|(
literal|1
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s: RevisionGC benchmark%n"
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|AtomicReference
argument_list|<
name|Oak
argument_list|>
name|whiteboardRef
init|=
operator|new
name|AtomicReference
argument_list|<
name|Oak
argument_list|>
argument_list|()
decl_stmt|;
name|Repository
index|[]
name|cluster
decl_stmt|;
if|if
condition|(
name|fixture
operator|instanceof
name|OakRepositoryFixture
condition|)
block|{
name|cluster
operator|=
operator|(
operator|(
name|OakRepositoryFixture
operator|)
name|fixture
operator|)
operator|.
name|setUpCluster
argument_list|(
literal|1
argument_list|,
operator|new
name|JcrCreator
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Jcr
name|customize
parameter_list|(
name|Oak
name|oak
parameter_list|)
block|{
name|whiteboardRef
operator|.
name|set
argument_list|(
name|oak
argument_list|)
expr_stmt|;
return|return
operator|new
name|Jcr
argument_list|(
name|oak
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|format
argument_list|(
literal|"%s: RevisionGC benchmark only runs on Oak%n"
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|run
argument_list|(
name|cluster
index|[
literal|0
index|]
argument_list|,
name|getNodeStore
argument_list|(
name|whiteboardRef
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fixture
operator|.
name|tearDownCluster
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|run
parameter_list|(
name|Repository
name|repository
parameter_list|,
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|Exception
block|{
name|Session
name|s
init|=
name|createSession
argument_list|(
name|repository
argument_list|)
decl_stmt|;
name|Random
name|rand
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"Creating garbage "
argument_list|)
expr_stmt|;
name|String
name|longPathName
init|=
literal|"0123456789"
decl_stmt|;
name|int
name|depth
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"RevisionGCTest.PATHDEPTH"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Node
name|p
init|=
name|s
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
while|while
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|depth
operator|-=
literal|1
expr_stmt|;
name|p
operator|=
name|p
operator|.
name|addNode
argument_list|(
name|longPathName
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Creating garbage in "
operator|+
name|p
operator|.
name|getPath
argument_list|()
operator|+
literal|" ("
operator|+
name|p
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|" chars)"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|SCALE
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|p
operator|.
name|addNode
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|1000
condition|;
name|j
operator|++
control|)
block|{
name|n
operator|.
name|addNode
argument_list|(
literal|"child-"
operator|+
name|j
argument_list|,
name|NODE_TYPE
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|rand
operator|.
name|nextFloat
argument_list|()
operator|<=
name|GARBAGE_RATIO
condition|)
block|{
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Running RevisionGC"
argument_list|)
expr_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|String
name|result
init|=
name|revisionGC
argument_list|(
name|nodeStore
argument_list|)
decl_stmt|;
name|sw
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Performed RevisionGC in "
operator|+
name|sw
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
specifier|static
name|String
name|revisionGC
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|nodeStore
operator|instanceof
name|DocumentNodeStore
condition|)
block|{
return|return
operator|(
operator|(
name|DocumentNodeStore
operator|)
name|nodeStore
operator|)
operator|.
name|getVersionGarbageCollector
argument_list|()
operator|.
name|gc
argument_list|(
literal|0
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown node store: "
operator|+
name|nodeStore
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|protected
specifier|static
name|NodeStore
name|getNodeStore
parameter_list|(
name|Oak
name|oak
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|Oak
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"store"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|NodeStore
operator|)
name|f
operator|.
name|get
argument_list|(
name|oak
argument_list|)
return|;
block|}
specifier|protected
specifier|static
name|Session
name|createSession
parameter_list|(
name|Repository
name|repository
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
name|repository
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

