begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
package|;
end_package

begin_comment
comment|/**  * A utility class to time an operation.  */
end_comment

begin_class
specifier|public
class|class
name|StopWatch
block|{
specifier|private
specifier|static
specifier|final
name|long
name|NANOS_PER_SECOND
init|=
literal|1000
operator|*
literal|1000
operator|*
literal|1000
decl_stmt|;
specifier|private
name|long
name|start
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|private
name|long
name|lastLog
init|=
name|start
decl_stmt|;
specifier|public
name|long
name|time
parameter_list|()
block|{
return|return
name|System
operator|.
name|nanoTime
argument_list|()
operator|-
name|start
return|;
block|}
specifier|public
name|String
name|seconds
parameter_list|()
block|{
name|double
name|s
init|=
operator|(
name|double
operator|)
name|time
argument_list|()
operator|/
name|NANOS_PER_SECOND
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.2f seconds"
argument_list|,
name|s
argument_list|)
return|;
block|}
specifier|public
name|String
name|operationsPerSecond
parameter_list|(
name|int
name|operations
parameter_list|)
block|{
name|long
name|t
init|=
name|time
argument_list|()
decl_stmt|;
name|double
name|s
init|=
operator|(
name|double
operator|)
name|t
operator|/
name|NANOS_PER_SECOND
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|0
condition|)
block|{
name|t
operator|=
literal|1
expr_stmt|;
block|}
name|int
name|ops
init|=
call|(
name|int
call|)
argument_list|(
name|operations
operator|*
name|NANOS_PER_SECOND
operator|/
name|t
argument_list|)
decl_stmt|;
return|return
name|String
operator|.
name|format
argument_list|(
literal|"%.2f seconds (%d ops; %d op/s)"
argument_list|,
name|s
argument_list|,
name|operations
argument_list|,
name|ops
argument_list|)
return|;
block|}
comment|/**      * Returns true once 5 seconds.      *      * @return true once every 5 seconds      */
specifier|public
name|boolean
name|log
parameter_list|()
block|{
name|long
name|t
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|t
operator|-
name|lastLog
operator|>
literal|5
operator|*
name|NANOS_PER_SECOND
condition|)
block|{
name|lastLog
operator|=
name|t
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|start
operator|=
name|System
operator|.
name|nanoTime
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

