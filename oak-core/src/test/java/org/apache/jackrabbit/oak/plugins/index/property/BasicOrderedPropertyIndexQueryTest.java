begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|OrderedIndex
operator|.
name|OrderDirection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|AbstractQueryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BasicOrderedPropertyIndexQueryTest
extends|extends
name|AbstractQueryTest
block|{
comment|/**      * the property used by the index      */
specifier|public
specifier|static
specifier|final
name|String
name|ORDERED_PROPERTY
init|=
literal|"foo"
decl_stmt|;
comment|/**      * number of nodes to create for testing.      *       * It has been found during development that in some cases the order of the nodes creation      * within the persistence where the actual expected order.      *       * The higher the value the lower the chance for this to happen.      */
specifier|protected
specifier|static
specifier|final
name|int
name|NUMBER_OF_NODES
init|=
literal|50
decl_stmt|;
comment|/**      * generate a list of values to be used as ordered set. Will return something like      * {@code value000, value001, value002, ...}      *       *       * @param amount      * @param direction the direction of the sorting      * @return a list of {@code amount} values ordered as specified by {@code direction}      */
specifier|protected
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|generateOrderedValues
parameter_list|(
name|int
name|amount
parameter_list|,
name|OrderDirection
name|direction
parameter_list|)
block|{
if|if
condition|(
name|amount
operator|>
literal|1000
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"amount cannot be greater than 1000"
argument_list|)
throw|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|values
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
name|amount
argument_list|)
decl_stmt|;
name|NumberFormat
name|nf
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"000"
argument_list|)
decl_stmt|;
if|if
condition|(
name|OrderDirection
operator|.
name|DESC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
name|amount
init|;
name|i
operator|>
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"value%s"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|amount
condition|;
name|i
operator|++
control|)
block|{
name|values
operator|.
name|add
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"value%s"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|nf
operator|.
name|format
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|values
return|;
block|}
comment|/**      * as {@code generateOrderedValues(int, OrderDirection)} by forcing OrderDirection.ASC      *       * @param amount      * @return      */
specifier|protected
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|generateOrderedValues
parameter_list|(
name|int
name|amount
parameter_list|)
block|{
return|return
name|generateOrderedValues
argument_list|(
name|amount
argument_list|,
name|OrderDirection
operator|.
name|ASC
argument_list|)
return|;
block|}
comment|/**      * create a child node for the provided father      *       * @param father      * @param name      *            the name of the node to create      * @param propName      *            the name of the property to assign      * @param propValue      *            the value of the property to assign      * @return      */
specifier|static
name|Tree
name|child
parameter_list|(
name|Tree
name|father
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|propName
parameter_list|,
name|String
name|propValue
parameter_list|)
block|{
name|Tree
name|child
init|=
name|father
operator|.
name|addChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|LowCostOrderedPropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OrderedPropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
comment|/**      * convenience method that adds a bunch of nodes in random order and return the order in which      * they should be presented by the OrderedIndex      *       * @param values the values of the property that will be indexed      * @param father the father under which add the nodes      * @param direction the direction of the items to be added.      * @return      */
specifier|protected
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|addChildNodes
parameter_list|(
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|values
parameter_list|,
specifier|final
name|Tree
name|father
parameter_list|,
name|OrderDirection
name|direction
parameter_list|)
block|{
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|nodes
init|=
operator|new
name|ArrayList
argument_list|<
name|ValuePathTuple
argument_list|>
argument_list|()
decl_stmt|;
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|v
init|=
name|values
operator|.
name|remove
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|t
init|=
name|child
argument_list|(
name|father
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"n%s"
argument_list|,
name|counter
operator|++
argument_list|)
argument_list|,
name|ORDERED_PROPERTY
argument_list|,
name|v
argument_list|)
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|ValuePathTuple
argument_list|(
name|v
argument_list|,
name|t
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|OrderDirection
operator|.
name|DESC
operator|.
name|equals
argument_list|(
name|direction
argument_list|)
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|,
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
comment|/**      * assert the right order of the returned resultset      *       * @param orderedSequence the right order in which the resultset should be returned      * @param resultset the resultset      */
specifier|protected
name|void
name|assertRightOrder
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|List
argument_list|<
name|ValuePathTuple
argument_list|>
name|orderedSequence
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|ResultRow
argument_list|>
name|resultset
parameter_list|)
block|{
name|assertTrue
argument_list|(
literal|"No results returned"
argument_list|,
name|resultset
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|resultset
operator|.
name|hasNext
argument_list|()
operator|&&
name|counter
operator|<
name|orderedSequence
operator|.
name|size
argument_list|()
condition|)
block|{
name|ResultRow
name|row
init|=
name|resultset
operator|.
name|next
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Wrong path at the element '%d'"
argument_list|,
name|counter
argument_list|)
argument_list|,
name|orderedSequence
operator|.
name|get
argument_list|(
name|counter
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

