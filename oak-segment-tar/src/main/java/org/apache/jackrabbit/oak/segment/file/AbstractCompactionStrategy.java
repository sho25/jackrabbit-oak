begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION_FORCE_COMPACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCStatus
operator|.
name|COMPACTION_RETRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|EXPEDITE_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|CheckpointCompactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
operator|.
name|GCType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|cancel
operator|.
name|Cancellation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|cancel
operator|.
name|Canceller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|GCGeneration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
specifier|abstract
class|class
name|AbstractCompactionStrategy
implements|implements
name|CompactionStrategy
block|{
specifier|abstract
name|GCType
name|getCompactionType
parameter_list|()
function_decl|;
specifier|abstract
name|GCGeneration
name|nextGeneration
parameter_list|(
name|GCGeneration
name|current
parameter_list|)
function_decl|;
specifier|private
name|CompactionResult
name|compactionSucceeded
parameter_list|(
name|Context
name|context
parameter_list|,
name|GCGeneration
name|generation
parameter_list|,
name|RecordId
name|compactedRootId
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|compactionSucceeded
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|CompactionResult
operator|.
name|succeeded
argument_list|(
name|getCompactionType
argument_list|()
argument_list|,
name|generation
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|,
name|compactedRootId
argument_list|,
name|context
operator|.
name|getGCCount
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|GCGeneration
name|getGcGeneration
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|SegmentNodeState
name|getHead
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getSegmentReader
argument_list|()
operator|.
name|readHeadState
argument_list|(
name|context
operator|.
name|getRevisions
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|long
name|size
parameter_list|(
name|Context
name|context
parameter_list|)
block|{
return|return
name|context
operator|.
name|getTarFiles
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|CompactionResult
name|compactionAborted
parameter_list|(
name|Context
name|context
parameter_list|,
name|GCGeneration
name|generation
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|compactionFailed
argument_list|(
name|generation
argument_list|)
expr_stmt|;
return|return
name|CompactionResult
operator|.
name|aborted
argument_list|(
name|getGcGeneration
argument_list|(
name|context
argument_list|)
argument_list|,
name|generation
argument_list|,
name|context
operator|.
name|getGCCount
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SegmentNodeState
name|forceCompact
parameter_list|(
name|Context
name|context
parameter_list|,
name|NodeState
name|base
parameter_list|,
name|NodeState
name|onto
parameter_list|,
name|CheckpointCompactor
name|compactor
parameter_list|,
name|Canceller
name|canceller
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|RecordId
name|compactedId
init|=
name|setHead
argument_list|(
name|context
argument_list|,
name|headId
lambda|->
block|{
try|try
block|{
name|PrintableStopwatch
name|t
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|base
argument_list|,
name|context
operator|.
name|getSegmentReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
name|onto
argument_list|,
name|canceller
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
return|return
name|after
operator|.
name|getRecordId
argument_list|()
return|;
block|}
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction cancelled after {}"
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|error
argument_list|(
literal|"error during forced compaction."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|compactedId
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|context
operator|.
name|getSegmentReader
argument_list|()
operator|.
name|readNode
argument_list|(
name|compactedId
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|RecordId
name|setHead
parameter_list|(
name|Context
name|context
parameter_list|,
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|f
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|setHead
argument_list|(
name|f
argument_list|,
name|timeout
argument_list|(
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getForceTimeout
argument_list|()
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|formatCompactionType
parameter_list|(
name|GCType
name|compactionType
parameter_list|)
block|{
switch|switch
condition|(
name|compactionType
condition|)
block|{
case|case
name|FULL
case|:
return|return
literal|"full"
return|;
case|case
name|TAIL
case|:
return|return
literal|"tail"
return|;
default|default:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"unsupported compaction type: "
operator|+
name|compactionType
argument_list|)
throw|;
block|}
block|}
specifier|final
name|CompactionResult
name|compact
parameter_list|(
name|Context
name|context
parameter_list|,
name|NodeState
name|base
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"running {} compaction"
argument_list|,
name|formatCompactionType
argument_list|(
name|getCompactionType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|GCGeneration
name|nextGeneration
init|=
name|nextGeneration
argument_list|(
name|getGcGeneration
argument_list|(
name|context
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|PrintableStopwatch
name|watch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction started, gc options={}, current generation={}, new generation={}"
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
argument_list|,
name|getHead
argument_list|(
name|context
argument_list|)
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegment
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
argument_list|,
name|nextGeneration
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|COMPACTION
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|GCJournal
operator|.
name|GCJournalEntry
name|gcEntry
init|=
name|context
operator|.
name|getGCJournal
argument_list|()
operator|.
name|read
argument_list|()
decl_stmt|;
name|long
name|initialSize
init|=
name|size
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SegmentWriter
name|writer
init|=
name|context
operator|.
name|getSegmentWriterFactory
argument_list|()
operator|.
name|newSegmentWriter
argument_list|(
name|nextGeneration
argument_list|)
decl_stmt|;
name|context
operator|.
name|getCompactionMonitor
argument_list|()
operator|.
name|init
argument_list|(
name|gcEntry
operator|.
name|getRepoSize
argument_list|()
argument_list|,
name|gcEntry
operator|.
name|getNodes
argument_list|()
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|Canceller
name|compactionCanceller
init|=
name|context
operator|.
name|getCanceller
argument_list|()
operator|.
name|withShortCircuit
argument_list|()
decl_stmt|;
name|CheckpointCompactor
name|compactor
init|=
operator|new
name|CheckpointCompactor
argument_list|(
name|context
operator|.
name|getGCListener
argument_list|()
argument_list|,
name|context
operator|.
name|getSegmentReader
argument_list|()
argument_list|,
name|writer
argument_list|,
name|context
operator|.
name|getBlobStore
argument_list|()
argument_list|,
name|context
operator|.
name|getCompactionMonitor
argument_list|()
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|head
init|=
name|getHead
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|compacted
init|=
name|compactor
operator|.
name|compact
argument_list|(
name|base
argument_list|,
name|head
argument_list|,
name|base
argument_list|,
name|compactionCanceller
argument_list|)
decl_stmt|;
if|if
condition|(
name|compacted
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction cancelled: {}."
argument_list|,
name|compactionCanceller
operator|.
name|check
argument_list|()
operator|.
name|getReason
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"unknown reason"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|nextGeneration
argument_list|)
return|;
block|}
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction cycle 0 completed in {}. Compacted {} to {}"
argument_list|,
name|watch
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cycles
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|SegmentNodeState
name|previousHead
init|=
name|head
decl_stmt|;
while|while
condition|(
name|cycles
operator|<
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getRetryCount
argument_list|()
operator|&&
operator|!
operator|(
name|success
operator|=
name|context
operator|.
name|getRevisions
argument_list|()
operator|.
name|setHead
argument_list|(
name|previousHead
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|EXPEDITE_OPTION
argument_list|)
operator|)
condition|)
block|{
comment|// Some other concurrent changes have been made.
comment|// Rebase (and compact) those changes on top of the
comment|// compacted state before retrying to set the head.
name|cycles
operator|++
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction detected concurrent commits while compacting. "
operator|+
literal|"Compacting these commits. Cycle {} of {}"
argument_list|,
name|cycles
argument_list|,
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getRetryCount
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|COMPACTION_RETRY
operator|.
name|message
argument_list|()
operator|+
name|cycles
argument_list|)
expr_stmt|;
name|PrintableStopwatch
name|cycleWatch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|head
operator|=
name|getHead
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|compacted
operator|=
name|compactor
operator|.
name|compact
argument_list|(
name|previousHead
argument_list|,
name|head
argument_list|,
name|compacted
argument_list|,
name|compactionCanceller
argument_list|)
expr_stmt|;
if|if
condition|(
name|compacted
operator|==
literal|null
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction cancelled: {}."
argument_list|,
name|compactionCanceller
operator|.
name|check
argument_list|()
operator|.
name|getReason
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"unknown reason"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|nextGeneration
argument_list|)
return|;
block|}
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction cycle {} completed in {}. Compacted {} against {} to {}"
argument_list|,
name|cycles
argument_list|,
name|cycleWatch
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|previousHead
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|previousHead
operator|=
name|head
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction gave up compacting concurrent commits after {} cycles."
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
name|int
name|forceTimeout
init|=
name|context
operator|.
name|getGCOptions
argument_list|()
operator|.
name|getForceTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|forceTimeout
operator|>
literal|0
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"trying to force compact remaining commits for {} seconds. "
operator|+
literal|"Concurrent commits to the store will be blocked."
argument_list|,
name|forceTimeout
argument_list|)
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|updateStatus
argument_list|(
name|COMPACTION_FORCE_COMPACT
operator|.
name|message
argument_list|()
argument_list|)
expr_stmt|;
name|PrintableStopwatch
name|forceWatch
init|=
name|PrintableStopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|cycles
operator|++
expr_stmt|;
name|Canceller
name|forcedCompactionCanceller
init|=
name|compactionCanceller
operator|.
name|withTimeout
argument_list|(
literal|"forced compaction timeout exceeded"
argument_list|,
name|forceTimeout
argument_list|,
name|SECONDS
argument_list|)
operator|.
name|withShortCircuit
argument_list|()
decl_stmt|;
name|compacted
operator|=
name|forceCompact
argument_list|(
name|context
argument_list|,
name|previousHead
argument_list|,
name|compacted
argument_list|,
name|compactor
argument_list|,
name|forcedCompactionCanceller
argument_list|)
expr_stmt|;
name|success
operator|=
name|compacted
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction succeeded to force compact remaining commits after {}."
argument_list|,
name|forceWatch
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Cancellation
name|cancellation
init|=
name|forcedCompactionCanceller
operator|.
name|check
argument_list|()
decl_stmt|;
if|if
condition|(
name|cancellation
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction failed to force compact remaining commits "
operator|+
literal|"after {}. Compaction was cancelled: {}."
argument_list|,
name|forceWatch
argument_list|,
name|cancellation
operator|.
name|getReason
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"unknown reason"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|warn
argument_list|(
literal|"compaction failed to force compact remaining commits. "
operator|+
literal|"after {}. Could not acquire exclusive access to the node store."
argument_list|,
name|forceWatch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|success
condition|)
block|{
comment|// Update type of the last compaction before calling methods that could throw an exception.
name|context
operator|.
name|getSuccessfulCompactionListener
argument_list|()
operator|.
name|onSuccessfulCompaction
argument_list|(
name|getCompactionType
argument_list|()
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|context
operator|.
name|getFlusher
argument_list|()
operator|.
name|flush
argument_list|()
expr_stmt|;
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction succeeded in {}, after {} cycles"
argument_list|,
name|watch
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
name|compactionSucceeded
argument_list|(
name|context
argument_list|,
name|nextGeneration
argument_list|,
name|compacted
operator|.
name|getRecordId
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|info
argument_list|(
literal|"compaction failed after {}, and {} cycles"
argument_list|,
name|watch
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|nextGeneration
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|error
argument_list|(
literal|"compaction interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|nextGeneration
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|context
operator|.
name|getGCListener
argument_list|()
operator|.
name|error
argument_list|(
literal|"compaction encountered an error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|compactionAborted
argument_list|(
name|context
argument_list|,
name|nextGeneration
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

