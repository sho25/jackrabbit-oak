begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|stats
package|;
end_package

begin_comment
comment|/**  * Statistics on core repository operations  *   */
end_comment

begin_interface
specifier|public
interface|interface
name|RepositoryStatistics
block|{
comment|/**      * The values of this enum determine the type of the time      * series returned by {@link #getTimeSeries(Type)}      * and link {@link #getTimeSeries(String, boolean)}.      */
enum|enum
name|Type
block|{
name|BUNDLE_READ_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
name|BUNDLE_WRITE_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
name|BUNDLE_WRITE_DURATION
argument_list|(
literal|true
argument_list|)
block|,
name|BUNDLE_WRITE_AVERAGE
argument_list|(
literal|false
argument_list|)
block|,
name|BUNDLE_CACHE_ACCESS_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
name|BUNDLE_CACHE_SIZE_COUNTER
argument_list|(
literal|false
argument_list|)
block|,
name|BUNDLE_CACHE_MISS_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
name|BUNDLE_CACHE_MISS_DURATION
argument_list|(
literal|true
argument_list|)
block|,
name|BUNDLE_CACHE_MISS_AVERAGE
argument_list|(
literal|false
argument_list|)
block|,
name|BUNDLE_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
name|BUNDLE_WS_SIZE_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Number of read accesses through any session.          */
name|SESSION_READ_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Total time spent reading from sessions in nano seconds.          */
name|SESSION_READ_DURATION
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Average time spent reading from sessions in nano seconds.          * This is the sum of all read durations divided by the number          * of reads in the respective time period.          */
name|SESSION_READ_AVERAGE
argument_list|(
literal|false
argument_list|)
block|,
comment|/**          * Number of write accesses through any session.          */
name|SESSION_WRITE_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Total time spent writing to sessions in nano seconds.          */
name|SESSION_WRITE_DURATION
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Average time spent writing to sessions in nano seconds.          * This is the sum of all write durations divided by the number          * of writes in the respective time period.          */
name|SESSION_WRITE_AVERAGE
argument_list|(
literal|false
argument_list|)
block|,
comment|/**          * Number of calls sessions that have been logged in.          */
name|SESSION_LOGIN_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Number of currently logged in sessions.          */
name|SESSION_COUNT
argument_list|(
literal|false
argument_list|)
block|,
comment|/**          * Number of queries executed.          */
name|QUERY_COUNT
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Total time spent evaluating queries in milli seconds.          */
name|QUERY_DURATION
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Average time spent evaluating queries in milli seconds.          * This is the sum of all query durations divided by the number          * of queries in the respective time period.          */
name|QUERY_AVERAGE
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Total number of observation {@code Event} instances delivered          * to all observation listeners.          */
name|OBSERVATION_EVENT_COUNTER
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Total time spent processing observation events by all observation          * listeners in nano seconds.          */
name|OBSERVATION_EVENT_DURATION
argument_list|(
literal|true
argument_list|)
block|,
comment|/**          * Average time spent processing observation events by all observation          * listeners in nano seconds.          * This is the sum of all observation durations divided by the number          * of observation events in the respective time period.          */
name|OBSERVATION_EVENT_AVERAGE
argument_list|(
literal|true
argument_list|)
block|;
specifier|private
specifier|final
name|boolean
name|resetValueEachSecond
decl_stmt|;
name|Type
parameter_list|(
specifier|final
name|boolean
name|resetValueEachSecond
parameter_list|)
block|{
name|this
operator|.
name|resetValueEachSecond
operator|=
name|resetValueEachSecond
expr_stmt|;
block|}
specifier|public
specifier|static
name|Type
name|getType
parameter_list|(
name|String
name|type
parameter_list|)
block|{
name|Type
name|realType
init|=
literal|null
decl_stmt|;
try|try
block|{
name|realType
operator|=
name|valueOf
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ignore
parameter_list|)
block|{}
return|return
name|realType
return|;
block|}
specifier|public
name|boolean
name|isResetValueEachSecond
parameter_list|()
block|{
return|return
name|resetValueEachSecond
return|;
block|}
block|}
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|Type
name|type
parameter_list|)
function_decl|;
name|TimeSeries
name|getTimeSeries
parameter_list|(
name|String
name|type
parameter_list|,
name|boolean
name|resetValueEachSecond
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

