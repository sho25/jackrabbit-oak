begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|azure
operator|.
name|blobstorage
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|Instant
import|;
end_import

begin_import
import|import
name|java
operator|.
name|time
operator|.
name|temporal
operator|.
name|ChronoUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|HttpsURLConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|AbstractDataRecordAccessProviderTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|ConfigurableDataRecordAccessProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUpload
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|directaccess
operator|.
name|DataRecordUploadException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|AzureDataRecordAccessProviderTest
extends|extends
name|AbstractDataRecordAccessProviderTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|TemporaryFolder
name|homeDir
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|AzureDataStore
name|dataStore
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setupDataStore
parameter_list|()
throws|throws
name|Exception
block|{
name|dataStore
operator|=
name|AzureDataStoreUtils
operator|.
name|setupDirectAccessDataStore
argument_list|(
name|homeDir
argument_list|,
name|expirySeconds
argument_list|,
name|expirySeconds
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|AzureDataStore
name|createDataStore
parameter_list|(
annotation|@
name|NotNull
name|Properties
name|properties
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|AzureDataStoreUtils
operator|.
name|setupDirectAccessDataStore
argument_list|(
name|homeDir
argument_list|,
name|expirySeconds
argument_list|,
name|expirySeconds
argument_list|,
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurableDataRecordAccessProvider
name|getDataStore
parameter_list|()
block|{
return|return
name|dataStore
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ConfigurableDataRecordAccessProvider
name|getDataStore
parameter_list|(
annotation|@
name|NotNull
name|Properties
name|overrideProperties
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|createDataStore
argument_list|(
name|AzureDataStoreUtils
operator|.
name|getDirectAccessDataStoreProperties
argument_list|(
name|overrideProperties
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DataRecord
name|doGetRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
name|ds
operator|.
name|getRecord
argument_list|(
name|identifier
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|DataRecord
name|doSynchronousAddRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|InputStream
name|in
parameter_list|)
throws|throws
name|DataStoreException
block|{
return|return
operator|(
operator|(
name|AzureDataStore
operator|)
name|ds
operator|)
operator|.
name|addRecord
argument_list|(
name|in
argument_list|,
operator|new
name|BlobOptions
argument_list|()
operator|.
name|setUpload
argument_list|(
name|BlobOptions
operator|.
name|UploadType
operator|.
name|SYNCHRONOUS
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doDeleteRecord
parameter_list|(
name|DataStore
name|ds
parameter_list|,
name|DataIdentifier
name|identifier
parameter_list|)
throws|throws
name|DataStoreException
block|{
operator|(
operator|(
name|AzureDataStore
operator|)
name|ds
operator|)
operator|.
name|deleteRecord
argument_list|(
name|identifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getProviderMinPartSize
parameter_list|()
block|{
return|return
name|Math
operator|.
name|max
argument_list|(
literal|0L
argument_list|,
name|AzureBlobStoreBackend
operator|.
name|MIN_MULTIPART_UPLOAD_PART_SIZE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getProviderMaxPartSize
parameter_list|()
block|{
return|return
name|AzureBlobStoreBackend
operator|.
name|MAX_MULTIPART_UPLOAD_PART_SIZE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getProviderMaxSinglePutSize
parameter_list|()
block|{
return|return
name|AzureBlobStoreBackend
operator|.
name|MAX_SINGLE_PUT_UPLOAD_SIZE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|long
name|getProviderMaxBinaryUploadSize
parameter_list|()
block|{
return|return
name|AzureBlobStoreBackend
operator|.
name|MAX_BINARY_UPLOAD_SIZE
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isSinglePutURI
parameter_list|(
name|URI
name|uri
parameter_list|)
block|{
comment|// Since strictly speaking we don't support single-put for Azure due to the odd
comment|// required header for single-put uploads, we don't care and just always return true
comment|// here to avoid failing tests for this.
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|protected
name|HttpsURLConnection
name|getHttpsConnection
parameter_list|(
name|long
name|length
parameter_list|,
name|URI
name|uri
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|AzureDataStoreUtils
operator|.
name|getHttpsConnection
argument_list|(
name|length
argument_list|,
name|uri
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitDirectUploadURIHonorsExpiryTime
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
name|ConfigurableDataRecordAccessProvider
name|ds
init|=
name|getDataStore
argument_list|()
decl_stmt|;
try|try
block|{
name|Instant
name|now
init|=
name|Instant
operator|.
name|now
argument_list|()
operator|.
name|truncatedTo
argument_list|(
name|ChronoUnit
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
name|ds
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|DataRecordUpload
name|uploadContext
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|ONE_MB
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|URI
name|uploadURI
init|=
name|uploadContext
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
name|parseQueryString
argument_list|(
name|uploadURI
argument_list|)
decl_stmt|;
name|String
name|expiryDateStr
init|=
name|params
operator|.
name|get
argument_list|(
literal|"se"
argument_list|)
decl_stmt|;
name|Instant
name|expiry
init|=
name|Instant
operator|.
name|parse
argument_list|(
name|expiryDateStr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|now
argument_list|,
name|expiry
operator|.
name|minusSeconds
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ds
operator|.
name|setDirectUploadURIExpirySeconds
argument_list|(
name|expirySeconds
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInitiateDirectUploadUnlimitedURIs
parameter_list|()
throws|throws
name|DataRecordUploadException
block|{
name|ConfigurableDataRecordAccessProvider
name|ds
init|=
name|getDataStore
argument_list|()
decl_stmt|;
name|long
name|uploadSize
init|=
name|ONE_GB
operator|*
literal|100
decl_stmt|;
name|int
name|expectedNumURIs
init|=
literal|10000
decl_stmt|;
name|DataRecordUpload
name|upload
init|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|uploadSize
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedNumURIs
argument_list|,
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uploadSize
operator|=
name|ONE_GB
operator|*
literal|500
expr_stmt|;
name|expectedNumURIs
operator|=
literal|50000
expr_stmt|;
name|upload
operator|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|uploadSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumURIs
argument_list|,
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|uploadSize
operator|=
name|ONE_GB
operator|*
literal|1000
expr_stmt|;
comment|// expectedNumURIs still 50000, Azure limit
name|upload
operator|=
name|ds
operator|.
name|initiateDataRecordUpload
argument_list|(
name|uploadSize
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedNumURIs
argument_list|,
name|upload
operator|.
name|getUploadURIs
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

