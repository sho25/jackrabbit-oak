begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|proc
operator|.
name|Proc
operator|.
name|Backend
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
class|class
name|CommitNode
extends|extends
name|AbstractNode
block|{
specifier|private
specifier|final
name|Proc
operator|.
name|Backend
name|backend
decl_stmt|;
specifier|private
specifier|final
name|String
name|handle
decl_stmt|;
name|CommitNode
parameter_list|(
name|Proc
operator|.
name|Backend
name|backend
parameter_list|,
name|String
name|handle
parameter_list|)
block|{
name|this
operator|.
name|backend
operator|=
name|backend
expr_stmt|;
name|this
operator|.
name|handle
operator|=
name|handle
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|backend
operator|.
name|getCommit
argument_list|(
name|handle
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getProperties
argument_list|)
operator|.
name|orElse
argument_list|(
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
name|getProperties
parameter_list|(
name|Commit
name|entry
parameter_list|)
block|{
return|return
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"timestamp"
argument_list|,
name|entry
operator|.
name|getTimestamp
argument_list|()
argument_list|,
name|Type
operator|.
name|LONG
argument_list|)
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"revision"
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|()
block|{
return|return
name|backend
operator|.
name|getCommit
argument_list|(
name|handle
argument_list|)
operator|.
name|flatMap
argument_list|(
name|Proc
operator|.
name|Backend
operator|.
name|Commit
operator|::
name|getRoot
argument_list|)
operator|.
name|map
argument_list|(
name|r
lambda|->
name|singleton
argument_list|(
operator|new
name|MemoryChildNodeEntry
argument_list|(
literal|"root"
argument_list|,
name|r
argument_list|)
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|emptySet
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

