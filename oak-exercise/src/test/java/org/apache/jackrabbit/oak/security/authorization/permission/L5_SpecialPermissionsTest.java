begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Permission Evaluation)  * =============================================================================  *  * Title: Special Permissions  * -----------------------------------------------------------------------------  *  * Goal:  * So far exercises mostly dealt with regalar read/write privileges. After having  * completed this exercise you should a better understanding on permission  * evaluation for non-regular write operations.  *  * Exercises:  *  * - {@link #testVersioning()}  *   Performing version operations requires {@link Privilege#JCR_VERSION_MANAGEMENT}  *   to be granted at the target node. Use this test to verify this.  *  * - {@link #testReadVersionInformation()}  *   Testing read access to version storage at /jcr:system/jcr:versionStore  *   Use {@link #testVersioning()} again to take a closer look on how versions  *   and version-histories are being retrieved from the version store and how  *   the corresponding read-access is being evaluated.  *  *   Question: Can you explain what the difference is compared to Jackrabbit 2.x? (hint: oak-doc and jira)  *   Question: Can you identify cases where access to /jcr:system/jcr:versionstore explicitly needed to be granted?  *             If yes: explain why and the impact it may have from a security point of view.  *  * - {@link #testUserManagement()}  *   Fix the test case such that there is no privilege escalation from testUser  *   to the admin user :-)  *  * - {@link #testRepositoryLevelPrivileges()}  *   The following privileges need to be granted globally for the whole repository  *   as the associated operations also take effect on the whole repository.  *   In order to do so, you need to use the 'null' paths... verify in this test  *   that granting those privileges at 'childPath' does not have the desired effect.  *  *  * Additional Exercises:  * -----------------------------------------------------------------------------  *  * - Write additional test cases for the following privileges:  *   - {@link Privilege#JCR_READ_ACCESS_CONTROL}  *   - {@link Privilege#JCR_MODIFY_ACCESS_CONTROL}  *   - {@link Privilege#JCR_LOCK_MANAGEMENT}  *   - {@link org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants#REP_INDEX_DEFINITION_MANAGEMENT}  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link org.apache.jackrabbit.oak.security.privilege.L3_BuiltInPrivilegesTest#testMapItems()}  *  *</pre>  *  *  * @see org.apache.jackrabbit.oak.spi.security.privilege.PrivilegeConstants  * @see org.apache.jackrabbit.oak.spi.security.authorization.permission.Permissions  */
end_comment

begin_class
specifier|public
class|class
name|L5_SpecialPermissionsTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|User
name|testUser
decl_stmt|;
specifier|private
name|User
name|testUser2
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Principal
name|testGroupPrincipal
decl_stmt|;
specifier|private
name|Session
name|testSession
decl_stmt|;
specifier|private
name|String
name|childPath
decl_stmt|;
specifier|private
name|String
name|grandChildPath
decl_stmt|;
specifier|private
name|String
name|propertyPath
decl_stmt|;
specifier|private
name|String
name|childPropertyPath
decl_stmt|;
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Property
name|p
init|=
name|testRootNode
operator|.
name|setProperty
argument_list|(
name|propertyName1
argument_list|,
literal|"val"
argument_list|)
decl_stmt|;
name|propertyPath
operator|=
name|p
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Node
name|child
init|=
name|testRootNode
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
name|childPath
operator|=
name|child
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|p
operator|=
name|child
operator|.
name|setProperty
argument_list|(
name|propertyName2
argument_list|,
literal|"val"
argument_list|)
expr_stmt|;
name|childPropertyPath
operator|=
name|p
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|Node
name|grandChild
init|=
name|child
operator|.
name|addNode
argument_list|(
name|nodeName2
argument_list|)
decl_stmt|;
name|grandChildPath
operator|=
name|grandChild
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|testUser
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
name|testUser2
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
expr_stmt|;
name|Group
name|testGroup
init|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
decl_stmt|;
name|testGroup
operator|.
name|addMember
argument_list|(
name|testUser
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|testUser
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|testGroupPrincipal
operator|=
name|testGroup
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
if|if
condition|(
name|testSession
operator|!=
literal|null
operator|&&
name|testSession
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|testSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
name|UserManager
name|uMgr
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|testUser2
operator|!=
literal|null
condition|)
block|{
name|testUser2
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|Authorizable
name|testGroup
init|=
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|testGroupPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|removePolicies
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removePolicies
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlManager
name|acMgr
init|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|AccessControlPolicy
index|[]
name|policies
init|=
name|acMgr
operator|.
name|getPolicies
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlPolicy
name|plc
range|:
name|policies
control|)
block|{
if|if
condition|(
name|plc
operator|instanceof
name|JackrabbitAccessControlList
condition|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|path
argument_list|,
name|plc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Session
name|createTestSession
parameter_list|()
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|testSession
operator|==
literal|null
condition|)
block|{
name|testSession
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|ExerciseUtility
operator|.
name|getTestCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|testSession
return|;
block|}
specifier|public
name|void
name|testVersioning
parameter_list|()
throws|throws
name|Exception
block|{
comment|// EXERCISE: fix the test case
name|superuser
operator|.
name|getNode
argument_list|(
name|childPath
argument_list|)
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|getNode
argument_list|(
name|grandChildPath
argument_list|)
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|String
name|privName
init|=
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
decl_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|grandChildPath
argument_list|,
name|testGroupPrincipal
argument_list|,
operator|new
name|String
index|[]
block|{
name|privName
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Session
name|s
init|=
name|createTestSession
argument_list|()
decl_stmt|;
name|Node
name|n
init|=
name|s
operator|.
name|getNode
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|n
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|n
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|n
operator|=
name|s
operator|.
name|getNode
argument_list|(
name|grandChildPath
argument_list|)
expr_stmt|;
name|v
operator|=
name|n
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|n
operator|.
name|checkout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReadVersionInformation
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|childNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|childNode
operator|.
name|addMixin
argument_list|(
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|childNode
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|childNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
comment|// EXERCISE: uncomment the following permission setup and test the impact it has!
comment|// EXERCISE: discuss and explain your findings
comment|//        AccessControlUtils.addAccessControlEntry(superuser, "/jcr:system", testGroupPrincipal, new String[] {Privilege.JCR_READ}, false);
comment|//        paths.add("/jcr:system");
comment|//        superuser.save();
comment|//
name|Session
name|s
init|=
name|createTestSession
argument_list|()
decl_stmt|;
comment|// EXERCISE: uncomment to verify the permission setup is as expected
comment|//assertFalse(s.nodeExists(VersionConstants.VERSION_STORE_PATH));
name|VersionManager
name|versionManager
init|=
name|s
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|VersionHistory
name|vh
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
name|Version
name|rootVersion
init|=
name|vh
operator|.
name|getRootVersion
argument_list|()
decl_stmt|;
name|Version
name|baseVersion
init|=
name|versionManager
operator|.
name|getBaseVersion
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserManagement
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE: fix the permission setup and explain why!
comment|// grant full access to all users for 'testGroup'...
name|paths
operator|.
name|add
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|,
name|testGroupPrincipal
argument_list|,
operator|new
name|String
index|[]
block|{
name|Privilege
operator|.
name|JCR_ALL
block|}
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// ... but prevent the test user to write the admin user
name|String
name|adminPath
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|superuser
operator|.
name|getUserID
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|adminPath
argument_list|)
expr_stmt|;
name|AccessControlUtils
operator|.
name|addAccessControlEntry
argument_list|(
name|superuser
argument_list|,
name|adminPath
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
operator|new
name|String
index|[]
block|{
name|PrivilegeConstants
operator|.
name|REP_WRITE
block|}
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// execute the test verifying that pw of 'testUser2' can be change
comment|// but not the pw of the admin user
name|JackrabbitSession
name|s
init|=
operator|(
name|JackrabbitSession
operator|)
name|createTestSession
argument_list|()
decl_stmt|;
name|User
name|u2
init|=
name|s
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|testUser2
operator|.
name|getID
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|u2
operator|.
name|changePassword
argument_list|(
literal|"gugus"
argument_list|)
expr_stmt|;
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
name|User
name|admin
init|=
name|s
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|superuser
operator|.
name|getUserID
argument_list|()
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|admin
operator|.
name|changePassword
argument_list|(
literal|"gugus"
argument_list|)
expr_stmt|;
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"privilege escalation!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
name|s
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testRepositoryLevelPrivileges
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE : setup the permissions such that test-session can register a
comment|// - new namespace|node type|privilege (note: workspace management not yet supported)
comment|// EXERCISE: refactory the test to verify that granting these privs at 'childPath' doesn;t have the desired effect.
name|JackrabbitSession
name|s
init|=
operator|(
name|JackrabbitSession
operator|)
name|createTestSession
argument_list|()
decl_stmt|;
name|NamespaceRegistry
name|nsRegistry
init|=
name|s
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getNamespaceRegistry
argument_list|()
decl_stmt|;
name|nsRegistry
operator|.
name|registerNamespace
argument_list|(
literal|"jr"
argument_list|,
literal|"http://jackrabbit.apache.org"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

