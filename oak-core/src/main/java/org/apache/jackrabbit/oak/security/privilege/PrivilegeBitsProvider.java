begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Reads and writes privilege definitions from and to the repository content  * without applying any validation.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|PrivilegeBitsProvider
implements|implements
name|PrivilegeConstants
block|{
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|PrivilegeBits
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
name|bitsToNames
init|=
operator|new
name|HashMap
argument_list|<
name|PrivilegeBits
argument_list|,
name|Set
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|PrivilegeBits
name|next
decl_stmt|;
specifier|public
name|PrivilegeBitsProvider
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|!=
literal|null
operator|&&
name|privilegesTree
operator|.
name|hasProperty
argument_list|(
name|REP_NEXT
argument_list|)
condition|)
block|{
name|next
operator|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|privilegesTree
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|REP_USER_MANAGEMENT
argument_list|)
operator|.
name|nextBits
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Returns the root tree for all privilege definitions stored in the content      * repository.      *      * @return The privileges root.      */
annotation|@
name|CheckForNull
name|Tree
name|getPrivilegesTree
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
name|PrivilegeBits
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
annotation|@
name|Nonnull
name|PrivilegeBits
name|next
parameter_list|()
block|{
name|PrivilegeBits
name|bits
init|=
name|next
decl_stmt|;
name|next
operator|=
name|bits
operator|.
name|nextBits
argument_list|()
expr_stmt|;
return|return
name|bits
return|;
block|}
comment|/**      * @param privilegeNames      * @return      */
annotation|@
name|Nonnull
specifier|public
name|PrivilegeBits
name|getBits
parameter_list|(
annotation|@
name|Nonnull
name|String
modifier|...
name|privilegeNames
parameter_list|)
block|{
if|if
condition|(
name|privilegeNames
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|EMPTY
return|;
block|}
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|privilegeNames
control|)
block|{
name|Tree
name|defTree
init|=
name|privilegesTree
operator|.
name|getChild
argument_list|(
name|checkNotNull
argument_list|(
name|privilegeName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|defTree
operator|!=
literal|null
condition|)
block|{
name|bits
operator|.
name|add
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|defTree
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|bits
operator|.
name|unmodifiable
argument_list|()
return|;
block|}
comment|/**      * Resolve the given privilege bits to a set of privilege names.      *      * @param privilegeBits An instance of privilege bits.      * @return The names of the registed privileges associated with the given      *         bits. Any bits that don't have a corresponding privilege definition will      *         be ignored.      */
annotation|@
name|Nonnull
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPrivilegeNames
parameter_list|(
name|PrivilegeBits
name|privilegeBits
parameter_list|)
block|{
if|if
condition|(
name|privilegeBits
operator|==
literal|null
operator|||
name|privilegeBits
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|bitsToNames
operator|.
name|containsKey
argument_list|(
name|privilegeBits
argument_list|)
condition|)
block|{
comment|// matches all built-in aggregates and single built-in privileges
return|return
name|bitsToNames
operator|.
name|get
argument_list|(
name|privilegeBits
argument_list|)
return|;
block|}
else|else
block|{
name|Tree
name|privilegesTree
init|=
name|getPrivilegesTree
argument_list|()
decl_stmt|;
if|if
condition|(
name|privilegesTree
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptySet
argument_list|()
return|;
block|}
if|if
condition|(
name|bitsToNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|bitsToNames
operator|.
name|put
argument_list|(
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|child
argument_list|)
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|privilegeNames
decl_stmt|;
if|if
condition|(
name|bitsToNames
operator|.
name|containsKey
argument_list|(
name|privilegeBits
argument_list|)
condition|)
block|{
name|privilegeNames
operator|=
name|bitsToNames
operator|.
name|get
argument_list|(
name|privilegeBits
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|privilegeNames
operator|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|aggregates
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|privilegesTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|child
argument_list|)
decl_stmt|;
if|if
condition|(
name|privilegeBits
operator|.
name|includes
argument_list|(
name|bits
argument_list|)
condition|)
block|{
name|privilegeNames
operator|.
name|add
argument_list|(
name|child
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|hasProperty
argument_list|(
name|REP_AGGREGATES
argument_list|)
condition|)
block|{
name|aggregates
operator|.
name|addAll
argument_list|(
name|PrivilegeDefinitionReader
operator|.
name|readDefinition
argument_list|(
name|child
argument_list|)
operator|.
name|getDeclaredAggregateNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|privilegeNames
operator|.
name|removeAll
argument_list|(
name|aggregates
argument_list|)
expr_stmt|;
name|bitsToNames
operator|.
name|put
argument_list|(
name|privilegeBits
operator|.
name|unmodifiable
argument_list|()
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|privilegeNames
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|privilegeNames
return|;
block|}
block|}
block|}
end_class

end_unit

