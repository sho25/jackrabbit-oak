begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|cluster
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
operator|.
name|dispose
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_comment
comment|/**  * A base class for DocumentMK cluster tests.  */
end_comment

begin_class
specifier|public
class|class
name|AbstractClusterTest
block|{
specifier|protected
name|NodeStoreFixture
name|fixture
init|=
name|getFixture
argument_list|()
decl_stmt|;
specifier|protected
name|NodeStore
name|ns1
decl_stmt|,
name|ns2
decl_stmt|;
specifier|protected
name|Repository
name|r1
decl_stmt|,
name|r2
decl_stmt|;
specifier|protected
name|Session
name|s1
decl_stmt|,
name|s2
decl_stmt|;
specifier|protected
name|NodeStoreFixture
name|getFixture
parameter_list|()
block|{
return|return
name|NodeStoreFixture
operator|.
name|DOCUMENT_NS
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|logout
parameter_list|()
block|{
if|if
condition|(
name|s1
operator|!=
literal|null
condition|)
block|{
name|s1
operator|.
name|logout
argument_list|()
expr_stmt|;
name|s1
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|s2
operator|!=
literal|null
condition|)
block|{
name|s2
operator|.
name|logout
argument_list|()
expr_stmt|;
name|s2
operator|=
literal|null
expr_stmt|;
block|}
name|r1
operator|=
name|dispose
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|r2
operator|=
name|dispose
argument_list|(
name|r2
argument_list|)
expr_stmt|;
if|if
condition|(
name|ns1
operator|!=
literal|null
condition|)
block|{
name|fixture
operator|.
name|dispose
argument_list|(
name|ns1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ns2
operator|!=
literal|null
condition|)
block|{
name|fixture
operator|.
name|dispose
argument_list|(
name|ns2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|prepareTestData
parameter_list|(
name|Session
name|s
parameter_list|)
throws|throws
name|RepositoryException
block|{     }
annotation|@
name|Before
specifier|public
name|void
name|login
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ns1
operator|=
name|fixture
operator|.
name|createNodeStore
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ns1
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|r1
operator|=
operator|new
name|Jcr
argument_list|(
name|ns1
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|s1
operator|=
name|r1
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|prepareTestData
argument_list|(
name|s1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ns1
operator|instanceof
name|DocumentNodeStore
condition|)
block|{
comment|// make sure initial repository data is visible to
comment|// other cluster nodes initialized later
operator|(
operator|(
name|DocumentNodeStore
operator|)
name|ns1
operator|)
operator|.
name|runBackgroundOperations
argument_list|()
expr_stmt|;
block|}
name|ns2
operator|=
name|fixture
operator|.
name|createNodeStore
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|r2
operator|=
operator|new
name|Jcr
argument_list|(
name|ns2
argument_list|)
operator|.
name|createRepository
argument_list|()
expr_stmt|;
name|s2
operator|=
name|r2
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Iterable
argument_list|<
name|Integer
argument_list|>
name|seconds
parameter_list|(
specifier|final
name|int
name|max
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Integer
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|int
name|x
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
decl_stmt|;
if|if
condition|(
name|x
operator|>
literal|0
operator|&&
name|time
operator|>=
operator|(
name|max
operator|*
literal|1000
operator|)
condition|)
block|{
name|Assert
operator|.
name|fail
argument_list|(
literal|"Retry loop timed out after "
operator|+
name|x
operator|+
literal|" repetitions and "
operator|+
name|time
operator|+
literal|" milliseconds"
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|Integer
name|next
parameter_list|()
block|{
name|hasNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|x
operator|>
literal|0
condition|)
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|x
operator|++
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

