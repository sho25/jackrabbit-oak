begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|ReadOnlyVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|ProviderCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENNODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISCHECKEDOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_VERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
operator|.
name|addChild
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|PARAM_READ_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
operator|.
name|PERMISSIONS_STORE_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
operator|.
name|SET_PROPERTY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
operator|.
name|VERSION_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|TreePermission
operator|.
name|ALL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_VERSION_MANAGEMENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|JCR_WRITE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|anyString
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|never
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|spy
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|CompiledPermissionImplTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
name|String
name|TEST_PATH
init|=
literal|"/test"
decl_stmt|;
specifier|private
specifier|static
name|String
name|SUBTREE_PATH
init|=
name|TEST_PATH
operator|+
literal|"/subtree"
decl_stmt|;
specifier|private
specifier|static
name|String
name|ACCESS_CONTROLLED_PATH
init|=
name|TEST_PATH
operator|+
literal|"/accessControlled"
decl_stmt|;
specifier|private
name|ContentSession
name|testSession
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|accessControlledPaths
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|Tree
name|t
init|=
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
argument_list|,
literal|"test"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|addChild
argument_list|(
name|t
argument_list|,
literal|"subtree"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|addChild
argument_list|(
name|t
argument_list|,
literal|"accessControlled"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|grant
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|testSession
operator|=
name|createTestSession
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testSession
operator|.
name|close
argument_list|()
expr_stmt|;
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|accessControlledPaths
control|)
block|{
if|if
condition|(
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|AccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
name|acMgr
operator|.
name|removePolicy
argument_list|(
name|path
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|root
operator|.
name|getTree
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|CompiledPermissionImpl
name|create
parameter_list|(
annotation|@
name|NotNull
name|ConfigurationParameters
name|options
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|Nullable
name|PermissionStore
name|store
parameter_list|)
block|{
name|AuthorizationConfiguration
name|config
init|=
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|config
operator|instanceof
name|CompositeAuthorizationConfiguration
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|defConfig
init|=
operator|(
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|config
operator|)
operator|.
name|getDefaultConfig
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|defConfig
operator|instanceof
name|AuthorizationConfigurationImpl
argument_list|)
expr_stmt|;
name|Root
name|r
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|testSession
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|workspaceName
init|=
name|testSession
operator|.
name|getWorkspaceName
argument_list|()
decl_stmt|;
name|PermissionStore
name|pStore
init|=
operator|(
name|store
operator|==
literal|null
operator|)
condition|?
operator|new
name|PermissionStoreImpl
argument_list|(
name|r
argument_list|,
name|workspaceName
argument_list|,
name|config
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
else|:
name|store
decl_stmt|;
name|CompiledPermissions
name|cp
init|=
name|CompiledPermissionImpl
operator|.
name|create
argument_list|(
name|r
argument_list|,
name|workspaceName
argument_list|,
name|pStore
argument_list|,
name|principals
argument_list|,
name|options
argument_list|,
name|config
operator|.
name|getContext
argument_list|()
argument_list|,
operator|(
name|AuthorizationConfigurationImpl
operator|)
name|defConfig
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|instanceof
name|CompiledPermissionImpl
argument_list|)
expr_stmt|;
return|return
operator|(
name|CompiledPermissionImpl
operator|)
name|cp
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|CompiledPermissionImpl
name|createForTestSession
parameter_list|(
annotation|@
name|NotNull
name|ConfigurationParameters
name|options
parameter_list|)
block|{
return|return
name|create
argument_list|(
name|options
argument_list|,
name|testSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getPrincipals
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|createReadonlyTree
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
return|return
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|root
argument_list|)
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
name|TreePermission
name|createTreePermission
parameter_list|(
annotation|@
name|NotNull
name|CompiledPermissionImpl
name|cp
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
name|Tree
name|t
init|=
name|createReadonlyTree
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|)
decl_stmt|;
name|TreePermission
name|tp
init|=
name|cp
operator|.
name|getTreePermission
argument_list|(
name|t
argument_list|,
name|TreePermission
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|elem
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|Tree
name|child
init|=
name|t
operator|.
name|getChild
argument_list|(
name|elem
argument_list|)
decl_stmt|;
name|tp
operator|=
name|cp
operator|.
name|getTreePermission
argument_list|(
name|child
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|t
operator|=
name|child
expr_stmt|;
block|}
return|return
name|tp
return|;
block|}
specifier|private
name|void
name|grant
parameter_list|(
annotation|@
name|Nullable
name|String
name|path
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|NotNull
name|String
modifier|...
name|privNames
parameter_list|)
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|privNames
argument_list|)
argument_list|)
expr_stmt|;
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|acl
operator|.
name|getPath
argument_list|()
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|accessControlledPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
specifier|private
name|Tree
name|createVersions
parameter_list|(
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|Tree
name|tree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|tree
argument_list|,
name|MIX_VERSIONABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|"uid"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|ReadOnlyVersionManager
name|vm
init|=
name|ReadOnlyVersionManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|checkNotNull
argument_list|(
name|vm
operator|.
name|getVersionHistory
argument_list|(
name|tree
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateFromEmptyPrincipals
parameter_list|()
block|{
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|NoPermissions
operator|.
name|getInstance
argument_list|()
argument_list|,
name|CompiledPermissionImpl
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"wspName"
argument_list|,
name|mock
argument_list|(
name|PermissionStore
operator|.
name|class
argument_list|)
argument_list|,
name|principals
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|ProviderCtx
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateNonExistingPermissionStore
parameter_list|()
block|{
name|Tree
name|t
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|false
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Root
name|r
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|Root
operator|.
name|class
argument_list|)
operator|.
name|getTree
argument_list|(
name|anyString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|t
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
init|=
name|ImmutableSet
operator|.
name|of
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|"principalName"
argument_list|)
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|NoPermissions
operator|.
name|getInstance
argument_list|()
argument_list|,
name|CompiledPermissionImpl
operator|.
name|create
argument_list|(
name|r
argument_list|,
literal|"wspName"
argument_list|,
name|mock
argument_list|(
name|PermissionStore
operator|.
name|class
argument_list|)
argument_list|,
name|principals
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|,
name|mock
argument_list|(
name|ProviderCtx
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmpyReadPaths
parameter_list|()
block|{
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_READ_PATHS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// cp with EmptyReadPolicy
for|for
control|(
name|String
name|readPath
range|:
name|PermissionConstants
operator|.
name|DEFAULT_READ_PATHS
control|)
block|{
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|readPath
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|readPath
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|createReadonlyTree
argument_list|(
name|readPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|t
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|readPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefaultReadPath
parameter_list|()
block|{
comment|// cp with DefaultReadPolicy
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|readPath
range|:
name|PermissionConstants
operator|.
name|DEFAULT_READ_PATHS
control|)
block|{
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|readPath
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|createReadonlyTree
argument_list|(
name|readPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|readPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNonDefaultReadPath
parameter_list|()
block|{
comment|// cp with DefaultReadPolicy but not default paths
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_READ_PATHS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|TEST_PATH
argument_list|,
literal|"/another"
argument_list|,
literal|"/yet/another"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|readPath
range|:
operator|new
name|String
index|[]
block|{
name|TEST_PATH
block|,
name|SUBTREE_PATH
block|,
name|TEST_PATH
operator|+
literal|"/nonExisting"
block|}
control|)
block|{
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|readPath
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|createReadonlyTree
argument_list|(
name|readPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|t
argument_list|,
name|t
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|PrivilegeConstants
operator|.
name|REP_READ_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|readPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testHidden
parameter_list|()
block|{
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_READ_PATHS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|hiddenPath
init|=
literal|"/oak:index/acPrincipalName/:index"
decl_stmt|;
name|Tree
name|hiddenTree
init|=
name|createReadonlyTree
argument_list|(
name|hiddenPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|hiddenTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|hiddenTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
comment|// isGranted(String, long) serves as fallback for non-existing items
comment|// -> just regular permission eval without tree-type handling
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|hiddenPath
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|getPrivileges
argument_list|(
name|hiddenTree
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|hiddenPath
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ALL
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInternal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// grant read permissions at root path
name|grant
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|JCR_READ
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
comment|// FIXME: wrong TreePermission for child of internal path -> not EMPTY
comment|//        String[] internalPaths = new String[] {
comment|//                PERMISSIONS_STORE_PATH,
comment|//                PathUtils.concat(PERMISSIONS_STORE_PATH, testSession.getWorkspaceName())
comment|//        };
name|String
index|[]
name|internalPaths
init|=
operator|new
name|String
index|[]
block|{
name|PERMISSIONS_STORE_PATH
block|}
decl_stmt|;
for|for
control|(
name|String
name|internalPath
range|:
name|internalPaths
control|)
block|{
name|Tree
name|internalTree
init|=
name|createReadonlyTree
argument_list|(
name|internalPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|internalTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|internalTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
comment|// isGranted(String, long) serves as fallback for non-existing items
comment|// -> just regular permission eval without tree-type handling
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|internalPath
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|getPrivileges
argument_list|(
name|internalTree
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|internalPath
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|TreePermission
operator|.
name|EMPTY
argument_list|,
name|tp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionHistory
init|=
name|createVersions
argument_list|(
name|SUBTREE_PATH
argument_list|)
decl_stmt|;
comment|// subtree path is made readable through PARAM_READ_PATHS
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_READ_PATHS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|versionHistory
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// isGranted(String, long) serves as fallback when no versionable node available
comment|// -> just regular permission eval based on path, no tree-type taken into account
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|versionHistory
operator|.
name|getPath
argument_list|()
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|versionHistory
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|versionHistory
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|versionHistory
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|VersionTreePermission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|version
init|=
name|createVersions
argument_list|(
name|SUBTREE_PATH
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"1.2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NT_VERSION
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
comment|// subtree path is made readable through PARAM_READ_PATHS
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_READ_PATHS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|version
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// isGranted(String, long) serves as fallback when no versionable node available
comment|// -> just regular permission eval based on path, no tree-type taken into account
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|version
operator|.
name|getPath
argument_list|()
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|version
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|version
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|VersionTreePermission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testFrozenNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|version
init|=
name|createVersions
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|Tree
name|frozenNode
init|=
name|version
operator|.
name|getChild
argument_list|(
name|JCR_FROZENNODE
argument_list|)
decl_stmt|;
comment|// default read-paths -> only accessControlled tree readable
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
for|for
control|(
name|Tree
name|tree
range|:
operator|new
name|Tree
index|[]
block|{
name|frozenNode
block|,
name|frozenNode
operator|.
name|getChild
argument_list|(
literal|"subtree"
argument_list|)
block|,
name|frozenNode
operator|.
name|getChild
argument_list|(
literal|"nonExistingChild"
argument_list|)
block|}
control|)
block|{
name|String
name|path
init|=
name|tree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|,
name|cp
operator|.
name|isGranted
argument_list|(
name|tree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|,
name|cp
operator|.
name|isGranted
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|tree
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|,
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|tree
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|VersionTreePermission
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAccessControlledChildInFrozenNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|version
init|=
name|createVersions
argument_list|(
name|TEST_PATH
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"1.2"
argument_list|)
decl_stmt|;
name|Tree
name|frozenNode
init|=
name|version
operator|.
name|getChild
argument_list|(
name|JCR_FROZENNODE
argument_list|)
decl_stmt|;
name|Tree
name|copiedAccessControlledChild
init|=
name|frozenNode
operator|.
name|getChild
argument_list|(
literal|"accessControlled"
argument_list|)
decl_stmt|;
comment|// default read-paths -> only accessControlled tree readable
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|copiedAccessControlledChild
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
comment|// isGranted(String, long) serves as fallback when no versionable node available
comment|// -> just regular permission eval based on path, no tree-type taken into account
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|copiedAccessControlledChild
operator|.
name|getPath
argument_list|()
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|copiedAccessControlledChild
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|copiedAccessControlledChild
argument_list|,
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|version
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|VersionTreePermission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionStoreTree
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionStoreTree
init|=
name|createVersions
argument_list|(
name|SUBTREE_PATH
argument_list|)
operator|.
name|getParent
argument_list|()
decl_stmt|;
comment|// subtree path is made readable through PARAM_READ_PATHS
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|PARAM_READ_PATHS
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|TEST_PATH
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// but: permissions for version store tree is evaluated based on regular permissions
comment|// and not tied to a versionable tree
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|versionStoreTree
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// isGranted(String, long) serves as fallback when no versionable node available
comment|// -> just regular permission eval based on path, no tree-type taken into account
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|versionStoreTree
operator|.
name|getPath
argument_list|()
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|getPrivileges
argument_list|(
name|versionStoreTree
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|versionStoreTree
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|versionStoreTree
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|instanceof
name|VersionTreePermission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVersionableTreeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|version
init|=
name|createVersions
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"1.2"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NT_VERSION
argument_list|,
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|version
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|accessControlled
init|=
name|root
operator|.
name|getTree
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|)
decl_stmt|;
name|PropertyState
name|property
init|=
name|accessControlled
operator|.
name|getProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|accessControlled
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|CompiledPermissionImpl
name|cp
init|=
name|createForTestSession
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|version
argument_list|,
literal|null
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|version
argument_list|,
name|property
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
comment|// isGranted(String, long) serves as fallback when no versionable node available
comment|// -> just regular permission eval based on path, no tree-type taken into account
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|version
operator|.
name|getPath
argument_list|()
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|getPrivileges
argument_list|(
name|version
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|version
argument_list|,
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|version
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|VersionTreePermission
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingGroupStore
parameter_list|()
throws|throws
name|Exception
block|{
name|grant
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|,
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Root
name|readOnlyRoot
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|testSession
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|wspName
init|=
name|testSession
operator|.
name|getWorkspaceName
argument_list|()
decl_stmt|;
comment|// create cp for user principal only (no group principals that hold the permission setup)
name|PermissionStore
name|store
init|=
name|spy
argument_list|(
operator|new
name|PermissionStoreImpl
argument_list|(
name|readOnlyRoot
argument_list|,
name|wspName
argument_list|,
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledPermissionImpl
name|cp
init|=
name|create
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|getTestUser
argument_list|()
operator|.
name|getPrincipal
argument_list|()
argument_list|)
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|cp
operator|.
name|refresh
argument_list|(
name|readOnlyRoot
argument_list|,
name|wspName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|,
name|SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|,
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|t
init|=
name|createReadonlyTree
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|t
argument_list|,
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_VERSION_MANAGEMENT
argument_list|)
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|createReadonlyTree
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|ACCESS_CONTROLLED_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|VERSION_MANAGEMENT
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|load
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|load
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingUserStore
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|readOnlyRoot
init|=
name|getRootProvider
argument_list|()
operator|.
name|createReadOnlyRoot
argument_list|(
name|testSession
operator|.
name|getLatestRoot
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|wspName
init|=
name|testSession
operator|.
name|getWorkspaceName
argument_list|()
decl_stmt|;
comment|// create cp for group principal only (no user principal)
name|PermissionStore
name|store
init|=
name|spy
argument_list|(
operator|new
name|PermissionStoreImpl
argument_list|(
name|readOnlyRoot
argument_list|,
name|wspName
argument_list|,
name|getConfig
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledPermissionImpl
name|cp
init|=
name|create
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
argument_list|,
name|store
argument_list|)
decl_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|cp
operator|.
name|refresh
argument_list|(
name|readOnlyRoot
argument_list|,
name|wspName
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|getNumEntries
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyLong
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|isGranted
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|,
name|SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|cp
operator|.
name|hasPrivileges
argument_list|(
name|createReadonlyTree
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|,
name|cp
operator|.
name|getPrivileges
argument_list|(
name|createReadonlyTree
argument_list|(
name|ACCESS_CONTROLLED_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|TreePermission
name|tp
init|=
name|createTreePermission
argument_list|(
name|cp
argument_list|,
name|ACCESS_CONTROLLED_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|isGranted
argument_list|(
name|SET_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|.
name|canRead
argument_list|(
name|mock
argument_list|(
name|PropertyState
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|canReadAll
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|times
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|.
name|load
argument_list|(
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|store
argument_list|,
name|never
argument_list|()
argument_list|)
operator|.
name|load
argument_list|(
name|anyString
argument_list|()
argument_list|,
name|anyString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

