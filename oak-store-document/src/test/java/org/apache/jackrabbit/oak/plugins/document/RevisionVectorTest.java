begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|RevisionVectorTest
block|{
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|illegalArgument
parameter_list|()
block|{
name|Revision
name|rev1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
operator|new
name|RevisionVector
argument_list|(
name|rev1
argument_list|,
name|rev1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|construct
parameter_list|()
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|rv
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|rev1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|rev2
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv
operator|=
operator|new
name|RevisionVector
argument_list|(
name|newHashSet
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv
argument_list|)
argument_list|)
expr_stmt|;
name|rv
operator|=
operator|new
name|RevisionVector
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|update
parameter_list|()
block|{
name|Revision
name|rev1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|(
name|rev1
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|rv
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|rv
argument_list|,
name|rv
operator|.
name|update
argument_list|(
name|rev1
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|rev2
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|rev2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev2
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|rev3
init|=
operator|new
name|Revision
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|rev3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev2
argument_list|,
name|rev3
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv
argument_list|)
argument_list|)
expr_stmt|;
name|rev3
operator|=
name|rev3
operator|.
name|asBranchRevision
argument_list|()
expr_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|rev3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev2
argument_list|,
name|rev3
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|remove
parameter_list|()
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|rv
argument_list|,
name|rv
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|rev1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|rev2
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|rev3
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rv
operator|=
operator|new
name|RevisionVector
argument_list|(
name|rev1
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|rv
argument_list|,
name|rv
operator|.
name|remove
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|()
argument_list|,
name|rv
operator|.
name|remove
argument_list|(
name|rev1
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rv
operator|=
operator|new
name|RevisionVector
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|,
name|rev3
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|rev2
argument_list|,
name|rev3
argument_list|)
argument_list|,
name|rv
operator|.
name|remove
argument_list|(
name|rev1
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|rev1
argument_list|,
name|rev3
argument_list|)
argument_list|,
name|rv
operator|.
name|remove
argument_list|(
name|rev2
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
argument_list|,
name|rv
operator|.
name|remove
argument_list|(
name|rev3
operator|.
name|getClusterId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isNewer
parameter_list|()
block|{
name|Revision
name|rev1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|rev2
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|rev3
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|isRevisionNewer
argument_list|(
name|rev1
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|isRevisionNewer
argument_list|(
name|rev2
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv
operator|.
name|isRevisionNewer
argument_list|(
name|rev3
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv
operator|.
name|isRevisionNewer
argument_list|(
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv
operator|.
name|isRevisionNewer
argument_list|(
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|isRevisionNewer
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|isRevisionNewer
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pmin
parameter_list|()
block|{
name|RevisionVector
name|rv1
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|RevisionVector
name|rv2
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|rev11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|rev21
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|rev12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|rev22
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev11
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1], rv2: []
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev12
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1], rv2: [r1-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev12
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r1-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev22
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev11
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev21
argument_list|)
expr_stmt|;
comment|// rv1: [r2-0-1, r1-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev22
argument_list|)
expr_stmt|;
comment|// rv1: [r2-0-1, r2-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev21
argument_list|)
expr_stmt|;
comment|// rv1: [r2-0-1, r2-0-2], rv2: [r2-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmin
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmin
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|pmax
parameter_list|()
block|{
name|RevisionVector
name|rv1
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|RevisionVector
name|rv2
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|()
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|rev11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|rev21
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|rev12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|Revision
name|rev22
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev11
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1], rv2: []
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev12
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1], rv2: [r1-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev12
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r1-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev12
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev22
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev11
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev11
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev21
argument_list|)
expr_stmt|;
comment|// rv1: [r2-0-1, r1-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rev22
argument_list|)
expr_stmt|;
comment|// rv1: [r2-0-1, r2-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|rev21
argument_list|)
expr_stmt|;
comment|// rv1: [r2-0-1, r2-0-2], rv2: [r2-0-1, r2-0-2]
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv1
operator|.
name|pmax
argument_list|(
name|rv2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHashSet
argument_list|(
name|rev21
argument_list|,
name|rev22
argument_list|)
argument_list|,
name|newHashSet
argument_list|(
name|rv2
operator|.
name|pmax
argument_list|(
name|rv1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|difference
parameter_list|()
block|{
name|RevisionVector
name|rv1
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|RevisionVector
name|rv2
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|()
argument_list|,
name|rv1
operator|.
name|difference
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1]
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r11
argument_list|)
argument_list|,
name|rv1
operator|.
name|difference
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|()
argument_list|,
name|rv2
operator|.
name|difference
argument_list|(
name|rv1
argument_list|)
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1], rv2: [r1-0-1]
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|()
argument_list|,
name|rv1
operator|.
name|difference
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|()
argument_list|,
name|rv2
operator|.
name|difference
argument_list|(
name|rv1
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r1-0-1]
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r12
argument_list|)
argument_list|,
name|rv1
operator|.
name|difference
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|()
argument_list|,
name|rv2
operator|.
name|difference
argument_list|(
name|rv1
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r22
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r22
argument_list|)
expr_stmt|;
comment|// rv1: [r1-0-1, r1-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r12
argument_list|)
argument_list|,
name|rv1
operator|.
name|difference
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r22
argument_list|)
argument_list|,
name|rv2
operator|.
name|difference
argument_list|(
name|rv1
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r21
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r21
argument_list|)
expr_stmt|;
comment|// rv1: [r2-0-1, r1-0-2], rv2: [r1-0-1, r2-0-2]
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r21
argument_list|,
name|r12
argument_list|)
argument_list|,
name|rv1
operator|.
name|difference
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|r11
argument_list|,
name|r22
argument_list|)
argument_list|,
name|rv2
operator|.
name|difference
argument_list|(
name|rv1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isBranch
parameter_list|()
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|r1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r2
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|r2
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getBranchRevision
parameter_list|()
block|{
name|Revision
name|r1
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|r2
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|(
name|r1
argument_list|,
name|r2
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r2
argument_list|,
name|rv
operator|.
name|getBranchRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|exceptionOnGetBranchRevision
parameter_list|()
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|rv
operator|.
name|getBranchRevision
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|compareTo
parameter_list|()
block|{
name|RevisionVector
name|rv1
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|RevisionVector
name|rv2
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rv1
operator|.
name|compareTo
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
comment|// [r1-0-1]
name|assertTrue
argument_list|(
name|rv1
operator|.
name|compareTo
argument_list|(
name|rv2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv2
operator|.
name|compareTo
argument_list|(
name|rv1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|Revision
name|r12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
comment|// [r1-0-2]
name|assertTrue
argument_list|(
name|rv1
operator|.
name|compareTo
argument_list|(
name|rv2
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv2
operator|.
name|compareTo
argument_list|(
name|rv1
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
comment|// [r1-0-1, r1-0-2]
name|assertTrue
argument_list|(
name|rv1
operator|.
name|compareTo
argument_list|(
name|rv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv2
operator|.
name|compareTo
argument_list|(
name|rv1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
comment|// [r1-0-1, r1-0-2]
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rv1
operator|.
name|compareTo
argument_list|(
name|rv2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rv2
operator|.
name|compareTo
argument_list|(
name|rv1
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r22
init|=
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r22
argument_list|)
expr_stmt|;
comment|// [r1-0-1, r2-0-2]
name|assertTrue
argument_list|(
name|rv1
operator|.
name|compareTo
argument_list|(
name|rv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv2
operator|.
name|compareTo
argument_list|(
name|rv1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|Revision
name|rb22
init|=
name|r22
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|rb22
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv1
operator|.
name|compareTo
argument_list|(
name|rv2
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv2
operator|.
name|compareTo
argument_list|(
name|rv1
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|equals
parameter_list|()
block|{
name|RevisionVector
name|rv1
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|RevisionVector
name|rv2
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rv1
argument_list|,
name|rv2
argument_list|)
expr_stmt|;
name|Revision
name|r11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|rv1
argument_list|,
name|rv2
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rv1
argument_list|,
name|rv2
argument_list|)
expr_stmt|;
name|Revision
name|r12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|rv1
argument_list|,
name|rv2
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rv1
argument_list|,
name|rv2
argument_list|)
expr_stmt|;
comment|//Check basic cases which are short circuited
name|assertEquals
argument_list|(
name|rv1
argument_list|,
name|rv1
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|rv1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertNotEquals
argument_list|(
name|rv1
argument_list|,
operator|new
name|Object
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hashCodeTest
parameter_list|()
block|{
name|RevisionVector
name|rv1
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|RevisionVector
name|rv2
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|rv1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|rv2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|//Check again once lazily initialized hash is initialized
name|assertEquals
argument_list|(
name|rv1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|rv2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rv1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|rv2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv1
operator|=
name|rv1
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
name|rv2
operator|=
name|rv2
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rv1
operator|.
name|hashCode
argument_list|()
argument_list|,
name|rv2
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getRevision
parameter_list|()
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|rv
operator|.
name|getRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|r11
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r11
argument_list|,
name|rv
operator|.
name|getRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rv
operator|.
name|getRevision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|r13
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|r13
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|r13
argument_list|,
name|rv
operator|.
name|getRevision
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|rv
operator|.
name|getRevision
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|asTrunkRevision
parameter_list|()
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|asTrunkRevision
argument_list|()
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rv
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|rv
operator|.
name|asTrunkRevision
argument_list|()
operator|.
name|isBranch
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|asBranchRevision1
parameter_list|()
block|{
operator|new
name|RevisionVector
argument_list|()
operator|.
name|asBranchRevision
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalArgumentException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|asBranchRevision2
parameter_list|()
block|{
operator|new
name|RevisionVector
argument_list|(
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|.
name|asBranchRevision
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|asBranchRevision3
parameter_list|()
block|{
name|Revision
name|r11
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|Revision
name|br11
init|=
name|r11
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|(
name|r11
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|br11
argument_list|)
argument_list|,
name|rv
operator|.
name|asBranchRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rv
operator|=
name|rv
operator|.
name|asTrunkRevision
argument_list|()
expr_stmt|;
name|Revision
name|r12
init|=
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|rv
operator|=
name|rv
operator|.
name|update
argument_list|(
name|r12
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|br11
argument_list|,
name|r12
argument_list|)
argument_list|,
name|rv
operator|.
name|asBranchRevision
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|fromString
parameter_list|()
throws|throws
name|Exception
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|(
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rvstr
init|=
name|rv
operator|.
name|asString
argument_list|()
decl_stmt|;
name|RevisionVector
name|rvFromStr
init|=
name|RevisionVector
operator|.
name|fromString
argument_list|(
name|rvstr
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|rv
argument_list|,
name|rvFromStr
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|toStringBuilder
parameter_list|()
throws|throws
name|Exception
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|rv
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|""
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|rv
operator|=
operator|new
name|RevisionVector
argument_list|(
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|rv
operator|.
name|toStringBuilder
argument_list|(
name|sb
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rv
operator|.
name|toString
argument_list|()
argument_list|,
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDimensions
parameter_list|()
throws|throws
name|Exception
block|{
name|RevisionVector
name|rv
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|rv
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|rv
operator|=
operator|new
name|RevisionVector
argument_list|(
operator|new
name|Revision
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|,
operator|new
name|Revision
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|rv
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
name|rv
operator|=
name|rv
operator|.
name|remove
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|rv
operator|.
name|getDimensions
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
annotation|@
name|Test
specifier|public
name|void
name|emptyAsFromString
parameter_list|()
block|{
name|RevisionVector
name|empty
init|=
operator|new
name|RevisionVector
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|empty
argument_list|,
name|RevisionVector
operator|.
name|fromString
argument_list|(
name|empty
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

