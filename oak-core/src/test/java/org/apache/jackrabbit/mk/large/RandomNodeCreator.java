begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|large
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|simple
operator|.
name|NodeImpl
import|;
end_import

begin_comment
comment|/**  * A utility to create a number of nodes in a random tree structure. Each level  * has a random (but fixed for the level) number of nodes with at most maxWidth  * nodes.  */
end_comment

begin_class
specifier|public
class|class
name|RandomNodeCreator
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_TEST_ROOT
init|=
literal|"testRandom"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_COUNT
init|=
literal|200
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_WIDTH
init|=
literal|30
decl_stmt|;
specifier|private
specifier|final
name|MicroKernel
name|mk
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
decl_stmt|;
specifier|private
name|String
name|testRoot
init|=
name|DEFAULT_TEST_ROOT
decl_stmt|;
specifier|private
name|int
name|totalCount
init|=
name|DEFAULT_COUNT
decl_stmt|;
specifier|private
name|int
name|maxWidth
init|=
name|DEFAULT_WIDTH
decl_stmt|;
specifier|private
name|boolean
name|logToSystemOut
decl_stmt|;
specifier|private
name|String
name|head
decl_stmt|;
specifier|private
name|int
name|count
decl_stmt|;
specifier|private
name|Queue
argument_list|<
name|String
argument_list|>
name|queue
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|RandomNodeCreator
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|int
name|seed
parameter_list|)
block|{
name|this
operator|.
name|mk
operator|=
name|mk
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|random
operator|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setTestRoot
parameter_list|(
name|String
name|testRoot
parameter_list|)
block|{
name|this
operator|.
name|testRoot
operator|=
name|testRoot
expr_stmt|;
block|}
specifier|public
name|void
name|setTotalCount
parameter_list|(
name|int
name|totalCount
parameter_list|)
block|{
name|this
operator|.
name|totalCount
operator|=
name|totalCount
expr_stmt|;
block|}
specifier|public
name|void
name|setMaxWidth
parameter_list|(
name|int
name|maxWidth
parameter_list|)
block|{
name|this
operator|.
name|maxWidth
operator|=
name|maxWidth
expr_stmt|;
block|}
specifier|public
name|void
name|setLogToSystemOut
parameter_list|(
name|boolean
name|logToSystemOut
parameter_list|)
block|{
name|this
operator|.
name|logToSystemOut
operator|=
name|logToSystemOut
expr_stmt|;
block|}
specifier|public
name|void
name|create
parameter_list|()
block|{
name|log
argument_list|(
literal|"Implementation: "
operator|+
name|mk
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Creating "
operator|+
name|totalCount
operator|+
literal|" nodes under "
operator|+
name|testRoot
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|testRoot
operator|+
literal|"\":{}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|createNodes
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|traverse
parameter_list|()
block|{
name|count
operator|=
literal|0
expr_stmt|;
name|queue
operator|.
name|clear
argument_list|()
expr_stmt|;
name|log
argument_list|(
literal|"Traversing "
operator|+
name|totalCount
operator|+
literal|" nodes"
argument_list|)
expr_stmt|;
name|traverse
argument_list|(
name|testRoot
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createNodes
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
condition|)
block|{
return|return;
block|}
name|int
name|width
init|=
name|random
operator|.
name|nextInt
argument_list|(
name|maxWidth
argument_list|)
operator|+
literal|1
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
literal|"^ \"width\":"
operator|+
name|width
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
condition|)
block|{
break|break;
block|}
name|String
name|p
init|=
name|parent
operator|+
literal|"/node"
operator|+
name|count
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"+ \""
operator|+
name|p
operator|+
literal|"\": {"
argument_list|)
expr_stmt|;
name|buff
operator|.
name|append
argument_list|(
literal|"}\n"
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
name|buff
operator|.
name|toString
argument_list|()
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Committed with width: "
operator|+
name|width
operator|+
literal|"\n"
operator|+
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|createNodes
argument_list|(
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|traverse
parameter_list|(
name|String
name|parent
parameter_list|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
condition|)
block|{
return|return;
block|}
name|String
name|parentJson
init|=
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
operator|+
name|parent
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|NodeImpl
name|parentNode
init|=
name|NodeImpl
operator|.
name|parse
argument_list|(
name|parentJson
argument_list|)
decl_stmt|;
name|int
name|width
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|parentNode
operator|.
name|getProperty
argument_list|(
literal|"width"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|width
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|count
operator|>=
name|totalCount
condition|)
block|{
break|break;
block|}
name|String
name|p
init|=
name|parent
operator|+
literal|"/node"
operator|+
name|count
decl_stmt|;
name|log
argument_list|(
literal|"Traversed: "
operator|+
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/"
operator|+
name|p
argument_list|,
name|head
argument_list|)
condition|)
block|{
break|break;
block|}
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
operator|+
name|p
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|traverse
argument_list|(
name|queue
operator|.
name|poll
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|log
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
name|logToSystemOut
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

