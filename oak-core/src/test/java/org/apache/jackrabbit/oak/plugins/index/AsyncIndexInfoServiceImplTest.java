begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|AsyncIndexInfoServiceImplTest
block|{
specifier|private
name|MemoryNodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|()
decl_stmt|;
specifier|private
name|PropertyIndexEditorProvider
name|provider
init|=
operator|new
name|PropertyIndexEditorProvider
argument_list|()
decl_stmt|;
specifier|private
name|AsyncIndexInfoServiceImpl
name|service
init|=
operator|new
name|AsyncIndexInfoServiceImpl
argument_list|(
name|store
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|names
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|AsyncIndexUpdate
name|async2
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"foo-async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async2
operator|.
name|run
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|service
operator|.
name|getAsyncLanes
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"async"
argument_list|,
literal|"foo-async"
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|bindStatsMBeans
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|bindStatsMBeans
argument_list|(
name|async2
operator|.
name|getIndexStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|info
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"foo-async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|service
operator|.
name|getAsyncLanes
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|names
argument_list|,
name|containsInAnyOrder
argument_list|(
literal|"foo-async"
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|bindStatsMBeans
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
argument_list|)
expr_stmt|;
name|AsyncIndexInfo
name|info
init|=
name|service
operator|.
name|getInfo
argument_list|(
literal|"foo-async"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"foo-async"
argument_list|,
name|info
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|info
operator|.
name|getStatsMBean
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|info
operator|.
name|getLastIndexedTo
argument_list|()
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|info
operator|.
name|isRunning
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|info
operator|.
name|getLeaseExpiryTime
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|service
operator|.
name|unbindStatsMBeans
argument_list|(
name|async
operator|.
name|getIndexStats
argument_list|()
argument_list|)
expr_stmt|;
name|AsyncIndexInfo
name|info2
init|=
name|service
operator|.
name|getInfo
argument_list|(
literal|"foo-async"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|info2
operator|.
name|getStatsMBean
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexedUpto
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|AsyncIndexUpdate
name|async2
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"foo-async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async2
operator|.
name|run
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|result
init|=
name|service
operator|.
name|getIndexedUptoPerLane
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|"async"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|get
argument_list|(
literal|"foo-async"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|asyncStateChanged
parameter_list|()
throws|throws
name|Exception
block|{
name|AsyncIndexUpdate
name|async
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async
operator|.
name|run
argument_list|()
expr_stmt|;
name|AsyncIndexUpdate
name|async2
init|=
operator|new
name|AsyncIndexUpdate
argument_list|(
literal|"foo-async"
argument_list|,
name|store
argument_list|,
name|provider
argument_list|)
decl_stmt|;
name|async2
operator|.
name|run
argument_list|()
expr_stmt|;
name|NodeState
name|root
init|=
name|store
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|service
operator|.
name|hasIndexerUpdatedForAnyLane
argument_list|(
name|root
argument_list|,
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":async"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|AsyncIndexUpdate
operator|.
name|lastIndexedTo
argument_list|(
literal|"async"
argument_list|)
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|store
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|service
operator|.
name|hasIndexerUpdatedForAnyLane
argument_list|(
name|root
argument_list|,
name|store
operator|.
name|getRoot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

