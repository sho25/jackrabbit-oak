begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: User Management  * =============================================================================  *  * Title: Authorizable Uuid  * -----------------------------------------------------------------------------  *  * Goal:  * Understand the implementation specific content structure for users and groups.  * This particular exercise aims to illustrate the role of jcr:uuid.  *  * Exercises:  *  * - Authorizable Node Type Definition:  *   Look at the node type definition of {@code rep:Authorizable} in {@code builtin_nodetypes.cnd}  *   and implementation and answer the following questions:  *  *   - Why does a group or user node have a jcr:uuid property?  *   - What are the constraints JCR mandates for jcr:uuid? Also recap what JCR  *     states wrt {@link javax.jcr.Item#isSame(javax.jcr.Item)}. What are the  *     implications for the authorizable implementation as it is today?  *   - How is the jcr:uuid set in this default implementation?  *   - What is the jcr:uuid use for in this default implementation?  *  * - {@link #testIdAndUuidAndIdentifier()}  *   Use the answers provided above to fix the test. The goal is that you learn  *   to understand the difference between the ID as exposed by the user management  *   API and the internal JCR specific node identifiers.  *  * - {@link #testUuidUponCreation()}  *   Based on the answers above you should be able to fix the test case.  *  *</pre>  */
end_comment

begin_class
specifier|public
class|class
name|L5_UuidTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|UserManager
name|userManager
decl_stmt|;
specifier|private
name|User
name|testUser
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|userManager
operator|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
expr_stmt|;
name|testUser
operator|=
name|ExerciseUtility
operator|.
name|createTestUser
argument_list|(
name|userManager
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Node
name|getUserNode
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|userPath
init|=
name|user
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|superuser
operator|.
name|getNode
argument_list|(
name|userPath
argument_list|)
return|;
block|}
specifier|public
name|void
name|testIdAndUuidAndIdentifier
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|userNode
init|=
name|getUserNode
argument_list|(
name|testUser
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|userNode
operator|.
name|isNodeType
argument_list|(
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|identifier
init|=
name|userNode
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|String
name|uuid
init|=
name|userNode
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|String
name|authorizableId
init|=
name|userNode
operator|.
name|getProperty
argument_list|(
name|UserConstants
operator|.
name|REP_AUTHORIZABLE_ID
argument_list|)
operator|.
name|getString
argument_list|()
decl_stmt|;
comment|// EXERCISE: explain why identifier and uuid are expected to be the equal
name|assertEquals
argument_list|(
name|identifier
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
comment|// EXERCISE: explain why neither uuid nor identifier are expected to be equal to the rep:authoriableId property
name|assertFalse
argument_list|(
name|identifier
operator|.
name|equals
argument_list|(
name|authorizableId
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|uuid
operator|.
name|equals
argument_list|(
name|authorizableId
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|userId
init|=
name|testUser
operator|.
name|getID
argument_list|()
decl_stmt|;
name|String
name|expectedUserId
init|=
literal|null
decl_stmt|;
comment|// EXERCISE: what is the expected userID ?
name|assertEquals
argument_list|(
name|expectedUserId
argument_list|,
name|userId
argument_list|)
expr_stmt|;
comment|// EXERCISE: what id do you have to use for the lookup on the user manager?
name|String
name|idForLookup
init|=
literal|null
decl_stmt|;
name|User
name|user
init|=
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|idForLookup
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|Authorizable
name|expectedAuthorizable
init|=
literal|null
decl_stmt|;
comment|// EXERCISE
name|assertEquals
argument_list|(
name|expectedAuthorizable
argument_list|,
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|uuid
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testUuidUponCreation
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|userNode
init|=
name|getUserNode
argument_list|(
name|testUser
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
name|userNode
operator|.
name|getUUID
argument_list|()
decl_stmt|;
comment|// remove the test user
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// recreate the same user again
name|testUser
operator|=
name|userManager
operator|.
name|createUser
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|ExerciseUtility
operator|.
name|TEST_PW
argument_list|)
expr_stmt|;
comment|// EXERCISE: fill the expected identifier.
comment|// Q: can you predict the expected identifier?
comment|// Q: if yes, why?
name|String
name|expectedUuid
init|=
literal|null
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedUuid
argument_list|,
name|getUserNode
argument_list|(
name|testUser
argument_list|)
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

