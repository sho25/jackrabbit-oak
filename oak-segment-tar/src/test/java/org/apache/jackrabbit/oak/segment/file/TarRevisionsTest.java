begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|MoreExecutors
operator|.
name|listeningDecorator
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newFixedThreadPool
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CountDownLatch
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeoutException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Functions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListenableFuture
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ListeningExecutorService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|spi
operator|.
name|persistence
operator|.
name|SegmentNodeStorePersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|tar
operator|.
name|TarPersistence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_class
specifier|public
class|class
name|TarRevisionsTest
block|{
specifier|private
name|FileStore
name|store
decl_stmt|;
specifier|private
name|TarRevisions
name|revisions
decl_stmt|;
specifier|private
name|SegmentReader
name|reader
decl_stmt|;
annotation|@
name|Rule
specifier|public
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|File
name|getFileStoreFolder
parameter_list|()
block|{
return|return
name|folder
operator|.
name|getRoot
argument_list|()
return|;
block|}
specifier|protected
name|SegmentNodeStorePersistence
name|getPersistence
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|TarPersistence
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
name|FileStoreBuilder
operator|.
name|fileStoreBuilder
argument_list|(
name|getFileStoreFolder
argument_list|()
argument_list|)
operator|.
name|withCustomPersistence
argument_list|(
name|getPersistence
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|revisions
operator|=
name|store
operator|.
name|getRevisions
argument_list|()
expr_stmt|;
name|reader
operator|=
name|store
operator|.
name|getReader
argument_list|()
expr_stmt|;
name|store
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
if|if
condition|(
name|store
operator|!=
literal|null
condition|)
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
name|store
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|IllegalStateException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|unboundRevisions
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|TarRevisions
name|tarRevisions
init|=
operator|new
name|TarRevisions
argument_list|(
name|getPersistence
argument_list|()
argument_list|)
init|)
block|{
name|tarRevisions
operator|.
name|getHead
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|JournalReader
name|createJournalReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|JournalReader
argument_list|(
name|getPersistence
argument_list|()
operator|.
name|getJournalFile
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getHead
parameter_list|()
throws|throws
name|IOException
block|{
try|try
init|(
name|JournalReader
name|reader
init|=
name|createJournalReader
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|revisions
operator|.
name|getHead
argument_list|()
operator|.
name|toString10
argument_list|()
argument_list|,
name|reader
operator|.
name|next
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|SegmentNodeState
name|addChild
parameter_list|(
name|SegmentNodeState
name|node
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|SegmentNodeBuilder
name|builder
init|=
name|node
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setHead
parameter_list|()
throws|throws
name|IOException
block|{
name|RecordId
name|headId
init|=
name|revisions
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|newRoot
init|=
name|addChild
argument_list|(
name|reader
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|revisions
operator|.
name|setHead
argument_list|(
name|headId
argument_list|,
name|newRoot
operator|.
name|getRecordId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
init|(
name|JournalReader
name|reader
init|=
name|createJournalReader
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newRoot
operator|.
name|getRecordId
argument_list|()
operator|.
name|toString10
argument_list|()
argument_list|,
name|reader
operator|.
name|next
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|setHeadFromFunction
parameter_list|()
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
name|RecordId
name|headId
init|=
name|revisions
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|root
init|=
name|reader
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
decl_stmt|;
specifier|final
name|SegmentNodeState
name|newRoot
init|=
name|addChild
argument_list|(
name|root
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|revisions
operator|.
name|setHead
argument_list|(
operator|new
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|RecordId
name|apply
parameter_list|(
name|RecordId
name|headId
parameter_list|)
block|{
return|return
name|newRoot
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|flush
argument_list|()
expr_stmt|;
try|try
init|(
name|JournalReader
name|reader
init|=
name|createJournalReader
argument_list|()
init|)
block|{
name|assertTrue
argument_list|(
name|reader
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newRoot
operator|.
name|getRecordId
argument_list|()
operator|.
name|toString10
argument_list|()
argument_list|,
name|reader
operator|.
name|next
argument_list|()
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentSetHead
parameter_list|()
block|{
name|RecordId
name|headId
init|=
name|revisions
operator|.
name|getHead
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|rootA
init|=
name|addChild
argument_list|(
name|reader
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|rootB
init|=
name|addChild
argument_list|(
name|reader
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|revisions
operator|.
name|setHead
argument_list|(
name|headId
argument_list|,
name|rootA
operator|.
name|getRecordId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|revisions
operator|.
name|setHead
argument_list|(
name|headId
argument_list|,
name|rootB
operator|.
name|getRecordId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|rootA
argument_list|,
name|reader
operator|.
name|readHeadState
argument_list|(
name|revisions
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|concurrentSetHeadFromFunction
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|TimeoutException
block|{
name|ListeningExecutorService
name|executor
init|=
name|listeningDecorator
argument_list|(
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|t1
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
operator|!=
name|revisions
operator|.
name|setHead
argument_list|(
operator|new
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|RecordId
name|apply
parameter_list|(
name|RecordId
name|headId
parameter_list|)
block|{
return|return
name|addChild
argument_list|(
name|reader
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
literal|"a"
argument_list|)
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|t2
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
return|return
literal|null
operator|!=
name|revisions
operator|.
name|setHead
argument_list|(
operator|new
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|RecordId
name|apply
parameter_list|(
name|RecordId
name|headId
parameter_list|)
block|{
return|return
name|addChild
argument_list|(
name|reader
operator|.
name|readNode
argument_list|(
name|headId
argument_list|)
argument_list|,
literal|"b"
argument_list|)
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t1
operator|.
name|get
argument_list|(
literal|500
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t2
operator|.
name|get
argument_list|(
literal|500
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|root
init|=
name|reader
operator|.
name|readNode
argument_list|(
name|revisions
operator|.
name|getHead
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|hasChildNode
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|setFromFunctionBlocks
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
throws|,
name|TimeoutException
block|{
name|ListeningExecutorService
name|executor
init|=
name|listeningDecorator
argument_list|(
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|CountDownLatch
name|latch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|t1
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|latch
operator|.
name|await
argument_list|()
expr_stmt|;
return|return
literal|null
operator|!=
name|revisions
operator|.
name|setHead
argument_list|(
name|Functions
operator|.
expr|<
name|RecordId
operator|>
name|identity
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
try|try
block|{
name|t1
operator|.
name|get
argument_list|(
literal|500
argument_list|,
name|MILLISECONDS
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"SetHead from function should block"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TimeoutException
name|expected
parameter_list|)
block|{}
name|ListenableFuture
argument_list|<
name|Boolean
argument_list|>
name|t2
init|=
name|executor
operator|.
name|submit
argument_list|(
operator|new
name|Callable
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Boolean
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|latch
operator|.
name|countDown
argument_list|()
expr_stmt|;
return|return
literal|null
operator|!=
name|revisions
operator|.
name|setHead
argument_list|(
name|Functions
operator|.
expr|<
name|RecordId
operator|>
name|identity
argument_list|()
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|t2
operator|.
name|get
argument_list|(
literal|500
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|t1
operator|.
name|get
argument_list|(
literal|500
argument_list|,
name|MILLISECONDS
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|executor
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

