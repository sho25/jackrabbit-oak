begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionEntryCacheTest
block|{
specifier|private
name|PermissionEntryCache
name|cache
init|=
operator|new
name|PermissionEntryCache
argument_list|()
decl_stmt|;
specifier|private
name|PermissionEntry
name|permissionEntry
decl_stmt|;
specifier|private
name|PrincipalPermissionEntries
name|ppe
decl_stmt|;
specifier|private
name|PermissionStore
name|store
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|permissionEntry
operator|=
operator|new
name|PermissionEntry
argument_list|(
literal|"/path"
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|PrivilegeBits
operator|.
name|JCR_READ
argument_list|)
argument_list|,
name|RestrictionPattern
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|ppe
operator|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
expr_stmt|;
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
literal|"/path"
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|permissionEntry
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|PermissionStore
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PrincipalPermissionEntries
name|getPrincipalPermissionEntries
parameter_list|(
name|boolean
name|fullyLoaded
parameter_list|)
block|{
name|ppe
operator|.
name|setFullyLoaded
argument_list|(
name|fullyLoaded
argument_list|)
expr_stmt|;
return|return
name|ppe
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMissingInit
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
name|entries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|entries
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInit
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|.
name|init
argument_list|(
literal|"a"
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|entries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|entries
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|entries
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|entries
operator|=
name|inspectEntries
argument_list|(
name|cache
argument_list|,
literal|"notInitialized"
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadMissingInit
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPermissionEntries
name|ppeA
init|=
name|getPrincipalPermissionEntries
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeA
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|result
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadNotComplete
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|.
name|init
argument_list|(
literal|"a"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|entries
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|permissionEntry
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|inspectedEntries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|inspectedEntries
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
comment|// requesting the entries again must NOT hit the store
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadCompleted
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|.
name|init
argument_list|(
literal|"a"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|entries
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|permissionEntry
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|inspectedEntries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inspectedEntries
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
comment|// requesting the entries again must NOT hit the store
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|entries
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadNonExistingNotComplete
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|.
name|init
argument_list|(
literal|"a"
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|inspectedEntries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|inspectedEntries
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
comment|// requesting the entries again must NOT hit the store
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLoadNonExistingCompleted
parameter_list|()
throws|throws
name|Exception
block|{
name|cache
operator|.
name|init
argument_list|(
literal|"a"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|result
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|inspectedEntries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|inspectedEntries
operator|.
name|isFullyLoaded
argument_list|()
argument_list|)
expr_stmt|;
comment|// requesting the entries again must NOT hit the store
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cache
operator|.
name|load
argument_list|(
name|store
argument_list|,
name|result
argument_list|,
literal|"a"
argument_list|,
literal|"/path"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetFullyLoadedEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|PrincipalPermissionEntries
name|ppeA
init|=
name|getPrincipalPermissionEntries
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ppeA
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|entries
init|=
name|cache
operator|.
name|getFullyLoadedEntries
argument_list|(
name|store
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ppeA
argument_list|,
name|entries
argument_list|)
expr_stmt|;
name|PrincipalPermissionEntries
name|inspectedEntries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|,
literal|"a"
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|ppeA
argument_list|,
name|inspectedEntries
argument_list|)
expr_stmt|;
comment|// requesting the entries again must NOT hit the store
name|when
argument_list|(
name|store
operator|.
name|load
argument_list|(
literal|"a"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
name|IllegalStateException
operator|.
name|class
argument_list|)
expr_stmt|;
name|entries
operator|=
name|cache
operator|.
name|getFullyLoadedEntries
argument_list|(
name|store
argument_list|,
literal|"a"
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ppeA
argument_list|,
name|entries
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|PrincipalPermissionEntries
name|inspectEntries
parameter_list|(
annotation|@
name|NotNull
name|PermissionEntryCache
name|cache
parameter_list|,
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
name|entries
init|=
name|inspectEntries
argument_list|(
name|cache
argument_list|)
decl_stmt|;
return|return
name|entries
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
name|inspectEntries
parameter_list|(
annotation|@
name|NotNull
name|PermissionEntryCache
name|cache
parameter_list|)
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|PermissionEntryCache
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"entries"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|cache
argument_list|)
return|;
block|}
block|}
end_class

end_unit

