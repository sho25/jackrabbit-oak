begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|EmbeddedSolrServerConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|solr
operator|.
name|configuration
operator|.
name|SolrServerConfigurationDefaults
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|SolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|EmbeddedSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|embedded
operator|.
name|JettySolrRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|client
operator|.
name|solrj
operator|.
name|impl
operator|.
name|HttpSolrServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|solr
operator|.
name|core
operator|.
name|CoreContainer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Default implementation of {@link org.apache.jackrabbit.oak.plugins.index.solr.server.SolrServerProvider} which uses an  * {@link EmbeddedSolrServer} configured as per passed {@link org.apache.jackrabbit.oak.plugins.index.solr.configuration.SolrServerConfiguration}.  */
end_comment

begin_class
specifier|public
class|class
name|EmbeddedSolrServerProvider
implements|implements
name|SolrServerProvider
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|EmbeddedSolrServerConfiguration
name|solrServerConfiguration
decl_stmt|;
specifier|public
name|EmbeddedSolrServerProvider
parameter_list|(
name|EmbeddedSolrServerConfiguration
name|solrServerConfiguration
parameter_list|)
block|{
name|this
operator|.
name|solrServerConfiguration
operator|=
name|solrServerConfiguration
expr_stmt|;
block|}
specifier|private
name|SolrServer
name|solrServer
decl_stmt|;
specifier|private
name|SolrServer
name|createSolrServer
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|solrHomePath
init|=
name|solrServerConfiguration
operator|.
name|getSolrHomePath
argument_list|()
decl_stmt|;
name|String
name|coreName
init|=
name|solrServerConfiguration
operator|.
name|getCoreName
argument_list|()
decl_stmt|;
name|String
name|solrConfigPath
init|=
name|solrServerConfiguration
operator|.
name|getSolrConfigPath
argument_list|()
decl_stmt|;
name|EmbeddedSolrServerConfiguration
operator|.
name|HttpConfiguration
name|httpConfiguration
init|=
name|solrServerConfiguration
operator|.
name|getHttpConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|solrConfigPath
operator|!=
literal|null
operator|&&
name|solrHomePath
operator|!=
literal|null
operator|&&
name|coreName
operator|!=
literal|null
condition|)
block|{
name|checkSolrConfiguration
argument_list|(
name|solrHomePath
argument_list|,
name|solrConfigPath
argument_list|,
name|coreName
argument_list|)
expr_stmt|;
if|if
condition|(
name|httpConfiguration
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"starting embedded Solr server with http bindings"
argument_list|)
expr_stmt|;
block|}
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|JettySolrRunner
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
name|httpPort
init|=
name|httpConfiguration
operator|.
name|getHttpPort
argument_list|()
decl_stmt|;
name|String
name|context
init|=
name|httpConfiguration
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|JettySolrRunner
name|jettySolrRunner
init|=
literal|null
decl_stmt|;
try|try
block|{
name|jettySolrRunner
operator|=
operator|new
name|JettySolrRunner
argument_list|(
name|solrHomePath
argument_list|,
name|context
argument_list|,
name|httpPort
argument_list|,
literal|"solrconfig.xml"
argument_list|,
literal|"schema.xml"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Jetty runner instantiated"
argument_list|)
expr_stmt|;
block|}
name|jettySolrRunner
operator|.
name|start
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Jetty runner started"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|t
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isErrorEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"an error has occurred while starting Solr Jetty"
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|jettySolrRunner
operator|!=
literal|null
operator|&&
operator|!
name|jettySolrRunner
operator|.
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
name|jettySolrRunner
operator|.
name|stop
argument_list|()
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Jetty runner stopped"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|log
operator|.
name|isErrorEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"error while stopping the Jetty runner"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"starting HTTP Solr server"
argument_list|)
expr_stmt|;
block|}
name|HttpSolrServer
name|httpSolrServer
init|=
operator|new
name|HttpSolrServer
argument_list|(
operator|new
name|StringBuilder
argument_list|(
name|SolrServerConfigurationDefaults
operator|.
name|LOCAL_BASE_URL
argument_list|)
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
operator|.
name|append
argument_list|(
name|httpPort
argument_list|)
operator|.
name|append
argument_list|(
name|context
argument_list|)
operator|.
name|append
argument_list|(
literal|'/'
argument_list|)
operator|.
name|append
argument_list|(
name|coreName
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|httpSolrServer
return|;
block|}
else|else
block|{
name|ClassLoader
name|classLoader
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getContextClassLoader
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|CoreContainer
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
argument_list|)
expr_stmt|;
name|CoreContainer
name|coreContainer
init|=
operator|new
name|CoreContainer
argument_list|(
name|solrHomePath
argument_list|)
decl_stmt|;
try|try
block|{
name|coreContainer
operator|.
name|load
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|setContextClassLoader
argument_list|(
name|classLoader
argument_list|)
expr_stmt|;
block|}
name|EmbeddedSolrServer
name|server
init|=
operator|new
name|EmbeddedSolrServer
argument_list|(
name|coreContainer
argument_list|,
name|coreName
argument_list|)
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|ping
argument_list|()
operator|.
name|getStatus
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|server
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"the embedded Solr server is not alive"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"SolrServer configuration proprties not set"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkSolrConfiguration
parameter_list|(
name|String
name|solrHomePath
parameter_list|,
name|String
name|solrConfigPath
parameter_list|,
name|String
name|coreName
parameter_list|)
throws|throws
name|IOException
block|{
comment|// check if solrHomePath exists
name|File
name|solrHomePathFile
init|=
operator|new
name|File
argument_list|(
name|solrHomePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|solrHomePathFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|solrHomePathFile
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not create solrHomePath directory"
argument_list|)
throw|;
block|}
else|else
block|{
comment|// copy all the needed files to the just created directory
name|copy
argument_list|(
literal|"/solr/solr.xml"
argument_list|,
name|solrHomePath
argument_list|)
expr_stmt|;
name|copy
argument_list|(
literal|"/solr/zoo.cfg"
argument_list|,
name|solrHomePath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|new
name|File
argument_list|(
name|solrHomePath
operator|+
literal|"/"
operator|+
name|coreName
operator|+
literal|"/conf"
argument_list|)
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not create nested core directory in solrHomePath"
argument_list|)
throw|;
block|}
name|String
name|coreDir
init|=
name|solrHomePath
operator|+
literal|"/"
operator|+
name|coreName
operator|+
literal|"/conf/"
decl_stmt|;
name|copy
argument_list|(
literal|"/solr/oak/conf/currency.xml"
argument_list|,
name|coreDir
argument_list|)
expr_stmt|;
name|copy
argument_list|(
literal|"/solr/oak/conf/schema.xml"
argument_list|,
name|coreDir
argument_list|)
expr_stmt|;
name|copy
argument_list|(
literal|"/solr/oak/conf/solrconfig.xml"
argument_list|,
name|coreDir
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|solrHomePathFile
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"a non directory file with the specified name already exists for the given solrHomePath '"
operator|+
name|solrHomePath
argument_list|)
throw|;
block|}
comment|// TODO : improve this check
comment|// check if solrConfigPath exists
comment|//        File solrConfigPathFile = new File(solrConfigPath);
comment|//        if (!solrConfigPathFile.exists()) {
comment|//            if (solrConfigPathFile.createNewFile()) {
comment|//                copy("/solr/solr.xml", solrConfigPathFile.getAbsolutePath());
comment|//            }
comment|//        }
comment|// check if the a core with the given coreName exists
comment|// TODO : improve this check
name|String
index|[]
name|files
init|=
operator|new
name|File
argument_list|(
name|solrHomePath
argument_list|)
operator|.
name|list
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|files
argument_list|)
expr_stmt|;
if|if
condition|(
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|files
argument_list|,
name|coreName
argument_list|)
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"could not find a directory with the coreName '"
operator|+
name|coreName
operator|+
literal|"' in the solrHomePath '"
operator|+
name|solrHomePath
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|copy
parameter_list|(
name|String
name|resource
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|fileName
init|=
name|dir
operator|+
name|resource
operator|.
name|substring
argument_list|(
name|resource
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|File
name|outputFile
init|=
operator|new
name|File
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|outputFile
operator|.
name|createNewFile
argument_list|()
condition|)
block|{
name|InputStream
name|inputStream
init|=
literal|null
decl_stmt|;
name|FileOutputStream
name|outputStream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|inputStream
operator|=
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|outputStream
operator|=
operator|new
name|FileOutputStream
argument_list|(
name|outputFile
argument_list|)
expr_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|inputStream
argument_list|,
name|outputStream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|inputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|inputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
if|if
condition|(
name|outputStream
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|outputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// do nothing
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|SolrServer
name|getSolrServer
parameter_list|()
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|solrServer
operator|==
literal|null
condition|)
block|{
name|solrServer
operator|=
name|createSolrServer
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|solrServer
return|;
block|}
block|}
end_class

end_unit

