begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Lock implementation for single node setup like for SegmentNodeStore  * It works by check async indexer status via IndexStatsMBean and  * then aborting it if found to be running  */
end_comment

begin_class
specifier|public
class|class
name|AbortingIndexerLock
implements|implements
name|AsyncIndexerLock
argument_list|<
name|SimpleToken
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|int
name|TIMEOUT_SECONDS
init|=
literal|300
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AsyncIndexInfoService
name|infoService
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|public
name|AbortingIndexerLock
parameter_list|(
name|AsyncIndexInfoService
name|infoService
parameter_list|)
block|{
name|this
argument_list|(
name|infoService
argument_list|,
name|Clock
operator|.
name|SIMPLE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbortingIndexerLock
parameter_list|(
name|AsyncIndexInfoService
name|infoService
parameter_list|,
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|infoService
operator|=
name|infoService
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|SimpleToken
name|lock
parameter_list|(
name|String
name|asyncIndexerLane
parameter_list|)
block|{
name|IndexStatsMBean
name|mbean
init|=
name|getIndexStatsMBean
argument_list|(
name|asyncIndexerLane
argument_list|)
decl_stmt|;
if|if
condition|(
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
operator|.
name|equals
argument_list|(
name|mbean
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Aborting current indexing run of async indexer for lane [{}]"
argument_list|,
name|asyncIndexerLane
argument_list|)
expr_stmt|;
block|}
name|mbean
operator|.
name|abortAndPause
argument_list|()
expr_stmt|;
name|retry
argument_list|(
name|mbean
argument_list|,
name|TIMEOUT_SECONDS
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Aborted and paused async indexer for lane [{}]"
argument_list|,
name|asyncIndexerLane
argument_list|)
expr_stmt|;
return|return
operator|new
name|SimpleToken
argument_list|(
name|asyncIndexerLane
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unlock
parameter_list|(
name|SimpleToken
name|token
parameter_list|)
block|{
name|getIndexStatsMBean
argument_list|(
name|token
operator|.
name|laneName
argument_list|)
operator|.
name|resume
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Resumed async indexer for lane [{}]"
argument_list|,
name|token
operator|.
name|laneName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IndexStatsMBean
name|getIndexStatsMBean
parameter_list|(
name|String
name|asyncIndexerLane
parameter_list|)
block|{
name|AsyncIndexInfo
name|info
init|=
name|infoService
operator|.
name|getInfo
argument_list|(
name|asyncIndexerLane
argument_list|)
decl_stmt|;
name|checkNotNull
argument_list|(
name|info
argument_list|,
literal|"No AsyncIndexInfo found for lane [%s]"
argument_list|,
name|asyncIndexerLane
argument_list|)
expr_stmt|;
name|IndexStatsMBean
name|mbean
init|=
name|info
operator|.
name|getStatsMBean
argument_list|()
decl_stmt|;
return|return
name|checkNotNull
argument_list|(
name|mbean
argument_list|,
literal|"No IndexStatsMBean associated with [%s]"
argument_list|,
name|asyncIndexerLane
argument_list|)
return|;
block|}
specifier|private
name|void
name|retry
parameter_list|(
name|IndexStatsMBean
name|mbean
parameter_list|,
name|int
name|timeoutSeconds
parameter_list|,
name|int
name|intervalBetweenTriesMsec
parameter_list|)
block|{
name|long
name|timeout
init|=
name|clock
operator|.
name|getTime
argument_list|()
operator|+
name|timeoutSeconds
operator|*
literal|1000L
decl_stmt|;
while|while
condition|(
name|clock
operator|.
name|getTime
argument_list|()
operator|<
name|timeout
condition|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
operator|.
name|equals
argument_list|(
name|mbean
operator|.
name|getStatus
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
name|int
name|delta
init|=
call|(
name|int
call|)
argument_list|(
name|timeout
operator|-
name|clock
operator|.
name|getTime
argument_list|()
operator|/
literal|1000
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Async indexer for lane [{}] found to be running. Would wait for {} seconds "
operator|+
literal|"more for it to stop"
argument_list|,
name|mbean
operator|.
name|getName
argument_list|()
argument_list|,
name|delta
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
name|intervalBetweenTriesMsec
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"RetryLoop failed, condition is false after "
operator|+
name|timeoutSeconds
operator|+
literal|" seconds"
argument_list|)
throw|;
block|}
block|}
end_class

begin_class
specifier|final
class|class
name|SimpleToken
implements|implements
name|AsyncIndexerLock
operator|.
name|LockToken
block|{
specifier|final
name|String
name|laneName
decl_stmt|;
name|SimpleToken
parameter_list|(
name|String
name|laneName
parameter_list|)
block|{
name|this
operator|.
name|laneName
operator|=
name|laneName
expr_stmt|;
block|}
block|}
end_class

end_unit

