begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
specifier|public
class|class
name|FlatFileNodeStoreBuilder
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OAK_INDEXER_USE_ZIP
init|=
literal|"oak.indexer.useZip"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OAK_INDEXER_DELETE_ORIGINAL
init|=
literal|"oak.indexer.deleteOriginal"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB
init|=
literal|"oak.indexer.maxSortMemoryInGB"
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|nodeStates
decl_stmt|;
specifier|private
specifier|final
name|File
name|workDir
decl_stmt|;
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|preferredPathElements
init|=
name|Collections
operator|.
name|emptySet
argument_list|()
decl_stmt|;
specifier|private
name|BlobStore
name|blobStore
decl_stmt|;
specifier|private
name|boolean
name|useZip
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|OAK_INDEXER_USE_ZIP
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|deleteOriginal
init|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|OAK_INDEXER_DELETE_ORIGINAL
argument_list|,
literal|"true"
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
name|int
name|maxMemory
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB
argument_list|,
literal|5
argument_list|)
decl_stmt|;
specifier|public
name|FlatFileNodeStoreBuilder
parameter_list|(
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|nodeStates
parameter_list|,
name|File
name|workDir
parameter_list|)
block|{
name|this
operator|.
name|nodeStates
operator|=
name|nodeStates
expr_stmt|;
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
block|}
specifier|public
name|FlatFileNodeStoreBuilder
name|withBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FlatFileNodeStoreBuilder
name|withPreferredPathElements
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|preferredPathElements
parameter_list|)
block|{
name|this
operator|.
name|preferredPathElements
operator|=
name|preferredPathElements
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|FlatFileStore
name|build
parameter_list|()
throws|throws
name|IOException
block|{
comment|//TODO Check not null blobStore
name|File
name|flatFileStoreDir
init|=
name|createStoreDir
argument_list|()
decl_stmt|;
name|File
name|storeFile
init|=
name|writeToStore
argument_list|(
name|flatFileStoreDir
argument_list|,
literal|"store.json"
argument_list|)
decl_stmt|;
name|File
name|sortedFile
init|=
name|sortStoreFile
argument_list|(
name|storeFile
argument_list|)
decl_stmt|;
return|return
operator|new
name|FlatFileStore
argument_list|(
name|sortedFile
argument_list|,
operator|new
name|NodeStateEntryReader
argument_list|(
name|blobStore
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|File
name|sortStoreFile
parameter_list|(
name|File
name|storeFile
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|sortWorkDir
init|=
operator|new
name|File
argument_list|(
name|storeFile
operator|.
name|getParent
argument_list|()
argument_list|,
literal|"sort-work-dir"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|sortWorkDir
argument_list|)
expr_stmt|;
name|NodeStateEntrySorter
name|sorter
init|=
operator|new
name|NodeStateEntrySorter
argument_list|(
operator|new
name|PathElementComparator
argument_list|(
name|preferredPathElements
argument_list|)
argument_list|,
name|storeFile
argument_list|,
name|sortWorkDir
argument_list|)
decl_stmt|;
name|logFlags
argument_list|()
expr_stmt|;
name|sorter
operator|.
name|setUseZip
argument_list|(
name|useZip
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|setMaxMemoryInGB
argument_list|(
name|maxMemory
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|setDeleteOriginal
argument_list|(
name|deleteOriginal
argument_list|)
expr_stmt|;
name|sorter
operator|.
name|sort
argument_list|()
expr_stmt|;
return|return
name|sorter
operator|.
name|getSortedFile
argument_list|()
return|;
block|}
specifier|private
name|void
name|logFlags
parameter_list|()
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Compression enabled while sorting : {} ({})"
argument_list|,
name|useZip
argument_list|,
name|OAK_INDEXER_USE_ZIP
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Delete original dump from traversal : {} ({})"
argument_list|,
name|deleteOriginal
argument_list|,
name|OAK_INDEXER_DELETE_ORIGINAL
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Max heap memory (GB) to be used for merge sort : {} ({})"
argument_list|,
name|maxMemory
argument_list|,
name|OAK_INDEXER_MAX_SORT_MEMORY_IN_GB
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|writeToStore
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|fileName
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|Stopwatch
name|sw
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
try|try
init|(
name|Writer
name|w
init|=
name|Files
operator|.
name|newWriter
argument_list|(
name|file
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
init|;
name|NodeStateEntryWriter
name|entryWriter
operator|=
operator|new
name|NodeStateEntryWriter
argument_list|(
name|blobStore
argument_list|,
name|w
argument_list|)
init|)
block|{
for|for
control|(
name|NodeStateEntry
name|e
range|:
name|nodeStates
control|)
block|{
name|entryWriter
operator|.
name|write
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Dumped nodestates in json format in {}"
argument_list|,
name|sw
argument_list|)
expr_stmt|;
return|return
name|file
return|;
block|}
specifier|private
name|File
name|createStoreDir
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"flat-file-store"
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|dir
return|;
block|}
block|}
end_class

end_unit

