begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_comment
comment|/**  * PrivilegeDefinitionWriter is responsible for writing privilege definitions  * to the repository without applying any validation checks.  */
end_comment

begin_class
class|class
name|PrivilegeDefinitionWriter
implements|implements
name|PrivilegeConstants
block|{
comment|/**      * The internal names of all built-in privileges that are not aggregates.      */
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|NON_AGGR_PRIVILEGES
init|=
operator|new
name|String
index|[]
block|{
name|REP_READ_NODES
block|,
name|REP_READ_PROPERTIES
block|,
name|REP_ADD_PROPERTIES
block|,
name|REP_ALTER_PROPERTIES
block|,
name|REP_REMOVE_PROPERTIES
block|,
name|JCR_ADD_CHILD_NODES
block|,
name|JCR_REMOVE_CHILD_NODES
block|,
name|JCR_REMOVE_NODE
block|,
name|JCR_READ_ACCESS_CONTROL
block|,
name|JCR_MODIFY_ACCESS_CONTROL
block|,
name|JCR_NODE_TYPE_MANAGEMENT
block|,
name|JCR_VERSION_MANAGEMENT
block|,
name|JCR_LOCK_MANAGEMENT
block|,
name|JCR_LIFECYCLE_MANAGEMENT
block|,
name|JCR_RETENTION_MANAGEMENT
block|,
name|JCR_WORKSPACE_MANAGEMENT
block|,
name|JCR_NODE_TYPE_DEFINITION_MANAGEMENT
block|,
name|JCR_NAMESPACE_MANAGEMENT
block|,
name|REP_PRIVILEGE_MANAGEMENT
block|,
name|REP_USER_MANAGEMENT
block|}
decl_stmt|;
comment|/**      * The internal names and aggregation definition of all built-in privileges      * that are aggregates (except for jcr:all).      */
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|AGGREGATE_PRIVILEGES
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|JCR_READ
argument_list|,
operator|new
name|String
index|[]
block|{
name|REP_READ_NODES
block|,
name|REP_READ_PROPERTIES
block|}
argument_list|,
name|JCR_MODIFY_PROPERTIES
argument_list|,
operator|new
name|String
index|[]
block|{
name|REP_ADD_PROPERTIES
block|,
name|REP_ALTER_PROPERTIES
block|,
name|REP_REMOVE_PROPERTIES
block|}
argument_list|,
name|JCR_WRITE
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_MODIFY_PROPERTIES
block|,
name|JCR_ADD_CHILD_NODES
block|,
name|JCR_REMOVE_CHILD_NODES
block|,
name|JCR_REMOVE_NODE
block|}
argument_list|,
name|REP_WRITE
argument_list|,
operator|new
name|String
index|[]
block|{
name|JCR_WRITE
block|,
name|JCR_NODE_TYPE_MANAGEMENT
block|}
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeBitsProvider
name|bitsMgr
decl_stmt|;
name|PrivilegeDefinitionWriter
parameter_list|(
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|bitsMgr
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
comment|/**      * Write the given privilege definition to the repository content.      *      * @param definition The new privilege definition.      * @throws RepositoryException If the definition can't be written.      */
name|void
name|writeDefinition
parameter_list|(
name|PrivilegeDefinition
name|definition
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|writeDefinitions
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|definition
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create the built-in privilege definitions during repository setup.      *      * @throws RepositoryException If an error occurs.      */
name|void
name|writeBuiltInDefinitions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|writeDefinitions
argument_list|(
name|getBuiltInDefinitions
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------------------
comment|/**      * @param definitions      * @throws RepositoryException      */
specifier|private
name|void
name|writeDefinitions
parameter_list|(
name|Iterable
argument_list|<
name|PrivilegeDefinition
argument_list|>
name|definitions
parameter_list|)
throws|throws
name|RepositoryException
block|{
try|try
block|{
comment|// make sure the privileges path is defined
name|Tree
name|privilegesTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|PRIVILEGES_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|privilegesTree
operator|.
name|exists
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Privilege store does not exist."
argument_list|)
throw|;
block|}
name|NodeUtil
name|privilegesNode
init|=
operator|new
name|NodeUtil
argument_list|(
name|privilegesTree
argument_list|)
decl_stmt|;
for|for
control|(
name|PrivilegeDefinition
name|definition
range|:
name|definitions
control|)
block|{
if|if
condition|(
name|privilegesNode
operator|.
name|hasChild
argument_list|(
name|definition
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Privilege definition with name '"
operator|+
name|definition
operator|.
name|getName
argument_list|()
operator|+
literal|"' already exists."
argument_list|)
throw|;
block|}
name|writePrivilegeNode
argument_list|(
name|privilegesNode
argument_list|,
name|definition
argument_list|)
expr_stmt|;
block|}
comment|/*             update the property storing the next privilege bits with the             privileges root tree. this is a cheap way to detect collisions that             may arise from concurrent registration of custom privileges.             */
name|bitsMgr
operator|.
name|getNext
argument_list|()
operator|.
name|writeTo
argument_list|(
name|privilegesTree
argument_list|)
expr_stmt|;
comment|// delegate validation to the commit validation (see above)
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
throw|throw
name|e
operator|.
name|asRepositoryException
argument_list|()
throw|;
block|}
block|}
specifier|private
name|void
name|writePrivilegeNode
parameter_list|(
name|NodeUtil
name|privilegesNode
parameter_list|,
name|PrivilegeDefinition
name|definition
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|name
init|=
name|definition
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeUtil
name|privNode
init|=
name|privilegesNode
operator|.
name|addChild
argument_list|(
name|name
argument_list|,
name|NT_REP_PRIVILEGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|privNode
operator|.
name|setBoolean
argument_list|(
name|REP_IS_ABSTRACT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|String
index|[]
name|declAggrNames
init|=
name|definition
operator|.
name|getDeclaredAggregateNames
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|definition
operator|.
name|getDeclaredAggregateNames
argument_list|()
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|boolean
name|isAggregate
init|=
name|declAggrNames
operator|.
name|length
operator|>
literal|0
decl_stmt|;
if|if
condition|(
name|isAggregate
condition|)
block|{
name|privNode
operator|.
name|setNames
argument_list|(
name|REP_AGGREGATES
argument_list|,
name|declAggrNames
argument_list|)
expr_stmt|;
block|}
name|PrivilegeBits
name|bits
decl_stmt|;
if|if
condition|(
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|bits
operator|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|isAggregate
condition|)
block|{
name|bits
operator|=
name|bitsMgr
operator|.
name|getBits
argument_list|(
name|declAggrNames
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bits
operator|=
name|bitsMgr
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
name|bits
operator|.
name|writeTo
argument_list|(
name|privNode
operator|.
name|getTree
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Collection
argument_list|<
name|PrivilegeDefinition
argument_list|>
name|getBuiltInDefinitions
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
name|definitions
init|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|PrivilegeDefinition
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|privilegeName
range|:
name|NON_AGGR_PRIVILEGES
control|)
block|{
name|PrivilegeDefinition
name|def
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|privilegeName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|privilegeName
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|privilegeName
range|:
name|AGGREGATE_PRIVILEGES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|PrivilegeDefinition
name|def
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|privilegeName
argument_list|,
literal|false
argument_list|,
name|AGGREGATE_PRIVILEGES
operator|.
name|get
argument_list|(
name|privilegeName
argument_list|)
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|privilegeName
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|PrivilegeDefinition
name|all
init|=
operator|new
name|PrivilegeDefinitionImpl
argument_list|(
name|JCR_ALL
argument_list|,
literal|false
argument_list|,
name|definitions
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|definitions
operator|.
name|put
argument_list|(
name|JCR_ALL
argument_list|,
name|all
argument_list|)
expr_stmt|;
return|return
name|definitions
operator|.
name|values
argument_list|()
return|;
block|}
block|}
end_class

end_unit

