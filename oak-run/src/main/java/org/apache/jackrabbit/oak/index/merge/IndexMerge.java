begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|merge
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|inventory
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|TypeCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|CompositeIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexPathServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|NodeCounterEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
operator|.
name|IndexDefinitionPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexCopier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|NodeStoreFixtureProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|cli
operator|.
name|Options
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mounts
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionParser
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSet
import|;
end_import

begin_import
import|import
name|joptsimple
operator|.
name|OptionSpec
import|;
end_import

begin_comment
comment|/**  * Merge custom index definitions with out-of-the-box index definitions.  */
end_comment

begin_class
specifier|public
class|class
name|IndexMerge
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|IndexMerge
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|OAK_CHILD_ORDER
init|=
literal|":childOrder"
decl_stmt|;
specifier|private
name|EditorHook
name|hook
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
name|boolean
name|quiet
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
operator|new
name|IndexMerge
argument_list|()
operator|.
name|execute
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
comment|/**      * Execute the command.      *      * @param args the command line arguments      */
specifier|public
name|void
name|execute
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|OptionParser
name|parser
init|=
operator|new
name|OptionParser
argument_list|()
decl_stmt|;
name|OptionSpec
argument_list|<
name|Void
argument_list|>
name|quietOption
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"quiet"
argument_list|,
literal|"be less chatty"
argument_list|)
decl_stmt|;
name|OptionSpec
argument_list|<
name|String
argument_list|>
name|indexDirectory
init|=
name|parser
operator|.
name|accepts
argument_list|(
literal|"indexDir"
argument_list|,
literal|"Index directory"
argument_list|)
operator|.
name|withRequiredArg
argument_list|()
decl_stmt|;
name|Options
name|opts
init|=
operator|new
name|Options
argument_list|()
decl_stmt|;
name|OptionSet
name|options
init|=
name|opts
operator|.
name|parseAndConfigure
argument_list|(
name|parser
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|quiet
operator|=
name|options
operator|.
name|has
argument_list|(
name|quietOption
argument_list|)
expr_stmt|;
name|boolean
name|isReadWrite
init|=
name|opts
operator|.
name|getCommonOpts
argument_list|()
operator|.
name|isReadWrite
argument_list|()
decl_stmt|;
name|boolean
name|success
init|=
literal|true
decl_stmt|;
name|String
name|indexRootDir
init|=
name|indexDirectory
operator|.
name|value
argument_list|(
name|options
argument_list|)
decl_stmt|;
if|if
condition|(
name|indexRootDir
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Required argument indexDir missing"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|isReadWrite
condition|)
block|{
name|log
argument_list|(
literal|"Repository connected in read-only mode. Use '--read-write' for write operations"
argument_list|)
expr_stmt|;
block|}
try|try
init|(
name|NodeStoreFixture
name|fixture
init|=
name|NodeStoreFixtureProvider
operator|.
name|create
argument_list|(
name|opts
argument_list|)
init|)
block|{
name|NodeStore
name|nodeStore
init|=
name|fixture
operator|.
name|getStore
argument_list|()
decl_stmt|;
name|BlobStore
name|blobStore
init|=
name|fixture
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|isReadWrite
condition|)
block|{
if|if
condition|(
name|blobStore
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No blob store specified"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|blobStore
operator|instanceof
name|GarbageCollectableBlobStore
operator|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Not a garbage collectable blob store: "
operator|+
name|blobStore
argument_list|)
throw|;
block|}
block|}
name|initHook
argument_list|(
name|indexRootDir
argument_list|,
operator|(
name|GarbageCollectableBlobStore
operator|)
name|blobStore
argument_list|)
expr_stmt|;
name|JsonObject
name|indexes
init|=
name|getIndexDefinitions
argument_list|(
name|nodeStore
argument_list|)
decl_stmt|;
comment|// the superseded indexes of the old repository
name|List
argument_list|<
name|String
argument_list|>
name|supersededKeys
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|getSupersededIndexDefs
argument_list|(
name|indexes
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|supersededKeys
argument_list|)
expr_stmt|;
comment|// keep only new indexes that are not superseded
name|Map
argument_list|<
name|String
argument_list|,
name|JsonObject
argument_list|>
name|indexMap
init|=
name|indexes
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|superseded
range|:
name|supersededKeys
control|)
block|{
if|if
condition|(
name|indexMap
operator|.
name|containsKey
argument_list|(
name|superseded
argument_list|)
condition|)
block|{
name|log
argument_list|(
literal|"Ignoring superseded index "
operator|+
name|superseded
argument_list|)
expr_stmt|;
name|indexMap
operator|.
name|remove
argument_list|(
name|superseded
argument_list|)
expr_stmt|;
block|}
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|indexKeys
init|=
name|indexes
operator|.
name|getChildren
argument_list|()
operator|.
name|keySet
argument_list|()
decl_stmt|;
name|IndexDefMergerUtils
operator|.
name|merge
argument_list|(
name|indexes
argument_list|,
name|indexes
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|newIndexKeys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|(
name|indexes
operator|.
name|getChildren
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|newIndexKeys
operator|.
name|removeAll
argument_list|(
name|indexKeys
argument_list|)
expr_stmt|;
if|if
condition|(
name|newIndexKeys
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
argument_list|(
literal|"No indexes to merge"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|newIndexKey
range|:
name|newIndexKeys
control|)
block|{
name|log
argument_list|(
literal|"New index: "
operator|+
name|newIndexKey
argument_list|)
expr_stmt|;
name|JsonObject
name|merged
init|=
name|indexMap
operator|.
name|get
argument_list|(
name|newIndexKey
argument_list|)
decl_stmt|;
name|String
name|def
init|=
name|merged
operator|.
name|toString
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Merged definition: "
operator|+
name|def
argument_list|)
expr_stmt|;
if|if
condition|(
name|isReadWrite
condition|)
block|{
name|storeIndex
argument_list|(
name|nodeStore
argument_list|,
name|newIndexKey
argument_list|,
name|merged
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|storeIndex
parameter_list|(
name|NodeStore
name|ns
parameter_list|,
name|String
name|newIndexName
parameter_list|,
name|JsonObject
name|indexDef
parameter_list|)
block|{
name|NodeBuilder
name|rootBuilder
init|=
name|ns
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|NodeBuilder
name|b
init|=
name|rootBuilder
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|newIndexName
argument_list|)
control|)
block|{
name|b
operator|=
name|b
operator|.
name|child
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|build
argument_list|(
literal|"  "
argument_list|,
name|b
argument_list|,
name|indexDef
argument_list|)
expr_stmt|;
try|try
block|{
name|ns
operator|.
name|merge
argument_list|(
name|rootBuilder
argument_list|,
name|hook
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|log
argument_list|(
literal|"Added index "
operator|+
name|newIndexName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to add index "
operator|+
name|newIndexName
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|build
parameter_list|(
name|String
name|linePrefix
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|,
name|JsonObject
name|json
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|json
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|JsopTokenizer
name|tokenizer
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|'['
argument_list|)
condition|)
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|tokenizer
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
name|String
name|jsonString
init|=
name|tokenizer
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|jsonString
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|log
argument_list|(
name|linePrefix
operator|+
literal|"array "
operator|+
name|k
operator|+
literal|" = "
operator|+
name|list
operator|+
literal|" (String[])"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|k
argument_list|,
name|list
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|TRUE
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|linePrefix
operator|+
literal|"property "
operator|+
name|k
operator|+
literal|" = true (Boolean)"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|k
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|FALSE
argument_list|)
condition|)
block|{
name|log
argument_list|(
name|linePrefix
operator|+
literal|"property "
operator|+
name|k
operator|+
literal|" = false (Boolean)"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|k
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|String
name|jsonString
init|=
name|tokenizer
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|int
name|split
init|=
name|TypeCodes
operator|.
name|split
argument_list|(
name|jsonString
argument_list|)
decl_stmt|;
if|if
condition|(
name|split
operator|!=
operator|-
literal|1
condition|)
block|{
name|int
name|type
init|=
name|TypeCodes
operator|.
name|decodeType
argument_list|(
name|split
argument_list|,
name|jsonString
argument_list|)
decl_stmt|;
name|String
name|v
init|=
name|TypeCodes
operator|.
name|decodeName
argument_list|(
name|split
argument_list|,
name|jsonString
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
else|else
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|k
argument_list|,
name|v
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|String
name|num
init|=
name|tokenizer
operator|.
name|getToken
argument_list|()
decl_stmt|;
name|boolean
name|isDouble
init|=
name|num
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
operator|>=
literal|0
decl_stmt|;
if|if
condition|(
name|isDouble
condition|)
block|{
name|double
name|d
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|num
argument_list|)
decl_stmt|;
name|log
argument_list|(
name|linePrefix
operator|+
literal|"property "
operator|+
name|k
operator|+
literal|" = "
operator|+
name|d
operator|+
literal|" (Double)"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|k
argument_list|,
name|d
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|x
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|num
argument_list|)
decl_stmt|;
name|log
argument_list|(
name|linePrefix
operator|+
literal|"property "
operator|+
name|k
operator|+
literal|" = "
operator|+
name|x
operator|+
literal|" (Long)"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|k
argument_list|,
name|x
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|ArrayList
argument_list|<
name|String
argument_list|>
name|childOrder
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|JsonObject
argument_list|>
name|e
range|:
name|json
operator|.
name|getChildren
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|k
init|=
name|e
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|JsonObject
name|el
init|=
name|e
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|log
argument_list|(
name|linePrefix
operator|+
literal|"child "
operator|+
name|k
argument_list|)
expr_stmt|;
name|build
argument_list|(
name|linePrefix
operator|+
literal|"  "
argument_list|,
name|builder
operator|.
name|child
argument_list|(
name|k
argument_list|)
argument_list|,
operator|(
name|JsonObject
operator|)
name|el
argument_list|)
expr_stmt|;
name|childOrder
operator|.
name|add
argument_list|(
name|k
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|childOrder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|OAK_CHILD_ORDER
argument_list|,
name|childOrder
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the names of the index definitions that are superseded in one of the      * indexes.      *      * @param indexDefs all index definitions      * @return the superseded indexes      */
specifier|public
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|getSupersededIndexDefs
parameter_list|(
name|JsonObject
name|indexDefs
parameter_list|)
block|{
name|HashSet
argument_list|<
name|String
argument_list|>
name|supersededIndexes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|JsonObject
name|d
range|:
name|indexDefs
operator|.
name|getChildren
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
name|String
name|supersedes
init|=
name|d
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
literal|"supersedes"
argument_list|)
decl_stmt|;
if|if
condition|(
name|supersedes
operator|!=
literal|null
condition|)
block|{
name|JsopTokenizer
name|tokenizer
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|supersedes
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|'['
argument_list|)
condition|)
block|{
while|while
condition|(
operator|!
name|tokenizer
operator|.
name|matches
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|String
name|s
init|=
name|tokenizer
operator|.
name|getToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|s
operator|.
name|contains
argument_list|(
literal|"/@"
argument_list|)
condition|)
block|{
name|supersededIndexes
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unexpected token: "
operator|+
name|tokenizer
operator|.
name|getToken
argument_list|()
argument_list|)
throw|;
block|}
name|tokenizer
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|supersededIndexes
return|;
block|}
comment|/**      * Get the the index definitions from a node store. It uses the index path      * service and index definition printer from Oak.      *      * @param nodeStore the source node store      * @return a JSON object with all index definitions      */
specifier|private
specifier|static
name|JsonObject
name|getIndexDefinitions
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexPathService
name|imageIndexPathService
init|=
operator|new
name|IndexPathServiceImpl
argument_list|(
name|nodeStore
argument_list|)
decl_stmt|;
name|IndexDefinitionPrinter
name|indexDefinitionPrinter
init|=
operator|new
name|IndexDefinitionPrinter
argument_list|(
name|nodeStore
argument_list|,
name|imageIndexPathService
argument_list|)
decl_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|printWriter
init|=
operator|new
name|PrintWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|indexDefinitionPrinter
operator|.
name|print
argument_list|(
name|printWriter
argument_list|,
name|Format
operator|.
name|JSON
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|printWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|String
name|json
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
name|JsonObject
operator|.
name|fromJson
argument_list|(
name|json
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|void
name|log
parameter_list|(
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|quiet
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|initHook
parameter_list|(
name|String
name|indexRootDir
parameter_list|,
name|GarbageCollectableBlobStore
name|blobStore
parameter_list|)
throws|throws
name|IOException
block|{
name|IndexTracker
name|tracker
init|=
operator|new
name|IndexTracker
argument_list|()
decl_stmt|;
name|executorService
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|IndexCopier
name|indexCopier
init|=
operator|new
name|IndexCopier
argument_list|(
name|executorService
argument_list|,
operator|new
name|File
argument_list|(
name|indexRootDir
argument_list|)
argument_list|)
decl_stmt|;
name|MountInfoProvider
name|mip
init|=
name|createMountInfoProvider
argument_list|()
decl_stmt|;
name|LuceneIndexEditorProvider
name|luceneEditor
init|=
operator|new
name|LuceneIndexEditorProvider
argument_list|(
name|indexCopier
argument_list|,
name|tracker
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|mip
argument_list|)
decl_stmt|;
name|luceneEditor
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
name|CompositeIndexEditorProvider
name|indexEditor
init|=
operator|new
name|CompositeIndexEditorProvider
argument_list|(
name|luceneEditor
argument_list|,
operator|new
name|PropertyIndexEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|,
operator|new
name|ReferenceEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|,
operator|new
name|NodeCounterEditorProvider
argument_list|()
operator|.
name|with
argument_list|(
name|mip
argument_list|)
argument_list|)
decl_stmt|;
name|IndexUpdateProvider
name|updateProvider
init|=
operator|new
name|IndexUpdateProvider
argument_list|(
name|indexEditor
argument_list|,
literal|"async"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|hook
operator|=
operator|new
name|EditorHook
argument_list|(
name|updateProvider
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|MountInfoProvider
name|createMountInfoProvider
parameter_list|()
block|{
comment|// TODO probably need the ability to configure mounts
return|return
name|Mounts
operator|.
name|newBuilder
argument_list|()
operator|.
name|mount
argument_list|(
literal|"libs"
argument_list|,
literal|true
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
comment|// pathsSupportingFragments
literal|"/oak:index/*$"
argument_list|)
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
comment|// mountedPaths
literal|"/libs"
argument_list|,
literal|"/apps"
argument_list|,
literal|"/jcr:system/rep:permissionStore/oak:mount-libs-crx.default"
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
block|}
end_class

end_unit

