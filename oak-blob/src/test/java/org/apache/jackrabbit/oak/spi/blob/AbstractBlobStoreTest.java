begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|core
operator|.
name|IsInstanceOf
operator|.
name|instanceOf
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|CountingOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|NullOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|stats
operator|.
name|BlobStatsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Tests a BlobStore implementation.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractBlobStoreTest
block|{
specifier|protected
name|GarbageCollectableBlobStore
name|store
decl_stmt|;
comment|/**      * Should be overridden by subclasses to set the {@link #store} variable.      */
annotation|@
name|Before
specifier|public
specifier|abstract
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
function_decl|;
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|int
name|getArtifactSize
parameter_list|()
block|{
return|return
literal|2080
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWriteFile
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|.
name|setBlockSize
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|4
operator|*
literal|1024
operator|*
literal|1024
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|tempFileName
init|=
literal|"target/temp/test"
decl_stmt|;
name|File
name|tempFile
init|=
operator|new
name|File
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|tempFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|OutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|s
init|=
name|store
operator|.
name|writeBlob
argument_list|(
name|tempFileName
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|store
operator|.
name|getBlobLength
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|+=
literal|1024
control|)
block|{
name|store
operator|.
name|readBlob
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
name|buff
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|data
index|[
name|i
index|]
argument_list|,
name|buff
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|store
operator|.
name|writeBlob
argument_list|(
name|tempFileName
operator|+
literal|"_wrong"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCombinedIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|2
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|store
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|combinedId
init|=
name|id
operator|+
name|id
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|store
operator|.
name|getBlobLength
argument_list|(
name|combinedId
argument_list|)
argument_list|)
expr_stmt|;
name|doTestRead
argument_list|(
operator|new
name|byte
index|[
literal|4
index|]
argument_list|,
literal|4
argument_list|,
name|combinedId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|store
operator|.
name|readBlob
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|store
operator|.
name|getBlobLength
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCloseStream
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|-
literal|1
return|;
block|}
block|}
decl_stmt|;
name|store
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|closed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExceptionWhileReading
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|AtomicBoolean
name|closed
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
name|InputStream
name|in
init|=
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|closed
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"abc"
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
try|try
block|{
name|store
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|msg
argument_list|,
name|msg
operator|.
name|indexOf
argument_list|(
literal|"abc"
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|closed
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalIdentifier
parameter_list|()
throws|throws
name|Exception
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1
index|]
decl_stmt|;
try|try
block|{
name|store
operator|.
name|readBlob
argument_list|(
literal|"ff"
argument_list|,
literal|0
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalIdentifier2
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|store
operator|.
name|getBlobLength
argument_list|(
literal|"ff"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIllegalIdentifier3
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|store
operator|instanceof
name|AbstractBlobStore
condition|)
block|{
try|try
block|{
operator|(
operator|(
name|AbstractBlobStore
operator|)
name|store
operator|)
operator|.
name|mark
argument_list|(
literal|"ff"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSmall
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|10
argument_list|,
literal|300
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMedium
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLarge
parameter_list|()
throws|throws
name|Exception
block|{
name|doTest
argument_list|(
literal|1000
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGarbageCollection
parameter_list|()
throws|throws
name|Exception
block|{
name|HashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|byte
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|ArrayList
argument_list|<
name|String
argument_list|>
name|mem
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|int
name|count
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1000
condition|;
name|i
operator|*=
literal|10
control|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|i
index|]
decl_stmt|;
name|String
name|id
decl_stmt|;
name|id
operator|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// copy the id so the string is not in the weak hash map
name|map
operator|.
name|put
argument_list|(
operator|new
name|String
argument_list|(
name|id
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|mem
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|data
operator|=
operator|new
name|byte
index|[
name|i
index|]
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|data
argument_list|,
operator|(
name|byte
operator|)
literal|1
argument_list|)
expr_stmt|;
name|id
operator|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
comment|// copy the id so the string is not in the weak hash map
name|map
operator|.
name|put
argument_list|(
operator|new
name|String
argument_list|(
name|id
argument_list|)
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|mem
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
name|store
operator|.
name|startMark
argument_list|()
expr_stmt|;
name|store
operator|.
name|sweep
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|test
init|=
name|readFully
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|equals
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|,
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|mem
operator|.
name|clear
argument_list|()
expr_stmt|;
name|store
operator|.
name|clearInUse
argument_list|()
expr_stmt|;
name|store
operator|.
name|startMark
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|byte
index|[]
name|d
init|=
name|map
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
index|[
literal|0
index|]
operator|!=
literal|0
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|store
operator|instanceof
name|AbstractBlobStore
condition|)
block|{
operator|(
operator|(
name|AbstractBlobStore
operator|)
name|store
operator|)
operator|.
name|mark
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// this should mark the id
name|store
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
name|count
operator|=
name|store
operator|.
name|sweep
argument_list|()
expr_stmt|;
name|store
operator|.
name|clearInUse
argument_list|()
expr_stmt|;
name|store
operator|.
name|clearCache
argument_list|()
expr_stmt|;
comment|// https://issues.apache.org/jira/browse/OAK-60
comment|// endure there is at least one old entry (with age 1 ms)
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
name|store
operator|.
name|startMark
argument_list|()
expr_stmt|;
name|count
operator|=
name|store
operator|.
name|sweep
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"count: "
operator|+
name|count
argument_list|,
name|count
operator|>
literal|0
argument_list|)
expr_stmt|;
name|int
name|failedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|long
name|length
init|=
name|store
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
decl_stmt|;
try|try
block|{
name|readFully
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|id
operator|+
literal|":"
operator|+
name|length
argument_list|,
name|length
operator|>
name|store
operator|.
name|getBlockSizeMin
argument_list|()
argument_list|)
expr_stmt|;
name|failedCount
operator|++
expr_stmt|;
block|}
block|}
name|assertTrue
argument_list|(
literal|"failedCount: "
operator|+
name|failedCount
argument_list|,
name|failedCount
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReference
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeThat
argument_list|(
name|store
argument_list|,
name|instanceOf
argument_list|(
name|AbstractBlobStore
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|AbstractBlobStore
name|abs
init|=
operator|(
name|AbstractBlobStore
operator|)
name|store
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
name|byte
index|[]
name|key
init|=
operator|new
name|byte
index|[
literal|256
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|abs
operator|.
name|setReferenceKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|1000
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|String
name|blobId
init|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|reference
init|=
name|store
operator|.
name|getReference
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|String
name|blobId2
init|=
name|store
operator|.
name|getBlobId
argument_list|(
name|reference
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|blobId
argument_list|,
name|blobId2
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|doTest
parameter_list|(
name|int
name|maxLength
parameter_list|,
name|int
name|count
parameter_list|)
throws|throws
name|Exception
block|{
name|String
index|[]
name|s
init|=
operator|new
name|String
index|[
name|count
operator|*
literal|2
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
condition|;
control|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|r
operator|.
name|nextInt
argument_list|(
name|maxLength
argument_list|)
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|s
index|[
name|i
operator|++
index|]
operator|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
name|s
index|[
name|i
operator|++
index|]
operator|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|r
operator|.
name|setSeed
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
condition|;
control|)
block|{
name|int
name|expectedLen
init|=
name|r
operator|.
name|nextInt
argument_list|(
name|maxLength
argument_list|)
decl_stmt|;
name|byte
index|[]
name|expectedData
init|=
operator|new
name|byte
index|[
name|expectedLen
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|expectedData
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedLen
argument_list|,
name|store
operator|.
name|getBlobLength
argument_list|(
name|s
index|[
name|i
operator|++
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|s
index|[
name|i
operator|++
index|]
decl_stmt|;
name|doTestRead
argument_list|(
name|expectedData
argument_list|,
name|expectedLen
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestRead
parameter_list|(
name|byte
index|[]
name|expectedData
parameter_list|,
name|int
name|expectedLen
parameter_list|,
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
index|[]
name|got
init|=
name|readFully
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedLen
argument_list|,
name|got
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedData
operator|.
name|length
argument_list|,
name|got
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|got
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|assertEquals
argument_list|(
name|expectedData
index|[
name|i
index|]
argument_list|,
name|got
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|readFully
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|Exception
block|{
name|int
name|len
init|=
operator|(
name|int
operator|)
name|store
operator|.
name|getBlobLength
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
decl_stmt|;
if|if
condition|(
name|len
operator|<
literal|100
condition|)
block|{
name|data
operator|=
operator|new
name|byte
index|[
name|len
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|store
operator|.
name|readBlob
argument_list|(
name|id
argument_list|,
name|i
argument_list|,
name|data
argument_list|,
name|i
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|data
operator|=
name|BlobStoreInputStream
operator|.
name|readFully
argument_list|(
name|store
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|len
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|FileBlobStore
name|store
init|=
operator|new
name|FileBlobStore
argument_list|(
literal|"target/temp"
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|addFiles
argument_list|(
name|store
argument_list|,
literal|"~/temp/ds"
argument_list|)
decl_stmt|;
name|extractFiles
argument_list|(
name|store
argument_list|,
name|id
argument_list|,
literal|"target/test"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|extractFiles
parameter_list|(
name|BlobStore
name|store
parameter_list|,
name|String
name|listingId
parameter_list|,
name|String
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|listing
init|=
operator|new
name|String
argument_list|(
name|BlobStoreInputStream
operator|.
name|readFully
argument_list|(
name|store
argument_list|,
name|listingId
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|listing
argument_list|)
decl_stmt|;
name|File
name|targetDir
init|=
operator|new
name|File
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|targetDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|t
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
do|do
block|{
name|String
name|file
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|id
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
name|BlobStoreInputStream
operator|.
name|readFully
argument_list|(
name|store
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|File
name|outFile
init|=
operator|new
name|File
argument_list|(
name|targetDir
argument_list|,
name|file
argument_list|)
decl_stmt|;
name|outFile
operator|.
name|getParentFile
argument_list|()
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|FileOutputStream
name|out
init|=
operator|new
name|FileOutputStream
argument_list|(
name|outFile
argument_list|)
decl_stmt|;
try|try
block|{
name|out
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
block|}
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
name|addFiles
parameter_list|(
name|BlobStore
name|store
parameter_list|,
name|String
name|dir
parameter_list|)
throws|throws
name|Exception
block|{
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|root
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|parent
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|)
operator|.
name|getParentFile
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|addFiles
argument_list|(
name|list
argument_list|,
operator|new
name|File
argument_list|(
name|root
argument_list|)
argument_list|)
expr_stmt|;
name|JsopBuilder
name|listing
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|listing
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|f
range|:
name|list
control|)
block|{
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|String
name|id
init|=
name|store
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
decl_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|String
name|name
init|=
name|f
operator|.
name|substring
argument_list|(
name|parent
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|listing
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|value
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|listing
operator|.
name|newline
argument_list|()
expr_stmt|;
block|}
name|listing
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|String
name|l
init|=
name|listing
operator|.
name|toString
argument_list|()
decl_stmt|;
name|String
name|id
init|=
name|store
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|l
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|id
return|;
block|}
specifier|private
specifier|static
name|void
name|addFiles
parameter_list|(
name|ArrayList
argument_list|<
name|String
argument_list|>
name|list
parameter_list|,
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
for|for
control|(
name|File
name|f
range|:
name|file
operator|.
name|listFiles
argument_list|()
control|)
block|{
name|addFiles
argument_list|(
name|list
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return;
block|}
name|list
operator|.
name|add
argument_list|(
name|file
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|list
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|createArtifacts
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|store
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ids
operator|.
name|remove
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"unexpected ids in store: "
operator|+
name|ids
argument_list|,
name|ids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|createArtifacts
argument_list|()
decl_stmt|;
name|store
operator|.
name|deleteChunks
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ids
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|store
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|ret
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteCount
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|createArtifacts
argument_list|()
decl_stmt|;
name|long
name|count
init|=
name|store
operator|.
name|countDeleteChunks
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|ids
argument_list|)
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|store
operator|.
name|getAllChunkIds
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ret
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ret
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|ret
operator|.
name|toString
argument_list|()
argument_list|,
name|ret
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ids
operator|.
name|size
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|deleteUpdatedBlob
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|id
init|=
name|store
operator|.
name|writeBlob
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
name|getArtifactSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|long
name|beforeUpdateTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Should update the timestamp
name|String
name|id2
init|=
name|store
operator|.
name|writeBlob
argument_list|(
name|randomStream
argument_list|(
literal|0
argument_list|,
name|getArtifactSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|id
argument_list|,
name|id2
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|chunks
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|store
operator|.
name|resolveChunks
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|chunks
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|long
name|count
init|=
name|store
operator|.
name|countDeleteChunks
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
name|chunks
argument_list|)
argument_list|,
name|beforeUpdateTime
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Deleted updated blobs"
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|uploadCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|supportsStatsCollection
argument_list|()
argument_list|)
expr_stmt|;
name|TestCollector
name|collector
init|=
operator|new
name|TestCollector
argument_list|()
decl_stmt|;
name|setupCollector
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|int
name|size
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|store
operator|.
name|writeBlob
argument_list|(
name|randomStream
argument_list|(
literal|42
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
comment|//For chunked storage the actual stored size is greater than the file size
name|assertCollectedSize
argument_list|(
name|collector
operator|.
name|size
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collector
operator|.
name|uploadCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|downloadCallback
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|supportsStatsCollection
argument_list|()
argument_list|)
expr_stmt|;
name|TestCollector
name|collector
init|=
operator|new
name|TestCollector
argument_list|()
decl_stmt|;
name|setupCollector
argument_list|(
name|collector
argument_list|)
expr_stmt|;
name|int
name|size
init|=
literal|10
operator|*
literal|1024
decl_stmt|;
name|String
name|id
init|=
name|store
operator|.
name|writeBlob
argument_list|(
name|randomStream
argument_list|(
literal|42
argument_list|,
name|size
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|clearCache
argument_list|()
expr_stmt|;
name|collector
operator|.
name|reset
argument_list|()
expr_stmt|;
name|InputStream
name|is
init|=
name|store
operator|.
name|getInputStream
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|CountingOutputStream
name|cos
init|=
operator|new
name|CountingOutputStream
argument_list|(
operator|new
name|NullOutputStream
argument_list|()
argument_list|)
decl_stmt|;
name|IOUtils
operator|.
name|copy
argument_list|(
name|is
argument_list|,
name|cos
argument_list|)
expr_stmt|;
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|size
argument_list|,
name|cos
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
comment|//For chunked storage the actual stored size is greater than the file size
name|assertCollectedSize
argument_list|(
name|collector
operator|.
name|size
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|collector
operator|.
name|downloadCount
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setupCollector
parameter_list|(
name|BlobStatsCollector
name|statsCollector
parameter_list|)
block|{
if|if
condition|(
name|store
operator|instanceof
name|AbstractBlobStore
condition|)
block|{
operator|(
operator|(
name|AbstractBlobStore
operator|)
name|store
operator|)
operator|.
name|setStatsCollector
argument_list|(
name|statsCollector
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|supportsStatsCollection
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|createArtifacts
parameter_list|()
throws|throws
name|Exception
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|number
condition|;
name|i
operator|++
control|)
block|{
name|String
name|id
init|=
name|store
operator|.
name|writeBlob
argument_list|(
name|randomStream
argument_list|(
name|i
argument_list|,
name|getArtifactSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|Iterator
argument_list|<
name|String
argument_list|>
name|iter
init|=
name|store
operator|.
name|resolveChunks
argument_list|(
name|id
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ids
return|;
block|}
specifier|static
name|InputStream
name|randomStream
parameter_list|(
name|int
name|seed
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
name|seed
argument_list|)
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|size
index|]
decl_stmt|;
name|r
operator|.
name|nextBytes
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|assertCollectedSize
parameter_list|(
name|long
name|collectedSize
parameter_list|,
name|long
name|expectedSize
parameter_list|)
block|{
if|if
condition|(
name|collectedSize
operator|<
name|expectedSize
condition|)
block|{
name|fail
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"Collected size %d is less that expected size %d"
argument_list|,
name|collectedSize
argument_list|,
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestCollector
implements|implements
name|BlobStatsCollector
block|{
name|long
name|size
decl_stmt|;
name|int
name|uploadCount
decl_stmt|;
name|int
name|downloadCount
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|uploaded
parameter_list|(
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|+=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uploadCompleted
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
name|uploadCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|uploadFailed
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|downloaded
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|size
parameter_list|)
block|{
name|this
operator|.
name|size
operator|+=
name|size
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|downloadCompleted
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{
name|downloadCount
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|downloadFailed
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|deleted
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|deleteCompleted
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|deleteFailed
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|deletedAllOlderThan
parameter_list|(
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|min
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|deleteAllOlderThanCompleted
parameter_list|(
name|int
name|deletedCount
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|deleteAllOlderThanFailed
parameter_list|(
name|long
name|min
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|recordAdded
parameter_list|(
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|size
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|addRecordCompleted
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|addRecordFailed
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordCalled
parameter_list|(
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|size
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordCompleted
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordFailed
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordIfStoredCalled
parameter_list|(
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|size
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordIfStoredCompleted
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordIfStoredFailed
parameter_list|(
name|String
name|blobId
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordFromReferenceCalled
parameter_list|(
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|size
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordFromReferenceCompleted
parameter_list|(
name|String
name|reference
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getRecordFromReferenceFailed
parameter_list|(
name|String
name|reference
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getAllIdentifiersCalled
parameter_list|(
name|long
name|timeTaken
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getAllIdentifiersCompleted
parameter_list|()
block|{ }
annotation|@
name|Override
specifier|public
name|void
name|getAllIdentifiersFailed
parameter_list|()
block|{ }
name|void
name|reset
parameter_list|()
block|{
name|size
operator|=
literal|0
expr_stmt|;
name|downloadCount
operator|=
literal|0
expr_stmt|;
name|uploadCount
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

