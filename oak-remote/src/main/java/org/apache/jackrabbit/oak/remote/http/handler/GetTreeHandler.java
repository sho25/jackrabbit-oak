begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonEncoding
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|JsonGenerator
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteTreeFilters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|RemoteValue
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|RemoteValues
operator|.
name|renderJson
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendGone
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendInternalServerError
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|remote
operator|.
name|http
operator|.
name|handler
operator|.
name|ResponseUtils
operator|.
name|sendNotFound
import|;
end_import

begin_class
specifier|abstract
class|class
name|GetTreeHandler
implements|implements
name|Handler
block|{
specifier|protected
specifier|abstract
name|String
name|readPath
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|RemoteRevision
name|readRevision
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|RemoteSession
name|session
parameter_list|)
function_decl|;
annotation|@
name|Override
specifier|public
name|void
name|handle
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|RemoteSession
name|session
init|=
operator|(
name|RemoteSession
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"session"
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
name|sendInternalServerError
argument_list|(
name|response
argument_list|,
literal|"session not found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteRevision
name|revision
init|=
name|readRevision
argument_list|(
name|request
argument_list|,
name|session
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|==
literal|null
condition|)
block|{
name|sendGone
argument_list|(
name|response
argument_list|,
literal|"unable to read the revision"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RemoteTree
name|tree
init|=
name|session
operator|.
name|readTree
argument_list|(
name|revision
argument_list|,
name|readPath
argument_list|(
name|request
argument_list|)
argument_list|,
name|readFilters
argument_list|(
name|request
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
name|sendNotFound
argument_list|(
name|response
argument_list|,
name|singletonMap
argument_list|(
literal|"Oak-Revision"
argument_list|,
name|revision
operator|.
name|asString
argument_list|()
argument_list|)
argument_list|,
literal|"tree not found"
argument_list|)
expr_stmt|;
return|return;
block|}
name|response
operator|.
name|setStatus
argument_list|(
name|HttpServletResponse
operator|.
name|SC_OK
argument_list|)
expr_stmt|;
name|response
operator|.
name|setHeader
argument_list|(
literal|"Oak-Revision"
argument_list|,
name|revision
operator|.
name|asString
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|setContentType
argument_list|(
literal|"application/json"
argument_list|)
expr_stmt|;
name|ServletOutputStream
name|stream
init|=
name|response
operator|.
name|getOutputStream
argument_list|()
decl_stmt|;
name|JsonGenerator
name|generator
init|=
operator|new
name|JsonFactory
argument_list|()
operator|.
name|createJsonGenerator
argument_list|(
name|stream
argument_list|,
name|JsonEncoding
operator|.
name|UTF8
argument_list|)
decl_stmt|;
name|renderResponse
argument_list|(
name|generator
argument_list|,
name|tree
argument_list|)
expr_stmt|;
name|generator
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|renderResponse
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|RemoteTree
name|tree
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|tree
operator|==
literal|null
condition|)
block|{
name|generator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"properties"
argument_list|)
expr_stmt|;
name|renderProperties
argument_list|(
name|generator
argument_list|,
name|tree
operator|.
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"children"
argument_list|)
expr_stmt|;
name|renderChildren
argument_list|(
name|generator
argument_list|,
name|tree
operator|.
name|getChildren
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeFieldName
argument_list|(
literal|"hasMoreChildren"
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeBoolean
argument_list|(
name|tree
operator|.
name|hasMoreChildren
argument_list|()
argument_list|)
expr_stmt|;
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|renderChildren
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|children
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RemoteTree
argument_list|>
name|entry
range|:
name|children
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|renderResponse
argument_list|(
name|generator
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|renderProperties
parameter_list|(
name|JsonGenerator
name|generator
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|generator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RemoteValue
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|generator
operator|.
name|writeFieldName
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|renderJson
argument_list|(
name|generator
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|generator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
block|}
specifier|private
name|RemoteTreeFilters
name|readFilters
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
operator|new
name|RemoteTreeFilters
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
name|Integer
name|depth
init|=
name|readDepth
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getDepth
argument_list|()
return|;
block|}
return|return
name|depth
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getPropertyFilters
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|propertyFilters
init|=
name|readPropertyFilters
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyFilters
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getPropertyFilters
argument_list|()
return|;
block|}
return|return
name|propertyFilters
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getNodeFilters
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|nodeFilters
init|=
name|readNodeFilters
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodeFilters
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getNodeFilters
argument_list|()
return|;
block|}
return|return
name|nodeFilters
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getBinaryThreshold
parameter_list|()
block|{
name|Long
name|binaryThreshold
init|=
name|readBinaryThreshold
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|binaryThreshold
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getBinaryThreshold
argument_list|()
return|;
block|}
return|return
name|binaryThreshold
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getChildrenStart
parameter_list|()
block|{
name|Integer
name|childrenStart
init|=
name|readChildrenStart
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|childrenStart
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getChildrenStart
argument_list|()
return|;
block|}
return|return
name|childrenStart
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getChildrenCount
parameter_list|()
block|{
name|Integer
name|childrenCount
init|=
name|readChildrenCount
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|childrenCount
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getChildrenCount
argument_list|()
return|;
block|}
return|return
name|childrenCount
return|;
block|}
block|}
return|;
block|}
specifier|private
name|Integer
name|readDepth
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readIntegerParameter
argument_list|(
name|request
argument_list|,
literal|"depth"
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|readPropertyFilters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readSetParameter
argument_list|(
name|request
argument_list|,
literal|"properties"
argument_list|)
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|readNodeFilters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readSetParameter
argument_list|(
name|request
argument_list|,
literal|"children"
argument_list|)
return|;
block|}
specifier|private
name|Long
name|readBinaryThreshold
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readLongParameter
argument_list|(
name|request
argument_list|,
literal|"binaries"
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|readChildrenStart
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readIntegerParameter
argument_list|(
name|request
argument_list|,
literal|"childrenStart"
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|readChildrenCount
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
return|return
name|readIntegerParameter
argument_list|(
name|request
argument_list|,
literal|"childrenCount"
argument_list|)
return|;
block|}
specifier|private
name|Integer
name|readIntegerParameter
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Integer
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Long
name|readLongParameter
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
name|value
init|=
name|request
operator|.
name|getParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Long
name|result
decl_stmt|;
try|try
block|{
name|result
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|result
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|readSetParameter
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|String
index|[]
name|values
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|Sets
operator|.
name|newHashSet
argument_list|(
name|values
argument_list|)
return|;
block|}
block|}
end_class

end_unit

