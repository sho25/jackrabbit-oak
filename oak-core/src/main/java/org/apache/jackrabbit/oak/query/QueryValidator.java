begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements. See the NOTICE file distributed with this  * work for additional information regarding copyright ownership. The ASF  * licenses this file to You under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law  * or agreed to in writing, software distributed under the License is  * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied. See the License for the specific language  * governing permissions and limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * A validator for query. Invalid queries either log a warning, or throw an  * exception when trying to execute.  */
end_comment

begin_class
specifier|public
class|class
name|QueryValidator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryValidator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The name of the query validator node.      */
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_VALIDATOR
init|=
literal|"queryValidator"
decl_stmt|;
comment|/**      * The next time to log a warning for a query, in milliseconds.      */
specifier|private
specifier|static
specifier|final
name|int
name|NEXT_LOG_MILLIS
init|=
literal|10
operator|*
literal|1000
decl_stmt|;
comment|/**      * The map of invalid query patterns.      */
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|String
argument_list|,
name|ProblematicQueryPattern
argument_list|>
name|map
init|=
operator|new
name|ConcurrentSkipListMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Add a pattern.      *       * @param key the key      * @param pattern the pattern regular expression - if empty, the entry is removed      * @param comment the comment      * @param failQuery - if true, trying to run such a query will fail;      *            otherwise the queries that will work, but will log a warning.      *            A warning is logged at most once every 10 seconds.      */
specifier|public
name|void
name|setPattern
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|comment
parameter_list|,
name|boolean
name|failQuery
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"set pattern key={} pattern={} comment={} failQuery={}"
argument_list|,
name|key
argument_list|,
name|pattern
argument_list|,
name|comment
argument_list|,
name|failQuery
argument_list|)
expr_stmt|;
if|if
condition|(
name|pattern
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ProblematicQueryPattern
name|p
init|=
operator|new
name|ProblematicQueryPattern
argument_list|(
name|key
argument_list|,
name|pattern
argument_list|,
name|comment
argument_list|,
name|failQuery
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get the current set of pattern data.      *       * @return the json representation      */
specifier|public
name|String
name|getJson
parameter_list|()
block|{
name|JsopBuilder
name|b
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
for|for
control|(
name|ProblematicQueryPattern
name|p
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|b
operator|.
name|newline
argument_list|()
operator|.
name|encodedValue
argument_list|(
name|p
operator|.
name|getJson
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Check if a query is valid. It is either valid, logs a warning, or throws a exception if invalid.      *       * @param statement the query statement      * @throws ParseException if it is invalid      */
specifier|public
name|void
name|checkStatement
parameter_list|(
name|String
name|statement
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
name|map
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// the normal case: no patterns defined
return|return;
block|}
for|for
control|(
name|ProblematicQueryPattern
name|p
range|:
name|map
operator|.
name|values
argument_list|()
control|)
block|{
name|p
operator|.
name|checkStatement
argument_list|(
name|statement
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|NodeState
name|def
init|=
name|store
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildNode
argument_list|(
name|IndexConstants
operator|.
name|INDEX_DEFINITIONS_NAME
argument_list|)
operator|.
name|getChildNode
argument_list|(
name|QUERY_VALIDATOR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|def
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return;
block|}
for|for
control|(
name|ChildNodeEntry
name|e
range|:
name|def
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|e
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeState
name|n
init|=
name|e
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|PropertyState
name|p
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"pattern"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|pattern
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|int
name|len
init|=
name|p
operator|.
name|count
argument_list|()
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|Pattern
operator|.
name|quote
argument_list|(
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pattern
operator|=
name|buff
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|pattern
operator|=
name|p
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
name|String
name|comment
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"comment"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|boolean
name|failQuery
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"failQuery"
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|)
decl_stmt|;
if|if
condition|(
name|pattern
operator|!=
literal|null
operator|&&
name|comment
operator|!=
literal|null
condition|)
block|{
name|setPattern
argument_list|(
name|key
argument_list|,
name|pattern
argument_list|,
name|comment
argument_list|,
name|failQuery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * A query pattern definition.      */
specifier|private
specifier|static
class|class
name|ProblematicQueryPattern
block|{
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
specifier|private
specifier|final
name|String
name|pattern
decl_stmt|;
specifier|private
specifier|final
name|String
name|comment
decl_stmt|;
specifier|private
specifier|final
name|Pattern
name|compiledPattern
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|failQuery
decl_stmt|;
specifier|private
name|long
name|executedLast
decl_stmt|;
specifier|private
name|long
name|executedCount
decl_stmt|;
name|ProblematicQueryPattern
parameter_list|(
name|String
name|key
parameter_list|,
name|String
name|pattern
parameter_list|,
name|String
name|comment
parameter_list|,
name|boolean
name|failQuery
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|pattern
operator|=
name|pattern
expr_stmt|;
name|this
operator|.
name|comment
operator|=
name|comment
expr_stmt|;
name|this
operator|.
name|compiledPattern
operator|=
name|Pattern
operator|.
name|compile
argument_list|(
name|pattern
argument_list|)
expr_stmt|;
name|this
operator|.
name|failQuery
operator|=
name|failQuery
expr_stmt|;
block|}
name|void
name|checkStatement
parameter_list|(
name|String
name|statement
parameter_list|)
throws|throws
name|ParseException
block|{
if|if
condition|(
operator|!
name|compiledPattern
operator|.
name|matcher
argument_list|(
name|statement
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
return|return;
block|}
name|executedCount
operator|++
expr_stmt|;
name|long
name|previousExecuted
init|=
name|executedLast
decl_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|executedLast
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|failQuery
condition|)
block|{
name|String
name|message
init|=
literal|"Query is blacklisted: statement="
operator|+
name|statement
operator|+
literal|" pattern="
operator|+
name|pattern
decl_stmt|;
name|ParseException
name|p
init|=
operator|new
name|ParseException
argument_list|(
name|message
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|,
name|p
argument_list|)
expr_stmt|;
throw|throw
name|p
throw|;
block|}
else|else
block|{
name|String
name|message
init|=
literal|"Query is questionable, but executed: statement="
operator|+
name|statement
operator|+
literal|" pattern="
operator|+
name|pattern
decl_stmt|;
if|if
condition|(
name|previousExecuted
operator|+
name|NEXT_LOG_MILLIS
operator|<
name|now
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|message
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"QueryValidator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|message
argument_list|,
operator|new
name|Exception
argument_list|(
literal|"QueryValidator"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|getJson
parameter_list|()
block|{
return|return
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|object
argument_list|()
operator|.
name|newline
argument_list|()
operator|.
name|key
argument_list|(
literal|"key"
argument_list|)
operator|.
name|value
argument_list|(
name|key
argument_list|)
operator|.
name|newline
argument_list|()
operator|.
name|key
argument_list|(
literal|"pattern"
argument_list|)
operator|.
name|value
argument_list|(
name|pattern
argument_list|)
operator|.
name|newline
argument_list|()
operator|.
name|key
argument_list|(
literal|"comment"
argument_list|)
operator|.
name|value
argument_list|(
name|comment
argument_list|)
operator|.
name|newline
argument_list|()
operator|.
name|key
argument_list|(
literal|"failQuery"
argument_list|)
operator|.
name|value
argument_list|(
name|failQuery
argument_list|)
operator|.
name|newline
argument_list|()
operator|.
name|key
argument_list|(
literal|"executedLast"
argument_list|)
operator|.
name|value
argument_list|(
name|executedLast
operator|==
literal|0
condition|?
literal|""
else|:
operator|new
name|java
operator|.
name|sql
operator|.
name|Timestamp
argument_list|(
name|executedLast
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|newline
argument_list|()
operator|.
name|key
argument_list|(
literal|"executedCount"
argument_list|)
operator|.
name|value
argument_list|(
name|executedCount
argument_list|)
operator|.
name|newline
argument_list|()
operator|.
name|endObject
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

