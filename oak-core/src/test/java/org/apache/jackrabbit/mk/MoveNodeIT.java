begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_comment
comment|/**  * Test moving nodes.  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MoveNodeIT
extends|extends
name|MultiMkTestBase
block|{
specifier|private
name|String
name|head
decl_stmt|;
specifier|private
name|String
name|journalRevision
decl_stmt|;
specifier|public
name|MoveNodeIT
parameter_list|(
name|String
name|url
parameter_list|)
block|{
name|super
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test\": {\"a\":{}, \"b\":{}, \"c\":{}}"
argument_list|)
expr_stmt|;
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test2\": {}"
argument_list|)
expr_stmt|;
name|getJournal
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addProperty
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
comment|// TODO fix test since it incorrectly expects a specific order of child nodes
return|return;
block|}
comment|// add a property /test/c
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test/c\": 123"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c:123,a,b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|"+\"/test/c\":123"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addPropertyTwice
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test/c\": 123"
argument_list|)
expr_stmt|;
comment|// duplicate add property can fail
comment|// TODO document that both is fine
try|try
block|{
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+ \"test/c\": 123"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c:123,a,b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|order
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
comment|// TODO fix test since it incorrectly expects a specific order of child nodes
return|return;
block|}
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rename
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
comment|// TODO fix test since it incorrectly expects a specific order of child nodes
return|return;
block|}
comment|// rename /test/b
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": \"test/b1\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,b1,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b\":\"/test/b1\""
argument_list|)
expr_stmt|;
comment|// and back
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b1\": \"test/b\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b1\":\"/test/b\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reorderBefore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// order c before b
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/c\": {\"before\": \"test/b\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,c,b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/c\":{\"before\":\"/test/b\"}"
argument_list|)
expr_stmt|;
comment|// and now b before a
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": {\"before\": \"test/a\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,a,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b\":{\"before\":\"/test/a\"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|reorderAfter
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// order a after b
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": {\"after\": \"test/b\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,a,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/a\":{\"after\":\"/test/b\"}"
argument_list|)
expr_stmt|;
comment|// and now a after c
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": {\"after\": \"test/c\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,c,a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/a\":{\"after\":\"/test/c\"}"
argument_list|)
expr_stmt|;
comment|// and now a after a (a no-op)
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": {\"after\": \"test/a\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,c,a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/a\":{\"after\":\"/test/a\"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveFirst
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// move /test/a to /test2/a (rename is not supported in this way)
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": {\"first\": \"test2\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/a\":{\"first\":\"/test2\"}"
argument_list|)
expr_stmt|;
comment|// move /test/c to /test2
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/c\": {\"first\": \"test2\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c,a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/c\":{\"first\":\"/test2\"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveCombinedWithSet
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// move /test/b to /test_b
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": \"test_b\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|getNode
argument_list|(
literal|"/test_b"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b\":\"/test_b\""
argument_list|)
expr_stmt|;
comment|// move /test/a to /test_a, combined with adding a property
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": \"test_a\" ^ \"test_a/x\": 1"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{x:1}"
argument_list|,
name|getNode
argument_list|(
literal|"/test_a"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/a\":\"/test_a\"\n"
operator|+
literal|"+\"/test_a/x\":1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveBefore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// move /test/b to /test2/b, before any other nodes in /test2
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": {\"first\": \"test2\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b\":{\"first\":\"/test2\"}"
argument_list|)
expr_stmt|;
comment|// move /test/c to /test2, before b
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/c\": {\"before\": \"test2/b\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c,b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/c\":{\"before\":\"/test2/b\"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveAfter
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// move /test/c to /test2
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/c\": \"test2/c\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/c\":\"/test2/c\""
argument_list|)
expr_stmt|;
comment|// move /test/a to /test2, after c
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": {\"after\": \"test2/c\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c,a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/a\":{\"after\":\"/test2/c\"}"
argument_list|)
expr_stmt|;
comment|// move /test/b to /test2, after c
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": {\"after\": \"test2/c\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c,b,a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b\":{\"after\":\"/test2/c\"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveLast
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// move /test/a to /test2, as last
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": {\"last\": \"test2\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b\":{\"last\":\"/test2\"}"
argument_list|)
expr_stmt|;
comment|// move /test/c to /test2, as last
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/c\": {\"last\": \"test2\"}"
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/c\":{\"last\":\"/test2\"}"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copy
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
comment|// TODO fix test since it incorrectly expects a specific order of child nodes
return|return;
block|}
comment|// copy /test to /test2/copy
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"* \"test\": \"/test2/copy\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,b,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{copy:{a,b,c}}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
name|assertJournal
argument_list|(
literal|"*\"/test\":\"/test2/copy\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertJournal
argument_list|(
literal|"+\"/test2/copy\":{\"a\":{},\"b\":{},\"c\":{}}"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|move
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isSimpleKernel
argument_list|(
name|mk
argument_list|)
condition|)
block|{
comment|// TODO fix test since it incorrectly expects a specific order of child nodes
return|return;
block|}
comment|// move /test/b to /test2
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": \"/test2/b\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{a,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/b\":\"/test2/b\""
argument_list|)
expr_stmt|;
comment|// move /test/a to /test2
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": \"test2/b1\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,b1}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/a\":\"/test2/b1\""
argument_list|)
expr_stmt|;
comment|// move /test/c to /test2
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/c\": \"test2/c\""
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{}"
argument_list|,
name|getNode
argument_list|(
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"{b,b1,c}"
argument_list|,
name|getNode
argument_list|(
literal|"/test2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertJournal
argument_list|(
literal|">\"/test/c\":\"/test2/c\""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveTryOverwriteExisting
parameter_list|()
block|{
comment|// move /test/b to /test2
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/b\": \"/test2/b\""
argument_list|)
expr_stmt|;
try|try
block|{
comment|// try to move /test/a to /test2/b
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test/a\": \"/test2/b\""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveTryBecomeDescendantOfSelf
parameter_list|()
block|{
comment|// move /test to /test/a/test
try|try
block|{
comment|// try to move /test to /test/a/test
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"> \"test\": \"/test/a/test\""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
specifier|private
name|void
name|commit
parameter_list|(
name|String
name|root
parameter_list|,
name|String
name|diff
parameter_list|)
block|{
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
name|root
argument_list|,
name|diff
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getNode
parameter_list|(
name|String
name|node
parameter_list|)
block|{
name|String
name|s
init|=
name|mk
operator|.
name|getNodes
argument_list|(
name|node
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\""
argument_list|,
literal|""
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|":childNodeCount:."
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\{\\,"
argument_list|,
literal|"\\{"
argument_list|)
operator|.
name|replaceAll
argument_list|(
literal|"\\,\\}"
argument_list|,
literal|"\\}"
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|"\\:\\{\\}"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|s
operator|=
name|s
operator|.
name|replaceAll
argument_list|(
literal|",,"
argument_list|,
literal|","
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
name|void
name|assertJournal
parameter_list|(
name|String
name|expectedJournal
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
name|expectedJournal
argument_list|,
name|getJournal
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getJournal
parameter_list|()
block|{
if|if
condition|(
name|journalRevision
operator|==
literal|null
condition|)
block|{
name|String
name|revs
init|=
name|mk
operator|.
name|getRevisions
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|revs
argument_list|)
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
do|do
block|{
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|journalRevision
operator|=
name|t
operator|.
name|readString
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ts"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
name|JsopTokenizer
operator|.
name|NUMBER
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
block|}
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|journal
init|=
name|mk
operator|.
name|getJournal
argument_list|(
name|journalRevision
argument_list|,
name|head
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|journal
argument_list|)
decl_stmt|;
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|boolean
name|isNew
init|=
literal|false
decl_stmt|;
do|do
block|{
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"id"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|readString
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"ts"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
name|JsopTokenizer
operator|.
name|NUMBER
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"msg"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|()
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"changes"
argument_list|,
name|t
operator|.
name|readString
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|changes
init|=
name|t
operator|.
name|readString
argument_list|()
operator|.
name|trim
argument_list|()
decl_stmt|;
if|if
condition|(
name|isNew
condition|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|changes
argument_list|)
expr_stmt|;
block|}
comment|// the first revision isn't new, all others are
name|isNew
operator|=
literal|true
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|t
operator|.
name|matches
argument_list|(
literal|','
argument_list|)
condition|)
do|;
name|journalRevision
operator|=
name|head
expr_stmt|;
return|return
name|buff
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

