begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|blob
operator|.
name|cloud
operator|.
name|aws
operator|.
name|s3
operator|.
name|stats
operator|.
name|S3DataStoreStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_class
annotation|@
name|Component
specifier|public
class|class
name|S3DataStoreStats
implements|implements
name|S3DataStoreStatsMBean
block|{
specifier|private
name|Registration
name|mbeanReg
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|SharedS3DataStore
name|s3ds
decl_stmt|;
annotation|@
name|Reference
specifier|protected
name|NodeStore
name|nodeStore
decl_stmt|;
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|mbeanReg
operator|=
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|S3DataStoreStatsMBean
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|S3DataStoreStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"S3 DataStore statistics"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|mbeanReg
operator|!=
literal|null
condition|)
block|{
name|mbeanReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Obtains the number of records that are in the process      * of being "synced", meaning they are either scheduled to      * be copied to S3 or are actively being copied to S3      * but the copy of these files has not yet completed.      *      * @return number of syncs in progress (active).      */
annotation|@
name|Override
specifier|public
name|long
name|getActiveSyncs
parameter_list|()
block|{
return|return
name|s3ds
operator|.
name|getPendingUploads
argument_list|()
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * Determines whether a file-like entity with the given name      * has been "synced" (completely copied) to S3.      *      * Determination of "synced":      * - A nodeName of null or "" is always "not synced".      * - A nodeName that does not map to a valid node is always "not synced".      * - If the node for this nodeName does not have a binary property,      * this node is always "not synced" since such a node would never be      * copied to S3.      * - If the node for this nodeName is not in the nodeStore, this node is      * always "not synced".      * - Otherwise, the state is "synced" if the corresponding blob is      * completely stored in S3.      *      * @param nodePathName - Path to the entity to check.  This is      *                       a node path, not an external file path.      * @return true if the file is synced to S3.      */
annotation|@
name|Override
specifier|public
name|boolean
name|isFileSynced
parameter_list|(
specifier|final
name|String
name|nodePathName
parameter_list|)
block|{
if|if
condition|(
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|nodePathName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
literal|null
operator|==
name|nodeStore
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeState
name|leafNode
init|=
name|findLeafNode
argument_list|(
name|nodePathName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|leafNode
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|nodeHasBinaryProperties
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|PropertyState
name|propertyState
range|:
name|leafNode
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|nodeHasBinaryProperties
operator||=
operator|(
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
operator|||
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
operator|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
condition|)
block|{
specifier|final
name|Blob
name|blob
init|=
operator|(
name|Blob
operator|)
name|propertyState
operator|.
name|getValue
argument_list|(
name|propertyState
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|blob
operator|||
operator|!
name|haveRecordForBlob
argument_list|(
name|blob
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|propertyState
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Blob
argument_list|>
name|blobs
init|=
operator|(
name|List
argument_list|<
name|Blob
argument_list|>
operator|)
name|propertyState
operator|.
name|getValue
argument_list|(
name|propertyState
operator|.
name|getType
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
literal|null
operator|==
name|blobs
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
specifier|final
name|Blob
name|blob
range|:
name|blobs
control|)
block|{
if|if
condition|(
operator|!
name|haveRecordForBlob
argument_list|(
name|blob
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|ClassCastException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|// If we got here and nodeHasBinaryProperties is true,
comment|// it means at least one binary property was found for
comment|// the leaf node and that we were able to locate a
comment|// records for binaries found.
return|return
name|nodeHasBinaryProperties
return|;
block|}
specifier|private
name|NodeState
name|findLeafNode
parameter_list|(
specifier|final
name|String
name|nodePathName
parameter_list|)
block|{
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|pathNodes
init|=
name|PathUtils
operator|.
name|elements
argument_list|(
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|nodePathName
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|leafNodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|nodePathName
argument_list|)
decl_stmt|;
name|NodeState
name|currentNode
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|pathNodeName
range|:
name|pathNodes
control|)
block|{
if|if
condition|(
name|pathNodeName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|NodeState
name|childNode
init|=
name|currentNode
operator|.
name|getChildNode
argument_list|(
name|pathNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childNode
operator|.
name|exists
argument_list|()
condition|)
block|{
break|break;
block|}
name|currentNode
operator|=
name|childNode
expr_stmt|;
block|}
block|}
return|return
name|currentNode
operator|.
name|getChildNode
argument_list|(
name|leafNodeName
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|haveRecordForBlob
parameter_list|(
specifier|final
name|Blob
name|blob
parameter_list|)
block|{
specifier|final
name|String
name|fullBlobId
init|=
name|blob
operator|.
name|getContentIdentity
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|fullBlobId
argument_list|)
operator|&&
operator|!
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|fullBlobId
argument_list|)
condition|)
block|{
name|String
name|blobId
init|=
name|DataStoreBlobStore
operator|.
name|BlobId
operator|.
name|of
argument_list|(
name|fullBlobId
argument_list|)
operator|.
name|blobId
decl_stmt|;
return|return
name|s3ds
operator|.
name|haveRecordForIdentifier
argument_list|(
name|blobId
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

