begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|spi
operator|.
name|query
operator|.
name|FulltextIndexPlanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|FieldNames
operator|.
name|PATH_DEPTH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|elasticsearch
operator|.
name|index
operator|.
name|query
operator|.
name|QueryBuilders
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|TermQueryBuilderFactory
block|{
comment|/**      * Private constructor.      */
specifier|private
name|TermQueryBuilderFactory
parameter_list|()
block|{     }
specifier|private
specifier|static
name|ExistsQueryBuilder
name|newExistsQuery
parameter_list|(
name|String
name|field
parameter_list|)
block|{
return|return
name|QueryBuilders
operator|.
name|existsQuery
argument_list|(
name|field
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TermQueryBuilder
name|newFulltextQuery
parameter_list|(
name|String
name|ft
parameter_list|)
block|{
return|return
name|termQuery
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT
argument_list|,
name|ft
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|TermQueryBuilder
name|newFulltextQuery
parameter_list|(
name|String
name|ft
parameter_list|,
name|String
name|field
parameter_list|)
block|{
if|if
condition|(
name|field
operator|==
literal|null
operator|||
literal|"*"
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
return|return
name|newFulltextQuery
argument_list|(
name|ft
argument_list|)
return|;
block|}
return|return
name|termQuery
argument_list|(
name|field
argument_list|,
name|ft
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrefixQueryBuilder
name|newPrefixQuery
parameter_list|(
name|String
name|field
parameter_list|,
annotation|@
name|NotNull
name|String
name|value
parameter_list|)
block|{
return|return
name|prefixQuery
argument_list|(
name|keywordFieldName
argument_list|(
name|field
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|WildcardQueryBuilder
name|newWildcardQuery
parameter_list|(
name|String
name|field
parameter_list|,
annotation|@
name|NotNull
name|String
name|value
parameter_list|)
block|{
return|return
name|wildcardQuery
argument_list|(
name|keywordFieldName
argument_list|(
name|field
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TermQueryBuilder
name|newPathQuery
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|termQuery
argument_list|(
name|PATH
argument_list|,
name|preparePath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|PrefixQueryBuilder
name|newPrefixPathQuery
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|prefixQuery
argument_list|(
name|PATH
argument_list|,
name|preparePath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|WildcardQueryBuilder
name|newWildcardPathQuery
parameter_list|(
annotation|@
name|NotNull
name|String
name|value
parameter_list|)
block|{
return|return
name|wildcardQuery
argument_list|(
name|PATH
argument_list|,
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TermQueryBuilder
name|newAncestorQuery
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|termQuery
argument_list|(
name|FieldNames
operator|.
name|ANCESTORS
argument_list|,
name|preparePath
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TermQueryBuilder
name|newDepthQuery
parameter_list|(
name|String
name|path
parameter_list|,
name|FulltextIndexPlanner
operator|.
name|PlanResult
name|planResult
parameter_list|)
block|{
name|int
name|depth
init|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|path
argument_list|)
operator|+
name|planResult
operator|.
name|getParentDepth
argument_list|()
operator|+
literal|1
decl_stmt|;
return|return
name|QueryBuilders
operator|.
name|termQuery
argument_list|(
name|PATH_DEPTH
argument_list|,
name|depth
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TermQueryBuilder
name|newNodeTypeQuery
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|termQuery
argument_list|(
name|keywordFieldName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TermQueryBuilder
name|newMixinTypeQuery
parameter_list|(
name|String
name|type
parameter_list|)
block|{
return|return
name|termQuery
argument_list|(
name|keywordFieldName
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TermQueryBuilder
name|newNotNullPropQuery
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|termQuery
argument_list|(
name|FieldNames
operator|.
name|NOT_NULL_PROPS
argument_list|,
name|propName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|TermQueryBuilder
name|newNullPropQuery
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|termQuery
argument_list|(
name|FieldNames
operator|.
name|NULL_PROPS
argument_list|,
name|propName
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|>
name|RangeQueryBuilder
name|newRangeQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|R
name|first
parameter_list|,
name|R
name|last
parameter_list|,
name|boolean
name|firstIncluding
parameter_list|,
name|boolean
name|lastIncluding
parameter_list|)
block|{
return|return
name|QueryBuilders
operator|.
name|rangeQuery
argument_list|(
name|field
argument_list|)
operator|.
name|from
argument_list|(
name|first
argument_list|)
operator|.
name|to
argument_list|(
name|last
argument_list|)
operator|.
name|includeLower
argument_list|(
name|firstIncluding
argument_list|)
operator|.
name|includeUpper
argument_list|(
name|lastIncluding
argument_list|)
return|;
block|}
specifier|private
specifier|static
parameter_list|<
name|R
parameter_list|>
name|BoolQueryBuilder
name|newInQuery
parameter_list|(
name|String
name|field
parameter_list|,
name|List
argument_list|<
name|R
argument_list|>
name|values
parameter_list|)
block|{
name|BoolQueryBuilder
name|bq
init|=
name|boolQuery
argument_list|()
decl_stmt|;
for|for
control|(
name|R
name|value
range|:
name|values
control|)
block|{
name|bq
operator|.
name|should
argument_list|(
name|newRangeQuery
argument_list|(
name|field
argument_list|,
name|value
argument_list|,
name|value
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|bq
return|;
block|}
specifier|public
specifier|static
parameter_list|<
name|R
parameter_list|>
name|QueryBuilder
name|newPropertyRestrictionQuery
parameter_list|(
name|String
name|propertyName
parameter_list|,
name|boolean
name|isString
parameter_list|,
name|Filter
operator|.
name|PropertyRestriction
name|pr
parameter_list|,
name|Function
argument_list|<
name|PropertyValue
argument_list|,
name|R
argument_list|>
name|propToObj
parameter_list|)
block|{
if|if
condition|(
name|isString
condition|)
block|{
name|propertyName
operator|=
name|keywordFieldName
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
block|}
name|R
name|first
init|=
name|pr
operator|.
name|first
operator|!=
literal|null
condition|?
name|propToObj
operator|.
name|apply
argument_list|(
name|pr
operator|.
name|first
argument_list|)
else|:
literal|null
decl_stmt|;
name|R
name|last
init|=
name|pr
operator|.
name|last
operator|!=
literal|null
condition|?
name|propToObj
operator|.
name|apply
argument_list|(
name|pr
operator|.
name|last
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|last
argument_list|)
operator|&&
name|pr
operator|.
name|firstIncluding
operator|&&
name|pr
operator|.
name|lastIncluding
condition|)
block|{
comment|// [property]=[value]
return|return
name|termQuery
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|!=
literal|null
condition|)
block|{
return|return
name|newRangeQuery
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
name|last
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|==
literal|null
condition|)
block|{
comment|// '>'& '>=' use cases
return|return
name|newRangeQuery
argument_list|(
name|propertyName
argument_list|,
name|first
argument_list|,
literal|null
argument_list|,
name|pr
operator|.
name|firstIncluding
argument_list|,
literal|true
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|last
operator|.
name|equals
argument_list|(
name|pr
operator|.
name|first
argument_list|)
condition|)
block|{
comment|// '<'& '<='
return|return
name|newRangeQuery
argument_list|(
name|propertyName
argument_list|,
literal|null
argument_list|,
name|last
argument_list|,
literal|true
argument_list|,
name|pr
operator|.
name|lastIncluding
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
return|return
name|newInQuery
argument_list|(
name|propertyName
argument_list|,
name|pr
operator|.
name|list
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|propToObj
operator|::
name|apply
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|isNotNullRestriction
argument_list|()
condition|)
block|{
comment|// not null. For date lower bound of zero can be used
return|return
name|newExistsQuery
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|String
name|preparePath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|// As per https://www.elastic.co/blog/strings-are-dead-long-live-strings
specifier|private
specifier|static
name|String
name|keywordFieldName
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|propName
operator|+
literal|"."
operator|+
literal|"keyword"
return|;
block|}
comment|//TODO: figure out how to not duplicate these method from FulltextIndex
specifier|public
specifier|static
name|int
name|determinePropertyType
parameter_list|(
name|PropertyDefinition
name|defn
parameter_list|,
name|Filter
operator|.
name|PropertyRestriction
name|pr
parameter_list|)
block|{
name|int
name|typeFromRestriction
init|=
name|pr
operator|.
name|propertyType
decl_stmt|;
if|if
condition|(
name|typeFromRestriction
operator|==
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
comment|//If no explicit type defined then determine the type from restriction
comment|//value
if|if
condition|(
name|pr
operator|.
name|first
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|first
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|UNDEFINED
condition|)
block|{
name|typeFromRestriction
operator|=
name|pr
operator|.
name|first
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|last
operator|!=
literal|null
operator|&&
name|pr
operator|.
name|last
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|UNDEFINED
condition|)
block|{
name|typeFromRestriction
operator|=
name|pr
operator|.
name|last
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pr
operator|.
name|list
operator|!=
literal|null
operator|&&
operator|!
name|pr
operator|.
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|typeFromRestriction
operator|=
name|pr
operator|.
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|getPropertyType
argument_list|(
name|defn
argument_list|,
name|pr
operator|.
name|propertyName
argument_list|,
name|typeFromRestriction
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getPropertyType
parameter_list|(
name|PropertyDefinition
name|defn
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|defaultVal
parameter_list|)
block|{
if|if
condition|(
name|defn
operator|.
name|isTypeDefined
argument_list|()
condition|)
block|{
return|return
name|defn
operator|.
name|getType
argument_list|()
return|;
block|}
return|return
name|defaultVal
return|;
block|}
block|}
end_class

end_unit

