begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|jmx
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|ExternalIdentityRef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|SyncResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncResultImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncedIdentity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|ResultMessagesTest
block|{
specifier|private
specifier|final
name|ResultMessages
name|messages
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|void
name|assertResultMessages
parameter_list|(
annotation|@
name|NotNull
name|ResultMessages
name|resultMessages
parameter_list|,
annotation|@
name|NotNull
name|String
name|expectedUid
parameter_list|,
annotation|@
name|NotNull
name|String
name|expectedOperation
parameter_list|)
block|{
for|for
control|(
name|String
name|msg
range|:
name|resultMessages
operator|.
name|getMessages
argument_list|()
control|)
block|{
name|String
name|op
init|=
name|msg
operator|.
name|substring
argument_list|(
name|msg
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
operator|+
literal|2
argument_list|,
name|msg
operator|.
name|indexOf
argument_list|(
literal|"\","
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|msg
operator|.
name|indexOf
argument_list|(
literal|"uid:\""
argument_list|)
operator|+
literal|5
decl_stmt|;
name|String
name|uid
init|=
name|msg
operator|.
name|substring
argument_list|(
name|index
argument_list|,
name|msg
operator|.
name|indexOf
argument_list|(
literal|"\","
argument_list|,
name|index
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedUid
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedOperation
argument_list|,
name|op
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|extractOp
parameter_list|(
annotation|@
name|NotNull
name|SyncResult
operator|.
name|Status
name|status
parameter_list|)
block|{
name|String
name|st
init|=
name|status
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
if|if
condition|(
name|st
operator|.
name|indexOf
argument_list|(
literal|'_'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|st
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
return|;
block|}
else|else
block|{
name|StringBuilder
name|s
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|seg
range|:
name|Text
operator|.
name|explode
argument_list|(
name|st
argument_list|,
literal|'_'
argument_list|)
control|)
block|{
name|s
operator|.
name|append
argument_list|(
name|seg
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|s
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAppendResultWithNullSyncedIdentity
parameter_list|()
block|{
name|SyncResult
name|result
init|=
operator|new
name|DefaultSyncResultImpl
argument_list|(
literal|null
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|NOP
argument_list|)
decl_stmt|;
name|messages
operator|.
name|append
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|messages
argument_list|,
literal|""
argument_list|,
literal|"nop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSyncStatusReflectedInMessage
parameter_list|()
block|{
for|for
control|(
name|SyncResult
operator|.
name|Status
name|status
range|:
name|SyncResult
operator|.
name|Status
operator|.
name|values
argument_list|()
control|)
block|{
name|SyncResult
name|result
init|=
operator|new
name|DefaultSyncResultImpl
argument_list|(
literal|null
argument_list|,
name|status
argument_list|)
decl_stmt|;
name|ResultMessages
name|msgs
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
name|msgs
operator|.
name|append
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|msgs
argument_list|,
literal|""
argument_list|,
name|extractOp
argument_list|(
name|status
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUidReflectedInMessage
parameter_list|()
block|{
name|SyncResult
name|result
init|=
operator|new
name|DefaultSyncResultImpl
argument_list|(
operator|new
name|DefaultSyncedIdentity
argument_list|(
literal|"id"
argument_list|,
operator|new
name|ExternalIdentityRef
argument_list|(
literal|"id"
argument_list|,
literal|"name"
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
argument_list|,
name|SyncResult
operator|.
name|Status
operator|.
name|ENABLE
argument_list|)
decl_stmt|;
name|ResultMessages
name|msgs
init|=
operator|new
name|ResultMessages
argument_list|()
decl_stmt|;
name|msgs
operator|.
name|append
argument_list|(
name|Collections
operator|.
name|singletonList
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|assertResultMessages
argument_list|(
name|msgs
argument_list|,
literal|"id"
argument_list|,
name|extractOp
argument_list|(
name|SyncResult
operator|.
name|Status
operator|.
name|ENABLE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

