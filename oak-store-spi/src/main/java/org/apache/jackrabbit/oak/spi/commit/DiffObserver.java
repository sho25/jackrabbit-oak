begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_comment
comment|/**  * Abstract base class for observers that use a content diff to determine  * what changed between two consecutive observed states of the repository.  * Subclasses just need to provide the diff handler by implementing the  * {@link #getRootDiff(NodeState, NodeState, CommitInfo)} method.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|DiffObserver
implements|implements
name|Observer
block|{
specifier|private
name|NodeState
name|before
init|=
literal|null
decl_stmt|;
comment|/**      * Returns the diff handler to be used for the given content change.      *      * @param before state of the repository before this changes      * @param after state of the repository after this changes      * @param info local commit information, or {@code null} if not available      * @return diff handler for this change      */
specifier|protected
specifier|abstract
name|NodeStateDiff
name|getRootDiff
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|before
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|after
parameter_list|,
annotation|@
name|NotNull
name|CommitInfo
name|info
parameter_list|)
function_decl|;
comment|//----------------------------------------------------------< Observer>--
annotation|@
name|Override
specifier|public
specifier|final
specifier|synchronized
name|void
name|contentChanged
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|root
parameter_list|,
annotation|@
name|NotNull
name|CommitInfo
name|info
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
condition|)
block|{
name|NodeStateDiff
name|diff
init|=
name|getRootDiff
argument_list|(
name|before
argument_list|,
name|root
argument_list|,
name|info
argument_list|)
decl_stmt|;
name|root
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
name|before
operator|=
name|root
expr_stmt|;
block|}
block|}
end_class

end_unit

