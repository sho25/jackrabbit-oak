begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|fast
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * A map.  *  * This implementation supports an options 'lengthIndex' to speed up  * sparse parsing of an object (only the requested values are parsed). The  * speedup depends on the use case.  */
end_comment

begin_class
specifier|public
class|class
name|JsopObject
extends|extends
name|Jsop
implements|implements
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|String
name|LENGTHS_KEY
init|=
literal|":lengths:"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|EMPTY_MAP
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|map
decl_stmt|;
specifier|private
name|JsopTokenizer
name|tokenizer
decl_stmt|;
specifier|private
name|boolean
name|lengthIndex
decl_stmt|;
specifier|private
name|int
index|[]
name|length
decl_stmt|;
name|JsopObject
parameter_list|(
name|String
name|jsop
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|super
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JsopObject
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|map
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|tokenizer
operator|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsop
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
name|map
operator|=
name|EMPTY_MAP
expr_stmt|;
name|tokenizer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
operator|new
name|LinkedHashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Object
name|get
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|init
argument_list|()
expr_stmt|;
name|String
name|v
init|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokenizer
operator|==
literal|null
condition|)
block|{
return|return
name|v
operator|==
literal|null
condition|?
literal|null
else|:
name|Jsop
operator|.
name|parse
argument_list|(
name|v
argument_list|)
return|;
block|}
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|tokenizer
operator|!=
literal|null
condition|)
block|{
name|String
name|k
init|=
name|tokenizer
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
name|lengthIndex
condition|)
block|{
name|int
name|len
init|=
name|length
index|[
name|map
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|p
init|=
name|tokenizer
operator|.
name|getPos
argument_list|()
decl_stmt|;
name|v
operator|=
name|jsop
operator|.
name|substring
argument_list|(
name|p
argument_list|,
name|p
operator|+
name|len
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|setPos
argument_list|(
name|p
operator|+
name|len
argument_list|)
expr_stmt|;
name|tokenizer
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|tokenizer
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|v
operator|=
name|tokenizer
operator|.
name|readRawValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LENGTHS_KEY
operator|.
name|equals
argument_list|(
name|k
argument_list|)
condition|)
block|{
name|v
operator|=
name|JsopTokenizer
operator|.
name|decodeQuoted
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|String
index|[]
name|lengthsStrings
init|=
name|v
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|length
operator|=
operator|new
name|int
index|[
name|lengthsStrings
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lengthsStrings
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|length
index|[
name|i
index|]
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|lengthsStrings
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|lengthIndex
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|put
argument_list|(
name|k
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tokenizer
operator|.
name|matches
argument_list|(
literal|'}'
argument_list|)
condition|)
block|{
name|tokenizer
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|tokenizer
operator|.
name|read
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|k
operator|.
name|equals
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|Jsop
operator|.
name|parse
argument_list|(
name|v
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsKey
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|map
operator|==
name|EMPTY_MAP
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
name|readAll
argument_list|()
expr_stmt|;
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|void
name|readAll
parameter_list|()
block|{
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|initWrite
parameter_list|()
block|{
name|readAll
argument_list|()
expr_stmt|;
name|jsop
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|jsop
operator|==
literal|null
condition|)
block|{
name|JsopBuilder
name|w
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
name|w
operator|.
name|object
argument_list|()
expr_stmt|;
if|if
condition|(
name|lengthIndex
condition|)
block|{
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|LENGTHS_KEY
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Object already contains the key "
operator|+
name|LENGTHS_KEY
argument_list|)
throw|;
block|}
name|StringBuilder
name|buff
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|buff
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|buff
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
block|}
name|buff
operator|.
name|append
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|key
argument_list|(
name|LENGTHS_KEY
argument_list|)
operator|.
name|value
argument_list|(
name|buff
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|w
operator|.
name|key
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|endObject
argument_list|()
expr_stmt|;
name|jsop
operator|=
name|w
operator|.
name|toString
argument_list|()
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|jsop
operator|.
name|substring
argument_list|(
name|start
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|initWrite
argument_list|()
expr_stmt|;
name|map
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|put
parameter_list|(
name|String
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|initWrite
argument_list|()
expr_stmt|;
name|String
name|old
init|=
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|toString
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|Jsop
operator|.
name|parse
argument_list|(
name|old
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsValue
parameter_list|(
name|Object
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|entrySet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|keySet
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|putAll
parameter_list|(
name|Map
argument_list|<
name|?
extends|extends
name|String
argument_list|,
name|?
argument_list|>
name|m
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|remove
parameter_list|(
name|Object
name|key
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Object
argument_list|>
name|values
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
specifier|public
name|void
name|setLengthIndex
parameter_list|(
name|boolean
name|lengthIndex
parameter_list|)
block|{
name|this
operator|.
name|lengthIndex
operator|=
name|lengthIndex
expr_stmt|;
block|}
block|}
end_class

end_unit

