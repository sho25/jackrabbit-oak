begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|explorer
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|intersection
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|escape
operator|.
name|Escapers
operator|.
name|builder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|GridLayout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JPanel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JScrollPane
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTextArea
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTree
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|event
operator|.
name|TreeSelectionListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultMutableTreeNode
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|DefaultTreeModel
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|tree
operator|.
name|TreeSelectionModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|JsopDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStateHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentPropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
operator|.
name|ReadOnlyStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStoreTree
extends|extends
name|JPanel
implements|implements
name|TreeSelectionListener
block|{
specifier|private
specifier|final
name|ReadOnlyStore
name|store
decl_stmt|;
specifier|private
name|DefaultTreeModel
name|treeModel
decl_stmt|;
specifier|private
specifier|final
name|JTree
name|tree
decl_stmt|;
specifier|private
specifier|final
name|JTextArea
name|log
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|index
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|RecordIdKey
argument_list|,
name|Long
index|[]
argument_list|>
name|sizeCache
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipSizeCheck
decl_stmt|;
comment|// TODO make this configurable
specifier|private
specifier|final
name|boolean
name|cacheNodeState
init|=
literal|false
decl_stmt|;
specifier|public
name|NodeStoreTree
parameter_list|(
name|ReadOnlyStore
name|store
parameter_list|,
name|JTextArea
name|log
parameter_list|,
name|boolean
name|skipSizeCheck
parameter_list|)
block|{
name|super
argument_list|(
operator|new
name|GridLayout
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|log
operator|=
name|log
expr_stmt|;
name|this
operator|.
name|index
operator|=
name|store
operator|.
name|getTarReaderIndex
argument_list|()
expr_stmt|;
name|this
operator|.
name|sizeCache
operator|=
operator|new
name|HashMap
argument_list|<
name|RecordIdKey
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|this
operator|.
name|skipSizeCheck
operator|=
name|skipSizeCheck
expr_stmt|;
name|DefaultMutableTreeNode
name|rootNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
operator|new
name|NamePathModel
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
name|sizeCache
argument_list|,
name|skipSizeCheck
argument_list|,
name|store
argument_list|,
name|cacheNodeState
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|treeModel
operator|=
operator|new
name|DefaultTreeModel
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
name|tree
operator|=
operator|new
name|JTree
argument_list|(
name|treeModel
argument_list|)
expr_stmt|;
name|tree
operator|.
name|getSelectionModel
argument_list|()
operator|.
name|setSelectionMode
argument_list|(
name|TreeSelectionModel
operator|.
name|SINGLE_TREE_SELECTION
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setShowsRootHandles
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tree
operator|.
name|addTreeSelectionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setExpandsSelectedPaths
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JScrollPane
name|scrollPane
init|=
operator|new
name|JScrollPane
argument_list|(
name|tree
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|scrollPane
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|refreshModel
parameter_list|()
block|{
name|index
operator|=
name|store
operator|.
name|getTarReaderIndex
argument_list|()
expr_stmt|;
name|sizeCache
operator|=
operator|new
name|HashMap
argument_list|<
name|RecordIdKey
argument_list|,
name|Long
index|[]
argument_list|>
argument_list|()
expr_stmt|;
name|DefaultMutableTreeNode
name|rootNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
operator|new
name|NamePathModel
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|,
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
name|sizeCache
argument_list|,
name|skipSizeCheck
argument_list|,
name|store
argument_list|,
name|cacheNodeState
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|treeModel
operator|=
operator|new
name|DefaultTreeModel
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
name|addChildren
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|valueChanged
parameter_list|(
name|TreeSelectionEvent
name|e
parameter_list|)
block|{
name|DefaultMutableTreeNode
name|node
init|=
operator|(
name|DefaultMutableTreeNode
operator|)
name|tree
operator|.
name|getLastSelectedPathComponent
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|// load child nodes:
try|try
block|{
name|addChildren
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|updateStats
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|NamePathModel
name|model
init|=
operator|(
name|NamePathModel
operator|)
name|node
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
name|NodeState
name|state
init|=
name|model
operator|.
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|sns
init|=
operator|(
name|SegmentNodeState
operator|)
name|state
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Record "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|sns
operator|.
name|getRecordId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|setText
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addChildren
parameter_list|(
name|DefaultMutableTreeNode
name|parent
parameter_list|)
block|{
name|NamePathModel
name|model
init|=
operator|(
name|NamePathModel
operator|)
name|parent
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
if|if
condition|(
name|model
operator|.
name|isLoaded
argument_list|()
condition|)
block|{
return|return;
block|}
name|List
argument_list|<
name|NamePathModel
argument_list|>
name|kids
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|ce
range|:
name|model
operator|.
name|getState
argument_list|()
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NamePathModel
name|c
init|=
operator|new
name|NamePathModel
argument_list|(
name|ce
operator|.
name|getName
argument_list|()
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|model
operator|.
name|getPath
argument_list|()
argument_list|,
name|ce
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|ce
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|sizeCache
argument_list|,
name|skipSizeCheck
argument_list|,
name|store
argument_list|,
name|cacheNodeState
argument_list|)
decl_stmt|;
name|kids
operator|.
name|add
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
name|Collections
operator|.
name|sort
argument_list|(
name|kids
argument_list|)
expr_stmt|;
for|for
control|(
name|NamePathModel
name|c
range|:
name|kids
control|)
block|{
name|DefaultMutableTreeNode
name|childNode
init|=
operator|new
name|DefaultMutableTreeNode
argument_list|(
name|c
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|treeModel
operator|.
name|insertNodeInto
argument_list|(
name|childNode
argument_list|,
name|parent
argument_list|,
name|parent
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|model
operator|.
name|loaded
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|final
specifier|static
name|String
name|newline
init|=
literal|"\n"
decl_stmt|;
specifier|private
name|void
name|updateStats
parameter_list|(
name|DefaultMutableTreeNode
name|parent
parameter_list|)
block|{
name|NamePathModel
name|model
init|=
operator|(
name|NamePathModel
operator|)
name|parent
operator|.
name|getUserObject
argument_list|()
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|model
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|model
operator|.
name|getState
argument_list|()
decl_stmt|;
name|String
name|tarFile
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|s
init|=
operator|(
name|SegmentNodeState
operator|)
name|state
decl_stmt|;
name|RecordId
name|recordId
init|=
name|s
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Record "
operator|+
name|recordId
argument_list|)
expr_stmt|;
name|tarFile
operator|=
name|getFile
argument_list|(
name|recordId
argument_list|)
expr_stmt|;
if|if
condition|(
name|tarFile
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" in "
operator|+
name|tarFile
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|RecordId
name|templateId
init|=
name|SegmentNodeStateHelper
operator|.
name|getTemplateId
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|String
name|f
init|=
name|getFile
argument_list|(
name|templateId
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"TemplateId "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|templateId
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|equals
argument_list|(
name|tarFile
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|" in "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Size: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"  direct: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|byteCountToDisplaySize
argument_list|(
name|model
operator|.
name|getSize
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|";  linked: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|byteCountToDisplaySize
argument_list|(
name|model
operator|.
name|getSize
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Properties (count: "
operator|+
name|state
operator|.
name|getPropertyCount
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propLines
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|StringBuilder
name|l
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|l
operator|.
name|append
argument_list|(
literal|"  - "
operator|+
name|ps
operator|.
name|getName
argument_list|()
operator|+
literal|" = {"
operator|+
name|ps
operator|.
name|getType
argument_list|()
operator|+
literal|"} "
argument_list|)
expr_stmt|;
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|int
name|count
init|=
name|ps
operator|.
name|count
argument_list|()
decl_stmt|;
name|l
operator|.
name|append
argument_list|(
literal|"(count "
operator|+
name|count
operator|+
literal|") ["
argument_list|)
expr_stmt|;
name|String
name|separator
init|=
literal|", "
decl_stmt|;
name|int
name|max
init|=
literal|50
decl_stmt|;
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
condition|)
block|{
name|separator
operator|=
name|newline
operator|+
literal|"      "
expr_stmt|;
name|max
operator|=
name|Integer
operator|.
name|MAX_VALUE
expr_stmt|;
name|l
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Math
operator|.
name|min
argument_list|(
name|count
argument_list|,
name|max
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|l
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|ps
argument_list|,
name|i
argument_list|,
name|tarFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|count
operator|>
name|max
condition|)
block|{
name|l
operator|.
name|append
argument_list|(
literal|", ... ("
operator|+
name|count
operator|+
literal|" values)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BINARIES
condition|)
block|{
name|l
operator|.
name|append
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|append
argument_list|(
literal|"]"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|append
argument_list|(
name|toString
argument_list|(
name|ps
argument_list|,
literal|0
argument_list|,
name|tarFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|instanceof
name|SegmentPropertyState
condition|)
block|{
name|RecordId
name|rid
init|=
operator|(
operator|(
name|SegmentPropertyState
operator|)
name|ps
operator|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|l
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|rid
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|getFile
argument_list|(
name|rid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|equals
argument_list|(
name|tarFile
argument_list|)
condition|)
block|{
name|l
operator|.
name|append
argument_list|(
literal|" in "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|ps
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|propLines
operator|.
name|put
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|,
name|l
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|l
range|:
name|propLines
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"Child nodes (count: "
operator|+
name|state
operator|.
name|getChildNodeCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|childLines
init|=
operator|new
name|TreeMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|ChildNodeEntry
name|ce
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|StringBuilder
name|l
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|l
operator|.
name|append
argument_list|(
literal|"  + "
operator|+
name|ce
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|NodeState
name|c
init|=
name|ce
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|RecordId
name|rid
init|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|c
operator|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|l
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|rid
argument_list|)
expr_stmt|;
name|String
name|f
init|=
name|getFile
argument_list|(
name|rid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|equals
argument_list|(
name|tarFile
argument_list|)
condition|)
block|{
name|l
operator|.
name|append
argument_list|(
literal|" in "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
name|l
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|append
argument_list|(
literal|" ("
operator|+
name|c
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
name|childLines
operator|.
name|put
argument_list|(
name|ce
operator|.
name|getName
argument_list|()
argument_list|,
name|l
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|l
range|:
name|childLines
operator|.
name|values
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|model
operator|.
name|getPath
argument_list|()
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"File Reader Index"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|files
init|=
name|newArrayList
argument_list|(
name|store
operator|.
name|getTarReaderIndex
argument_list|()
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|files
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|files
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"----------"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|setText
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|PropertyState
name|ps
parameter_list|,
name|int
name|index
parameter_list|,
name|String
name|tarFile
parameter_list|)
block|{
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
name|Blob
name|b
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|,
name|index
argument_list|)
decl_stmt|;
name|String
name|info
init|=
literal|"<"
decl_stmt|;
name|info
operator|+=
name|b
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|";"
expr_stmt|;
name|info
operator|+=
literal|"ref:"
operator|+
name|safeGetReference
argument_list|(
name|b
argument_list|)
operator|+
literal|";"
expr_stmt|;
name|info
operator|+=
literal|"id:"
operator|+
name|b
operator|.
name|getContentIdentity
argument_list|()
operator|+
literal|";"
expr_stmt|;
name|info
operator|+=
name|safeGetLength
argument_list|(
name|b
argument_list|)
operator|+
literal|">"
expr_stmt|;
for|for
control|(
name|SegmentId
name|sid
range|:
name|SegmentBlob
operator|.
name|getBulkSegmentIds
argument_list|(
name|b
argument_list|)
control|)
block|{
name|info
operator|+=
name|newline
operator|+
literal|"        Bulk Segment Id "
operator|+
name|sid
expr_stmt|;
name|String
name|f
init|=
name|getFile
argument_list|(
name|sid
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|equals
argument_list|(
name|tarFile
argument_list|)
condition|)
block|{
name|info
operator|+=
literal|" in "
operator|+
name|f
expr_stmt|;
block|}
block|}
return|return
name|info
return|;
block|}
elseif|else
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|PropertyType
operator|.
name|STRING
condition|)
block|{
name|String
name|value
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|60
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|57
argument_list|)
operator|+
literal|"... ("
operator|+
name|value
operator|.
name|length
argument_list|()
operator|+
literal|" chars)"
expr_stmt|;
block|}
name|String
name|escaped
init|=
name|builder
argument_list|()
operator|.
name|setSafeRange
argument_list|(
literal|' '
argument_list|,
literal|'~'
argument_list|)
operator|.
name|addEscape
argument_list|(
literal|'"'
argument_list|,
literal|"\\\""
argument_list|)
operator|.
name|addEscape
argument_list|(
literal|'\\'
argument_list|,
literal|"\\\\"
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|escape
argument_list|(
name|value
argument_list|)
decl_stmt|;
return|return
literal|'"'
operator|+
name|escaped
operator|+
literal|'"'
return|;
block|}
else|else
block|{
return|return
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|index
argument_list|)
return|;
block|}
block|}
specifier|private
name|String
name|safeGetReference
parameter_list|(
name|Blob
name|b
parameter_list|)
block|{
try|try
block|{
return|return
name|b
operator|.
name|getReference
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// missing BlobStore probably
block|}
return|return
literal|"[BlobStore not available]"
return|;
block|}
specifier|private
name|String
name|safeGetLength
parameter_list|(
name|Blob
name|b
parameter_list|)
block|{
try|try
block|{
return|return
name|FileUtils
operator|.
name|byteCountToDisplaySize
argument_list|(
name|b
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// missing BlobStore probably
block|}
return|return
literal|"[BlobStore not available]"
return|;
block|}
specifier|private
name|String
name|getFile
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
return|return
name|getFile
argument_list|(
name|id
operator|.
name|getSegmentId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|String
name|getFile
parameter_list|(
name|SegmentId
name|segmentId
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|path2Uuid
range|:
name|index
operator|.
name|entrySet
argument_list|()
control|)
block|{
for|for
control|(
name|UUID
name|uuid
range|:
name|path2Uuid
operator|.
name|getValue
argument_list|()
control|)
block|{
if|if
condition|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
operator|==
name|segmentId
operator|.
name|getMostSignificantBits
argument_list|()
operator|&&
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
operator|==
name|segmentId
operator|.
name|getLeastSignificantBits
argument_list|()
condition|)
block|{
return|return
operator|new
name|File
argument_list|(
name|path2Uuid
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|void
name|printTarInfo
parameter_list|(
name|String
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
operator|||
name|file
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|e
range|:
name|store
operator|.
name|getTarReaderIndex
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"SegmentNodeState references to "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|uuids
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|inMem
init|=
name|intersection
argument_list|(
name|getReferencedUUIDs
argument_list|(
name|store
argument_list|)
argument_list|,
name|uuids
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inMem
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"In Memory segment references: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|inMem
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|filterNodeStates
argument_list|(
name|uuids
argument_list|,
name|paths
argument_list|,
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Repository content references:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
block|}
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
try|try
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|store
operator|.
name|getTarGraph
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Tar graph:"
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|graph
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Error getting tar graph:"
argument_list|)
operator|.
name|append
argument_list|(
name|e
argument_list|)
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|setText
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|Set
argument_list|<
name|UUID
argument_list|>
name|getReferencedUUIDs
parameter_list|(
name|FileStore
name|store
parameter_list|)
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|ids
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|store
operator|.
name|getTracker
argument_list|()
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
name|ids
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ids
return|;
block|}
specifier|public
name|void
name|printDependenciesToSegment
parameter_list|(
name|String
name|sid
parameter_list|)
block|{
if|if
condition|(
name|sid
operator|==
literal|null
operator|||
name|sid
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|UUID
name|id
init|=
literal|null
decl_stmt|;
try|try
block|{
name|id
operator|=
name|UUID
operator|.
name|fromString
argument_list|(
name|sid
operator|.
name|trim
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|setText
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"SegmentNodeState references to "
operator|+
name|id
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|e
range|:
name|store
operator|.
name|getTarReaderIndex
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Tar file: "
operator|+
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|filterNodeStates
argument_list|(
name|newHashSet
argument_list|(
name|id
argument_list|)
argument_list|,
name|paths
argument_list|,
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Repository content references:"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
block|}
block|}
name|log
operator|.
name|setText
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|filterNodeStates
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
parameter_list|,
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|,
name|SegmentNodeState
name|state
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|localPaths
init|=
operator|new
name|TreeSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
name|ps
operator|instanceof
name|SegmentPropertyState
condition|)
block|{
name|SegmentPropertyState
name|sps
init|=
operator|(
name|SegmentPropertyState
operator|)
name|ps
decl_stmt|;
name|RecordId
name|recordId
init|=
name|sps
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|SegmentId
name|sid
init|=
name|recordId
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
name|UUID
name|id
init|=
operator|new
name|UUID
argument_list|(
name|sid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|sid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuids
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|localPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"@"
operator|+
name|ps
operator|+
literal|" [SegmentPropertyState@"
operator|+
name|recordId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ps
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Blob
name|b
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|,
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|SegmentId
name|sbid
range|:
name|SegmentBlob
operator|.
name|getBulkSegmentIds
argument_list|(
name|b
argument_list|)
control|)
block|{
name|UUID
name|bid
init|=
operator|new
name|UUID
argument_list|(
name|sbid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|sbid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bid
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
name|uuids
operator|.
name|contains
argument_list|(
name|bid
argument_list|)
condition|)
block|{
name|localPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"@"
operator|+
name|ps
operator|+
literal|" [SegmentPropertyState@"
operator|+
name|recordId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|RecordId
name|stateId
init|=
name|state
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|SegmentId
name|segmentId
init|=
name|stateId
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|uuids
operator|.
name|contains
argument_list|(
operator|new
name|UUID
argument_list|(
name|segmentId
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|segmentId
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|localPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|" [SegmentNodeState@"
operator|+
name|stateId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|templateId
init|=
name|SegmentNodeStateHelper
operator|.
name|getTemplateId
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|SegmentId
name|template
init|=
name|templateId
operator|.
name|getSegmentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|uuids
operator|.
name|contains
argument_list|(
operator|new
name|UUID
argument_list|(
name|template
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|template
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|localPaths
operator|.
name|add
argument_list|(
name|path
operator|+
literal|"[Template@"
operator|+
name|templateId
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
name|paths
operator|.
name|addAll
argument_list|(
name|localPaths
argument_list|)
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|ce
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|NodeState
name|c
init|=
name|ce
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|filterNodeStates
argument_list|(
name|uuids
argument_list|,
name|paths
argument_list|,
operator|(
name|SegmentNodeState
operator|)
name|c
argument_list|,
name|path
operator|+
name|ce
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|printDiff
parameter_list|(
name|String
name|input
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|input
operator|==
literal|null
operator|||
name|input
operator|.
name|trim
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Unknown argument: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|log
operator|.
name|setText
argument_list|(
literal|"Usage<recordId><recordId> [<path>]"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
index|[]
name|tokens
init|=
name|input
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|!=
literal|2
operator|&&
name|tokens
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Unknown argument: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|log
operator|.
name|setText
argument_list|(
literal|"Usage<recordId><recordId> [<path>]"
argument_list|)
expr_stmt|;
return|return;
block|}
name|RecordId
name|id1
init|=
literal|null
decl_stmt|;
name|RecordId
name|id2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|id1
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|tokens
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|id2
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|tokens
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|ex
parameter_list|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"Unknown argument: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|input
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Error: "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|log
operator|.
name|setText
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|path
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|tokens
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|path
operator|=
name|tokens
index|[
literal|2
index|]
expr_stmt|;
block|}
name|NodeState
name|node1
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|NodeState
name|node2
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node1
operator|=
name|node1
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|node2
operator|=
name|node2
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
literal|"SegmentNodeState diff "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|id1
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" vs "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|id2
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"--------"
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|JsopDiff
operator|.
name|diffToJsop
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|setText
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|revert
parameter_list|(
name|String
name|revision
parameter_list|)
block|{
return|return
name|safeRevert
argument_list|(
name|revision
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|safeRevert
parameter_list|(
name|String
name|revision
parameter_list|,
name|boolean
name|rollback
parameter_list|)
block|{
name|String
name|head
init|=
name|store
operator|.
name|getHead
argument_list|()
operator|.
name|getRecordId
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|store
operator|.
name|setRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
try|try
block|{
name|refreshModel
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rollback
condition|)
block|{
name|log
operator|.
name|setText
argument_list|(
literal|"Switched head revision to "
operator|+
name|revision
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|e
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Unable to switch head revision to "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|newline
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"Will rollback to "
argument_list|)
expr_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|head
argument_list|)
expr_stmt|;
name|log
operator|.
name|setText
argument_list|(
name|sb
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|safeRevert
argument_list|(
name|head
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|rollback
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|static
class|class
name|NamePathModel
implements|implements
name|Comparable
argument_list|<
name|NamePathModel
argument_list|>
block|{
specifier|private
specifier|final
name|FileStore
name|store
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|skipSizeCheck
decl_stmt|;
specifier|private
name|boolean
name|loaded
init|=
literal|false
decl_stmt|;
specifier|private
name|Long
index|[]
name|size
init|=
block|{
operator|-
literal|1l
block|,
operator|-
literal|1l
block|}
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|cacheNodeState
decl_stmt|;
specifier|private
name|NodeState
name|state
decl_stmt|;
specifier|public
name|NamePathModel
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|,
name|NodeState
name|state
parameter_list|,
name|Map
argument_list|<
name|RecordIdKey
argument_list|,
name|Long
index|[]
argument_list|>
name|sizeCache
parameter_list|,
name|boolean
name|skipSizeCheck
parameter_list|,
name|FileStore
name|store
parameter_list|,
name|boolean
name|cacheNodeState
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|skipSizeCheck
operator|=
name|skipSizeCheck
expr_stmt|;
if|if
condition|(
operator|!
name|skipSizeCheck
operator|&&
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|this
operator|.
name|size
operator|=
name|exploreSize
argument_list|(
operator|(
name|SegmentNodeState
operator|)
name|state
argument_list|,
name|sizeCache
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|cacheNodeState
operator|=
name|cacheNodeState
expr_stmt|;
if|if
condition|(
name|cacheNodeState
condition|)
block|{
name|this
operator|.
name|state
operator|=
name|state
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|loaded
parameter_list|()
block|{
name|loaded
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isLoaded
parameter_list|()
block|{
return|return
name|loaded
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|skipSizeCheck
condition|)
block|{
return|return
name|name
return|;
block|}
if|if
condition|(
name|size
index|[
literal|1
index|]
operator|>
literal|0
condition|)
block|{
return|return
name|name
operator|+
literal|" ("
operator|+
name|FileUtils
operator|.
name|byteCountToDisplaySize
argument_list|(
name|size
index|[
literal|0
index|]
argument_list|)
operator|+
literal|";"
operator|+
name|FileUtils
operator|.
name|byteCountToDisplaySize
argument_list|(
name|size
index|[
literal|1
index|]
argument_list|)
operator|+
literal|")"
return|;
block|}
if|if
condition|(
name|size
index|[
literal|0
index|]
operator|>
literal|0
condition|)
block|{
return|return
name|name
operator|+
literal|" ("
operator|+
name|FileUtils
operator|.
name|byteCountToDisplaySize
argument_list|(
name|size
index|[
literal|0
index|]
argument_list|)
operator|+
literal|")"
return|;
block|}
return|return
name|name
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|public
name|NodeState
name|getState
parameter_list|()
block|{
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|state
return|;
block|}
name|NodeState
name|s
init|=
name|loadState
argument_list|()
decl_stmt|;
if|if
condition|(
name|cacheNodeState
condition|)
block|{
name|state
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|private
name|NodeState
name|loadState
parameter_list|()
block|{
name|NodeState
name|n
init|=
name|store
operator|.
name|getHead
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|p
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|n
operator|=
name|n
operator|.
name|getChildNode
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|NamePathModel
name|o
parameter_list|)
block|{
name|int
name|s
init|=
name|size
index|[
literal|0
index|]
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|size
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
operator|*
name|s
return|;
block|}
name|s
operator|=
name|size
index|[
literal|1
index|]
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|size
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|!=
literal|0
condition|)
block|{
return|return
operator|-
literal|1
operator|*
name|s
return|;
block|}
if|if
condition|(
literal|"root"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
elseif|else
if|if
condition|(
literal|"root"
operator|.
name|equals
argument_list|(
name|o
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|name
operator|.
name|compareTo
argument_list|(
name|o
operator|.
name|name
argument_list|)
return|;
block|}
specifier|public
name|Long
index|[]
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
specifier|private
specifier|static
name|Long
index|[]
name|exploreSize
parameter_list|(
name|SegmentNodeState
name|ns
parameter_list|,
name|Map
argument_list|<
name|RecordIdKey
argument_list|,
name|Long
index|[]
argument_list|>
name|sizeCache
parameter_list|)
block|{
name|RecordIdKey
name|key
init|=
operator|new
name|RecordIdKey
argument_list|(
name|ns
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sizeCache
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|sizeCache
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
name|Long
index|[]
name|s
init|=
block|{
literal|0l
block|,
literal|0l
block|}
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayList
argument_list|(
name|ns
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|contains
argument_list|(
literal|"root"
argument_list|)
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|temp
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|poz
init|=
literal|0
decl_stmt|;
comment|// push 'root' to the beginning
name|Iterator
argument_list|<
name|String
argument_list|>
name|iterator
init|=
name|names
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|n
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|equals
argument_list|(
literal|"root"
argument_list|)
condition|)
block|{
name|temp
operator|.
name|add
argument_list|(
name|poz
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|poz
operator|++
expr_stmt|;
block|}
else|else
block|{
name|temp
operator|.
name|add
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
block|}
name|names
operator|=
name|temp
expr_stmt|;
block|}
for|for
control|(
name|String
name|n
range|:
name|names
control|)
block|{
name|SegmentNodeState
name|k
init|=
operator|(
name|SegmentNodeState
operator|)
name|ns
operator|.
name|getChildNode
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|RecordIdKey
name|ckey
init|=
operator|new
name|RecordIdKey
argument_list|(
name|k
operator|.
name|getRecordId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sizeCache
operator|.
name|containsKey
argument_list|(
name|ckey
argument_list|)
condition|)
block|{
comment|// already been here, record size under 'link'
name|Long
index|[]
name|ks
init|=
name|sizeCache
operator|.
name|get
argument_list|(
name|ckey
argument_list|)
decl_stmt|;
name|s
index|[
literal|1
index|]
operator|=
name|s
index|[
literal|1
index|]
operator|+
name|ks
index|[
literal|0
index|]
operator|+
name|ks
index|[
literal|1
index|]
expr_stmt|;
block|}
else|else
block|{
name|Long
index|[]
name|ks
init|=
name|exploreSize
argument_list|(
name|k
argument_list|,
name|sizeCache
argument_list|)
decl_stmt|;
name|s
index|[
literal|0
index|]
operator|=
name|s
index|[
literal|0
index|]
operator|+
name|ks
index|[
literal|0
index|]
expr_stmt|;
name|s
index|[
literal|1
index|]
operator|=
name|s
index|[
literal|1
index|]
operator|+
name|ks
index|[
literal|1
index|]
expr_stmt|;
block|}
block|}
for|for
control|(
name|PropertyState
name|ps
range|:
name|ns
operator|.
name|getProperties
argument_list|()
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ps
operator|.
name|count
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|ps
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
operator|==
name|Type
operator|.
name|BINARY
operator|.
name|tag
argument_list|()
condition|)
block|{
name|Blob
name|b
init|=
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|BINARY
argument_list|,
name|j
argument_list|)
decl_stmt|;
name|boolean
name|skip
init|=
name|b
operator|instanceof
name|SegmentBlob
operator|&&
operator|(
operator|(
name|SegmentBlob
operator|)
name|b
operator|)
operator|.
name|isExternal
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|skip
condition|)
block|{
name|s
index|[
literal|0
index|]
operator|=
name|s
index|[
literal|0
index|]
operator|+
name|b
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|s
index|[
literal|0
index|]
operator|=
name|s
index|[
literal|0
index|]
operator|+
name|ps
operator|.
name|size
argument_list|(
name|j
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|sizeCache
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|s
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
specifier|private
specifier|static
class|class
name|RecordIdKey
block|{
specifier|private
specifier|final
name|long
name|msb
decl_stmt|;
specifier|private
specifier|final
name|long
name|lsb
decl_stmt|;
specifier|private
specifier|final
name|int
name|offset
decl_stmt|;
specifier|public
name|RecordIdKey
parameter_list|(
name|RecordId
name|rid
parameter_list|)
block|{
name|this
operator|.
name|offset
operator|=
name|rid
operator|.
name|getOffset
argument_list|()
expr_stmt|;
name|this
operator|.
name|msb
operator|=
name|rid
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getMostSignificantBits
argument_list|()
expr_stmt|;
name|this
operator|.
name|lsb
operator|=
name|rid
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getLeastSignificantBits
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|object
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|object
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|object
operator|instanceof
name|RecordIdKey
condition|)
block|{
name|RecordIdKey
name|that
init|=
operator|(
name|RecordIdKey
operator|)
name|object
decl_stmt|;
return|return
name|offset
operator|==
name|that
operator|.
name|offset
operator|&&
name|msb
operator|==
name|that
operator|.
name|msb
operator|&&
name|lsb
operator|==
name|that
operator|.
name|lsb
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
operator|(
name|int
operator|)
name|lsb
operator|)
operator|^
name|offset
return|;
block|}
block|}
block|}
end_class

end_unit

