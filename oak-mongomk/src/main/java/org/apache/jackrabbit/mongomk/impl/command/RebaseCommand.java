begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|tree
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|MongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|FetchCommitAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|action
operator|.
name|FetchHeadRevisionIdAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|MongoCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|tree
operator|.
name|MongoNodeDelta
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|tree
operator|.
name|MongoNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|tree
operator|.
name|SimpleMongoNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
operator|.
name|fromMongoRepresentation
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
operator|.
name|getBaseRevision
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
operator|.
name|toMongoRepresentation
import|;
end_import

begin_comment
comment|/**  * A {@code Command} for {@link org.apache.jackrabbit.mongomk.impl.MongoMicroKernel#rebase(String, String)}  */
end_comment

begin_class
specifier|public
class|class
name|RebaseCommand
extends|extends
name|BaseCommand
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|branchRevisionId
decl_stmt|;
specifier|private
specifier|final
name|String
name|newBaseRevisionId
decl_stmt|;
specifier|public
name|RebaseCommand
parameter_list|(
name|MongoNodeStore
name|nodeStore
parameter_list|,
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
block|{
name|super
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|branchRevisionId
operator|=
name|branchRevisionId
expr_stmt|;
name|this
operator|.
name|newBaseRevisionId
operator|=
name|newBaseRevisionId
expr_stmt|;
block|}
specifier|private
name|MongoCommit
name|getCommit
parameter_list|(
name|String
name|revisionId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
operator|new
name|FetchCommitAction
argument_list|(
name|nodeStore
argument_list|,
name|toMongoRepresentation
argument_list|(
name|revisionId
argument_list|)
argument_list|)
operator|.
name|execute
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|execute
parameter_list|()
throws|throws
name|Exception
block|{
name|MongoCommit
name|branchCommit
init|=
name|getCommit
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
name|String
name|branchId
init|=
name|branchCommit
operator|.
name|getBranchId
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|branchId
operator|!=
literal|null
argument_list|,
literal|"Can only rebase a private branch commit"
argument_list|)
expr_stmt|;
name|MongoCommit
name|newBaseCommit
decl_stmt|;
if|if
condition|(
name|newBaseRevisionId
operator|==
literal|null
condition|)
block|{
name|Long
name|headRevision
init|=
operator|new
name|FetchHeadRevisionIdAction
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|execute
argument_list|()
decl_stmt|;
name|newBaseCommit
operator|=
operator|new
name|FetchCommitAction
argument_list|(
name|nodeStore
argument_list|,
name|headRevision
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|newBaseCommit
operator|=
name|getCommit
argument_list|(
name|newBaseRevisionId
argument_list|)
expr_stmt|;
block|}
name|checkArgument
argument_list|(
name|newBaseCommit
operator|.
name|getBranchId
argument_list|()
operator|==
literal|null
argument_list|,
literal|"Cannot rebase onto private branch commit"
argument_list|)
expr_stmt|;
name|long
name|branchHeadRev
init|=
name|branchCommit
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
name|long
name|branchBaseRev
init|=
name|getBaseRevision
argument_list|(
name|branchId
argument_list|)
decl_stmt|;
name|long
name|newBaseRev
init|=
name|newBaseCommit
operator|.
name|getRevisionId
argument_list|()
decl_stmt|;
if|if
condition|(
name|newBaseRev
operator|==
name|branchBaseRev
condition|)
block|{
return|return
name|branchRevisionId
return|;
block|}
name|Node
name|branchHeadRoot
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|branchHeadRev
argument_list|,
name|branchId
argument_list|)
decl_stmt|;
name|Node
name|branchBaseRoot
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|branchBaseRev
argument_list|)
decl_stmt|;
name|Node
name|newBaseRoot
init|=
name|getNode
argument_list|(
literal|"/"
argument_list|,
name|newBaseRev
argument_list|)
decl_stmt|;
name|branchHeadRoot
operator|=
name|rebaseNode
argument_list|(
name|copy
argument_list|(
name|newBaseRoot
argument_list|)
argument_list|,
name|branchBaseRoot
argument_list|,
name|branchHeadRoot
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|String
name|diff
init|=
operator|new
name|DiffBuilder
argument_list|(
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|newBaseRoot
argument_list|)
argument_list|,
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|branchHeadRoot
argument_list|)
argument_list|,
literal|"/"
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|SimpleMongoNodeStore
argument_list|()
argument_list|,
literal|""
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|MongoCommit
name|newBranchInitialCommit
init|=
operator|(
name|MongoCommit
operator|)
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
name|fromMongoRepresentation
argument_list|(
name|newBaseRev
argument_list|)
argument_list|,
name|MongoNodeStore
operator|.
name|INITIAL_COMMIT_MESSAGE
argument_list|)
decl_stmt|;
name|newBranchInitialCommit
operator|.
name|setBranchId
argument_list|(
name|fromMongoRepresentation
argument_list|(
name|newBaseRev
argument_list|)
operator|+
literal|'-'
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|newBranchRevId
init|=
name|nodeStore
operator|.
name|commit
argument_list|(
name|newBranchInitialCommit
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|newBranchRevId
return|;
block|}
name|MongoCommit
name|newCommit
init|=
operator|(
name|MongoCommit
operator|)
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|""
argument_list|,
name|diff
argument_list|,
name|newBranchRevId
argument_list|,
literal|"rebased "
operator|+
name|branchHeadRev
operator|+
literal|" onto "
operator|+
name|newBaseRev
argument_list|)
decl_stmt|;
name|newCommit
operator|.
name|setBranchId
argument_list|(
name|newBranchInitialCommit
operator|.
name|getBranchId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodeStore
operator|.
name|commit
argument_list|(
name|newCommit
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeImpl
name|rebaseNode
parameter_list|(
name|Node
name|baseNode
parameter_list|,
name|Node
name|fromNode
parameter_list|,
name|Node
name|toNode
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|MongoNodeDelta
name|theirDelta
init|=
operator|new
name|MongoNodeDelta
argument_list|(
operator|new
name|SimpleMongoNodeStore
argument_list|()
argument_list|,
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|fromNode
argument_list|)
argument_list|,
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|baseNode
argument_list|)
argument_list|)
decl_stmt|;
name|MongoNodeDelta
name|ourDelta
init|=
operator|new
name|MongoNodeDelta
argument_list|(
operator|new
name|SimpleMongoNodeStore
argument_list|()
argument_list|,
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|fromNode
argument_list|)
argument_list|,
name|MongoUtil
operator|.
name|wrap
argument_list|(
name|toNode
argument_list|)
argument_list|)
decl_stmt|;
name|NodeImpl
name|stagedNode
init|=
operator|(
name|NodeImpl
operator|)
name|baseNode
decl_stmt|;
comment|// Apply our changes.
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|added
range|:
name|ourDelta
operator|.
name|getAddedProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|added
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|ourValue
init|=
name|added
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|theirValue
init|=
name|theirDelta
operator|.
name|getAddedProperties
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|theirValue
operator|!=
literal|null
operator|&&
operator|!
name|theirValue
operator|.
name|equals
argument_list|(
name|ourValue
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"addExistingProperty"
argument_list|,
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stagedNode
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|removed
range|:
name|ourDelta
operator|.
name|getRemovedProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|removed
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|ourValue
init|=
name|removed
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|theirDelta
operator|.
name|getRemovedProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"deleteDeletedProperty"
argument_list|,
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|theirDelta
operator|.
name|getChangedProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"deleteChangedProperty"
argument_list|,
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stagedNode
operator|.
name|getProperties
argument_list|()
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|changed
range|:
name|ourDelta
operator|.
name|getChangedProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|changed
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|ourValue
init|=
name|changed
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|theirValue
init|=
name|theirDelta
operator|.
name|getChangedProperties
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|theirDelta
operator|.
name|getRemovedProperties
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"changeDeletedProperty"
argument_list|,
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|theirValue
operator|!=
literal|null
operator|&&
operator|!
name|theirValue
operator|.
name|equals
argument_list|(
name|ourValue
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"changeChangedProperty"
argument_list|,
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stagedNode
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|added
range|:
name|ourDelta
operator|.
name|getAddedChildNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|added
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeState
name|ourState
init|=
name|added
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|NodeState
name|theirState
init|=
name|theirDelta
operator|.
name|getAddedChildNodes
argument_list|()
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|theirState
operator|!=
literal|null
operator|&&
operator|!
name|theirState
operator|.
name|equals
argument_list|(
name|ourState
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"addExistingNode"
argument_list|,
name|name
argument_list|,
name|ourState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stagedNode
operator|.
name|addChildNodeEntry
argument_list|(
name|unwrap
argument_list|(
name|ourState
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|removed
range|:
name|ourDelta
operator|.
name|getRemovedChildNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|removed
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeState
name|ourState
init|=
name|removed
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|theirDelta
operator|.
name|getRemovedChildNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"deleteDeletedNode"
argument_list|,
name|name
argument_list|,
name|ourState
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|theirDelta
operator|.
name|getChangedChildNodes
argument_list|()
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"deleteChangedNode"
argument_list|,
name|name
argument_list|,
name|ourState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stagedNode
operator|.
name|removeChildNodeEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Entry
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|changed
range|:
name|ourDelta
operator|.
name|getChangedChildNodes
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|changed
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|NodeState
name|ourState
init|=
name|changed
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Node
name|changedBase
init|=
name|baseNode
operator|.
name|getChildNodeEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|changedBase
operator|==
literal|null
condition|)
block|{
name|markConflict
argument_list|(
name|stagedNode
argument_list|,
literal|"changeDeletedNode"
argument_list|,
name|name
argument_list|,
name|ourState
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|Node
name|changedFrom
init|=
name|fromNode
operator|.
name|getChildNodeEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Node
name|changedTo
init|=
name|toNode
operator|.
name|getChildNodeEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|changedPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|rebaseNode
argument_list|(
name|changedBase
argument_list|,
name|changedFrom
argument_list|,
name|changedTo
argument_list|,
name|changedPath
argument_list|)
expr_stmt|;
block|}
return|return
name|stagedNode
return|;
block|}
specifier|private
specifier|static
name|Node
name|unwrap
parameter_list|(
name|NodeState
name|state
parameter_list|)
block|{
return|return
operator|(
operator|(
name|MongoNodeState
operator|)
name|state
operator|)
operator|.
name|unwrap
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|markConflict
parameter_list|(
name|NodeImpl
name|parent
parameter_list|,
name|String
name|conflictType
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|ourValue
parameter_list|)
block|{
name|NodeImpl
name|marker
init|=
name|getOrAddConflictMarker
argument_list|(
name|parent
argument_list|,
name|conflictType
argument_list|)
decl_stmt|;
name|marker
operator|.
name|getProperties
argument_list|()
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ourValue
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|markConflict
parameter_list|(
name|NodeImpl
name|parent
parameter_list|,
name|String
name|conflictType
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|ourState
parameter_list|)
block|{
name|NodeImpl
name|marker
init|=
name|getOrAddConflictMarker
argument_list|(
name|parent
argument_list|,
name|conflictType
argument_list|)
decl_stmt|;
name|marker
operator|.
name|addChildNodeEntry
argument_list|(
name|unwrap
argument_list|(
name|ourState
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeImpl
name|getOrAddConflictMarker
parameter_list|(
name|NodeImpl
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeImpl
name|conflict
init|=
name|getOrAddNode
argument_list|(
name|parent
argument_list|,
literal|":conflict"
argument_list|)
decl_stmt|;
return|return
name|getOrAddNode
argument_list|(
name|conflict
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|NodeImpl
name|getOrAddNode
parameter_list|(
name|NodeImpl
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|Node
name|child
init|=
name|parent
operator|.
name|getChildNodeEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
block|{
name|child
operator|=
operator|new
name|NodeImpl
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|parent
operator|.
name|getPath
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addChildNodeEntry
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|NodeImpl
operator|)
name|child
return|;
block|}
specifier|private
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revisionId
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|getNode
argument_list|(
name|path
argument_list|,
name|revisionId
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|private
name|Node
name|getNode
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revisionId
parameter_list|,
name|String
name|branchId
parameter_list|)
throws|throws
name|Exception
block|{
name|GetNodesCommand
name|command
init|=
operator|new
name|GetNodesCommand
argument_list|(
name|nodeStore
argument_list|,
name|path
argument_list|,
name|revisionId
argument_list|)
decl_stmt|;
name|command
operator|.
name|setBranchId
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
return|return
name|command
operator|.
name|execute
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|NodeImpl
name|copy
parameter_list|(
name|Node
name|node
parameter_list|)
block|{
name|NodeImpl
name|copy
init|=
operator|new
name|NodeImpl
argument_list|(
name|node
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|copy
operator|.
name|setRevisionId
argument_list|(
name|node
operator|.
name|getRevisionId
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|node
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|copy
operator|.
name|addProperty
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
argument_list|<
name|Node
argument_list|>
name|it
init|=
name|node
operator|.
name|getChildNodeEntries
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Node
name|child
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|copy
operator|.
name|addChildNodeEntry
argument_list|(
name|copy
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|copy
return|;
block|}
block|}
end_class

end_unit

