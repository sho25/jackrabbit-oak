begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|cug
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NestedCugHookRootSupportedTest
extends|extends
name|NestedCugHookTest
block|{
annotation|@
name|Override
specifier|protected
name|ConfigurationParameters
name|getSecurityConfigParameters
parameter_list|()
block|{
return|return
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|AuthorizationConfiguration
operator|.
name|NAME
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|CugConstants
operator|.
name|PARAM_CUG_SUPPORTED_PATHS
argument_list|,
operator|new
name|String
index|[]
block|{
name|PathUtils
operator|.
name|ROOT_PATH
block|}
argument_list|,
name|CugConstants
operator|.
name|PARAM_CUG_ENABLED
argument_list|,
literal|true
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAtRoot
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|hasChild
argument_list|(
name|REP_CUG_POLICY
argument_list|)
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|true
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAtRoot2
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|true
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAtRoot3
parameter_list|()
throws|throws
name|Exception
block|{
name|createCug
argument_list|(
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|true
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRootCug
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add cug at /
name|createCug
argument_list|(
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
name|ROOT_PATH
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content"
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRootCug2
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add cug at /
name|createCug
argument_list|(
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|removeCug
argument_list|(
literal|"/content"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|true
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|removeCug
argument_list|(
literal|"/"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|removeCug
argument_list|(
literal|"/content2"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRootCug3
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add cug at /
name|createCug
argument_list|(
name|ROOT_PATH
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|true
argument_list|,
literal|"/content2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content2"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
name|ROOT_PATH
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
name|ROOT_PATH
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveRootCug4
parameter_list|()
throws|throws
name|Exception
block|{
comment|// add cug at /
name|createCug
argument_list|(
literal|"/"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content"
argument_list|,
name|getTestGroupPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|createCug
argument_list|(
literal|"/content2"
argument_list|,
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/content2"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|removeCug
argument_list|(
literal|"/"
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertNestedCugs
argument_list|(
name|root
argument_list|,
name|getRootProvider
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

