begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|server
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_comment
comment|/**  * File servlet that will deliver static resources.  */
end_comment

begin_class
class|class
name|FileServlet
implements|implements
name|Servlet
block|{
comment|/** The one and only instance of this servlet. */
specifier|public
specifier|static
name|FileServlet
name|INSTANCE
init|=
operator|new
name|FileServlet
argument_list|()
decl_stmt|;
comment|/** Just one instance, no need to make constructor public */
specifier|private
name|FileServlet
parameter_list|()
block|{}
annotation|@
name|Override
specifier|public
name|void
name|service
parameter_list|(
name|Request
name|request
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|file
init|=
name|request
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|file
operator|+=
literal|"index.html"
expr_stmt|;
block|}
name|InputStream
name|in
init|=
name|FileServlet
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|file
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|int
name|dotIndex
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dotIndex
operator|!=
operator|-
literal|1
condition|)
block|{
name|String
name|contentType
init|=
name|MIME_TYPES
operator|.
name|get
argument_list|(
name|file
operator|.
name|substring
argument_list|(
name|dotIndex
operator|+
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|contentType
operator|==
literal|null
condition|)
block|{
name|contentType
operator|=
literal|"application/octet-stream"
expr_stmt|;
block|}
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
name|IOUtils
operator|.
name|copy
argument_list|(
name|in
argument_list|,
name|response
operator|.
name|getOutputStream
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|IOUtils
operator|.
name|closeQuietly
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|response
operator|.
name|setStatusCode
argument_list|(
literal|404
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* Mime types table */
specifier|private
specifier|static
specifier|final
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|MIME_TYPES
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|MIME_TYPES
operator|.
name|put
argument_list|(
literal|"html"
argument_list|,
literal|"text/html"
argument_list|)
expr_stmt|;
name|MIME_TYPES
operator|.
name|put
argument_list|(
literal|"css"
argument_list|,
literal|"text/css"
argument_list|)
expr_stmt|;
name|MIME_TYPES
operator|.
name|put
argument_list|(
literal|"js"
argument_list|,
literal|"application/javascript"
argument_list|)
expr_stmt|;
name|MIME_TYPES
operator|.
name|put
argument_list|(
literal|"json"
argument_list|,
literal|"application/json"
argument_list|)
expr_stmt|;
name|MIME_TYPES
operator|.
name|put
argument_list|(
literal|"png"
argument_list|,
literal|"image/png"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

