begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_comment
comment|/**  * A {@code CompactionMap} is a composite of multiple {@link PartialCompactionMap}  * instances. Operations performed on this map are delegated back to the individual  * maps.  */
end_comment

begin_class
specifier|public
class|class
name|CompactionMap
block|{
comment|/**      * An empty map.      */
specifier|public
specifier|static
specifier|final
name|CompactionMap
name|EMPTY
init|=
operator|new
name|CompactionMap
argument_list|(
name|Collections
operator|.
expr|<
name|PartialCompactionMap
operator|>
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|PartialCompactionMap
argument_list|>
name|maps
decl_stmt|;
specifier|private
name|CompactionMap
parameter_list|(
annotation|@
name|Nonnull
name|List
argument_list|<
name|PartialCompactionMap
argument_list|>
name|maps
parameter_list|)
block|{
name|this
operator|.
name|maps
operator|=
name|maps
expr_stmt|;
block|}
comment|/**      * Checks whether the record with the given {@code before} identifier was      * compacted to a new record with the given {@code after} identifier.      *      * @param before before record identifier      * @param after  after record identifier      * @return whether {@code before} was compacted to {@code after}      */
specifier|public
name|boolean
name|wasCompactedTo
parameter_list|(
annotation|@
name|Nonnull
name|RecordId
name|before
parameter_list|,
annotation|@
name|Nonnull
name|RecordId
name|after
parameter_list|)
block|{
for|for
control|(
name|PartialCompactionMap
name|map
range|:
name|maps
control|)
block|{
if|if
condition|(
name|map
operator|.
name|wasCompactedTo
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Checks whether content in the segment with the given identifier was      * compacted to new segments.      *      * @param id segment identifier      * @return whether the identified segment was compacted      */
specifier|public
name|boolean
name|wasCompacted
parameter_list|(
annotation|@
name|Nonnull
name|UUID
name|id
parameter_list|)
block|{
for|for
control|(
name|PartialCompactionMap
name|map
range|:
name|maps
control|)
block|{
if|if
condition|(
name|map
operator|.
name|wasCompacted
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Retrieve the record id {@code before} maps to or {@code null}      * if no such id exists.      * @param before before record id      * @return after record id or {@code null}      */
annotation|@
name|CheckForNull
specifier|public
name|RecordId
name|get
parameter_list|(
annotation|@
name|Nonnull
name|RecordId
name|before
parameter_list|)
block|{
for|for
control|(
name|PartialCompactionMap
name|map
range|:
name|maps
control|)
block|{
name|RecordId
name|after
init|=
name|map
operator|.
name|get
argument_list|(
name|before
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|!=
literal|null
condition|)
block|{
return|return
name|after
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Remove all keys from this map where {@code keys.contains(key.asUUID())}.      * @param uuids  uuids of the keys to remove      */
specifier|public
name|void
name|remove
parameter_list|(
annotation|@
name|Nonnull
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
parameter_list|)
block|{
name|List
argument_list|<
name|PartialCompactionMap
argument_list|>
name|remove
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|PartialCompactionMap
name|map
range|:
name|maps
control|)
block|{
name|map
operator|.
name|remove
argument_list|(
name|uuids
argument_list|)
expr_stmt|;
if|if
condition|(
name|map
operator|.
name|getSegmentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
name|remove
operator|.
name|add
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
block|}
name|maps
operator|.
name|removeAll
argument_list|(
name|remove
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new {@code CompactionMap} containing all maps      * of this instances and additional the passed {@code map}.      * @param map      * @return a new {@code CompactionMap} instance      */
annotation|@
name|Nonnull
specifier|public
name|CompactionMap
name|cons
parameter_list|(
annotation|@
name|Nonnull
name|PartialCompactionMap
name|map
parameter_list|)
block|{
name|List
argument_list|<
name|PartialCompactionMap
argument_list|>
name|maps
init|=
name|newArrayList
argument_list|(
name|map
argument_list|)
decl_stmt|;
name|maps
operator|.
name|addAll
argument_list|(
name|this
operator|.
name|maps
argument_list|)
expr_stmt|;
return|return
operator|new
name|CompactionMap
argument_list|(
name|maps
argument_list|)
return|;
block|}
comment|/**      * Java's lacking libraries...      * @param longs      * @return sum of the passed {@code longs}      */
specifier|public
specifier|static
name|long
name|sum
parameter_list|(
name|long
index|[]
name|longs
parameter_list|)
block|{
name|long
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|long
name|x
range|:
name|longs
control|)
block|{
name|sum
operator|+=
name|x
expr_stmt|;
block|}
return|return
name|sum
return|;
block|}
comment|/**      * The depth of the compaction map is the number of partial compaction maps      * this map consists of.      *      * @return the depth of this compaction map      * @see #cons(PartialCompactionMap)      */
specifier|public
name|int
name|getDepth
parameter_list|()
block|{
return|return
name|maps
operator|.
name|size
argument_list|()
return|;
block|}
comment|/**      * The weight of the compaction map is its  memory consumption bytes      * @return Estimated weight of the compaction map      */
specifier|public
name|long
index|[]
name|getEstimatedWeights
parameter_list|()
block|{
name|long
index|[]
name|weights
init|=
operator|new
name|long
index|[
name|maps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PartialCompactionMap
name|map
range|:
name|maps
control|)
block|{
name|weights
index|[
name|c
operator|++
index|]
operator|=
name|map
operator|.
name|getEstimatedWeight
argument_list|()
expr_stmt|;
block|}
return|return
name|weights
return|;
block|}
comment|/**      * Number of segments referenced by the keys in this map. The returned value might only      * be based on the compressed part of the individual maps.      * @return  number of segments      */
specifier|public
name|long
index|[]
name|getSegmentCounts
parameter_list|()
block|{
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|maps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PartialCompactionMap
name|map
range|:
name|maps
control|)
block|{
name|counts
index|[
name|c
operator|++
index|]
operator|=
name|map
operator|.
name|getSegmentCount
argument_list|()
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
comment|/**      * Number of records referenced by the keys in this map. The returned value might only      * be based on the compressed part of the  individual maps.      * @return  number of records      */
specifier|public
name|long
index|[]
name|getRecordCounts
parameter_list|()
block|{
name|long
index|[]
name|counts
init|=
operator|new
name|long
index|[
name|maps
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|c
init|=
literal|0
decl_stmt|;
for|for
control|(
name|PartialCompactionMap
name|map
range|:
name|maps
control|)
block|{
name|counts
index|[
name|c
operator|++
index|]
operator|=
name|map
operator|.
name|getRecordCount
argument_list|()
expr_stmt|;
block|}
return|return
name|counts
return|;
block|}
block|}
end_class

end_unit

