begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|mt
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|spi
operator|.
name|FulltextQueryTermsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|joshua
operator|.
name|decoder
operator|.
name|Decoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|analysis
operator|.
name|Analyzer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|lucene
operator|.
name|search
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Factory for {@link MTFulltextQueryTermsProvider}  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|name
operator|=
literal|"org.apache.jackrabbit.oak.plugins.index.lucene.mt.MTFulltextQueryTermsProviderFactory"
argument_list|,
name|label
operator|=
literal|"Apache Jackrabbit Oak Machine Translation Fulltext Query Terms Provider"
argument_list|,
name|configurationFactory
operator|=
literal|true
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|)
annotation|@
name|Service
argument_list|(
name|FulltextQueryTermsProvider
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MTFulltextQueryTermsProviderFactory
implements|implements
name|FulltextQueryTermsProvider
block|{
specifier|private
specifier|static
specifier|final
name|float
name|DEFAULT_MIN_SCORE
init|=
literal|0.5f
decl_stmt|;
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Joshua Config Path"
argument_list|,
name|description
operator|=
literal|"The absolute filesystem path to Apache Joshua configuration file"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|CONFIG_PATH
init|=
literal|"path.to.config"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Node types"
argument_list|,
name|description
operator|=
literal|"List of node types for which expanding the query via MT"
argument_list|,
name|cardinality
operator|=
literal|10
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|NODE_TYPES
init|=
literal|"node.types"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|label
operator|=
literal|"Minimum score"
argument_list|,
name|description
operator|=
literal|"Minimum allowed score for a translated phrase/term to be used for expansion"
argument_list|,
name|floatValue
operator|=
name|DEFAULT_MIN_SCORE
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|MIN_SCORE
init|=
literal|"min.score"
decl_stmt|;
specifier|private
name|MTFulltextQueryTermsProvider
name|queryTermsProvider
decl_stmt|;
annotation|@
name|Activate
specifier|public
name|void
name|activate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|pathToJoshuaConfig
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|CONFIG_PATH
argument_list|)
argument_list|,
literal|"."
argument_list|)
decl_stmt|;
name|String
index|[]
name|nts
init|=
name|PropertiesUtil
operator|.
name|toStringArray
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|NODE_TYPES
argument_list|)
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"Oak:unstructured"
block|}
argument_list|)
decl_stmt|;
name|float
name|minScore
init|=
operator|(
name|float
operator|)
name|PropertiesUtil
operator|.
name|toDouble
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|MIN_SCORE
argument_list|)
argument_list|,
name|DEFAULT_MIN_SCORE
argument_list|)
decl_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"activating MT FulltextQueryTermProvider from Joshua config at {} on {} nodetypes, minScore {}"
argument_list|,
name|pathToJoshuaConfig
argument_list|,
name|nts
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
try|try
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"parsing joshua config file"
argument_list|)
expr_stmt|;
name|Decoder
name|decoder
init|=
name|Decoder
operator|.
name|createDecoder
argument_list|(
name|pathToJoshuaConfig
argument_list|)
decl_stmt|;
name|decoder
operator|.
name|getJoshuaConfiguration
argument_list|()
operator|.
name|use_structured_output
operator|=
literal|true
expr_stmt|;
name|decoder
operator|.
name|getJoshuaConfiguration
argument_list|()
operator|.
name|sanityCheck
argument_list|()
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"decoder initialized"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|nodeTypes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|nodeTypes
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|nts
argument_list|)
argument_list|)
expr_stmt|;
name|queryTermsProvider
operator|=
operator|new
name|MTFulltextQueryTermsProvider
argument_list|(
name|decoder
argument_list|,
name|nodeTypes
argument_list|,
name|minScore
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Deactivate
specifier|public
name|void
name|deactivate
parameter_list|()
throws|throws
name|Exception
block|{
name|log
operator|.
name|info
argument_list|(
literal|"clearing resources"
argument_list|)
expr_stmt|;
name|queryTermsProvider
operator|.
name|clearResources
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Query
name|getQueryTerm
parameter_list|(
name|String
name|text
parameter_list|,
name|Analyzer
name|analyzer
parameter_list|,
name|NodeState
name|indexDefinition
parameter_list|)
block|{
return|return
name|queryTermsProvider
operator|.
name|getQueryTerm
argument_list|(
name|text
argument_list|,
name|analyzer
argument_list|,
name|indexDefinition
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getSupportedTypes
parameter_list|()
block|{
return|return
name|queryTermsProvider
operator|.
name|getSupportedTypes
argument_list|()
return|;
block|}
block|}
end_class

end_unit

