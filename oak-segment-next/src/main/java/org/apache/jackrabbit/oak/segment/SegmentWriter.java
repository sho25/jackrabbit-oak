begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkElementIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndex
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkPositionIndexes
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|addAll
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithExpectedSize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|partition
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteStreams
operator|.
name|read
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|nCopies
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARIES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|BINARY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|SequenceInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closeables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ModifiedNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordCache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriteOperationHandler
operator|.
name|WriteOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|DefaultNodeStateDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Converts nodes, properties, and values to records, which are written to segments.  * FIXME OAK-3348 doc thread safety properties  */
end_comment

begin_comment
comment|// FIXME OAK-3348 Improve the way how SegmentWriter instances are created.
end_comment

begin_class
specifier|public
class|class
name|SegmentWriter
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SegmentWriter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|int
name|BLOCK_SIZE
init|=
literal|1
operator|<<
literal|12
decl_stmt|;
comment|// 4kB
specifier|private
specifier|static
specifier|final
name|int
name|STRING_RECORDS_CACHE_SIZE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.segment.writer.stringsCacheSize"
argument_list|,
literal|15000
argument_list|)
decl_stmt|;
comment|/**      * Cache of recently stored string records, used to avoid storing duplicates      * of frequently occurring data.      */
specifier|private
specifier|final
name|RecordCache
argument_list|<
name|String
argument_list|>
name|stringCache
init|=
name|STRING_RECORDS_CACHE_SIZE
operator|<=
literal|0
condition|?
name|RecordCache
operator|.
expr|<
name|String
operator|>
name|disabled
argument_list|()
else|:
operator|new
name|RecordCache
argument_list|<
name|String
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Cache
argument_list|<
name|String
argument_list|>
name|getCache
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
return|return
operator|new
name|LRUCache
argument_list|<
name|String
argument_list|>
argument_list|(
name|STRING_RECORDS_CACHE_SIZE
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TPL_RECORDS_CACHE_SIZE
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"oak.segment.writer.templatesCacheSize"
argument_list|,
literal|3000
argument_list|)
decl_stmt|;
comment|/**      * Cache of recently stored template records, used to avoid storing      * duplicates of frequently occurring data.      */
specifier|private
specifier|final
name|RecordCache
argument_list|<
name|Template
argument_list|>
name|templateCache
init|=
name|TPL_RECORDS_CACHE_SIZE
operator|<=
literal|0
condition|?
name|RecordCache
operator|.
expr|<
name|Template
operator|>
name|disabled
argument_list|()
else|:
operator|new
name|RecordCache
argument_list|<
name|Template
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Cache
argument_list|<
name|Template
argument_list|>
name|getCache
parameter_list|(
name|int
name|generation
parameter_list|)
block|{
return|return
operator|new
name|LRUCache
argument_list|<
name|Template
argument_list|>
argument_list|(
name|TPL_RECORDS_CACHE_SIZE
argument_list|)
return|;
block|}
block|}
decl_stmt|;
specifier|private
specifier|final
name|RecordCache
argument_list|<
name|String
argument_list|>
name|nodeCache
decl_stmt|;
comment|// FIXME OAK-3348 Do we need a deduplication cache also for binaries?
comment|// Probably/preferably not as long binaries are already de-duplicated
comment|// by rewriting its list of block ids and because we should recommend
comment|// using a data store for big binaries.
specifier|private
specifier|final
name|SegmentStore
name|store
decl_stmt|;
comment|/**      * Version of the segment storage format.      */
specifier|private
specifier|final
name|SegmentVersion
name|version
decl_stmt|;
specifier|private
specifier|final
name|WriteOperationHandler
name|writeOperationHandler
decl_stmt|;
specifier|public
name|SegmentWriter
parameter_list|(
name|SegmentStore
name|store
parameter_list|,
name|SegmentVersion
name|version
parameter_list|,
name|WriteOperationHandler
name|writeOperationHandler
parameter_list|,
name|RecordCache
argument_list|<
name|String
argument_list|>
name|nodeCache
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
name|this
operator|.
name|version
operator|=
name|version
expr_stmt|;
name|this
operator|.
name|writeOperationHandler
operator|=
name|writeOperationHandler
expr_stmt|;
name|this
operator|.
name|nodeCache
operator|=
name|nodeCache
expr_stmt|;
block|}
comment|/**      * @param store     store to write to      * @param version   segment version to write      * FIXME OAK-3348 document      */
specifier|public
name|SegmentWriter
parameter_list|(
name|SegmentStore
name|store
parameter_list|,
name|SegmentVersion
name|version
parameter_list|,
name|WriteOperationHandler
name|writeOperationHandler
parameter_list|)
block|{
name|this
argument_list|(
name|store
argument_list|,
name|version
argument_list|,
name|writeOperationHandler
argument_list|,
operator|new
name|RecordCache
argument_list|<
name|String
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// FIXME OAK-3348 There should be a cleaner way for adding the cached nodes from the compactor
specifier|public
name|void
name|addCachedNodes
parameter_list|(
name|int
name|generation
parameter_list|,
name|Cache
argument_list|<
name|String
argument_list|>
name|cache
parameter_list|)
block|{
name|nodeCache
operator|.
name|put
argument_list|(
name|cache
argument_list|,
name|generation
argument_list|)
expr_stmt|;
comment|// FIXME OAK-3348 find a better way to evict the cache from within the cache itself
name|stringCache
operator|.
name|clearUpTo
argument_list|(
name|generation
operator|-
literal|1
argument_list|)
expr_stmt|;
name|templateCache
operator|.
name|clearUpTo
argument_list|(
name|generation
operator|-
literal|1
argument_list|)
expr_stmt|;
name|nodeCache
operator|.
name|clearUpTo
argument_list|(
name|generation
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
name|writeOperationHandler
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|MapRecord
name|writeMap
parameter_list|(
specifier|final
name|MapRecord
name|base
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|changes
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|MapRecord
argument_list|(
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeMap
argument_list|(
name|base
argument_list|,
name|changes
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|RecordId
name|writeList
parameter_list|(
specifier|final
name|List
argument_list|<
name|RecordId
argument_list|>
name|list
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeList
argument_list|(
name|list
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
specifier|public
name|RecordId
name|writeString
parameter_list|(
specifier|final
name|String
name|string
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeString
argument_list|(
name|string
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
name|SegmentBlob
name|writeBlob
parameter_list|(
specifier|final
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SegmentBlob
argument_list|(
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeBlob
argument_list|(
name|blob
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Writes a block record containing the given block of bytes.      *      * @param bytes source buffer      * @param offset offset within the source buffer      * @param length number of bytes to write      * @return block record identifier      */
name|RecordId
name|writeBlock
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeBlock
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Writes a stream value record. The given stream is consumed<em>and closed</em> by      * this method.      *      * @param stream stream to be written      * @return blob for the passed {@code stream}      * @throws IOException if the input stream could not be read or the output could not be written      */
specifier|public
name|SegmentBlob
name|writeStream
parameter_list|(
specifier|final
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SegmentBlob
argument_list|(
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeStream
argument_list|(
name|stream
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
name|SegmentPropertyState
name|writeProperty
parameter_list|(
specifier|final
name|PropertyState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|RecordId
name|id
init|=
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeProperty
argument_list|(
name|state
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
operator|new
name|SegmentPropertyState
argument_list|(
name|id
argument_list|,
name|state
operator|.
name|getName
argument_list|()
argument_list|,
name|state
operator|.
name|getType
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|SegmentNodeState
name|writeNode
parameter_list|(
specifier|final
name|NodeState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
return|return
operator|new
name|SegmentNodeState
argument_list|(
name|writeOperationHandler
operator|.
name|execute
argument_list|(
operator|new
name|SegmentWriteOperation
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|with
argument_list|(
name|writer
argument_list|)
operator|.
name|writeNode
argument_list|(
name|state
argument_list|,
literal|0
argument_list|)
return|;
block|}
block|}
argument_list|)
argument_list|)
return|;
block|}
comment|// FIXME OAK-3348 document: not thread safe
specifier|private
specifier|abstract
class|class
name|SegmentWriteOperation
implements|implements
name|WriteOperation
block|{
specifier|private
name|SegmentBufferWriter
name|writer
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|abstract
name|RecordId
name|execute
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
throws|throws
name|IOException
function_decl|;
name|SegmentWriteOperation
name|with
parameter_list|(
name|SegmentBufferWriter
name|writer
parameter_list|)
block|{
name|checkState
argument_list|(
name|this
operator|.
name|writer
operator|==
literal|null
argument_list|)
expr_stmt|;
name|this
operator|.
name|writer
operator|=
name|writer
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|int
name|generation
parameter_list|()
block|{
return|return
name|writer
operator|.
name|getGeneration
argument_list|()
return|;
block|}
specifier|private
name|RecordId
name|writeMap
parameter_list|(
name|MapRecord
name|base
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|changes
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|base
operator|!=
literal|null
operator|&&
name|base
operator|.
name|isDiff
argument_list|()
condition|)
block|{
name|Segment
name|segment
init|=
name|base
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|RecordId
name|key
init|=
name|segment
operator|.
name|readRecordId
argument_list|(
name|base
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|Segment
operator|.
name|readString
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|changes
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|changes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|segment
operator|.
name|readRecordId
argument_list|(
name|base
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|base
operator|=
operator|new
name|MapRecord
argument_list|(
name|segment
operator|.
name|readRecordId
argument_list|(
name|base
operator|.
name|getOffset
argument_list|(
literal|8
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|!=
literal|null
operator|&&
name|changes
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|change
init|=
name|changes
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
decl_stmt|;
name|RecordId
name|value
init|=
name|change
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|MapEntry
name|entry
init|=
name|base
operator|.
name|getEntry
argument_list|(
name|change
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|base
operator|.
name|getRecordId
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|RecordWriters
operator|.
name|newMapBranchWriter
argument_list|(
name|entry
operator|.
name|getHash
argument_list|()
argument_list|,
name|asList
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|value
argument_list|,
name|base
operator|.
name|getRecordId
argument_list|()
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|MapEntry
argument_list|>
name|entries
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|changes
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|key
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|RecordId
name|keyId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|MapEntry
name|e
init|=
name|base
operator|.
name|getEntry
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
name|keyId
operator|=
name|e
operator|.
name|getKey
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|keyId
operator|==
literal|null
operator|&&
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|keyId
operator|=
name|writeString
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|keyId
operator|!=
literal|null
condition|)
block|{
name|entries
operator|.
name|add
argument_list|(
operator|new
name|MapEntry
argument_list|(
name|key
argument_list|,
name|keyId
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|writeMapBucket
argument_list|(
name|base
argument_list|,
name|entries
argument_list|,
literal|0
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|writeMapLeaf
parameter_list|(
name|int
name|level
parameter_list|,
name|Collection
argument_list|<
name|MapEntry
argument_list|>
name|entries
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|entries
argument_list|)
expr_stmt|;
name|int
name|size
init|=
name|entries
operator|.
name|size
argument_list|()
decl_stmt|;
name|checkElementIndex
argument_list|(
name|size
argument_list|,
name|MapRecord
operator|.
name|MAX_SIZE
argument_list|)
expr_stmt|;
name|checkPositionIndex
argument_list|(
name|level
argument_list|,
name|MapRecord
operator|.
name|MAX_NUMBER_OF_LEVELS
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
name|size
operator|!=
literal|0
operator|||
name|level
operator|==
name|MapRecord
operator|.
name|MAX_NUMBER_OF_LEVELS
argument_list|)
expr_stmt|;
return|return
name|RecordWriters
operator|.
name|newMapLeafWriter
argument_list|(
name|level
argument_list|,
name|entries
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|writeMapBranch
parameter_list|(
name|int
name|level
parameter_list|,
name|int
name|size
parameter_list|,
name|MapRecord
modifier|...
name|buckets
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|bitmap
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|bucketIds
init|=
name|newArrayListWithCapacity
argument_list|(
name|buckets
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buckets
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buckets
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|bitmap
operator||=
literal|1L
operator|<<
name|i
expr_stmt|;
name|bucketIds
operator|.
name|add
argument_list|(
name|buckets
index|[
name|i
index|]
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|RecordWriters
operator|.
name|newMapBranchWriter
argument_list|(
name|level
argument_list|,
name|size
argument_list|,
name|bitmap
argument_list|,
name|bucketIds
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|writeMapBucket
parameter_list|(
name|MapRecord
name|base
parameter_list|,
name|Collection
argument_list|<
name|MapEntry
argument_list|>
name|entries
parameter_list|,
name|int
name|level
parameter_list|)
throws|throws
name|IOException
block|{
comment|// when no changed entries, return the base map (if any) as-is
if|if
condition|(
name|entries
operator|==
literal|null
operator|||
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
return|return
name|base
operator|.
name|getRecordId
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|level
operator|==
literal|0
condition|)
block|{
return|return
name|RecordWriters
operator|.
name|newMapLeafWriter
argument_list|()
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// when no base map was given, write a fresh new map
if|if
condition|(
name|base
operator|==
literal|null
condition|)
block|{
comment|// use leaf records for small maps or the last map level
if|if
condition|(
name|entries
operator|.
name|size
argument_list|()
operator|<=
name|BUCKETS_PER_LEVEL
operator|||
name|level
operator|==
name|MapRecord
operator|.
name|MAX_NUMBER_OF_LEVELS
condition|)
block|{
return|return
name|writeMapLeaf
argument_list|(
name|level
argument_list|,
name|entries
argument_list|)
return|;
block|}
comment|// write a large map by dividing the entries into buckets
name|MapRecord
index|[]
name|buckets
init|=
operator|new
name|MapRecord
index|[
name|BUCKETS_PER_LEVEL
index|]
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|MapEntry
argument_list|>
argument_list|>
name|changes
init|=
name|splitToBuckets
argument_list|(
name|entries
argument_list|,
name|level
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BUCKETS_PER_LEVEL
condition|;
name|i
operator|++
control|)
block|{
name|buckets
index|[
name|i
index|]
operator|=
name|mapRecordOrNull
argument_list|(
name|writeMapBucket
argument_list|(
literal|null
argument_list|,
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|level
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// combine the buckets into one big map
return|return
name|writeMapBranch
argument_list|(
name|level
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|,
name|buckets
argument_list|)
return|;
block|}
comment|// if the base map is small, update in memory and write as a new map
if|if
condition|(
name|base
operator|.
name|isLeaf
argument_list|()
condition|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|MapEntry
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|base
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|MapEntry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|.
name|remove
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|writeMapBucket
argument_list|(
literal|null
argument_list|,
name|map
operator|.
name|values
argument_list|()
argument_list|,
name|level
argument_list|)
return|;
block|}
comment|// finally, the if the base map is large, handle updates per bucket
name|int
name|newSize
init|=
literal|0
decl_stmt|;
name|int
name|newCount
init|=
literal|0
decl_stmt|;
name|MapRecord
index|[]
name|buckets
init|=
name|base
operator|.
name|getBuckets
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|MapEntry
argument_list|>
argument_list|>
name|changes
init|=
name|splitToBuckets
argument_list|(
name|entries
argument_list|,
name|level
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|BUCKETS_PER_LEVEL
condition|;
name|i
operator|++
control|)
block|{
name|buckets
index|[
name|i
index|]
operator|=
name|mapRecordOrNull
argument_list|(
name|writeMapBucket
argument_list|(
name|buckets
index|[
name|i
index|]
argument_list|,
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|,
name|level
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|buckets
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
name|newSize
operator|+=
name|buckets
index|[
name|i
index|]
operator|.
name|size
argument_list|()
expr_stmt|;
name|newCount
operator|++
expr_stmt|;
block|}
block|}
comment|// OAK-654: what if the updated map is smaller?
if|if
condition|(
name|newSize
operator|>
name|BUCKETS_PER_LEVEL
condition|)
block|{
return|return
name|writeMapBranch
argument_list|(
name|level
argument_list|,
name|newSize
argument_list|,
name|buckets
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|newCount
operator|<=
literal|1
condition|)
block|{
comment|// up to one bucket contains entries, so return that as the new map
for|for
control|(
name|MapRecord
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
name|bucket
operator|!=
literal|null
condition|)
block|{
return|return
name|bucket
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
comment|// no buckets remaining, return empty map
return|return
name|writeMapBucket
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|level
argument_list|)
return|;
block|}
else|else
block|{
comment|// combine all remaining entries into a leaf record
name|List
argument_list|<
name|MapEntry
argument_list|>
name|list
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|MapRecord
name|bucket
range|:
name|buckets
control|)
block|{
if|if
condition|(
name|bucket
operator|!=
literal|null
condition|)
block|{
name|addAll
argument_list|(
name|list
argument_list|,
name|bucket
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|writeMapLeaf
argument_list|(
name|level
argument_list|,
name|list
argument_list|)
return|;
block|}
block|}
specifier|private
name|MapRecord
name|mapRecordOrNull
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
return|return
name|id
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|MapRecord
argument_list|(
name|id
argument_list|)
return|;
block|}
comment|/**          * Writes a list record containing the given list of record identifiers.          *          * @param list list of record identifiers          * @return list record identifier          */
specifier|private
name|RecordId
name|writeList
parameter_list|(
name|List
argument_list|<
name|RecordId
argument_list|>
name|list
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|list
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|thisLevel
init|=
name|list
decl_stmt|;
while|while
condition|(
name|thisLevel
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|List
argument_list|<
name|RecordId
argument_list|>
name|nextLevel
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|List
argument_list|<
name|RecordId
argument_list|>
name|bucket
range|:
name|partition
argument_list|(
name|thisLevel
argument_list|,
name|ListRecord
operator|.
name|LEVEL_SIZE
argument_list|)
control|)
block|{
if|if
condition|(
name|bucket
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|nextLevel
operator|.
name|add
argument_list|(
name|writeListBucket
argument_list|(
name|bucket
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nextLevel
operator|.
name|add
argument_list|(
name|bucket
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|thisLevel
operator|=
name|nextLevel
expr_stmt|;
block|}
return|return
name|thisLevel
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
specifier|private
name|RecordId
name|writeListBucket
parameter_list|(
name|List
argument_list|<
name|RecordId
argument_list|>
name|bucket
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
name|bucket
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
return|return
name|RecordWriters
operator|.
name|newListBucketWriter
argument_list|(
name|bucket
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|List
argument_list|<
name|MapEntry
argument_list|>
argument_list|>
name|splitToBuckets
parameter_list|(
name|Collection
argument_list|<
name|MapEntry
argument_list|>
name|entries
parameter_list|,
name|int
name|level
parameter_list|)
block|{
name|int
name|mask
init|=
operator|(
literal|1
operator|<<
name|MapRecord
operator|.
name|BITS_PER_LEVEL
operator|)
operator|-
literal|1
decl_stmt|;
name|int
name|shift
init|=
literal|32
operator|-
operator|(
name|level
operator|+
literal|1
operator|)
operator|*
name|MapRecord
operator|.
name|BITS_PER_LEVEL
decl_stmt|;
name|List
argument_list|<
name|List
argument_list|<
name|MapEntry
argument_list|>
argument_list|>
name|buckets
init|=
name|newArrayList
argument_list|(
name|nCopies
argument_list|(
name|MapRecord
operator|.
name|BUCKETS_PER_LEVEL
argument_list|,
operator|(
name|List
argument_list|<
name|MapEntry
argument_list|>
operator|)
literal|null
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|MapEntry
name|entry
range|:
name|entries
control|)
block|{
name|int
name|index
init|=
operator|(
name|entry
operator|.
name|getHash
argument_list|()
operator|>>
name|shift
operator|)
operator|&
name|mask
decl_stmt|;
name|List
argument_list|<
name|MapEntry
argument_list|>
name|bucket
init|=
name|buckets
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|bucket
operator|==
literal|null
condition|)
block|{
name|bucket
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
name|buckets
operator|.
name|set
argument_list|(
name|index
argument_list|,
name|bucket
argument_list|)
expr_stmt|;
block|}
name|bucket
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
return|return
name|buckets
return|;
block|}
specifier|private
name|RecordId
name|writeValueRecord
parameter_list|(
name|long
name|length
parameter_list|,
name|RecordId
name|blocks
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|len
init|=
operator|(
name|length
operator|-
name|Segment
operator|.
name|MEDIUM_LIMIT
operator|)
operator||
operator|(
literal|0x3L
operator|<<
literal|62
operator|)
decl_stmt|;
return|return
name|RecordWriters
operator|.
name|newValueWriter
argument_list|(
name|blocks
argument_list|,
name|len
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|writeValueRecord
parameter_list|(
name|int
name|length
parameter_list|,
name|byte
modifier|...
name|data
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
name|length
operator|<
name|Segment
operator|.
name|MEDIUM_LIMIT
argument_list|)
expr_stmt|;
return|return
name|RecordWriters
operator|.
name|newValueWriter
argument_list|(
name|length
argument_list|,
name|data
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
comment|/**          * Writes a string value record.          *          * @param string string to be written          * @return value record identifier          */
specifier|private
name|RecordId
name|writeString
parameter_list|(
name|String
name|string
parameter_list|)
throws|throws
name|IOException
block|{
name|RecordId
name|id
init|=
name|stringCache
operator|.
name|generation
argument_list|(
name|generation
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|string
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|id
return|;
comment|// shortcut if the same string was recently stored
block|}
name|byte
index|[]
name|data
init|=
name|string
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|<
name|Segment
operator|.
name|MEDIUM_LIMIT
condition|)
block|{
comment|// only cache short strings to avoid excessive memory use
name|id
operator|=
name|writeValueRecord
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|stringCache
operator|.
name|generation
argument_list|(
name|generation
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|string
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|blockIds
init|=
name|newArrayListWithExpectedSize
argument_list|(
name|data
operator|.
name|length
operator|/
name|BLOCK_SIZE
operator|+
literal|1
argument_list|)
decl_stmt|;
comment|// write as many full bulk segments as possible
while|while
condition|(
name|pos
operator|+
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|<=
name|data
operator|.
name|length
condition|)
block|{
name|SegmentId
name|bulkId
init|=
name|getTracker
argument_list|()
operator|.
name|newBulkSegmentId
argument_list|()
decl_stmt|;
name|store
operator|.
name|writeSegment
argument_list|(
name|bulkId
argument_list|,
name|data
argument_list|,
name|pos
argument_list|,
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
condition|;
name|i
operator|+=
name|BLOCK_SIZE
control|)
block|{
name|blockIds
operator|.
name|add
argument_list|(
operator|new
name|RecordId
argument_list|(
name|bulkId
argument_list|,
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pos
operator|+=
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
expr_stmt|;
block|}
comment|// inline the remaining data as block records
while|while
condition|(
name|pos
operator|<
name|data
operator|.
name|length
condition|)
block|{
name|int
name|len
init|=
name|Math
operator|.
name|min
argument_list|(
name|BLOCK_SIZE
argument_list|,
name|data
operator|.
name|length
operator|-
name|pos
argument_list|)
decl_stmt|;
name|blockIds
operator|.
name|add
argument_list|(
name|writeBlock
argument_list|(
name|data
argument_list|,
name|pos
argument_list|,
name|len
argument_list|)
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|len
expr_stmt|;
block|}
return|return
name|writeValueRecord
argument_list|(
name|data
operator|.
name|length
argument_list|,
name|writeList
argument_list|(
name|blockIds
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasSegment
parameter_list|(
name|Blob
name|blob
parameter_list|)
block|{
return|return
operator|(
name|blob
operator|instanceof
name|SegmentBlob
operator|)
operator|&&
operator|(
name|getTracker
argument_list|()
operator|.
name|isTracking
argument_list|(
operator|(
operator|(
name|Record
operator|)
name|blob
operator|)
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegmentId
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|RecordId
name|writeBlob
parameter_list|(
name|Blob
name|blob
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|hasSegment
argument_list|(
name|blob
argument_list|)
condition|)
block|{
name|SegmentBlob
name|segmentBlob
init|=
operator|(
name|SegmentBlob
operator|)
name|blob
decl_stmt|;
if|if
condition|(
operator|!
name|isOldGen
argument_list|(
name|segmentBlob
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|segmentBlob
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
name|String
name|reference
init|=
name|blob
operator|.
name|getReference
argument_list|()
decl_stmt|;
if|if
condition|(
name|reference
operator|!=
literal|null
operator|&&
name|store
operator|.
name|getBlobStore
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|blobId
init|=
name|store
operator|.
name|getBlobStore
argument_list|()
operator|.
name|getBlobId
argument_list|(
name|reference
argument_list|)
decl_stmt|;
if|if
condition|(
name|blobId
operator|!=
literal|null
condition|)
block|{
return|return
name|writeBlobId
argument_list|(
name|blobId
argument_list|)
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No blob found for reference {}, inlining..."
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|writeStream
argument_list|(
name|blob
operator|.
name|getNewStream
argument_list|()
argument_list|)
return|;
block|}
comment|/**          * Write a reference to an external blob. This method handles blob IDs of          * every length, but behaves differently for small and large blob IDs.          *          * @param blobId Blob ID.          * @return Record ID pointing to the written blob ID.          * @see Segment#BLOB_ID_SMALL_LIMIT          */
specifier|private
name|RecordId
name|writeBlobId
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
index|[]
name|data
init|=
name|blobId
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|<
name|Segment
operator|.
name|BLOB_ID_SMALL_LIMIT
condition|)
block|{
return|return
name|RecordWriters
operator|.
name|newBlobIdWriter
argument_list|(
name|data
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|RecordWriters
operator|.
name|newBlobIdWriter
argument_list|(
name|writeString
argument_list|(
name|blobId
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
block|}
specifier|private
name|RecordId
name|writeBlock
parameter_list|(
name|byte
index|[]
name|bytes
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|checkPositionIndexes
argument_list|(
name|offset
argument_list|,
name|offset
operator|+
name|length
argument_list|,
name|bytes
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|RecordWriters
operator|.
name|newBlockWriter
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|writeStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|threw
init|=
literal|true
decl_stmt|;
try|try
block|{
name|RecordId
name|id
init|=
name|SegmentStream
operator|.
name|getRecordIdIfAvailable
argument_list|(
name|stream
argument_list|,
name|store
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|==
literal|null
operator|||
name|isOldGen
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|id
operator|=
name|internalWriteStream
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
name|threw
operator|=
literal|false
expr_stmt|;
return|return
name|id
return|;
block|}
finally|finally
block|{
name|Closeables
operator|.
name|close
argument_list|(
name|stream
argument_list|,
name|threw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|RecordId
name|internalWriteStream
parameter_list|(
name|InputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|stream
operator|instanceof
name|SegmentStream
condition|)
block|{
name|SegmentStream
name|segmentStream
init|=
operator|(
name|SegmentStream
operator|)
name|stream
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|blockIds
init|=
name|segmentStream
operator|.
name|getBlockIds
argument_list|()
decl_stmt|;
if|if
condition|(
name|blockIds
operator|!=
literal|null
condition|)
block|{
return|return
name|writeValueRecord
argument_list|(
name|segmentStream
operator|.
name|getLength
argument_list|()
argument_list|,
name|writeList
argument_list|(
name|blockIds
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|// Special case for short binaries (up to about 16kB):
comment|// store them directly as small- or medium-sized value records
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|Segment
operator|.
name|MEDIUM_LIMIT
index|]
decl_stmt|;
name|int
name|n
init|=
name|read
argument_list|(
name|stream
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|<
name|Segment
operator|.
name|MEDIUM_LIMIT
condition|)
block|{
return|return
name|writeValueRecord
argument_list|(
name|n
argument_list|,
name|data
argument_list|)
return|;
block|}
name|BlobStore
name|blobStore
init|=
name|store
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|blobStore
operator|!=
literal|null
condition|)
block|{
name|String
name|blobId
init|=
name|blobStore
operator|.
name|writeBlob
argument_list|(
operator|new
name|SequenceInputStream
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|n
argument_list|)
argument_list|,
name|stream
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|writeBlobId
argument_list|(
name|blobId
argument_list|)
return|;
block|}
name|data
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|data
argument_list|,
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
argument_list|)
expr_stmt|;
name|n
operator|+=
name|read
argument_list|(
name|stream
argument_list|,
name|data
argument_list|,
name|n
argument_list|,
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
operator|-
name|n
argument_list|)
expr_stmt|;
name|long
name|length
init|=
name|n
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|blockIds
init|=
name|newArrayListWithExpectedSize
argument_list|(
literal|2
operator|*
name|n
operator|/
name|BLOCK_SIZE
argument_list|)
decl_stmt|;
comment|// Write the data to bulk segments and collect the list of block ids
while|while
condition|(
name|n
operator|!=
literal|0
condition|)
block|{
name|SegmentId
name|bulkId
init|=
name|getTracker
argument_list|()
operator|.
name|newBulkSegmentId
argument_list|()
decl_stmt|;
name|int
name|len
init|=
name|Segment
operator|.
name|align
argument_list|(
name|n
argument_list|,
literal|1
operator|<<
name|Segment
operator|.
name|RECORD_ALIGN_BITS
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing bulk segment {} ({} bytes)"
argument_list|,
name|bulkId
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|store
operator|.
name|writeSegment
argument_list|(
name|bulkId
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|+=
name|BLOCK_SIZE
control|)
block|{
name|blockIds
operator|.
name|add
argument_list|(
operator|new
name|RecordId
argument_list|(
name|bulkId
argument_list|,
name|data
operator|.
name|length
operator|-
name|len
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|n
operator|=
name|read
argument_list|(
name|stream
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|length
operator|+=
name|n
expr_stmt|;
block|}
return|return
name|writeValueRecord
argument_list|(
name|length
argument_list|,
name|writeList
argument_list|(
name|blockIds
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|writeProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|)
throws|throws
name|IOException
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|previousValues
init|=
name|emptyMap
argument_list|()
decl_stmt|;
return|return
name|writeProperty
argument_list|(
name|state
argument_list|,
name|previousValues
argument_list|)
return|;
block|}
specifier|private
name|RecordId
name|writeProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|previousValues
parameter_list|)
throws|throws
name|IOException
block|{
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|state
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|count
init|=
name|state
operator|.
name|count
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|RecordId
argument_list|>
name|valueIds
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|type
operator|.
name|tag
argument_list|()
operator|==
name|PropertyType
operator|.
name|BINARY
condition|)
block|{
try|try
block|{
name|valueIds
operator|.
name|add
argument_list|(
name|writeBlob
argument_list|(
name|state
operator|.
name|getValue
argument_list|(
name|BINARY
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Unexpected IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|String
name|value
init|=
name|state
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|RecordId
name|valueId
init|=
name|previousValues
operator|.
name|get
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|valueId
operator|==
literal|null
condition|)
block|{
name|valueId
operator|=
name|writeString
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
name|valueIds
operator|.
name|add
argument_list|(
name|valueId
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
return|return
name|valueIds
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|count
operator|==
literal|0
condition|)
block|{
return|return
name|RecordWriters
operator|.
name|newListWriter
argument_list|()
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|RecordWriters
operator|.
name|newListWriter
argument_list|(
name|count
argument_list|,
name|writeList
argument_list|(
name|valueIds
argument_list|)
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
block|}
specifier|private
name|RecordId
name|writeTemplate
parameter_list|(
name|Template
name|template
parameter_list|)
throws|throws
name|IOException
block|{
name|checkNotNull
argument_list|(
name|template
argument_list|)
expr_stmt|;
name|RecordId
name|id
init|=
name|templateCache
operator|.
name|generation
argument_list|(
name|generation
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|template
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
return|return
name|id
return|;
comment|// shortcut if the same template was recently stored
block|}
name|Collection
argument_list|<
name|RecordId
argument_list|>
name|ids
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|int
name|head
init|=
literal|0
decl_stmt|;
name|RecordId
name|primaryId
init|=
literal|null
decl_stmt|;
name|PropertyState
name|primaryType
init|=
name|template
operator|.
name|getPrimaryType
argument_list|()
decl_stmt|;
if|if
condition|(
name|primaryType
operator|!=
literal|null
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|31
expr_stmt|;
name|primaryId
operator|=
name|writeString
argument_list|(
name|primaryType
operator|.
name|getValue
argument_list|(
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|primaryId
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RecordId
argument_list|>
name|mixinIds
init|=
literal|null
decl_stmt|;
name|PropertyState
name|mixinTypes
init|=
name|template
operator|.
name|getMixinTypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|mixinTypes
operator|!=
literal|null
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|30
expr_stmt|;
name|mixinIds
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|mixin
range|:
name|mixinTypes
operator|.
name|getValue
argument_list|(
name|NAMES
argument_list|)
control|)
block|{
name|mixinIds
operator|.
name|add
argument_list|(
name|writeString
argument_list|(
name|mixin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ids
operator|.
name|addAll
argument_list|(
name|mixinIds
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|mixinIds
operator|.
name|size
argument_list|()
operator|<
operator|(
literal|1
operator|<<
literal|10
operator|)
argument_list|)
expr_stmt|;
name|head
operator||=
name|mixinIds
operator|.
name|size
argument_list|()
operator|<<
literal|18
expr_stmt|;
block|}
name|RecordId
name|childNameId
init|=
literal|null
decl_stmt|;
name|String
name|childName
init|=
name|template
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|29
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
name|head
operator||=
literal|1
operator|<<
literal|28
expr_stmt|;
block|}
else|else
block|{
name|childNameId
operator|=
name|writeString
argument_list|(
name|childName
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|childNameId
argument_list|)
expr_stmt|;
block|}
name|PropertyTemplate
index|[]
name|properties
init|=
name|template
operator|.
name|getPropertyTemplates
argument_list|()
decl_stmt|;
name|RecordId
index|[]
name|propertyNames
init|=
operator|new
name|RecordId
index|[
name|properties
operator|.
name|length
index|]
decl_stmt|;
name|byte
index|[]
name|propertyTypes
init|=
operator|new
name|byte
index|[
name|properties
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|properties
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|// Note: if the property names are stored in more than 255 separate
comment|// segments, this will not work.
name|propertyNames
index|[
name|i
index|]
operator|=
name|writeString
argument_list|(
name|properties
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|Type
argument_list|<
name|?
argument_list|>
name|type
init|=
name|properties
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|propertyTypes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
operator|-
name|type
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|propertyTypes
index|[
name|i
index|]
operator|=
operator|(
name|byte
operator|)
name|type
operator|.
name|tag
argument_list|()
expr_stmt|;
block|}
block|}
name|RecordId
name|propNamesId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propertyNames
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|propNamesId
operator|=
name|writeList
argument_list|(
name|asList
argument_list|(
name|propertyNames
argument_list|)
argument_list|)
expr_stmt|;
name|ids
operator|.
name|add
argument_list|(
name|propNamesId
argument_list|)
expr_stmt|;
block|}
name|checkState
argument_list|(
name|propertyNames
operator|.
name|length
operator|<
operator|(
literal|1
operator|<<
literal|18
operator|)
argument_list|)
expr_stmt|;
name|head
operator||=
name|propertyNames
operator|.
name|length
expr_stmt|;
name|RecordId
name|tid
init|=
name|RecordWriters
operator|.
name|newTemplateWriter
argument_list|(
name|ids
argument_list|,
name|propertyNames
argument_list|,
name|propertyTypes
argument_list|,
name|head
argument_list|,
name|primaryId
argument_list|,
name|mixinIds
argument_list|,
name|childNameId
argument_list|,
name|propNamesId
argument_list|,
name|version
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|templateCache
operator|.
name|generation
argument_list|(
name|generation
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|template
argument_list|,
name|tid
argument_list|)
expr_stmt|;
return|return
name|tid
return|;
block|}
specifier|private
name|RecordId
name|toCache
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|int
name|depth
parameter_list|,
name|RecordId
name|recordId
parameter_list|)
block|{
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|sns
init|=
operator|(
name|SegmentNodeState
operator|)
name|state
decl_stmt|;
name|nodeCache
operator|.
name|generation
argument_list|(
name|generation
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|sns
operator|.
name|getId
argument_list|()
argument_list|,
name|recordId
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
return|return
name|recordId
return|;
block|}
specifier|private
name|RecordId
name|writeNode
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|sns
init|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|state
operator|)
decl_stmt|;
if|if
condition|(
name|hasSegment
argument_list|(
name|sns
argument_list|)
condition|)
block|{
if|if
condition|(
name|isOldGen
argument_list|(
name|sns
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
name|RecordId
name|cachedId
init|=
name|nodeCache
operator|.
name|generation
argument_list|(
name|generation
argument_list|()
argument_list|)
operator|.
name|get
argument_list|(
name|sns
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachedId
operator|!=
literal|null
condition|)
block|{
return|return
name|cachedId
return|;
block|}
block|}
else|else
block|{
return|return
name|sns
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
block|}
name|RecordId
name|recordId
init|=
name|writeNodeUncached
argument_list|(
name|state
argument_list|,
name|depth
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|sns
init|=
operator|(
name|SegmentNodeState
operator|)
name|state
decl_stmt|;
name|nodeCache
operator|.
name|generation
argument_list|(
name|generation
argument_list|()
argument_list|)
operator|.
name|put
argument_list|(
name|sns
operator|.
name|getId
argument_list|()
argument_list|,
name|recordId
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
return|return
name|recordId
return|;
block|}
specifier|private
name|RecordId
name|writeNodeUncached
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|IOException
block|{
name|SegmentNodeState
name|before
init|=
literal|null
decl_stmt|;
name|Template
name|beforeTemplate
init|=
literal|null
decl_stmt|;
name|ModifiedNodeState
name|after
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|ModifiedNodeState
condition|)
block|{
name|after
operator|=
operator|(
name|ModifiedNodeState
operator|)
name|state
expr_stmt|;
name|NodeState
name|base
init|=
name|after
operator|.
name|getBaseState
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|SegmentNodeState
name|sns
init|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|base
operator|)
decl_stmt|;
if|if
condition|(
name|hasSegment
argument_list|(
name|sns
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isOldGen
argument_list|(
name|sns
operator|.
name|getRecordId
argument_list|()
argument_list|)
condition|)
block|{
name|before
operator|=
name|sns
expr_stmt|;
name|beforeTemplate
operator|=
name|before
operator|.
name|getTemplate
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|List
argument_list|<
name|RecordId
argument_list|>
name|ids
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|Template
name|template
init|=
operator|new
name|Template
argument_list|(
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|template
operator|.
name|equals
argument_list|(
name|beforeTemplate
argument_list|)
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|before
operator|.
name|getTemplateId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ids
operator|.
name|add
argument_list|(
name|writeTemplate
argument_list|(
name|template
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|childName
init|=
name|template
operator|.
name|getChildName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childName
operator|==
name|Template
operator|.
name|MANY_CHILD_NODES
condition|)
block|{
name|MapRecord
name|base
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|childNodes
decl_stmt|;
if|if
condition|(
name|before
operator|!=
literal|null
operator|&&
name|before
operator|.
name|getChildNodeCount
argument_list|(
literal|2
argument_list|)
operator|>
literal|1
operator|&&
name|after
operator|.
name|getChildNodeCount
argument_list|(
literal|2
argument_list|)
operator|>
literal|1
condition|)
block|{
name|base
operator|=
name|before
operator|.
name|getChildNodeMap
argument_list|()
expr_stmt|;
name|childNodes
operator|=
operator|new
name|ChildNodeCollectorDiff
argument_list|(
name|depth
argument_list|)
operator|.
name|diff
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|base
operator|=
literal|null
expr_stmt|;
name|childNodes
operator|=
name|newHashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|ChildNodeEntry
name|entry
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|writeNode
argument_list|(
name|entry
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|ids
operator|.
name|add
argument_list|(
name|writeMap
argument_list|(
name|base
argument_list|,
name|childNodes
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|childName
operator|!=
name|Template
operator|.
name|ZERO_CHILD_NODES
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|writeNode
argument_list|(
name|state
operator|.
name|getChildNode
argument_list|(
name|template
operator|.
name|getChildName
argument_list|()
argument_list|)
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|RecordId
argument_list|>
name|pIds
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyTemplate
name|pt
range|:
name|template
operator|.
name|getPropertyTemplates
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|pt
operator|.
name|getName
argument_list|()
decl_stmt|;
name|PropertyState
name|property
init|=
name|state
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasSegment
argument_list|(
name|property
argument_list|)
condition|)
block|{
name|RecordId
name|pid
init|=
operator|(
operator|(
name|Record
operator|)
name|property
operator|)
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
if|if
condition|(
name|isOldGen
argument_list|(
name|pid
argument_list|)
condition|)
block|{
name|pIds
operator|.
name|add
argument_list|(
name|writeProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pIds
operator|.
name|add
argument_list|(
name|pid
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|before
operator|==
literal|null
operator|||
operator|!
name|hasSegment
argument_list|(
name|before
argument_list|)
condition|)
block|{
name|pIds
operator|.
name|add
argument_list|(
name|writeProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// reuse previously stored property, if possible
name|PropertyTemplate
name|bt
init|=
name|beforeTemplate
operator|.
name|getPropertyTemplate
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|bt
operator|==
literal|null
condition|)
block|{
name|pIds
operator|.
name|add
argument_list|(
name|writeProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
comment|// new property
block|}
else|else
block|{
name|SegmentPropertyState
name|bp
init|=
name|beforeTemplate
operator|.
name|getProperty
argument_list|(
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|bt
operator|.
name|getIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|equals
argument_list|(
name|bp
argument_list|)
condition|)
block|{
name|pIds
operator|.
name|add
argument_list|(
name|bp
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
comment|// no changes
block|}
elseif|else
if|if
condition|(
name|bp
operator|.
name|isArray
argument_list|()
operator|&&
name|bp
operator|.
name|getType
argument_list|()
operator|!=
name|BINARIES
condition|)
block|{
comment|// reuse entries from the previous list
name|pIds
operator|.
name|add
argument_list|(
name|writeProperty
argument_list|(
name|property
argument_list|,
name|bp
operator|.
name|getValueRecords
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pIds
operator|.
name|add
argument_list|(
name|writeProperty
argument_list|(
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|pIds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ids
operator|.
name|add
argument_list|(
name|writeList
argument_list|(
name|pIds
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RecordId
name|nodeId
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|state
operator|instanceof
name|SegmentNodeState
condition|)
block|{
comment|// FIXME OAK-3348 offline compaction could remove those ids
name|byte
index|[]
name|id
init|=
operator|(
operator|(
name|Record
operator|)
name|state
operator|)
operator|.
name|getRecordId
argument_list|()
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|nodeId
operator|=
name|writeBlock
argument_list|(
name|id
argument_list|,
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
return|return
name|RecordWriters
operator|.
name|newNodeStateWriter
argument_list|(
name|nodeId
argument_list|,
name|ids
argument_list|)
operator|.
name|write
argument_list|(
name|writer
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasSegment
parameter_list|(
name|SegmentNodeState
name|node
parameter_list|)
block|{
return|return
name|getTracker
argument_list|()
operator|.
name|isTracking
argument_list|(
name|node
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegmentId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|hasSegment
parameter_list|(
name|PropertyState
name|property
parameter_list|)
block|{
return|return
operator|(
name|property
operator|instanceof
name|SegmentPropertyState
operator|)
operator|&&
operator|(
name|getTracker
argument_list|()
operator|.
name|isTracking
argument_list|(
operator|(
operator|(
name|Record
operator|)
name|property
operator|)
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegmentId
argument_list|()
argument_list|)
operator|)
return|;
block|}
specifier|private
name|boolean
name|isOldGen
parameter_list|(
name|RecordId
name|id
parameter_list|)
block|{
name|int
name|thatGen
init|=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|getGcGen
argument_list|()
decl_stmt|;
name|int
name|thisGen
init|=
name|writer
operator|.
name|getGeneration
argument_list|()
decl_stmt|;
return|return
name|thatGen
operator|<
name|thisGen
return|;
block|}
specifier|private
class|class
name|ChildNodeCollectorDiff
extends|extends
name|DefaultNodeStateDiff
block|{
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|childNodes
init|=
name|newHashMap
argument_list|()
decl_stmt|;
specifier|private
name|IOException
name|exception
decl_stmt|;
specifier|private
name|ChildNodeCollectorDiff
parameter_list|(
name|int
name|depth
parameter_list|)
block|{
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|RecordId
argument_list|>
name|diff
parameter_list|(
name|SegmentNodeState
name|before
parameter_list|,
name|ModifiedNodeState
name|after
parameter_list|)
throws|throws
name|IOException
block|{
name|after
operator|.
name|compareAgainstBaseState
argument_list|(
name|before
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|exception
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|childNodes
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|writeNode
argument_list|(
name|after
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
block|{
try|try
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|writeNode
argument_list|(
name|after
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
block|{
name|childNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
specifier|private
name|SegmentTracker
name|getTracker
parameter_list|()
block|{
return|return
name|store
operator|.
name|getTracker
argument_list|()
return|;
block|}
block|}
end_class

end_unit

