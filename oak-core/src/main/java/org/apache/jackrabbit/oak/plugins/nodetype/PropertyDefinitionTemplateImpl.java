begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DEFAULTVALUES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MULTIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_REQUIREDTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VALUECONSTRAINTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_AVAILABLE_QUERY_OPERATORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_FULLTEXT_SEARCHABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_QUERY_ORDERABLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|ConstraintViolationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|PropertyDefinitionTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|qom
operator|.
name|QueryObjectModelConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_class
class|class
name|PropertyDefinitionTemplateImpl
extends|extends
name|ItemDefinitionTemplateImpl
implements|implements
name|PropertyDefinitionTemplate
block|{
specifier|private
specifier|static
specifier|final
name|String
index|[]
name|ALL_OPERATORS
init|=
operator|new
name|String
index|[]
block|{
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_EQUAL_TO
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_GREATER_THAN
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_GREATER_THAN_OR_EQUAL_TO
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LESS_THAN
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LESS_THAN_OR_EQUAL_TO
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_LIKE
block|,
name|QueryObjectModelConstants
operator|.
name|JCR_OPERATOR_NOT_EQUAL_TO
block|}
decl_stmt|;
specifier|private
name|int
name|requiredType
init|=
name|PropertyType
operator|.
name|STRING
decl_stmt|;
specifier|private
name|boolean
name|isMultiple
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|fullTextSearchable
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|queryOrderable
init|=
literal|true
decl_stmt|;
specifier|private
name|String
index|[]
name|queryOperators
init|=
name|ALL_OPERATORS
decl_stmt|;
specifier|private
name|String
index|[]
name|valueConstraints
init|=
literal|null
decl_stmt|;
specifier|private
name|Value
index|[]
name|defaultValues
init|=
literal|null
decl_stmt|;
name|PropertyDefinitionTemplateImpl
parameter_list|(
name|NameMapper
name|mapper
parameter_list|)
block|{
name|super
argument_list|(
name|mapper
argument_list|)
expr_stmt|;
block|}
name|PropertyDefinitionTemplateImpl
parameter_list|(
name|NameMapper
name|mapper
parameter_list|,
name|PropertyDefinition
name|definition
parameter_list|)
throws|throws
name|ConstraintViolationException
block|{
name|super
argument_list|(
name|mapper
argument_list|,
name|definition
argument_list|)
expr_stmt|;
name|setRequiredType
argument_list|(
name|definition
operator|.
name|getRequiredType
argument_list|()
argument_list|)
expr_stmt|;
name|setMultiple
argument_list|(
name|definition
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
name|setFullTextSearchable
argument_list|(
name|definition
operator|.
name|isFullTextSearchable
argument_list|()
argument_list|)
expr_stmt|;
name|setQueryOrderable
argument_list|(
name|definition
operator|.
name|isQueryOrderable
argument_list|()
argument_list|)
expr_stmt|;
name|setAvailableQueryOperators
argument_list|(
name|definition
operator|.
name|getAvailableQueryOperators
argument_list|()
argument_list|)
expr_stmt|;
name|setValueConstraints
argument_list|(
name|definition
operator|.
name|getValueConstraints
argument_list|()
argument_list|)
expr_stmt|;
name|setDefaultValues
argument_list|(
name|definition
operator|.
name|getDefaultValues
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the contents of this property definition to the given tree node.      * Used when registering new node types.      *      * @param tree an {@code nt:propertyDefinition} node      * @throws RepositoryException if this definition could not be written      */
annotation|@
name|Override
name|void
name|writeTo
parameter_list|(
name|Tree
name|tree
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|super
operator|.
name|writeTo
argument_list|(
name|tree
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_REQUIREDTYPE
argument_list|,
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|requiredType
argument_list|)
operator|.
name|toUpperCase
argument_list|()
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_MULTIPLE
argument_list|,
name|isMultiple
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_IS_FULLTEXT_SEARCHABLE
argument_list|,
name|fullTextSearchable
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_IS_QUERY_ORDERABLE
argument_list|,
name|queryOrderable
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_AVAILABLE_QUERY_OPERATORS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|queryOperators
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
comment|// TODO: mapping?
if|if
condition|(
name|valueConstraints
operator|!=
literal|null
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|JCR_VALUECONSTRAINTS
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|valueConstraints
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultValues
operator|!=
literal|null
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JCR_DEFAULTVALUES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|defaultValues
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------< public>--
annotation|@
name|Override
specifier|public
name|int
name|getRequiredType
parameter_list|()
block|{
return|return
name|requiredType
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setRequiredType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|PropertyType
operator|.
name|nameFromValue
argument_list|(
name|type
argument_list|)
expr_stmt|;
comment|// validation
name|this
operator|.
name|requiredType
operator|=
name|type
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMultiple
parameter_list|()
block|{
return|return
name|isMultiple
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMultiple
parameter_list|(
name|boolean
name|isMultiple
parameter_list|)
block|{
name|this
operator|.
name|isMultiple
operator|=
name|isMultiple
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFullTextSearchable
parameter_list|()
block|{
return|return
name|fullTextSearchable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFullTextSearchable
parameter_list|(
name|boolean
name|fullTextSearchable
parameter_list|)
block|{
name|this
operator|.
name|fullTextSearchable
operator|=
name|fullTextSearchable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isQueryOrderable
parameter_list|()
block|{
return|return
name|queryOrderable
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQueryOrderable
parameter_list|(
name|boolean
name|queryOrderable
parameter_list|)
block|{
name|this
operator|.
name|queryOrderable
operator|=
name|queryOrderable
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getAvailableQueryOperators
parameter_list|()
block|{
return|return
name|queryOperators
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAvailableQueryOperators
parameter_list|(
name|String
index|[]
name|operators
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|operators
argument_list|)
expr_stmt|;
name|this
operator|.
name|queryOperators
operator|=
operator|new
name|String
index|[
name|operators
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|operators
argument_list|,
literal|0
argument_list|,
name|this
operator|.
name|queryOperators
argument_list|,
literal|0
argument_list|,
name|operators
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getValueConstraints
parameter_list|()
block|{
return|return
name|valueConstraints
return|;
comment|// no problem if modified by client
block|}
annotation|@
name|Override
specifier|public
name|void
name|setValueConstraints
parameter_list|(
name|String
index|[]
name|constraints
parameter_list|)
block|{
if|if
condition|(
name|constraints
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|valueConstraints
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|valueConstraints
operator|=
operator|new
name|String
index|[
name|constraints
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|constraints
argument_list|,
literal|0
argument_list|,
name|valueConstraints
argument_list|,
literal|0
argument_list|,
name|constraints
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getDefaultValues
parameter_list|()
block|{
return|return
name|defaultValues
return|;
comment|// no problem if modified by client
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDefaultValues
parameter_list|(
name|Value
index|[]
name|values
parameter_list|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|defaultValues
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|defaultValues
operator|=
operator|new
name|Value
index|[
name|values
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|defaultValues
argument_list|,
literal|0
argument_list|,
name|values
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
comment|//------------------------------------------------------------< Object>--
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"PropertyDefinitionTemplate(%s)"
argument_list|,
name|getOakName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

