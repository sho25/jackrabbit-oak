begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|memory
operator|.
name|MemoryStore
import|;
end_import

begin_class
specifier|public
class|class
name|SegmentIdTableBenchmark
block|{
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|test
argument_list|()
expr_stmt|;
name|test
argument_list|()
expr_stmt|;
name|test
argument_list|()
expr_stmt|;
name|test
argument_list|()
expr_stmt|;
name|test
argument_list|()
expr_stmt|;
name|test
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|test
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|time
decl_stmt|;
name|int
name|repeat
init|=
literal|10000
decl_stmt|;
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|long
index|[]
name|array
init|=
operator|new
name|long
index|[
name|count
index|]
decl_stmt|;
name|Random
name|r
init|=
operator|new
name|Random
argument_list|(
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|array
index|[
name|i
index|]
operator|=
name|r
operator|.
name|nextLong
argument_list|()
expr_stmt|;
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|SegmentTracker
name|tracker
init|=
operator|new
name|MemoryStore
argument_list|()
operator|.
name|getTracker
argument_list|()
decl_stmt|;
specifier|final
name|SegmentIdTable
name|tbl
init|=
operator|new
name|SegmentIdTable
argument_list|(
name|tracker
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeat
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|tbl
operator|.
name|getSegmentId
argument_list|(
name|j
argument_list|,
name|array
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SegmentIdTable: "
operator|+
name|time
argument_list|)
expr_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|ConcurrentTable
name|cm
init|=
operator|new
name|ConcurrentTable
argument_list|(
name|tracker
argument_list|,
literal|16
operator|*
literal|1024
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeat
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|count
condition|;
name|j
operator|++
control|)
block|{
name|cm
operator|.
name|getSegmentId
argument_list|(
name|j
argument_list|,
name|array
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
block|}
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ConcurrentTable: "
operator|+
name|time
argument_list|)
expr_stmt|;
comment|//        time = System.currentTimeMillis();
comment|//        WeakHashMap<SegmentId, SegmentId> map = new WeakHashMap<SegmentId, SegmentId>(count);
comment|//        for (int i = 0; i< repeat; i++) {
comment|//            for (int j = 0; j< count; j++) {
comment|//                SegmentId id = new SegmentId(tracker, j, j);
comment|//                if (map.get(id) == null) {
comment|//                    map.put(id, id);
comment|//                }
comment|//            }
comment|//        }
comment|//        time = System.currentTimeMillis() - time;
comment|//        System.out.println("WeakHashMap: " + time);
block|}
specifier|static
class|class
name|ConcurrentTable
block|{
specifier|private
specifier|final
name|SegmentTracker
name|tracker
decl_stmt|;
specifier|volatile
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
index|[]
name|map
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|ConcurrentTable
parameter_list|(
name|SegmentTracker
name|tracker
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
name|map
operator|=
operator|(
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
index|[]
operator|)
operator|new
name|WeakReference
index|[
name|size
index|]
expr_stmt|;
block|}
name|SegmentId
name|getSegmentId
parameter_list|(
name|long
name|a
parameter_list|,
name|long
name|b
parameter_list|)
block|{
name|outer
label|:
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|increment
init|=
literal|1
decl_stmt|;
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
index|[]
name|m
init|=
name|map
decl_stmt|;
name|int
name|length
init|=
name|m
operator|.
name|length
decl_stmt|;
name|int
name|index
init|=
call|(
name|int
call|)
argument_list|(
name|b
operator|&
operator|(
name|length
operator|-
literal|1
operator|)
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
name|ref
init|=
name|m
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|ref
operator|==
literal|null
condition|)
block|{
name|SegmentId
name|id
init|=
operator|new
name|SegmentId
argument_list|(
name|tracker
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
decl_stmt|;
name|ref
operator|=
operator|new
name|WeakReference
argument_list|<
name|SegmentId
argument_list|>
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|m
index|[
name|index
index|]
operator|=
name|ref
expr_stmt|;
if|if
condition|(
name|m
operator|!=
name|map
condition|)
block|{
continue|continue
name|outer
continue|;
block|}
return|return
name|id
return|;
block|}
name|SegmentId
name|id
init|=
name|ref
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
operator|==
name|a
operator|&&
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
operator|==
name|b
condition|)
block|{
return|return
name|id
return|;
block|}
block|}
comment|// guaranteed to work for power of 2 table sizes, see
comment|// http://stackoverflow.com/questions/2348187/moving-from-linear-probing-to-quadratic-probing-hash-collisons
comment|// http://stackoverflow.com/questions/12121217/limit-for-quadratic-probing-a-hash-table
name|index
operator|=
operator|(
name|index
operator|+
name|increment
operator|)
operator|&
operator|(
name|length
operator|-
literal|1
operator|)
expr_stmt|;
name|increment
operator|++
expr_stmt|;
if|if
condition|(
name|increment
operator|>
literal|100
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"inc "
operator|+
name|increment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

