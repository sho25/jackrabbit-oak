begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitWorkspace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|JcrUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|lifecycle
operator|.
name|RepositoryInitializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_comment
comment|/**  * Test case to simulate an incremental upgrade, where a source repository is  * copied to target initially. Then some modifications are made in the source  * repository and these are (incrementally) copied to the target repository.  *<br>  * The expectation is that in the end the state in the target repository is  * identical to the state in the source repository, with the exception of any  * initial content that the upgrade tool created.  */
end_comment

begin_class
specifier|public
class|class
name|RepeatedRepositoryUpgradeTest
extends|extends
name|AbstractRepositoryUpgradeTest
block|{
specifier|protected
specifier|static
name|boolean
name|upgradeComplete
decl_stmt|;
specifier|private
specifier|static
name|FileStore
name|fileStore
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|NodeStore
name|createTargetNodeStore
parameter_list|()
block|{
return|return
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|fileStore
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|initialize
parameter_list|()
block|{
specifier|final
name|File
name|dir
init|=
operator|new
name|File
argument_list|(
name|getTestDirectory
argument_list|()
argument_list|,
literal|"segments"
argument_list|)
decl_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
try|try
block|{
name|fileStore
operator|=
name|FileStore
operator|.
name|builder
argument_list|(
name|dir
argument_list|)
operator|.
name|withMaxFileSize
argument_list|(
literal|128
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|upgradeComplete
operator|=
literal|false
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
block|{
name|fileStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileStore
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
specifier|synchronized
name|void
name|upgradeRepository
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
operator|!
name|upgradeComplete
condition|)
block|{
specifier|final
name|File
name|sourceDir
init|=
operator|new
name|File
argument_list|(
name|getTestDirectory
argument_list|()
argument_list|,
literal|"jackrabbit2"
argument_list|)
decl_stmt|;
name|sourceDir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|RepositoryImpl
name|source
init|=
name|createSourceRepository
argument_list|(
name|sourceDir
argument_list|)
decl_stmt|;
name|Session
name|session
init|=
name|source
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
decl_stmt|;
try|try
block|{
name|createSourceContent
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|source
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
specifier|final
name|NodeStore
name|target
init|=
name|getTargetNodeStore
argument_list|()
decl_stmt|;
name|doUpgradeRepository
argument_list|(
name|sourceDir
argument_list|,
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// re-create source repo
name|source
operator|=
name|createSourceRepository
argument_list|(
name|sourceDir
argument_list|)
expr_stmt|;
name|session
operator|=
name|source
operator|.
name|login
argument_list|(
name|CREDENTIALS
argument_list|)
expr_stmt|;
try|try
block|{
name|modifySourceContent
argument_list|(
name|session
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|source
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
name|doUpgradeRepository
argument_list|(
name|sourceDir
argument_list|,
name|target
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|fileStore
operator|.
name|flush
argument_list|()
expr_stmt|;
name|upgradeComplete
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doUpgradeRepository
parameter_list|(
name|File
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|,
name|boolean
name|skipInit
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
specifier|final
name|RepositoryConfig
name|config
init|=
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|source
argument_list|)
decl_stmt|;
specifier|final
name|RepositoryContext
name|context
init|=
name|RepositoryContext
operator|.
name|create
argument_list|(
name|config
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|RepositoryUpgrade
name|repositoryUpgrade
init|=
operator|new
name|RepositoryUpgrade
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
decl_stmt|;
name|repositoryUpgrade
operator|.
name|setSkipInitialization
argument_list|(
name|skipInit
argument_list|)
expr_stmt|;
name|repositoryUpgrade
operator|.
name|copy
argument_list|(
operator|new
name|RepositoryInitializer
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|initialize
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|createSourceContent
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|registerCustomPrivileges
argument_list|(
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child1/grandchild1"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child1/grandchild2"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child1/grandchild3"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child2/grandchild1"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child2/grandchild2"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|modifySourceContent
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child2/grandchild3"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child3"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
expr_stmt|;
specifier|final
name|Node
name|child1
init|=
name|JcrUtils
operator|.
name|getOrCreateByPath
argument_list|(
literal|"/content/child1"
argument_list|,
literal|"nt:unstructured"
argument_list|,
name|session
argument_list|)
decl_stmt|;
name|child1
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerCustomPrivileges
parameter_list|(
name|Session
name|session
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|JackrabbitWorkspace
name|workspace
init|=
operator|(
name|JackrabbitWorkspace
operator|)
name|session
operator|.
name|getWorkspace
argument_list|()
decl_stmt|;
specifier|final
name|NamespaceRegistry
name|registry
init|=
name|workspace
operator|.
name|getNamespaceRegistry
argument_list|()
decl_stmt|;
name|registry
operator|.
name|registerNamespace
argument_list|(
literal|"test"
argument_list|,
literal|"http://www.example.org/"
argument_list|)
expr_stmt|;
specifier|final
name|PrivilegeManager
name|privilegeManager
init|=
name|workspace
operator|.
name|getPrivilegeManager
argument_list|()
decl_stmt|;
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
literal|"test:privilege"
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|privilegeManager
operator|.
name|registerPrivilege
argument_list|(
literal|"test:aggregate"
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"jcr:read"
block|,
literal|"test:privilege"
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldReflectSourceAfterModifications
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExisting
argument_list|(
literal|"/"
argument_list|,
literal|"/content"
argument_list|,
literal|"/content/child2"
argument_list|,
literal|"/content/child2/grandchild1"
argument_list|,
literal|"/content/child2/grandchild2"
argument_list|,
literal|"/content/child2/grandchild3"
argument_list|,
literal|"/content/child3"
argument_list|)
expr_stmt|;
name|assertMissing
argument_list|(
literal|"/content/child1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldContainCustomInitializerContent
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExisting
argument_list|(
literal|"/foo"
argument_list|,
literal|"/foo/bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldContainUpgradeInitializedContent
parameter_list|()
throws|throws
name|Exception
block|{
name|assertExisting
argument_list|(
literal|"/rep:security"
argument_list|,
literal|"/oak:index"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

