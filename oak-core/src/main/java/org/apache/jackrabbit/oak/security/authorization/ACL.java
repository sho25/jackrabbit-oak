begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AbstractAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * ACL... TODO  */
end_comment

begin_class
specifier|abstract
class|class
name|ACL
extends|extends
name|AbstractAccessControlList
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ACL
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
argument_list|()
decl_stmt|;
name|ACL
parameter_list|(
name|String
name|oakPath
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|this
argument_list|(
name|oakPath
argument_list|,
literal|null
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
name|ACL
parameter_list|(
name|String
name|oakPath
parameter_list|,
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
block|{
name|super
argument_list|(
name|oakPath
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|entries
operator|.
name|addAll
argument_list|(
name|entries
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|JackrabbitAccessControlEntry
argument_list|>
name|getEntries
parameter_list|()
block|{
return|return
name|entries
return|;
block|}
comment|//--------------------------------------------------< AccessControlList>---
annotation|@
name|Override
specifier|public
name|void
name|removeAccessControlEntry
parameter_list|(
name|AccessControlEntry
name|ace
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlEntry
name|entry
init|=
name|checkACE
argument_list|(
name|ace
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|entries
operator|.
name|remove
argument_list|(
name|entry
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Cannot remove AccessControlEntry "
operator|+
name|ace
argument_list|)
throw|;
block|}
block|}
comment|//----------------------------------------< JackrabbitAccessControlList>---
annotation|@
name|Override
specifier|public
name|boolean
name|addEntry
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|Privilege
index|[]
name|privileges
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
name|privileges
operator|==
literal|null
operator|||
name|privileges
operator|.
name|length
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Privileges may not be null nor an empty array"
argument_list|)
throw|;
block|}
comment|// TODO: check again.
comment|// NOTE: in contrast to jr2 any further validation and optimization of
comment|// the entry list is delegated to the commit validator
name|Set
argument_list|<
name|Restriction
argument_list|>
name|rs
decl_stmt|;
if|if
condition|(
name|restrictions
operator|==
literal|null
condition|)
block|{
name|rs
operator|=
name|Collections
operator|.
name|emptySet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rs
operator|=
operator|new
name|HashSet
argument_list|<
name|Restriction
argument_list|>
argument_list|(
name|restrictions
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|restrictions
operator|.
name|keySet
argument_list|()
control|)
block|{
name|rs
operator|.
name|add
argument_list|(
name|getRestrictionProvider
argument_list|()
operator|.
name|createRestriction
argument_list|(
name|getOakPath
argument_list|()
argument_list|,
name|name
argument_list|,
name|restrictions
operator|.
name|get
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|JackrabbitAccessControlEntry
name|entry
init|=
operator|new
name|ACE
argument_list|(
name|principal
argument_list|,
name|privileges
argument_list|,
name|isAllow
argument_list|,
name|rs
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|.
name|contains
argument_list|(
name|entry
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Entry is already contained in policy -> no modification."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|orderBefore
parameter_list|(
name|AccessControlEntry
name|srcEntry
parameter_list|,
name|AccessControlEntry
name|destEntry
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|JackrabbitAccessControlEntry
name|src
init|=
name|checkACE
argument_list|(
name|srcEntry
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlEntry
name|dest
init|=
operator|(
name|destEntry
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|checkACE
argument_list|(
name|destEntry
argument_list|)
decl_stmt|;
if|if
condition|(
name|src
operator|.
name|equals
argument_list|(
name|dest
argument_list|)
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"'srcEntry' equals 'destEntry' -> no reordering required."
argument_list|)
expr_stmt|;
return|return;
block|}
name|int
name|index
init|=
operator|(
name|dest
operator|==
literal|null
operator|)
condition|?
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
else|:
name|entries
operator|.
name|indexOf
argument_list|(
name|dest
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"'destEntry' not contained in this AccessControlList."
argument_list|)
throw|;
block|}
else|else
block|{
if|if
condition|(
name|entries
operator|.
name|remove
argument_list|(
name|src
argument_list|)
condition|)
block|{
comment|// re-insert the srcEntry at the new position.
name|entries
operator|.
name|add
argument_list|(
name|index
argument_list|,
name|src
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// src entry not contained in this list.
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"srcEntry not contained in this AccessControlList"
argument_list|)
throw|;
block|}
block|}
block|}
comment|//-------------------------------------------------------------< Object>---
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
literal|"ACL: "
argument_list|)
operator|.
name|append
argument_list|(
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"; ACEs: "
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|entries
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
name|ace
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
specifier|static
name|JackrabbitAccessControlEntry
name|checkACE
parameter_list|(
name|AccessControlEntry
name|entry
parameter_list|)
throws|throws
name|AccessControlException
block|{
if|if
condition|(
operator|!
operator|(
name|entry
operator|instanceof
name|ACE
operator|)
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Invalid access control entry."
argument_list|)
throw|;
block|}
return|return
operator|(
name|ACE
operator|)
name|entry
return|;
block|}
block|}
end_class

end_unit

