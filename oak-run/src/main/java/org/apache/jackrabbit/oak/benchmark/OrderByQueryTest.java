begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NodeIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|QueryResult
import|;
end_import

begin_comment
comment|/**  * This benchmark measures the read performance of child nodes using  * an ORDER BY query.  *<p>  * This is related to OAK-1263.  *   */
end_comment

begin_class
specifier|public
class|class
name|OrderByQueryTest
extends|extends
name|AbstractTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NT
init|=
literal|"oak:unstructured"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ROOT_NODE_NAME
init|=
literal|"test"
operator|+
name|TEST_ID
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|NUM_NODES
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROPERTY_NAME
init|=
literal|"testProperty"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|// doesn't have to be very secure, just some randomness
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|Node
name|rootNode
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|rootNode
operator|.
name|hasNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
condition|)
block|{
name|Node
name|root
init|=
name|rootNode
operator|.
name|getNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|)
decl_stmt|;
name|root
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
name|rootNode
operator|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|ROOT_NODE_NAME
argument_list|,
name|NT
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_NODES
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|1000
operator|==
literal|0
condition|)
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|Node
name|newNode
init|=
name|rootNode
operator|.
name|addNode
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|NT
argument_list|)
decl_stmt|;
name|newNode
operator|.
name|setProperty
argument_list|(
name|PROPERTY_NAME
argument_list|,
name|random
operator|.
name|nextLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Session
name|session
init|=
name|loginWriter
argument_list|()
decl_stmt|;
try|try
block|{
comment|// run the query
specifier|final
name|QueryManager
name|qm
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getQueryManager
argument_list|()
decl_stmt|;
specifier|final
name|Query
name|q
init|=
name|qm
operator|.
name|createQuery
argument_list|(
literal|"SELECT * FROM [oak:unstructured] AS s WHERE "
operator|+
literal|"ISDESCENDANTNODE(s, [/"
operator|+
name|ROOT_NODE_NAME
operator|+
literal|"/]) ORDER BY s."
operator|+
name|PROPERTY_NAME
operator|+
literal|"]"
argument_list|,
name|Query
operator|.
name|JCR_SQL2
argument_list|)
decl_stmt|;
specifier|final
name|QueryResult
name|res
init|=
name|q
operator|.
name|execute
argument_list|()
decl_stmt|;
specifier|final
name|NodeIterator
name|nit
init|=
name|res
operator|.
name|getNodes
argument_list|()
decl_stmt|;
comment|//            while(nit.hasNext()) {
comment|//            	Node node = nit.nextNode();
comment|////            	System.out.println("node: "+node.getPath()+", prop="+node.getProperty(PROPERTY_NAME).getLong());
comment|//            }
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

