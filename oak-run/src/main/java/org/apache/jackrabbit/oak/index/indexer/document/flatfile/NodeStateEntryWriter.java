begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|flatfile
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
operator|.
name|NodeStateEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|JsonSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|serializer
operator|.
name|BlobIdSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|StandardSystemProperty
operator|.
name|LINE_SEPARATOR
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStateEntryWriter
block|{
specifier|private
specifier|static
specifier|final
name|String
name|OAK_CHILD_ORDER
init|=
literal|":childOrder"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DELIMITER
init|=
literal|"|"
decl_stmt|;
specifier|private
specifier|final
name|JsopBuilder
name|jw
init|=
operator|new
name|JsopBuilder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|JsonSerializer
name|serializer
decl_stmt|;
comment|//TODO Possible optimizations
comment|//1. Compression
comment|//2. Dictionary for properties
specifier|public
name|NodeStateEntryWriter
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|serializer
operator|=
operator|new
name|JsonSerializer
argument_list|(
name|jw
argument_list|,
operator|new
name|BlobIdSerializer
argument_list|(
name|blobStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|(
name|NodeStateEntry
name|e
parameter_list|)
block|{
name|String
name|text
init|=
name|asText
argument_list|(
name|e
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|text
operator|.
name|length
argument_list|()
operator|+
name|e
operator|.
name|getPath
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|e
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|DELIMITER
argument_list|)
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|String
name|asText
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|asJson
argument_list|(
name|nodeState
argument_list|)
return|;
block|}
specifier|private
name|String
name|asJson
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
name|jw
operator|.
name|resetWriter
argument_list|()
expr_stmt|;
name|jw
operator|.
name|object
argument_list|()
expr_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|nodeState
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|ps
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|include
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|jw
operator|.
name|key
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
block|}
name|jw
operator|.
name|endObject
argument_list|()
expr_stmt|;
return|return
name|jw
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|include
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
return|return
operator|!
name|OAK_CHILD_ORDER
operator|.
name|equals
argument_list|(
name|propertyName
argument_list|)
return|;
block|}
comment|//~-----------------------------------< Utilities to parse>
specifier|public
specifier|static
name|String
name|getPath
parameter_list|(
name|String
name|entryLine
parameter_list|)
block|{
return|return
name|entryLine
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|getDelimiterPosition
argument_list|(
name|entryLine
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getParts
parameter_list|(
name|String
name|line
parameter_list|)
block|{
name|int
name|pos
init|=
name|getDelimiterPosition
argument_list|(
name|line
argument_list|)
decl_stmt|;
return|return
operator|new
name|String
index|[]
block|{
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
block|,
name|line
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
block|}
return|;
block|}
specifier|private
specifier|static
name|int
name|getDelimiterPosition
parameter_list|(
name|String
name|entryLine
parameter_list|)
block|{
name|int
name|indexOfPipe
init|=
name|entryLine
operator|.
name|indexOf
argument_list|(
name|NodeStateEntryWriter
operator|.
name|DELIMITER
argument_list|)
decl_stmt|;
name|checkState
argument_list|(
name|indexOfPipe
operator|>
literal|0
argument_list|,
literal|"Invalid path entry [%s]"
argument_list|,
name|entryLine
argument_list|)
expr_stmt|;
return|return
name|indexOfPipe
return|;
block|}
block|}
end_class

end_unit

