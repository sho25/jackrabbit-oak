begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|ROOT_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_class
class|class
name|IncludeMatcher
implements|implements
name|Matcher
block|{
specifier|private
specifier|final
name|Include
name|include
decl_stmt|;
comment|/**      * Depth is 1 based i.e. first node element in path would have depth 1.      * Root has depth 0      */
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
specifier|private
specifier|final
name|String
name|matchedPath
decl_stmt|;
specifier|public
name|IncludeMatcher
parameter_list|(
name|Include
name|include
parameter_list|)
block|{
name|this
argument_list|(
name|include
argument_list|,
literal|0
argument_list|,
name|ROOT_NAME
argument_list|)
expr_stmt|;
block|}
specifier|private
name|IncludeMatcher
parameter_list|(
name|Include
name|include
parameter_list|,
name|int
name|depth
parameter_list|,
name|String
name|matchedPath
parameter_list|)
block|{
name|this
operator|.
name|include
operator|=
name|include
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
name|this
operator|.
name|matchedPath
operator|=
name|matchedPath
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Matcher
name|next
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|hasMore
argument_list|()
condition|)
block|{
if|if
condition|(
name|include
operator|.
name|match
argument_list|(
name|name
argument_list|,
name|nextElementIndex
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|nextPath
init|=
name|concat
argument_list|(
name|matchedPath
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastEntry
argument_list|()
operator|&&
name|include
operator|.
name|getDirective
argument_list|()
operator|==
name|Include
operator|.
name|Directive
operator|.
name|ALL
condition|)
block|{
return|return
operator|new
name|IncludeAllMatcher
argument_list|(
name|nextPath
argument_list|,
name|nextElementIndex
argument_list|()
argument_list|)
return|;
block|}
return|return
operator|new
name|IncludeMatcher
argument_list|(
name|include
argument_list|,
name|nextElementIndex
argument_list|()
argument_list|,
name|nextPath
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Matcher
operator|.
name|NON_MATCHING
return|;
block|}
block|}
return|return
name|Matcher
operator|.
name|NON_MATCHING
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isMatch
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMatchedPath
parameter_list|()
block|{
return|return
name|matchedPath
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|depth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchesChildren
parameter_list|()
block|{
if|if
condition|(
name|hasMore
argument_list|()
condition|)
block|{
return|return
name|include
operator|.
name|matchAny
argument_list|(
name|nextElementIndex
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"IncludeMatcher{"
operator|+
literal|"include="
operator|+
name|include
operator|+
literal|", depth="
operator|+
name|depth
operator|+
literal|", matchedPath='"
operator|+
name|matchedPath
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
specifier|private
name|int
name|nextElementIndex
parameter_list|()
block|{
return|return
name|depth
operator|+
literal|1
return|;
block|}
specifier|private
name|boolean
name|hasMore
parameter_list|()
block|{
return|return
name|depth
operator|<
name|include
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|boolean
name|lastEntry
parameter_list|()
block|{
return|return
name|depth
operator|==
name|include
operator|.
name|size
argument_list|()
operator|-
literal|1
return|;
block|}
block|}
end_class

end_unit

