begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|concurrent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|FutureTask
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_comment
comment|/**  * A {@link Future} that accepts completion listener. The listener is invoked  * once the future's computation is {@linkplain Future#isDone() complete}.  * If the computation has already completed when the listener is added, the  * listener will execute immediately.  *  *<p>Listener is invoked synchronously on the same thread which is used to  * executed the Future</p>  */
end_comment

begin_class
specifier|public
class|class
name|NotifyingFutureTask
extends|extends
name|FutureTask
argument_list|<
name|Void
argument_list|>
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|completed
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|Runnable
name|onComplete
decl_stmt|;
specifier|public
name|NotifyingFutureTask
parameter_list|(
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable
parameter_list|)
block|{
name|super
argument_list|(
name|callable
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NotifyingFutureTask
parameter_list|(
name|Runnable
name|task
parameter_list|)
block|{
name|super
argument_list|(
name|task
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the on complete handler. The handler will run exactly once after      * the task terminated. If the task has already terminated at the time of      * this method call the handler will execute immediately.      *<p>      * Note: there is no guarantee to which handler will run when the method      * is called multiple times with different arguments.      *</p>      * @param onComplete listener to invoke upon completion      */
specifier|public
name|void
name|onComplete
parameter_list|(
name|Runnable
name|onComplete
parameter_list|)
block|{
name|this
operator|.
name|onComplete
operator|=
name|onComplete
expr_stmt|;
if|if
condition|(
name|isDone
argument_list|()
condition|)
block|{
name|run
argument_list|(
name|onComplete
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|done
parameter_list|()
block|{
name|run
argument_list|(
name|onComplete
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|run
parameter_list|(
name|Runnable
name|onComplete
parameter_list|)
block|{
if|if
condition|(
name|onComplete
operator|!=
literal|null
operator|&&
name|completed
operator|.
name|compareAndSet
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
condition|)
block|{
name|onComplete
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Runnable
name|NOP
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{         }
block|}
decl_stmt|;
specifier|public
specifier|static
name|NotifyingFutureTask
name|completed
parameter_list|()
block|{
name|NotifyingFutureTask
name|f
init|=
operator|new
name|NotifyingFutureTask
argument_list|(
name|NOP
argument_list|)
decl_stmt|;
name|f
operator|.
name|run
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
block|}
end_class

end_unit

