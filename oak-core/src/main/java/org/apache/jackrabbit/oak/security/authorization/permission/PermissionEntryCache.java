begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * {@code PermissionEntryCache} caches the permission entries of principals.  * The cache is held locally for each session and contains a version of the principal permission  * entries of the session that read them last.  */
end_comment

begin_class
class|class
name|PermissionEntryCache
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PermissionEntryCache
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PrincipalPermissionEntries
argument_list|>
name|entries
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|NotNull
name|PrincipalPermissionEntries
name|getFullyLoadedEntries
parameter_list|(
annotation|@
name|NotNull
name|PermissionStore
name|store
parameter_list|,
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|)
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
name|entries
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppe
operator|==
literal|null
operator|||
operator|!
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
condition|)
block|{
name|ppe
operator|=
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|)
expr_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
name|ppe
argument_list|)
expr_stmt|;
block|}
return|return
name|ppe
return|;
block|}
name|void
name|init
parameter_list|(
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|,
name|long
name|expectedSize
parameter_list|)
block|{
if|if
condition|(
operator|!
name|entries
operator|.
name|containsKey
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
name|entries
operator|.
name|put
argument_list|(
name|principalName
argument_list|,
operator|new
name|PrincipalPermissionEntries
argument_list|(
name|expectedSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|load
parameter_list|(
annotation|@
name|NotNull
name|PermissionStore
name|store
parameter_list|,
annotation|@
name|NotNull
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|ret
parameter_list|,
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|entries
operator|.
name|containsKey
argument_list|(
name|principalName
argument_list|)
condition|)
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
name|entries
operator|.
name|get
argument_list|(
name|principalName
argument_list|)
decl_stmt|;
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|pes
init|=
name|ppe
operator|.
name|getEntriesByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|ppe
operator|.
name|isFullyLoaded
argument_list|()
operator|||
name|pes
operator|!=
literal|null
condition|)
block|{
comment|// no need to read from store
if|if
condition|(
name|pes
operator|!=
literal|null
condition|)
block|{
name|ret
operator|.
name|addAll
argument_list|(
name|pes
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// read entries for path from store
name|pes
operator|=
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|pes
operator|==
literal|null
condition|)
block|{
comment|// nothing to add to the result collection 'ret'.
comment|// nevertheless, remember the absence of any permission entries
comment|// in the cache to avoid reading from store again.
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
name|emptySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ppe
operator|.
name|putEntriesByPath
argument_list|(
name|path
argument_list|,
name|pes
argument_list|)
expr_stmt|;
name|ret
operator|.
name|addAll
argument_list|(
name|pes
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Failed to load entries for principal '%s' at path %s"
argument_list|,
name|principalName
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

