begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionCopyConfiguration
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
specifier|public
class|class
name|VersionCopyTestUtils
block|{
specifier|public
specifier|static
name|List
argument_list|<
name|String
argument_list|>
name|LABELS
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"1.0"
argument_list|,
literal|"1.1"
argument_list|,
literal|"1.2"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Node
name|getOrAddNode
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|relPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|currentParent
init|=
name|parent
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|relPath
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|currentParent
operator|.
name|hasNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|currentParent
operator|.
name|addNode
argument_list|(
name|name
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
expr_stmt|;
block|}
name|currentParent
operator|=
name|currentParent
operator|.
name|getNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|currentParent
return|;
block|}
specifier|public
specifier|static
name|Node
name|getOrAddNodeWithMixins
parameter_list|(
name|Node
name|parent
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|mixinType
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|Node
name|node
init|=
name|getOrAddNode
argument_list|(
name|parent
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|node
operator|.
name|addMixin
argument_list|(
name|mixinType
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
specifier|public
specifier|static
name|String
name|createLabeledVersions
parameter_list|(
name|Node
name|node
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
block|{
specifier|final
name|Session
name|session
init|=
name|node
operator|.
name|getSession
argument_list|()
decl_stmt|;
specifier|final
name|VersionManager
name|versionManager
init|=
name|session
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|node
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
literal|"root"
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
specifier|final
name|String
name|path
init|=
name|node
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|versionNames
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|label
range|:
name|LABELS
control|)
block|{
name|node
operator|.
name|setProperty
argument_list|(
literal|"version"
argument_list|,
name|label
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
specifier|final
name|Version
name|v
init|=
name|versionManager
operator|.
name|checkpoint
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|versionNames
operator|.
name|add
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|VersionHistory
name|history
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|path
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|versionName
range|:
name|versionNames
control|)
block|{
name|history
operator|.
name|addVersionLabel
argument_list|(
name|versionName
argument_list|,
name|String
operator|.
name|format
argument_list|(
literal|"version %s"
argument_list|,
name|versionName
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|history
operator|.
name|getPath
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|assertLabeledVersions
parameter_list|(
name|VersionHistory
name|history
parameter_list|)
throws|throws
name|RepositoryException
block|{
specifier|final
name|VersionIterator
name|versions
init|=
name|history
operator|.
name|getAllVersions
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|versions
operator|.
name|nextVersion
argument_list|()
operator|.
name|getFrozenNode
argument_list|()
operator|.
name|hasProperty
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
comment|// root
for|for
control|(
specifier|final
name|String
name|label
range|:
name|LABELS
control|)
block|{
name|assertEquals
argument_list|(
name|label
argument_list|,
name|versions
operator|.
name|nextVersion
argument_list|()
operator|.
name|getFrozenNode
argument_list|()
operator|.
name|getProperty
argument_list|(
literal|"version"
argument_list|)
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
interface|interface
name|VersionCopySetup
block|{
name|void
name|setup
parameter_list|(
name|VersionCopyConfiguration
name|config
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

