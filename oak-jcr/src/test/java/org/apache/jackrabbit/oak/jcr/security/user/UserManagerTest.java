begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Tests for the {@link UserManager} implementation.  */
end_comment

begin_class
specifier|public
class|class
name|UserManagerTest
extends|extends
name|AbstractUserTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|testGetNewAuthorizable
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|User
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uid
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
argument_list|,
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizable
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|User
name|user
init|=
literal|null
decl_stmt|;
try|try
block|{
name|user
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|uid
argument_list|,
name|user
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|user
argument_list|,
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|getNode
argument_list|(
name|user
argument_list|,
name|superuser
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|user
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetAuthorizableByPath
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
name|uid
init|=
name|superuser
operator|.
name|getUserID
argument_list|()
decl_stmt|;
name|Authorizable
name|a
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
try|try
block|{
name|String
name|path
init|=
name|a
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Authorizable
name|a2
init|=
name|userMgr
operator|.
name|getAuthorizableByPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|a2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|a
operator|.
name|getID
argument_list|()
argument_list|,
name|a2
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedRepositoryOperationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUserIDFromSession
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|User
name|u
init|=
literal|null
decl_stmt|;
name|Session
name|uSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|uSession
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|u
operator|.
name|getID
argument_list|()
argument_list|,
name|uSession
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|uSession
operator|!=
literal|null
condition|)
block|{
name|uSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserPrincipalNameEqualsUserID
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|User
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"User.getID() must return the userID pass to createUser."
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|uid
argument_list|,
name|u
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|msg
operator|=
literal|"Principal name must be the same as userID."
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|uid
argument_list|,
name|u
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserIdDifferentFromPrincipalName
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|User
name|u
init|=
literal|null
decl_stmt|;
name|Session
name|uSession
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Creating a User with principal-name distinct from Principal-name must succeed as long as both are unique."
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|u
operator|.
name|getID
argument_list|()
argument_list|,
name|uid
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|u
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|u
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|u
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure the userID exposed by a Session corresponding to that
comment|// user is equal to the users ID.
name|uSession
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|uid
argument_list|,
name|uSession
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|uSession
operator|!=
literal|null
condition|)
block|{
name|uSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithInvalidIdOrPrincipal
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|Principal
name|emptyNamePrincipal
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|fail
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
argument_list|()
decl_stmt|;
name|fail
operator|.
name|put
argument_list|(
name|uid
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
operator|.
name|put
argument_list|(
name|uid
argument_list|,
name|emptyNamePrincipal
argument_list|)
expr_stmt|;
name|fail
operator|.
name|put
argument_list|(
literal|null
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|fail
operator|.
name|put
argument_list|(
literal|""
argument_list|,
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|id
range|:
name|fail
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Group
name|g
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Principal
name|princ
init|=
name|fail
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|g
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|id
argument_list|,
name|princ
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Creating group with id '"
operator|+
name|id
operator|+
literal|"' and principal '"
operator|+
name|princ
operator|.
name|getName
argument_list|()
operator|+
literal|"' should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateEveryoneUser
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|EveryonePrincipal
operator|.
name|NAME
argument_list|,
literal|"pw"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"everyone is a reserved group name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @since OAK 1.0      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateUserWithoutPassword
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|User
name|u
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|createUserId
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
block|}
finally|finally
block|{
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithId
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|id
init|=
name|createGroupId
argument_list|()
decl_stmt|;
comment|// assert group creation with exact ID
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expect group with exact ID"
argument_list|,
name|id
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithIdAndPrincipal
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// assert group creation with exact ID
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|uid
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expect group with exact ID"
argument_list|,
name|uid
argument_list|,
name|gr
operator|.
name|getID
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Expected group with exact principal name"
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|gr
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupIdDifferentFromPrincipalName
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|g
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|g
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
literal|"testGroup"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|String
name|msg
init|=
literal|"Creating a Group with principal-name distinct from Principal-name must succeed as long as both are unique."
decl_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|g
operator|.
name|getID
argument_list|()
argument_list|,
literal|"testGroup"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|msg
argument_list|,
name|p
operator|.
name|getName
argument_list|()
argument_list|,
name|g
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|msg
argument_list|,
name|g
operator|.
name|getID
argument_list|()
operator|.
name|equals
argument_list|(
name|g
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithExistingPrincipal
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|User
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// create a user with the given ID
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// assert AuthorizableExistsException for principal that is already in use
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Principal "
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" is already in use -> must throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableExistsException
name|e
parameter_list|)
block|{
comment|// expected this
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithExistingPrincipal2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|uid
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|User
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create a user with the given ID
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// assert AuthorizableExistsException for principal that is already in use
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Principal "
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" is already in use -> must throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableExistsException
name|e
parameter_list|)
block|{
comment|// expected this
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithExistingPrincipal3
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|uid
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|User
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create a user with the given ID
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// assert AuthorizableExistsException for principal that is already in use
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Principal "
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" is already in use -> must throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableExistsException
name|e
parameter_list|)
block|{
comment|// expected this
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @since oak 1.0 : if collision is added within the same set of transient      *        modifications it will only be detected upon save. in this case RepositoryException      *        is thrown instead of AuthorizableExistsException as the violation is      *        detected by the uniqueness constraint on the corresponding property index.      */
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithExistingPrincipal4
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|uid
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|User
name|u
init|=
literal|null
decl_stmt|;
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// create a user with the given ID
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|createGroupId
argument_list|()
argument_list|,
name|p
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Principal "
operator|+
name|p
operator|.
name|getName
argument_list|()
operator|+
literal|" is already in use -> must throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// expected this
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|superuser
operator|.
name|hasPendingChanges
argument_list|()
condition|)
block|{
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithExistingUserID
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|User
name|u
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
comment|// create a user with the given ID
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// assert AuthorizableExistsException for id that is already in use
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|uid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ID "
operator|+
name|uid
operator|+
literal|" is already in use -> must throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableExistsException
name|aee
parameter_list|)
block|{
comment|// expected this
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithExistingGroupID
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|g
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|id
init|=
name|createGroupId
argument_list|()
decl_stmt|;
comment|// create a user with the given ID
name|g
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// assert AuthorizableExistsException for id that is already in use
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ID "
operator|+
name|id
operator|+
literal|" is already in use -> must throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableExistsException
name|aee
parameter_list|)
block|{
comment|// expected this
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateGroupWithExistingGroupID2
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Group
name|g
init|=
literal|null
decl_stmt|;
try|try
block|{
name|String
name|id
init|=
name|createGroupId
argument_list|()
decl_stmt|;
comment|// create a group with the given ID
name|g
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// assert AuthorizableExistsException for id that is already in use
name|Group
name|gr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|gr
operator|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|id
argument_list|,
name|getTestPrincipal
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"ID "
operator|+
name|id
operator|+
literal|" is already in use -> must throw AuthorizableExistsException."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthorizableExistsException
name|aee
parameter_list|)
block|{
comment|// expected this
block|}
finally|finally
block|{
if|if
condition|(
name|gr
operator|!=
literal|null
condition|)
block|{
name|gr
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|g
operator|!=
literal|null
condition|)
block|{
name|g
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewUserCanLogin
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|User
name|u
init|=
literal|null
decl_stmt|;
name|Session
name|s
init|=
literal|null
decl_stmt|;
try|try
block|{
name|u
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
literal|"pw"
operator|.
name|toCharArray
argument_list|()
argument_list|)
decl_stmt|;
name|s
operator|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
name|creds
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|u
operator|!=
literal|null
condition|)
block|{
name|u
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownUserLogin
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|uid
init|=
name|createUserId
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|Session
name|s
init|=
name|superuser
operator|.
name|getRepository
argument_list|()
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|uid
argument_list|,
name|uid
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"An unknown user should not be allowed to execute the login."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// ok.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanup
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserSession
argument_list|()
decl_stmt|;
try|try
block|{
name|UserManager
name|umgr
init|=
name|getUserManager
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
comment|// after logging out the session, the user manager must have been
comment|// released as well and it's underlying session must not be available
comment|// any more -> accessing users must fail.
try|try
block|{
name|umgr
operator|.
name|getAuthorizable
argument_list|(
literal|"any userid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"After having logged out the original session, the user manager must not be live any more."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCleanupForAllWorkspaces
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
index|[]
name|workspaceNames
init|=
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getAccessibleWorkspaceNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|workspaceName1
range|:
name|workspaceNames
control|)
block|{
name|Session
name|s
init|=
name|getHelper
argument_list|()
operator|.
name|getSuperuserSession
argument_list|(
name|workspaceName1
argument_list|)
decl_stmt|;
try|try
block|{
name|UserManager
name|umgr
init|=
name|getUserManager
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
comment|// after logging out the session, the user manager must have been
comment|// released as well and it's underlying session must not be available
comment|// any more -> accessing users must fail.
try|try
block|{
name|umgr
operator|.
name|getAuthorizable
argument_list|(
literal|"any userid"
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"After having logged out the original session, the user manager must not be live any more."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|s
operator|.
name|isLive
argument_list|()
condition|)
block|{
name|s
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithRelativePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|invalid
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"../../path"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
operator|+
literal|"/../test"
argument_list|)
expr_stmt|;
name|invalid
operator|.
name|add
argument_list|(
literal|"../../../home/users/test"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|invalid
control|)
block|{
try|try
block|{
name|User
name|user
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|,
name|p
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"intermediate path '"
operator|+
name|path
operator|+
literal|"' outside of the user tree."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
comment|// revert transient changes
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// clean up
name|Authorizable
name|testUser
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
decl_stmt|;
if|if
condition|(
name|testUser
operator|!=
literal|null
condition|)
block|{
name|testUser
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateWithAbsoluteIntermediatePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|User
name|test
init|=
literal|null
decl_stmt|;
try|try
block|{
name|test
operator|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|,
name|p
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
operator|+
literal|"/test"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|test
operator|.
name|getPath
argument_list|()
operator|.
name|startsWith
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
operator|+
literal|"/test"
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|test
operator|!=
literal|null
condition|)
block|{
name|test
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|testAutoSave
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
if|if
condition|(
name|userMgr
operator|.
name|isAutoSave
argument_list|()
condition|)
block|{
try|try
block|{
name|userMgr
operator|.
name|autoSave
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
block|}
name|Principal
name|p
init|=
name|getTestPrincipal
argument_list|()
decl_stmt|;
name|String
name|uid
init|=
name|p
operator|.
name|getName
argument_list|()
decl_stmt|;
name|User
name|user
init|=
name|userMgr
operator|.
name|createUser
argument_list|(
name|uid
argument_list|,
literal|"pw"
argument_list|)
decl_stmt|;
name|String
name|gid
init|=
name|createGroupId
argument_list|()
decl_stmt|;
name|Group
name|group
init|=
name|userMgr
operator|.
name|createGroup
argument_list|(
name|gid
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// transient changes must be gone after the refresh-call.
name|assertNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|gid
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

