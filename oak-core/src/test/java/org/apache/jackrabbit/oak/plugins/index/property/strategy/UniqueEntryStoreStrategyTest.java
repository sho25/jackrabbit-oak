begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
operator|.
name|memoize
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|INDEX_CONTENT_NODE_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|containsInAnyOrder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|iterableWithSize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_class
specifier|public
class|class
name|UniqueEntryStoreStrategyTest
block|{
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|EMPTY
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|String
name|indexName
decl_stmt|;
specifier|private
name|NodeBuilder
name|indexMeta
decl_stmt|;
specifier|private
name|UniqueEntryStoreStrategy
name|store
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|fillIndex
parameter_list|()
throws|throws
name|Exception
block|{
name|store
operator|=
operator|new
name|UniqueEntryStoreStrategy
argument_list|()
expr_stmt|;
name|indexName
operator|=
literal|"foo"
expr_stmt|;
name|NodeState
name|root
init|=
name|EMPTY_NODE
decl_stmt|;
name|indexMeta
operator|=
name|root
operator|.
name|builder
argument_list|()
expr_stmt|;
name|Supplier
argument_list|<
name|NodeBuilder
argument_list|>
name|index
init|=
name|memoize
argument_list|(
parameter_list|()
lambda|->
name|indexMeta
operator|.
name|child
argument_list|(
name|INDEX_CONTENT_NODE_NAME
argument_list|)
argument_list|)
decl_stmt|;
name|store
operator|.
name|update
argument_list|(
name|index
argument_list|,
literal|"/some/node1"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|EMPTY
argument_list|,
name|newHashSet
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
expr_stmt|;
name|store
operator|.
name|update
argument_list|(
name|index
argument_list|,
literal|"/some/node2"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|EMPTY
argument_list|,
name|newHashSet
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryEntries_All
parameter_list|()
block|{
name|Iterable
argument_list|<
name|IndexEntry
argument_list|>
name|hits
init|=
name|store
operator|.
name|queryEntries
argument_list|(
name|FilterImpl
operator|.
name|newTestInstance
argument_list|()
argument_list|,
name|indexName
argument_list|,
name|indexMeta
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hits
argument_list|,
name|containsInAnyOrder
argument_list|(
operator|new
name|IndexEntry
argument_list|(
literal|"/some/node1"
argument_list|,
literal|"key1"
argument_list|)
argument_list|,
operator|new
name|IndexEntry
argument_list|(
literal|"/some/node2"
argument_list|,
literal|"key2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryEntries_some
parameter_list|()
block|{
name|Iterable
argument_list|<
name|IndexEntry
argument_list|>
name|hits
init|=
name|store
operator|.
name|queryEntries
argument_list|(
name|FilterImpl
operator|.
name|newTestInstance
argument_list|()
argument_list|,
name|indexName
argument_list|,
name|indexMeta
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"key1"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hits
argument_list|,
name|containsInAnyOrder
argument_list|(
operator|new
name|IndexEntry
argument_list|(
literal|"/some/node1"
argument_list|,
literal|"key1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|queryEntries_none
parameter_list|()
block|{
name|Iterable
argument_list|<
name|IndexEntry
argument_list|>
name|hits
init|=
name|store
operator|.
name|queryEntries
argument_list|(
name|FilterImpl
operator|.
name|newTestInstance
argument_list|()
argument_list|,
name|indexName
argument_list|,
name|indexMeta
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"key3"
argument_list|)
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|hits
argument_list|,
name|iterableWithSize
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

