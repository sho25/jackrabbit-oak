begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISCHECKEDOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|ReadOnlyVersionManagerTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
name|Tree
name|versionable
decl_stmt|;
specifier|private
name|String
name|workspaceName
decl_stmt|;
specifier|private
name|ReadOnlyVersionManager
name|versionManager
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|NodeUtil
name|a
init|=
name|node
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|a
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
expr_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|a
operator|.
name|getTree
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|versionable
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
expr_stmt|;
comment|// force the creation of a version that has a frozen node
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
name|Boolean
operator|.
name|FALSE
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|versionable
operator|.
name|setProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|,
name|Boolean
operator|.
name|TRUE
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|versionManager
operator|=
name|ReadOnlyVersionManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
name|workspaceName
operator|=
name|root
operator|.
name|getContentSession
argument_list|()
operator|.
name|getWorkspaceName
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|Tree
name|a
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|.
name|exists
argument_list|()
condition|)
block|{
name|a
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsVersionStoreTree
parameter_list|()
throws|throws
name|Exception
block|{
name|assertFalse
argument_list|(
name|ReadOnlyVersionManager
operator|.
name|isVersionStoreTree
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReadOnlyVersionManager
operator|.
name|isVersionStoreTree
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReadOnlyVersionManager
operator|.
name|isVersionStoreTree
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/a/b/c"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReadOnlyVersionManager
operator|.
name|isVersionStoreTree
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Tree
name|versionHistory
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|versionHistory
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ReadOnlyVersionManager
operator|.
name|isVersionStoreTree
argument_list|(
name|versionHistory
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ReadOnlyVersionManager
operator|.
name|isVersionStoreTree
argument_list|(
name|versionHistory
operator|.
name|getParent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionable
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertVersionable
argument_list|(
literal|"/a"
argument_list|,
name|versionHistory
argument_list|)
expr_stmt|;
name|Tree
name|rootVersion
init|=
name|versionHistory
operator|.
name|getChild
argument_list|(
name|JcrConstants
operator|.
name|JCR_ROOTVERSION
argument_list|)
decl_stmt|;
name|assertVersionable
argument_list|(
literal|"/a"
argument_list|,
name|rootVersion
argument_list|)
expr_stmt|;
name|Tree
name|baseVersion
init|=
name|checkNotNull
argument_list|(
name|versionManager
operator|.
name|getBaseVersion
argument_list|(
name|versionable
argument_list|)
argument_list|)
decl_stmt|;
name|assertVersionable
argument_list|(
literal|"/a"
argument_list|,
name|baseVersion
argument_list|)
expr_stmt|;
name|Tree
name|frozen
init|=
name|baseVersion
operator|.
name|getChild
argument_list|(
name|VersionConstants
operator|.
name|JCR_FROZENNODE
argument_list|)
decl_stmt|;
name|assertVersionable
argument_list|(
literal|"/a"
argument_list|,
name|frozen
argument_list|)
expr_stmt|;
name|Tree
name|frozenB
init|=
name|frozen
operator|.
name|getChild
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertVersionable
argument_list|(
literal|"/a/b"
argument_list|,
name|frozenB
argument_list|)
expr_stmt|;
name|Tree
name|frozenC
init|=
name|frozenB
operator|.
name|getChild
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
name|assertVersionable
argument_list|(
literal|"/a/b/c"
argument_list|,
name|frozenC
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertVersionable
parameter_list|(
annotation|@
name|Nonnull
name|String
name|expectedPath
parameter_list|,
annotation|@
name|Nonnull
name|Tree
name|versionTree
parameter_list|)
block|{
name|String
name|p
init|=
name|versionTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|p
argument_list|,
name|versionTree
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|versionable
init|=
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|versionTree
argument_list|,
name|workspaceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|p
argument_list|,
name|versionable
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|p
argument_list|,
name|expectedPath
argument_list|,
name|versionable
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionableForNonVersionTree
parameter_list|()
throws|throws
name|Exception
block|{
name|assertNull
argument_list|(
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|versionManager
operator|.
name|getVersionStorage
argument_list|()
argument_list|,
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|versionable
argument_list|,
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionableMissingPathProperty
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|versionHistory
operator|.
name|removeProperty
argument_list|(
name|workspaceName
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|versionHistory
argument_list|,
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|versionHistory
operator|.
name|getChild
argument_list|(
name|JcrConstants
operator|.
name|JCR_ROOTVERSION
argument_list|)
argument_list|,
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionableNonExistingWorkspace
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|versionHistory
init|=
name|checkNotNull
argument_list|(
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|versionHistory
argument_list|,
literal|"nonExistingWorkspaceName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|versionHistory
operator|.
name|getChild
argument_list|(
name|JcrConstants
operator|.
name|JCR_ROOTVERSION
argument_list|)
argument_list|,
literal|"nonExistingWorkspaceName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionableTargetRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|baseVersion
init|=
name|checkNotNull
argument_list|(
name|versionManager
operator|.
name|getBaseVersion
argument_list|(
name|versionable
argument_list|)
argument_list|)
decl_stmt|;
name|versionable
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|t
init|=
name|versionManager
operator|.
name|getVersionable
argument_list|(
name|baseVersion
argument_list|,
name|workspaceName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|t
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEmptyHistoryAfterRemovingVersionable
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|NodeUtil
name|testVersionable
init|=
name|node
operator|.
name|addChild
argument_list|(
literal|"testVersionable"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|testVersionable
operator|.
name|getTree
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|String
name|historyPath
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|testVersionable
operator|.
name|getTree
argument_list|()
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|historyPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|testVersionable
operator|.
name|getTree
argument_list|()
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertFalse
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|historyPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreserveNonEmptyHistoryAfterRemovingVersionable
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|String
name|historyPath
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|versionable
argument_list|)
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|historyPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|versionable
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|historyPath
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPreserveHistoryAfterMovingVersionable
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|CommitFailedException
block|{
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|NodeUtil
name|testVersionable
init|=
name|node
operator|.
name|addChild
argument_list|(
literal|"testVersionable"
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_OAK_UNSTRUCTURED
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|testVersionable
operator|.
name|getTree
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|history
init|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|testVersionable
operator|.
name|getTree
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|history
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|historyUuid
init|=
name|history
operator|.
name|getProperty
argument_list|(
name|JCR_UUID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|root
operator|.
name|move
argument_list|(
literal|"/testVersionable"
argument_list|,
literal|"/testVersionable2"
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|history
operator|=
name|versionManager
operator|.
name|getVersionHistory
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/testVersionable2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|history
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|historyUuid
argument_list|,
name|history
operator|.
name|getProperty
argument_list|(
name|JCR_UUID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

