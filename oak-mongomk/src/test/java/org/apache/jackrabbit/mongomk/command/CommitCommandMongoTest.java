begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|command
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|BaseMongoTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|MongoAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|scenario
operator|.
name|SimpleNodeScenario
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|util
operator|.
name|MongoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
annotation|@
name|SuppressWarnings
argument_list|(
literal|"javadoc"
argument_list|)
specifier|public
class|class
name|CommitCommandMongoTest
extends|extends
name|BaseMongoTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|addNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"b\" : {} , \"c\" : {} }"
argument_list|,
literal|"This is a simple commit"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"b#%1$s\" : {} , \"c#%1$s\" : {} } } }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitExists
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertHeadRevision
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNextRevision
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNodesToSameParent
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : {}"
argument_list|,
literal|"This is the 1st commit"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|firstRevisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"b\" : {}"
argument_list|,
literal|"This is the 2nd commit"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|Long
name|secondRevisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"c\" : {}"
argument_list|,
literal|"This is the 3rd commit"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|Long
name|thirdRevisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%3$s\" : { \"a#%1$s\" : { } , \"b#%2$s\" : { } , \"c#%3$s\" : { } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|,
name|thirdRevisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addIntermediataryNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"b\" : { \"c\": {} }}"
argument_list|,
literal|"Add /a/b/c"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId1
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"b\" : { \"e\": {} }, \"d\" : {} }"
argument_list|,
literal|"Add /a/d and /a/b/e"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|Long
name|revisionId2
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"b#%2$s\" : { \"c#%1$s\" : {}, \"e#%2$s\" : {} }, "
operator|+
literal|" \"d#%2$s\" : {} } } }"
argument_list|,
name|revisionId1
argument_list|,
name|revisionId2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addDuplicateNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"b\" : {} }"
argument_list|,
literal|"Add a/b"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/a"
argument_list|,
literal|"+\"b\" : {}"
argument_list|,
literal|"Add a/b again"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
try|try
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNodesAndProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario1
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|scenario1
operator|.
name|create
argument_list|()
expr_stmt|;
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"key1\" : \"value1\" , \"b\" : {\"key2\" : \"value2\"}"
operator|+
literal|", \"c\" : {\"key3\" : \"value3\"}}"
argument_list|,
literal|"This is a simple commit"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|Assert
operator|.
name|assertNotNull
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : {  \"int\" : 1 , \"key1\" : \"value1\", \"b#%1$s\" : { \"string\" : \"foo\" , \"key2\" : \"value2\" } , \"c#%1$s\" : { \"bool\" : true , \"key3\" : \"value3\" } } } }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitExists
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|,
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
comment|// FIXME - This currently fails due to some limit in property sizes in Mongo
comment|// which affects path property.
specifier|public
name|void
name|bigCommit
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|path
init|=
literal|"/"
decl_stmt|;
name|String
name|baseNodeName
init|=
literal|"test"
decl_stmt|;
name|int
name|numberOfCommits
init|=
literal|1000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfCommits
condition|;
name|i
operator|++
control|)
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
name|path
argument_list|,
literal|"+\""
operator|+
name|baseNodeName
operator|+
name|i
operator|+
literal|"\" : {}"
argument_list|,
literal|"Add node n"
operator|+
name|i
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|+=
literal|"/"
expr_stmt|;
block|}
name|path
operator|+=
name|baseNodeName
operator|+
name|i
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitAndMergeNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario1
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|Long
name|firstRevisionId
init|=
name|scenario1
operator|.
name|create
argument_list|()
decl_stmt|;
name|Long
name|secondRevisionId
init|=
name|scenario1
operator|.
name|update_A_and_add_D_and_E
argument_list|()
decl_stmt|;
name|SimpleNodeScenario
name|scenario2
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|Long
name|thirdRevisionId
init|=
name|scenario2
operator|.
name|create
argument_list|()
decl_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"int\" : 1 , \"b#%1$s\" : { \"string\" : \"foo\" } , \"c#%1$s\" : { \"bool\" : true } } } }"
argument_list|,
name|firstRevisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%2$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%2$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%1$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%3$s\" : { \"a#%3$s\" : { \"int\" : 1 , \"double\" : 0.123 , \"b#%3$s\" : { \"string\" : \"foo\" , \"e#%2$s\" : { \"array\" : [ 123, null, 123.456, \"for:bar\", true ] } } , \"c#%3$s\" : { \"bool\" : true }, \"d#%2$s\" : { \"null\" : null } } } }"
argument_list|,
name|firstRevisionId
argument_list|,
name|secondRevisionId
argument_list|,
name|thirdRevisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitContainsAllAffectedNodes
parameter_list|()
throws|throws
name|Exception
block|{
name|SimpleNodeScenario
name|scenario
init|=
operator|new
name|SimpleNodeScenario
argument_list|(
name|mongoConnection
argument_list|)
decl_stmt|;
name|Long
name|firstRevisionId
init|=
name|scenario
operator|.
name|create
argument_list|()
decl_stmt|;
name|Long
name|secondRevisionId
init|=
name|scenario
operator|.
name|update_A_and_add_D_and_E
argument_list|()
decl_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|firstRevisionId
argument_list|,
literal|"/"
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/c"
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|secondRevisionId
argument_list|,
literal|"/a"
argument_list|,
literal|"/a/b"
argument_list|,
literal|"/a/d"
argument_list|,
literal|"/a/b/e"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|existingParentContainsChildren
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|""
argument_list|,
literal|"+ \"/\" : {\"a\" : {}, \"b\" : {}, \"c\" : {}}"
argument_list|,
literal|"This is a simple commit"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : {}, \"b#%1$s\" : {} , \"c#%1$s\" : {} } }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|GetNodesCommandMongo
name|command2
init|=
operator|new
name|GetNodesCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
literal|"/"
argument_list|,
name|revisionId
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Node
name|rootOfPath
init|=
name|command2
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|rootOfPath
operator|.
name|getChildCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergePropertiesAndChildrenNoneExistedAndNewAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"key1\" : \"value1\" , \"key2\" : \"value2\" , \"key3\" : \"value3\" }"
argument_list|,
literal|"This is a simple commit"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : {} }"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"key1\" : \"value1\", \"key2\" : \"value2\", \"key3\" : \"value3\" } } }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mergePropertiesAndChildrenSomeExistedAndNewAdded
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"existed_key1\" : \"value1\" , \"existed_key2\" : \"value2\" , \"existed_key3\" : \"value3\" }"
argument_list|,
literal|"This is a simple commit"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"key1\" : \"value1\" , \"key2\" : \"value2\" , \"key3\" : \"value3\" }"
argument_list|,
literal|"This is a simple commit"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|revisionId
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : {} }"
argument_list|,
literal|"0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"existed_key1\" : \"value1\", \"existed_key2\" : \"value2\", \"existed_key3\" : \"value3\", \"key1\" : \"value1\", \"key2\" : \"value2\", \"key3\" : \"value3\" } } }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|noOtherNodesTouched
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : {}"
operator|+
literal|"\n+\"b\" : {}"
operator|+
literal|"\n+\"c\" : {}"
argument_list|,
literal|"Simple commit"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|firstRevisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/a"
argument_list|,
literal|"+\"d\": {} \n+\"e\" : {}"
argument_list|,
literal|"This is a simple commit"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|Long
name|secondRevisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/"
argument_list|,
name|firstRevisionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a"
argument_list|,
name|firstRevisionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/b"
argument_list|,
name|firstRevisionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/c"
argument_list|,
name|firstRevisionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/d"
argument_list|,
name|firstRevisionId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/e"
argument_list|,
name|firstRevisionId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/"
argument_list|,
name|secondRevisionId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a"
argument_list|,
name|secondRevisionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/b"
argument_list|,
name|secondRevisionId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/c"
argument_list|,
name|secondRevisionId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/d"
argument_list|,
name|secondRevisionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodeRevisionId
argument_list|(
literal|"/a/e"
argument_list|,
name|secondRevisionId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"b\" : {} , \"c\" : {} }"
argument_list|,
literal|"Add a and its children"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : { \"a#%1$s\" : { \"b#%1$s\" : {} , \"c#%1$s\" : {} } } }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"-\"a\""
argument_list|,
literal|"Remove a"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|revisionId
operator|=
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : {} }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitExists
argument_list|(
name|commit
argument_list|)
expr_stmt|;
name|MongoAssert
operator|.
name|assertCommitContainsAffectedPaths
argument_list|(
name|commit
operator|.
name|getRevisionId
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeNonExistentNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : { \"b\" : {}  }"
argument_list|,
literal|"Add nodes"
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|commit
operator|=
name|CommitBuilder
operator|.
name|build
argument_list|(
literal|"/a"
argument_list|,
literal|"-\"c\""
argument_list|,
literal|"Non-existent node delete"
argument_list|)
expr_stmt|;
name|command
operator|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
expr_stmt|;
try|try
block|{
name|command
operator|.
name|execute
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Exception expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|expected
parameter_list|)
block|{          }
block|}
annotation|@
name|Test
specifier|public
name|void
name|rootNodeHasEmptyRootPath
parameter_list|()
throws|throws
name|Exception
block|{
name|Commit
name|commit
init|=
name|CommitBuilder
operator|.
name|build
argument_list|(
name|MongoUtil
operator|.
name|INITIAL_COMMIT_PATH
argument_list|,
name|MongoUtil
operator|.
name|INITIAL_COMMIT_DIFF
argument_list|,
name|MongoUtil
operator|.
name|INITIAL_COMMIT_MESSAGE
argument_list|)
decl_stmt|;
name|CommitCommandMongo
name|command
init|=
operator|new
name|CommitCommandMongo
argument_list|(
name|mongoConnection
argument_list|,
name|commit
argument_list|)
decl_stmt|;
name|Long
name|revisionId
init|=
name|command
operator|.
name|execute
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|Node
name|expected
init|=
name|NodeBuilder
operator|.
name|build
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"{ \"/#%1$s\" : {} }"
argument_list|,
name|revisionId
argument_list|)
argument_list|)
decl_stmt|;
name|MongoAssert
operator|.
name|assertNodesExist
argument_list|(
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

