begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authentication
operator|.
name|user
operator|.
name|LoginModuleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|basic
operator|.
name|DefaultSyncContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
operator|.
name|impl
operator|.
name|ExternalLoginModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|AppConfigurationEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_comment
comment|/**  * Testing improvements made for<a href="https://issues.apache.org/jira/browse/OAK-3508">OAK-3508</a>  */
end_comment

begin_class
specifier|public
class|class
name|PreAuthDefaultExternalLoginTest
extends|extends
name|ExternalLoginTestBase
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|preAuthOptions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|after
argument_list|()
expr_stmt|;
block|}
comment|/**      * Example {      *    your.org.PreAuthenticationLoginModule optional;      *    org.apache.jackrabbit.oak.security.authentication.user.LoginModuleImpl optional;      *    org.apache.jackrabbit.oak.spi.security.authentication.external.impl.ExternalLoginModule sufficient      *              sync.handlerName="your-synchandler_name"      *              idp.name="your_idp_name";      *    };      */
annotation|@
name|Override
specifier|protected
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
operator|new
name|Configuration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|AppConfigurationEntry
index|[]
name|getAppConfigurationEntry
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|AppConfigurationEntry
name|entry1
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|PreAuthLoginModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|OPTIONAL
argument_list|,
name|preAuthOptions
argument_list|)
decl_stmt|;
name|AppConfigurationEntry
name|entry2
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|ExternalLoginModule
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|SUFFICIENT
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|AppConfigurationEntry
name|entry3
init|=
operator|new
name|AppConfigurationEntry
argument_list|(
name|LoginModuleImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|AppConfigurationEntry
operator|.
name|LoginModuleControlFlag
operator|.
name|SUFFICIENT
argument_list|,
operator|new
name|HashMap
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|AppConfigurationEntry
index|[]
block|{
name|entry1
block|,
name|entry2
block|,
name|entry3
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonExistingUser
parameter_list|()
throws|throws
name|Exception
block|{
name|PreAuthCredentials
name|creds
init|=
operator|new
name|PreAuthCredentials
argument_list|(
literal|"nonExisting"
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{         }
finally|finally
block|{
name|assertEquals
argument_list|(
name|PreAuthCredentials
operator|.
name|PRE_AUTH_DONE
argument_list|,
name|creds
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testLocalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|testUser
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|PreAuthCredentials
name|creds
init|=
operator|new
name|PreAuthCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|PreAuthCredentials
operator|.
name|PRE_AUTH_DONE
argument_list|,
name|creds
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExternalUser
parameter_list|()
throws|throws
name|Exception
block|{
name|PreAuthCredentials
name|creds
init|=
operator|new
name|PreAuthCredentials
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|PreAuthCredentials
operator|.
name|PRE_AUTH_DONE
argument_list|,
name|creds
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
comment|// user needs to be synchronized upon login
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistingExternalReSync
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sync user upfront
name|UserManager
name|uMgr
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|SyncContext
name|syncContext
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|uMgr
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastSynced
init|=
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|lastSynced
argument_list|()
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// wait until the synced user is expired
name|waitUntilExpired
argument_list|(
name|uMgr
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|User
operator|.
name|class
argument_list|)
argument_list|,
name|root
argument_list|,
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|getExpirationTime
argument_list|()
argument_list|)
expr_stmt|;
name|PreAuthCredentials
name|creds
init|=
operator|new
name|PreAuthCredentials
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|PreAuthCredentials
operator|.
name|PRE_AUTH_DONE
argument_list|,
name|creds
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|User
name|u
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|u
argument_list|)
expr_stmt|;
comment|// user _should_ be re-synced
name|assertNotEquals
argument_list|(
name|lastSynced
argument_list|,
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|u
argument_list|)
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testExistingExternalNoSync
parameter_list|()
throws|throws
name|Exception
block|{
comment|// prevent expiration of the user
name|syncConfig
operator|.
name|user
argument_list|()
operator|.
name|setExpirationTime
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
comment|// sync user upfront
name|SyncContext
name|syncContext
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|idp
argument_list|,
name|getUserManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|idp
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastSynced
init|=
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|lastSynced
argument_list|()
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PreAuthCredentials
name|creds
init|=
operator|new
name|PreAuthCredentials
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|PreAuthCredentials
operator|.
name|PRE_AUTH_DONE
argument_list|,
name|creds
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|User
name|u
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|u
argument_list|)
expr_stmt|;
comment|// user _should_ not have been re-synced
name|assertEquals
argument_list|(
name|lastSynced
argument_list|,
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|u
argument_list|)
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testForeign
parameter_list|()
throws|throws
name|Exception
block|{
comment|// sync foreign user into the repository
comment|// NOTE: that should be considered a bug by the tool that does the sync
comment|// as it uses an IDP that is not configured with the login-chain!
name|ExternalIdentityProvider
name|foreign
init|=
operator|new
name|TestIdentityProvider
argument_list|(
literal|"foreign"
argument_list|)
decl_stmt|;
name|SyncContext
name|syncContext
init|=
operator|new
name|DefaultSyncContext
argument_list|(
name|syncConfig
argument_list|,
name|foreign
argument_list|,
name|getUserManager
argument_list|(
name|root
argument_list|)
argument_list|,
name|getValueFactory
argument_list|(
name|root
argument_list|)
argument_list|)
decl_stmt|;
name|SyncResult
name|result
init|=
name|syncContext
operator|.
name|sync
argument_list|(
name|foreign
operator|.
name|getUser
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|lastSynced
init|=
name|result
operator|.
name|getIdentity
argument_list|()
operator|.
name|lastSynced
argument_list|()
decl_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|PreAuthCredentials
name|creds
init|=
operator|new
name|PreAuthCredentials
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
decl_stmt|;
comment|// login should succeed due the fact that the  _LoginModuleImpl_ succeeds for
comment|// an existing authorizable if _pre_auth_ is enabled.
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|PreAuthCredentials
operator|.
name|PRE_AUTH_DONE
argument_list|,
name|creds
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
comment|// foreign user _must_ not have been touched by the _ExternalLoginModule_
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|User
name|u
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|u
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|lastSynced
argument_list|,
name|DefaultSyncContext
operator|.
name|createSyncedIdentity
argument_list|(
name|u
argument_list|)
operator|.
name|lastSynced
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testInvalidPreAuthCreds
parameter_list|()
throws|throws
name|Exception
block|{
name|PreAuthCredentials
name|creds
init|=
operator|new
name|PreAuthCredentials
argument_list|(
literal|null
argument_list|)
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{         }
finally|finally
block|{
name|assertEquals
argument_list|(
name|PreAuthCredentials
operator|.
name|PRE_AUTH_FAIL
argument_list|,
name|creds
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|assertNull
argument_list|(
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGuest
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|UserConstants
operator|.
name|DEFAULT_ANONYMOUS_ID
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleLocal
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|testUser
init|=
name|getTestUser
argument_list|()
decl_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|testUser
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSimpleLocalDisabled
parameter_list|()
throws|throws
name|Exception
block|{
name|User
name|testUser
init|=
name|getTestUser
argument_list|()
decl_stmt|;
name|testUser
operator|.
name|disable
argument_list|(
literal|"disable"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|testUser
operator|.
name|getID
argument_list|()
argument_list|,
name|testUser
operator|.
name|getID
argument_list|()
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
init|)
block|{         }
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|LoginException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testSimpleNonExisting
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"nonExisting"
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
init|)
block|{         }
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimpleExternal
parameter_list|()
throws|throws
name|Exception
block|{
comment|// verify that authentication against the IDP succeeds with the given creds.
name|Credentials
name|creds
init|=
operator|new
name|SimpleCredentials
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|ExternalUser
name|externalUser
init|=
name|idp
operator|.
name|authenticate
argument_list|(
name|creds
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|externalUser
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|externalUser
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
comment|// => repo login must also succeed and the user must be synced.
try|try
init|(
name|ContentSession
name|cs
init|=
name|login
argument_list|(
name|creds
argument_list|)
init|)
block|{
name|assertEquals
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|cs
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|refresh
argument_list|()
expr_stmt|;
name|User
name|u
init|=
name|getUserManager
argument_list|(
name|root
argument_list|)
operator|.
name|getAuthorizable
argument_list|(
name|TestIdentityProvider
operator|.
name|ID_TEST_USER
argument_list|,
name|User
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

