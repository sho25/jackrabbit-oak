begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Descriptors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Tracker
import|;
end_import

begin_comment
comment|/**  * An AggregatingDescriptors is an implementation of Descriptors  * that allows to aggregate multiple Descriptors (which are  * provided dynamically via a whiteboard tracker).  */
end_comment

begin_class
specifier|public
class|class
name|AggregatingDescriptors
implements|implements
name|Descriptors
block|{
specifier|private
specifier|final
name|Tracker
argument_list|<
name|Descriptors
argument_list|>
name|tracker
decl_stmt|;
comment|/**      * Create an AggregatingDescriptors which uses descriptors.getServices()      * at method invocation time      */
specifier|public
name|AggregatingDescriptors
parameter_list|(
specifier|final
name|Tracker
argument_list|<
name|Descriptors
argument_list|>
name|tracker
parameter_list|)
block|{
if|if
condition|(
name|tracker
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"tracker must not be null"
argument_list|)
throw|;
block|}
name|this
operator|.
name|tracker
operator|=
name|tracker
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Descriptors
argument_list|>
name|getDescriptors
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Descriptors
argument_list|>
name|descriptors
init|=
name|tracker
operator|.
name|getServices
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|descriptors
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getKeys
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|keys
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|Descriptors
argument_list|>
name|it
init|=
name|getDescriptors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Descriptors
name|descriptors
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collections
operator|.
name|addAll
argument_list|(
name|keys
argument_list|,
name|descriptors
operator|.
name|getKeys
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|keys
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|keys
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isStandardDescriptor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Descriptors
argument_list|>
name|it
init|=
name|getDescriptors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Descriptors
name|descriptors
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|.
name|isStandardDescriptor
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSingleValueDescriptor
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Descriptors
argument_list|>
name|it
init|=
name|getDescriptors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Descriptors
name|descriptors
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|descriptors
operator|.
name|isSingleValueDescriptor
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Value
name|getValue
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Descriptors
argument_list|>
name|it
init|=
name|getDescriptors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Descriptors
name|descriptors
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
name|value
init|=
name|descriptors
operator|.
name|getValue
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Value
index|[]
name|getValues
parameter_list|(
annotation|@
name|Nonnull
name|String
name|key
parameter_list|)
block|{
for|for
control|(
name|Iterator
argument_list|<
name|Descriptors
argument_list|>
name|it
init|=
name|getDescriptors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Descriptors
name|descriptors
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|Value
index|[]
name|values
init|=
name|descriptors
operator|.
name|getValues
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
return|return
name|values
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

