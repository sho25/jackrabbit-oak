begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_comment
comment|/**  * {@code ExternalIdentityRef} defines a reference to an external identity.  */
end_comment

begin_class
specifier|public
class|class
name|ExternalIdentityRef
block|{
specifier|private
specifier|final
name|String
name|id
decl_stmt|;
specifier|private
specifier|final
name|String
name|providerName
decl_stmt|;
specifier|private
specifier|final
name|String
name|string
decl_stmt|;
comment|/**      * Creates a new external identity ref with the given id and provider name      * @param id the id of the identity.      * @param providerName the name of the identity provider      */
specifier|public
name|ExternalIdentityRef
parameter_list|(
annotation|@
name|Nonnull
name|String
name|id
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|providerName
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|providerName
operator|=
name|providerName
expr_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|escape
argument_list|(
name|b
argument_list|,
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|providerName
operator|!=
literal|null
operator|&&
name|providerName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
name|escape
argument_list|(
name|b
argument_list|,
name|providerName
argument_list|)
expr_stmt|;
block|}
name|string
operator|=
name|b
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|/**      * Returns the name of the identity provider.      * @return the name of the identity provider.      */
annotation|@
name|CheckForNull
specifier|public
name|String
name|getProviderName
parameter_list|()
block|{
return|return
name|providerName
return|;
block|}
comment|/**      * Returns the id of the external identity. for example the DN of an LDAP user.      * @return the id      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
comment|/**      * Returns a string representation of this external identity reference      * @return a string representation.      */
annotation|@
name|Nonnull
specifier|public
name|String
name|getString
parameter_list|()
block|{
return|return
name|string
return|;
block|}
comment|/**      * Creates an external identity reference from a string representation.      * @param str the string      * @return the reference      */
specifier|public
specifier|static
name|ExternalIdentityRef
name|fromString
parameter_list|(
annotation|@
name|Nonnull
name|String
name|str
parameter_list|)
block|{
name|int
name|idx
init|=
name|str
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|Text
operator|.
name|unescape
argument_list|(
name|str
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ExternalIdentityRef
argument_list|(
name|Text
operator|.
name|unescape
argument_list|(
name|str
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
argument_list|)
argument_list|,
name|Text
operator|.
name|unescape
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|idx
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Escapes the given string and appends it to the builder.      * @param builder the builder      * @param str the string      */
specifier|private
name|void
name|escape
parameter_list|(
name|StringBuilder
name|builder
parameter_list|,
name|CharSequence
name|str
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|str
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'%'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"%25"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|';'
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"%3b"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"ExternalIdentityRef{"
operator|+
literal|"id='"
operator|+
name|id
operator|+
literal|'\''
operator|+
literal|", providerName='"
operator|+
name|providerName
operator|+
literal|'\''
operator|+
literal|'}'
return|;
block|}
comment|/**      * Tests if the given object is an external identity reference and if it's getString() is equal to this.      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
try|try
block|{
comment|// assuming that we never compare other types of classes
return|return
name|this
operator|==
name|o
operator|||
name|string
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|ExternalIdentityRef
operator|)
name|o
operator|)
operator|.
name|string
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/**      * @return same as {@code this.getString().hashCode()}      */
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|string
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

