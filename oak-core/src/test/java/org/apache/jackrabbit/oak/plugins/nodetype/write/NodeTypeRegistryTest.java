begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_BASE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FOLDER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DATA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_LASTMODIFIED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_FILE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_RESOURCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_LASTMODIFIEDBY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NT_OAK_RESOURCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|MIX_INDEXABLE
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceRegistry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeDefinition
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|nodetype
operator|.
name|NodeTypeTemplate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|CompactNodeTypeDefReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|DefinitionBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|cnd
operator|.
name|TemplateBuilderFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|GlobalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|ReadOnlyNamespaceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|ReadWriteNamespaceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeDefDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|jcr
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|hasItem
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NodeTypeRegistryTest
block|{
specifier|private
name|ContentRepository
name|repository
init|=
literal|null
decl_stmt|;
specifier|private
name|Root
name|root
decl_stmt|;
specifier|private
name|ContentSession
name|session
init|=
literal|null
decl_stmt|;
specifier|static
name|void
name|registerNodeType
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|String
name|resourceName
parameter_list|)
throws|throws
name|IOException
block|{
name|checkArgument
argument_list|(
operator|!
name|Strings
operator|.
name|isNullOrEmpty
argument_list|(
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|InputStream
name|stream
init|=
literal|null
decl_stmt|;
try|try
block|{
name|stream
operator|=
name|NodeTypeRegistryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
name|resourceName
argument_list|)
expr_stmt|;
name|NodeTypeRegistry
operator|.
name|register
argument_list|(
name|root
argument_list|,
name|stream
argument_list|,
name|NodeTypeRegistryTest
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|stream
operator|!=
literal|null
condition|)
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
name|repository
operator|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|TypeEditorProvider
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
name|session
operator|=
name|repository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|instanceof
name|Closeable
condition|)
block|{
operator|(
operator|(
name|Closeable
operator|)
name|repository
operator|)
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|repository
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|CommitFailedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|oakIndexableFailing
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|registerNodeType
argument_list|(
name|root
argument_list|,
literal|"oak3725-1.cnd"
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FOLDER
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oakIndexableSuccessful
parameter_list|()
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|registerNodeType
argument_list|(
name|root
argument_list|,
literal|"oak3725-2.cnd"
argument_list|)
expr_stmt|;
name|Tree
name|test
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_FOLDER
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|of
argument_list|(
name|MIX_INDEXABLE
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|test
operator|.
name|addChild
argument_list|(
literal|"oak:index"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_UNSTRUCTURED
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|oakResource
parameter_list|()
throws|throws
name|Exception
block|{
name|registerNodeType
argument_list|(
name|root
argument_list|,
literal|"oak4567.cnd"
argument_list|)
expr_stmt|;
name|Tree
name|typeRoot
init|=
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
decl_stmt|;
name|Tree
name|test1
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test1"
argument_list|,
name|NT_FILE
argument_list|,
name|typeRoot
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Tree
name|content1
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|test1
argument_list|,
name|JCR_CONTENT
argument_list|,
name|NT_OAK_RESOURCE
argument_list|,
name|typeRoot
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|content1
operator|.
name|setProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|Tree
name|test2
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|,
literal|"test2"
argument_list|,
name|NT_FILE
argument_list|,
name|typeRoot
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|Tree
name|content2
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|test2
argument_list|,
name|JCR_CONTENT
argument_list|,
name|NT_RESOURCE
argument_list|,
name|typeRoot
argument_list|,
literal|"admin"
argument_list|)
decl_stmt|;
name|content2
operator|.
name|setProperty
argument_list|(
name|JCR_DATA
argument_list|,
literal|"hello"
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|test1
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test1"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test1
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|JCR_LASTMODIFIEDBY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test1
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|JCR_LASTMODIFIED
argument_list|)
argument_list|)
expr_stmt|;
comment|//For oak:Resource the uuid property should not get generated
name|assertFalse
argument_list|(
name|test1
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
name|test2
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test2"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test2
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|JCR_LASTMODIFIEDBY
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test2
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|JCR_LASTMODIFIED
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|test2
operator|.
name|getChild
argument_list|(
name|JCR_CONTENT
argument_list|)
operator|.
name|hasProperty
argument_list|(
name|JCR_UUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|registerNodeType
parameter_list|()
throws|throws
name|Exception
block|{
name|registerNodeType
argument_list|(
name|root
argument_list|,
literal|"oak6440-1.cnd"
argument_list|)
expr_stmt|;
name|NodeTypeManager
name|readOnlyNtMgr
init|=
operator|new
name|ReadOnlyNodeTypeManager
argument_list|()
block|{
specifier|private
name|Root
name|r
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|Tree
name|getTypes
parameter_list|()
block|{
return|return
name|r
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
return|;
block|}
block|}
decl_stmt|;
name|NodeTypeManager
name|ntMgr
init|=
operator|new
name|ReadWriteNodeTypeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|getTypes
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|protected
name|Root
name|getWriteRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
block|}
decl_stmt|;
name|ValueFactory
name|valueFactory
init|=
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|GlobalNameMapper
argument_list|(
name|root
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NamespaceRegistry
name|nsRegistry
init|=
operator|new
name|ReadOnlyNamespaceRegistry
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|DefinitionBuilderFactory
argument_list|<
name|NodeTypeTemplate
argument_list|,
name|NamespaceRegistry
argument_list|>
name|factory
init|=
operator|new
name|TemplateBuilderFactory
argument_list|(
name|ntMgr
argument_list|,
name|valueFactory
argument_list|,
name|nsRegistry
argument_list|)
decl_stmt|;
name|InputStream
name|in
init|=
name|NodeTypeRegistryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"oak6440-2.cnd"
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|NodeTypeTemplate
argument_list|>
name|templates
decl_stmt|;
try|try
block|{
name|CompactNodeTypeDefReader
argument_list|<
name|NodeTypeTemplate
argument_list|,
name|NamespaceRegistry
argument_list|>
name|reader
init|=
operator|new
name|CompactNodeTypeDefReader
argument_list|<
name|NodeTypeTemplate
argument_list|,
name|NamespaceRegistry
argument_list|>
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
literal|"oak6440-2.cnd"
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|templates
operator|=
name|reader
operator|.
name|getNodeTypeDefinitions
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|NodeTypeTemplate
name|t
range|:
name|templates
control|)
block|{
name|NodeTypeTemplateImpl
name|template
decl_stmt|;
if|if
condition|(
name|t
operator|instanceof
name|NodeTypeTemplateImpl
condition|)
block|{
name|template
operator|=
operator|(
name|NodeTypeTemplateImpl
operator|)
name|t
expr_stmt|;
block|}
else|else
block|{
name|template
operator|=
operator|new
name|NodeTypeTemplateImpl
argument_list|(
operator|new
name|GlobalNameMapper
argument_list|(
name|root
argument_list|)
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
name|template
operator|.
name|writeTo
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|NodeTypeDefinition
name|beforeDef
init|=
name|readOnlyNtMgr
operator|.
name|getNodeType
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|NodeTypeDefinition
name|afterDef
init|=
name|ntMgr
operator|.
name|getNodeType
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|NodeTypeDefDiff
name|diff
init|=
name|NodeTypeDefDiff
operator|.
name|create
argument_list|(
name|beforeDef
argument_list|,
name|afterDef
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|isMajor
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// OAK-7886
annotation|@
name|Ignore
argument_list|(
literal|"OAK-7886"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|reRegisterNtResource
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeTypeManager
name|ntMgr
init|=
operator|new
name|ReadWriteNodeTypeManager
argument_list|()
block|{
annotation|@
name|Override
specifier|protected
name|Tree
name|getTypes
parameter_list|()
block|{
return|return
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Root
name|getWriteRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
block|}
decl_stmt|;
name|ValueFactory
name|vf
init|=
operator|new
name|ValueFactoryImpl
argument_list|(
name|root
argument_list|,
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|GlobalNameMapper
argument_list|(
name|root
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|NamespaceRegistry
name|nsReg
init|=
operator|new
name|ReadWriteNamespaceRegistry
argument_list|(
name|root
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|Root
name|getWriteRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
block|}
decl_stmt|;
name|DefinitionBuilderFactory
argument_list|<
name|NodeTypeTemplate
argument_list|,
name|NamespaceRegistry
argument_list|>
name|factory
init|=
operator|new
name|TemplateBuilderFactory
argument_list|(
name|ntMgr
argument_list|,
name|vf
argument_list|,
name|nsReg
argument_list|)
decl_stmt|;
name|NodeType
name|ntResource
init|=
name|ntMgr
operator|.
name|getNodeType
argument_list|(
name|NT_RESOURCE
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|supertypeNames
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ntResource
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
decl_stmt|;
name|assertThat
argument_list|(
name|supertypeNames
argument_list|,
name|hasItem
argument_list|(
name|NT_BASE
argument_list|)
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|NodeTypeTemplate
argument_list|>
name|templates
decl_stmt|;
name|InputStream
name|in
init|=
name|NodeTypeRegistryTest
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"ntResource.cnd"
argument_list|)
decl_stmt|;
try|try
block|{
name|CompactNodeTypeDefReader
argument_list|<
name|NodeTypeTemplate
argument_list|,
name|NamespaceRegistry
argument_list|>
name|reader
init|=
operator|new
name|CompactNodeTypeDefReader
argument_list|<
name|NodeTypeTemplate
argument_list|,
name|NamespaceRegistry
argument_list|>
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|in
argument_list|,
name|UTF_8
argument_list|)
argument_list|,
literal|"ntResource.cnd"
argument_list|,
name|factory
argument_list|)
decl_stmt|;
name|templates
operator|=
name|reader
operator|.
name|getNodeTypeDefinitions
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|NodeTypeTemplate
name|t
range|:
name|templates
control|)
block|{
name|ntMgr
operator|.
name|registerNodeType
argument_list|(
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|ntResource
operator|=
name|ntMgr
operator|.
name|getNodeType
argument_list|(
name|NT_RESOURCE
argument_list|)
expr_stmt|;
name|supertypeNames
operator|=
name|Arrays
operator|.
name|asList
argument_list|(
name|ntResource
operator|.
name|getDeclaredSupertypeNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertThat
argument_list|(
name|supertypeNames
argument_list|,
name|hasItem
argument_list|(
name|NT_BASE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

