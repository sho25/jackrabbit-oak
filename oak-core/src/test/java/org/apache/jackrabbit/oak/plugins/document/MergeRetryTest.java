begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|blobs
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
operator|.
name|KernelNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|memory
operator|.
name|MemoryDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for conflicts introduced by commit hook, which can be overcome by  * retrying BranchState.merge().  */
end_comment

begin_class
specifier|public
class|class
name|MergeRetryTest
block|{
comment|// this hook adds a 'foo' child if it does not exist
specifier|private
specifier|static
specifier|final
name|CommitHook
name|HOOK
init|=
operator|new
name|EditorHook
argument_list|(
operator|new
name|EditorProvider
argument_list|()
block|{
annotation|@
name|CheckForNull
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
specifier|final
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|DefaultEditor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
name|builder
operator|.
name|hasChildNode
argument_list|(
literal|"foo"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|;
block|}
block|}
argument_list|)
decl_stmt|;
comment|/**      * Test for OAK-1198      */
annotation|@
name|Test
specifier|public
name|void
name|retryInMemory
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|MemoryBlobStore
name|bs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|MongoMK
name|mk1
init|=
name|createMK
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|,
name|ds
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|MongoMK
name|mk2
init|=
name|createMK
argument_list|(
literal|2
argument_list|,
literal|1000
argument_list|,
name|ds
argument_list|,
name|bs
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeStore
name|ns1
init|=
operator|new
name|KernelNodeStore
argument_list|(
name|mk1
argument_list|)
decl_stmt|;
name|NodeStore
name|ns2
init|=
operator|new
name|KernelNodeStore
argument_list|(
name|mk2
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder1
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder2
operator|.
name|child
argument_list|(
literal|"qux"
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|HOOK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|builder2
argument_list|,
name|HOOK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mk1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|mk2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Test for OAK-1202      */
annotation|@
name|Test
specifier|public
name|void
name|retryPersisted
parameter_list|()
throws|throws
name|Exception
block|{
name|MemoryDocumentStore
name|ds
init|=
operator|new
name|MemoryDocumentStore
argument_list|()
decl_stmt|;
name|MemoryBlobStore
name|bs
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|MongoMK
name|mk1
init|=
name|createMK
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|,
name|ds
argument_list|,
name|bs
argument_list|)
decl_stmt|;
name|MongoMK
name|mk2
init|=
name|createMK
argument_list|(
literal|2
argument_list|,
literal|1000
argument_list|,
name|ds
argument_list|,
name|bs
argument_list|)
decl_stmt|;
try|try
block|{
name|NodeStore
name|ns1
init|=
operator|new
name|KernelNodeStore
argument_list|(
name|mk1
argument_list|)
decl_stmt|;
name|NodeStore
name|ns2
init|=
operator|new
name|KernelNodeStore
argument_list|(
name|mk2
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder1
init|=
name|ns1
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createTree
argument_list|(
name|builder1
operator|.
name|child
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|NodeBuilder
name|builder2
init|=
name|ns2
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createTree
argument_list|(
name|builder2
operator|.
name|child
argument_list|(
literal|"qux"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ns1
operator|.
name|merge
argument_list|(
name|builder1
argument_list|,
name|HOOK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|ns2
operator|.
name|merge
argument_list|(
name|builder2
argument_list|,
name|HOOK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|mk1
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|mk2
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|createTree
parameter_list|(
name|NodeBuilder
name|node
parameter_list|,
name|int
name|level
parameter_list|)
block|{
if|if
condition|(
name|level
operator|--
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|NodeBuilder
name|child
init|=
name|node
operator|.
name|child
argument_list|(
literal|"node-"
operator|+
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<
literal|10
condition|;
name|p
operator|++
control|)
block|{
name|child
operator|.
name|setProperty
argument_list|(
literal|"p-"
operator|+
name|p
argument_list|,
literal|"value"
argument_list|)
expr_stmt|;
block|}
name|createTree
argument_list|(
name|child
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|MongoMK
name|createMK
parameter_list|(
name|int
name|clusterId
parameter_list|,
name|int
name|asyncDelay
parameter_list|,
name|DocumentStore
name|ds
parameter_list|,
name|BlobStore
name|bs
parameter_list|)
block|{
return|return
operator|new
name|MongoMK
operator|.
name|Builder
argument_list|()
operator|.
name|setDocumentStore
argument_list|(
name|ds
argument_list|)
operator|.
name|setBlobStore
argument_list|(
name|bs
argument_list|)
operator|.
name|setClusterId
argument_list|(
name|clusterId
argument_list|)
operator|.
name|setAsyncDelay
argument_list|(
name|asyncDelay
argument_list|)
operator|.
name|open
argument_list|()
return|;
block|}
block|}
end_class

end_unit

