begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|AndImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ComparisonImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|ConstraintImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|DescendantNodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|FullTextSearchImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|ast
operator|.
name|OrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|QueryCostOverheadTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|getCostOverhead
parameter_list|()
block|{
name|QueryImpl
name|query
decl_stmt|;
name|UnionQueryImpl
name|union
decl_stmt|;
name|ConstraintImpl
name|c
decl_stmt|,
name|c1
decl_stmt|,
name|c2
decl_stmt|,
name|c3
decl_stmt|,
name|c4
decl_stmt|,
name|c5
decl_stmt|;
name|c1
operator|=
operator|new
name|ComparisonImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|union
operator|=
operator|new
name|UnionQueryImpl
argument_list|(
literal|false
argument_list|,
name|createQuery
argument_list|(
name|c1
argument_list|)
argument_list|,
name|createQuery
argument_list|(
name|c2
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"we always expect false from a `UnionQueryImpl`"
argument_list|,
name|union
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
name|c1
operator|=
operator|new
name|ComparisonImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|OrImpl
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|)
expr_stmt|;
name|query
operator|=
name|createQuery
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
name|c1
operator|=
operator|new
name|ComparisonImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c3
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|OrImpl
argument_list|(
name|of
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|createQuery
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c3
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c4
operator|=
operator|new
name|ComparisonImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c1
operator|=
operator|new
name|OrImpl
argument_list|(
name|of
argument_list|(
name|c2
argument_list|,
name|c3
argument_list|,
name|c4
argument_list|)
argument_list|)
expr_stmt|;
name|c5
operator|=
name|mock
argument_list|(
name|DescendantNodeImpl
operator|.
name|class
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|AndImpl
argument_list|(
name|c1
argument_list|,
name|c5
argument_list|)
expr_stmt|;
name|query
operator|=
name|createQuery
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|query
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|query
operator|=
name|createQuery
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|query
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
name|c1
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c3
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|OrImpl
argument_list|(
name|of
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|createQuery
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|query
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
name|c1
operator|=
operator|new
name|ComparisonImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c3
operator|=
operator|new
name|FullTextSearchImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|AndImpl
argument_list|(
name|of
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|createQuery
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|query
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
name|c1
operator|=
operator|new
name|ComparisonImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c2
operator|=
operator|new
name|ComparisonImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|c
operator|=
operator|new
name|AndImpl
argument_list|(
name|of
argument_list|(
name|c1
argument_list|,
name|c2
argument_list|,
name|c3
argument_list|)
argument_list|)
expr_stmt|;
name|query
operator|=
name|createQuery
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|query
operator|.
name|containsUnfilteredFullTextCondition
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QueryImpl
name|createQuery
parameter_list|(
name|ConstraintImpl
name|c
parameter_list|)
block|{
return|return
operator|new
name|QueryImpl
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|c
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

