begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|filter
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|ReferenceQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|WeakReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NavigableMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentSkipListMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * Contains commit information about a branch and its base revision.  */
end_comment

begin_class
class|class
name|Branch
block|{
comment|/**      * The commits to the branch      */
specifier|private
specifier|final
name|ConcurrentSkipListMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|commits
decl_stmt|;
comment|/**      * The initial base revision of this branch.      */
specifier|private
specifier|final
name|Revision
name|base
decl_stmt|;
comment|/**      * The branch reference.      */
specifier|private
specifier|final
name|BranchReference
name|ref
decl_stmt|;
comment|/**      * Create a new branch instance with an initial set of commits and a given      * base revision. The life time of this branch can be controlled with      * the {@code guard} parameter. Once the {@code guard} object becomes weakly      * reachable, the {@link BranchReference} for this branch is appended to      * the passed {@code queue}. No {@link BranchReference} is appended if the      * passed {@code guard} is {@code null}.      *      * @param commits the initial branch commits.      * @param base the base commit.      * @param queue a {@link BranchReference} to this branch will be appended to      *              this queue when {@code guard} becomes weakly reachable.      * @param guard controls the life time of this branch.      * @throws IllegalArgumentException if base is a branch revision.      */
name|Branch
parameter_list|(
annotation|@
name|Nonnull
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|commits
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|base
parameter_list|,
annotation|@
name|Nonnull
name|ReferenceQueue
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|,
annotation|@
name|Nullable
name|Object
name|guard
parameter_list|)
block|{
name|checkArgument
argument_list|(
operator|!
name|checkNotNull
argument_list|(
name|base
argument_list|)
operator|.
name|isBranch
argument_list|()
argument_list|,
literal|"base is not a trunk revision: %s"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|commits
operator|=
operator|new
name|ConcurrentSkipListMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
argument_list|(
name|commits
operator|.
name|comparator
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|commits
control|)
block|{
name|this
operator|.
name|commits
operator|.
name|put
argument_list|(
name|r
operator|.
name|asBranchRevision
argument_list|()
argument_list|,
operator|new
name|BranchCommitImpl
argument_list|(
name|base
argument_list|,
name|r
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|guard
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|ref
operator|=
operator|new
name|BranchReference
argument_list|(
name|queue
argument_list|,
name|this
argument_list|,
name|guard
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|ref
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/**      * @return the initial base of this branch.      */
annotation|@
name|Nonnull
name|Revision
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
comment|/**      * Returns the base revision for the given branch revision<code>r</code>.      *      * @param r revision of a commit in this branch.      * @return the base revision for<code>r</code>.      * @throws IllegalArgumentException if<code>r</code> is not a commit of      *                                  this branch.      */
annotation|@
name|Nonnull
name|Revision
name|getBase
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|r
parameter_list|)
block|{
name|BranchCommit
name|c
init|=
name|commits
operator|.
name|get
argument_list|(
name|checkNotNull
argument_list|(
name|r
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Revision "
operator|+
name|r
operator|+
literal|" is not a commit in this branch"
argument_list|)
throw|;
block|}
return|return
name|c
operator|.
name|getBase
argument_list|()
return|;
block|}
comment|/**      * Rebases the last commit of this branch to the given revision.      *      * @param head the new head of the branch.      * @param base rebase to this revision.      * @throws IllegalArgumentException if head is a trunk revision or base is a      *                                  branch revision.      */
name|void
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|head
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|base
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|checkNotNull
argument_list|(
name|head
argument_list|)
operator|.
name|isBranch
argument_list|()
argument_list|,
literal|"Not a branch revision: %s"
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|checkNotNull
argument_list|(
name|base
argument_list|)
operator|.
name|isBranch
argument_list|()
argument_list|,
literal|"Not a trunk revision: %s"
argument_list|,
name|base
argument_list|)
expr_stmt|;
name|Revision
name|last
init|=
name|commits
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|commits
operator|.
name|comparator
argument_list|()
operator|.
name|compare
argument_list|(
name|head
argument_list|,
name|last
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|head
argument_list|,
operator|new
name|RebaseCommit
argument_list|(
name|base
argument_list|,
name|head
argument_list|,
name|commits
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Adds a new commit with revision<code>r</code> to this branch.      *      * @param r the revision of the branch commit to add.      * @throws IllegalArgumentException if r is not a branch revision.      */
name|void
name|addCommit
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|r
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|checkNotNull
argument_list|(
name|r
argument_list|)
operator|.
name|isBranch
argument_list|()
argument_list|,
literal|"Not a branch revision: %s"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|Revision
name|last
init|=
name|commits
operator|.
name|lastKey
argument_list|()
decl_stmt|;
name|checkArgument
argument_list|(
name|commits
operator|.
name|comparator
argument_list|()
operator|.
name|compare
argument_list|(
name|r
argument_list|,
name|last
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|commits
operator|.
name|put
argument_list|(
name|r
argument_list|,
operator|new
name|BranchCommitImpl
argument_list|(
name|commits
operator|.
name|get
argument_list|(
name|last
argument_list|)
operator|.
name|getBase
argument_list|()
argument_list|,
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return the commits to this branch.      */
name|SortedSet
argument_list|<
name|Revision
argument_list|>
name|getCommits
parameter_list|()
block|{
return|return
name|commits
operator|.
name|keySet
argument_list|()
return|;
block|}
comment|/**      * @return<code>true</code> if this branch contains any commits;      *<code>false</code> otherwise.      */
name|boolean
name|hasCommits
parameter_list|()
block|{
return|return
operator|!
name|commits
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|/**      * Checks if this branch contains a commit with the given revision.      *      * @param r the revision of a commit.      * @return<code>true</code> if this branch contains a commit with the given      *         revision;<code>false</code> otherwise.      */
name|boolean
name|containsCommit
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|r
parameter_list|)
block|{
return|return
name|commits
operator|.
name|containsKey
argument_list|(
name|checkNotNull
argument_list|(
name|r
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the branch commit with the given or {@code null} if it does not      * exist.      *      * @param r the revision of a commit.      * @return the branch commit or {@code null} if it doesn't exist.      */
annotation|@
name|CheckForNull
name|BranchCommit
name|getCommit
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|r
parameter_list|)
block|{
return|return
name|commits
operator|.
name|get
argument_list|(
name|checkNotNull
argument_list|(
name|r
argument_list|)
operator|.
name|asBranchRevision
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * @return the branch reference or {@code null} if no guard object was      *         passed to the constructor of this branch.       */
annotation|@
name|CheckForNull
name|BranchReference
name|getRef
parameter_list|()
block|{
return|return
name|ref
return|;
block|}
comment|/**      * Removes the commit with the given revision<code>r</code>. Does nothing      * if there is no such commit.      *      * @param r the revision of the commit to remove.      * @throws IllegalArgumentException if r is not a branch revision.      */
specifier|public
name|void
name|removeCommit
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|r
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|checkNotNull
argument_list|(
name|r
argument_list|)
operator|.
name|isBranch
argument_list|()
argument_list|,
literal|"Not a branch revision: %s"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|commits
operator|.
name|remove
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
comment|/**      * Applies all unsaved modification of this branch to the given collection      * of unsaved trunk modifications with the given merge commit revision.      *      * @param trunk the unsaved trunk modifications.      * @param mergeCommit the revision of the merge commit.      */
specifier|public
name|void
name|applyTo
parameter_list|(
annotation|@
name|Nonnull
name|UnsavedModifications
name|trunk
parameter_list|,
annotation|@
name|Nonnull
name|Revision
name|mergeCommit
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|trunk
argument_list|)
expr_stmt|;
for|for
control|(
name|BranchCommit
name|c
range|:
name|commits
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|applyTo
argument_list|(
name|trunk
argument_list|,
name|mergeCommit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Gets the most recent unsaved last revision at<code>readRevision</code>      * or earlier in this branch for the given<code>path</code>. Documents with      * explicit updates are not tracked and this method may return {@code null}.      *      * @param path         the path of a node.      * @param readRevision the read revision.      * @return the most recent unsaved last revision or<code>null</code> if      *         there is none in this branch.      */
annotation|@
name|CheckForNull
specifier|public
name|Revision
name|getUnsavedLastRevision
parameter_list|(
name|String
name|path
parameter_list|,
name|Revision
name|readRevision
parameter_list|)
block|{
name|readRevision
operator|=
name|readRevision
operator|.
name|asBranchRevision
argument_list|()
expr_stmt|;
for|for
control|(
name|Revision
name|r
range|:
name|commits
operator|.
name|descendingKeySet
argument_list|()
control|)
block|{
if|if
condition|(
name|readRevision
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|<
literal|0
condition|)
block|{
continue|continue;
block|}
name|BranchCommit
name|c
init|=
name|commits
operator|.
name|get
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isModified
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|r
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param rev the revision to check.      * @return {@code true} if the given revision is the head of this branch,      *          {@code false} otherwise.      */
specifier|public
name|boolean
name|isHead
parameter_list|(
annotation|@
name|Nonnull
name|Revision
name|rev
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|checkNotNull
argument_list|(
name|rev
argument_list|)
operator|.
name|isBranch
argument_list|()
argument_list|,
literal|"Not a branch revision: %s"
argument_list|,
name|rev
argument_list|)
expr_stmt|;
return|return
name|checkNotNull
argument_list|(
name|rev
argument_list|)
operator|.
name|equals
argument_list|(
name|commits
operator|.
name|lastKey
argument_list|()
argument_list|)
return|;
block|}
comment|/**      * Returns the modified paths since the base revision of this branch until      * the given branch revision {@code r} (inclusive).      *      * @param r a commit on this branch.      * @return modified paths until {@code r}.      * @throws IllegalArgumentException if r is not a branch revision.      */
name|Iterable
argument_list|<
name|String
argument_list|>
name|getModifiedPathsUntil
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|Revision
name|r
parameter_list|)
block|{
name|checkArgument
argument_list|(
name|checkNotNull
argument_list|(
name|r
argument_list|)
operator|.
name|isBranch
argument_list|()
argument_list|,
literal|"Not a branch revision: %s"
argument_list|,
name|r
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|commits
operator|.
name|containsKey
argument_list|(
name|r
argument_list|)
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
name|Iterable
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|paths
init|=
name|transform
argument_list|(
name|filter
argument_list|(
name|commits
operator|.
name|entrySet
argument_list|()
argument_list|,
operator|new
name|Predicate
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|input
parameter_list|)
block|{
return|return
operator|!
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|isRebase
argument_list|()
operator|&&
name|input
operator|.
name|getKey
argument_list|()
operator|.
name|compareRevisionTime
argument_list|(
name|r
argument_list|)
operator|<=
literal|0
return|;
block|}
block|}
argument_list|)
argument_list|,
operator|new
name|Function
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|input
parameter_list|)
block|{
return|return
name|input
operator|.
name|getValue
argument_list|()
operator|.
name|getModifiedPaths
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|paths
argument_list|)
return|;
block|}
comment|/**      * Information about a commit within a branch.      */
specifier|abstract
specifier|static
class|class
name|BranchCommit
implements|implements
name|LastRevTracker
block|{
specifier|protected
specifier|final
name|Revision
name|base
decl_stmt|;
specifier|protected
specifier|final
name|Revision
name|commit
decl_stmt|;
name|BranchCommit
parameter_list|(
name|Revision
name|base
parameter_list|,
name|Revision
name|commit
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
name|this
operator|.
name|commit
operator|=
name|commit
expr_stmt|;
block|}
name|Revision
name|getBase
parameter_list|()
block|{
return|return
name|base
return|;
block|}
specifier|abstract
name|void
name|applyTo
parameter_list|(
name|UnsavedModifications
name|trunk
parameter_list|,
name|Revision
name|commit
parameter_list|)
function_decl|;
specifier|abstract
name|boolean
name|isModified
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
specifier|abstract
name|Iterable
argument_list|<
name|String
argument_list|>
name|getModifiedPaths
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isRebase
parameter_list|()
function_decl|;
block|}
comment|/**      * Implements a regular branch commit.      */
specifier|private
specifier|static
class|class
name|BranchCommitImpl
extends|extends
name|BranchCommit
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|modifications
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|BranchCommitImpl
parameter_list|(
name|Revision
name|base
parameter_list|,
name|Revision
name|commit
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|applyTo
parameter_list|(
name|UnsavedModifications
name|trunk
parameter_list|,
name|Revision
name|commit
parameter_list|)
block|{
for|for
control|(
name|String
name|p
range|:
name|modifications
control|)
block|{
name|trunk
operator|.
name|put
argument_list|(
name|p
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|isModified
parameter_list|(
name|String
name|path
parameter_list|)
block|{
comment|// TODO: rather pass NodeDocument?
return|return
name|modifications
operator|.
name|contains
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|String
argument_list|>
name|getModifiedPaths
parameter_list|()
block|{
return|return
name|modifications
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isRebase
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|//------------------< LastRevTracker>----------------------------------
annotation|@
name|Override
specifier|public
name|void
name|track
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|modifications
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"B ("
operator|+
name|modifications
operator|.
name|size
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|RebaseCommit
extends|extends
name|BranchCommit
block|{
specifier|private
specifier|final
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|previous
decl_stmt|;
name|RebaseCommit
parameter_list|(
name|Revision
name|base
parameter_list|,
name|Revision
name|commit
parameter_list|,
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|previous
parameter_list|)
block|{
name|super
argument_list|(
name|base
argument_list|,
name|commit
argument_list|)
expr_stmt|;
name|this
operator|.
name|previous
operator|=
name|squash
argument_list|(
name|previous
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
name|void
name|applyTo
parameter_list|(
name|UnsavedModifications
name|trunk
parameter_list|,
name|Revision
name|commit
parameter_list|)
block|{
for|for
control|(
name|BranchCommit
name|c
range|:
name|previous
operator|.
name|values
argument_list|()
control|)
block|{
name|c
operator|.
name|applyTo
argument_list|(
name|trunk
argument_list|,
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
name|boolean
name|isModified
parameter_list|(
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|BranchCommit
name|c
range|:
name|previous
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|c
operator|.
name|isModified
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|protected
name|boolean
name|isRebase
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|Iterable
argument_list|<
name|String
argument_list|>
name|getModifiedPaths
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
name|paths
init|=
name|transform
argument_list|(
name|previous
operator|.
name|values
argument_list|()
argument_list|,
operator|new
name|Function
argument_list|<
name|BranchCommit
argument_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|apply
parameter_list|(
name|BranchCommit
name|branchCommit
parameter_list|)
block|{
return|return
name|branchCommit
operator|.
name|getModifiedPaths
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|Iterables
operator|.
name|concat
argument_list|(
name|paths
argument_list|)
return|;
block|}
comment|/**          * Filter out the RebaseCommits as they are just container of previous BranchCommit          *          * @param previous branch commit history          * @return filtered branch history only containing non rebase commits          */
specifier|private
specifier|static
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|squash
parameter_list|(
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|previous
parameter_list|)
block|{
name|NavigableMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|result
init|=
operator|new
name|TreeMap
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
argument_list|(
name|previous
operator|.
name|comparator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Revision
argument_list|,
name|BranchCommit
argument_list|>
name|e
range|:
name|previous
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|e
operator|.
name|getValue
argument_list|()
operator|.
name|isRebase
argument_list|()
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|,
name|e
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|//------------------< LastRevTracker>----------------------------------
annotation|@
name|Override
specifier|public
name|void
name|track
parameter_list|(
name|String
name|path
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"RebaseCommit is read-only"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"R ("
operator|+
name|previous
operator|.
name|size
argument_list|()
operator|+
literal|")"
return|;
block|}
block|}
specifier|final
specifier|static
class|class
name|BranchReference
extends|extends
name|WeakReference
argument_list|<
name|Object
argument_list|>
block|{
specifier|private
specifier|final
name|Branch
name|branch
decl_stmt|;
specifier|private
name|BranchReference
parameter_list|(
annotation|@
name|Nonnull
name|ReferenceQueue
argument_list|<
name|Object
argument_list|>
name|queue
parameter_list|,
annotation|@
name|Nonnull
name|Branch
name|branch
parameter_list|,
annotation|@
name|Nonnull
name|Object
name|referent
parameter_list|)
block|{
name|super
argument_list|(
name|checkNotNull
argument_list|(
name|referent
argument_list|)
argument_list|,
name|queue
argument_list|)
expr_stmt|;
name|this
operator|.
name|branch
operator|=
name|checkNotNull
argument_list|(
name|branch
argument_list|)
expr_stmt|;
block|}
name|Branch
name|getBranch
parameter_list|()
block|{
return|return
name|branch
return|;
block|}
block|}
block|}
end_class

end_unit

