begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|SessionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Support deprecation of JCR locking as per OAK-6421.  */
end_comment

begin_class
specifier|public
class|class
name|LockDeprecation
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|LockDeprecation
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LOCKSUPPORT
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"oak.locksupport"
argument_list|,
literal|"deprecated"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|ISLOCKINGSUPPORTED
init|=
operator|!
operator|(
literal|"disabled"
operator|.
name|equals
argument_list|(
name|LOCKSUPPORT
argument_list|)
operator|)
decl_stmt|;
specifier|private
name|LockDeprecation
parameter_list|()
block|{     }
specifier|private
specifier|static
specifier|final
name|int
name|LOGDEPTH
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
name|AtomicBoolean
name|NOTWARNEDYET
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Set
argument_list|<
name|String
argument_list|>
name|IGNOREDCLASSES
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|String
index|[]
block|{
name|Thread
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|LockDeprecation
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|LockManagerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|NodeImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
block|,
name|SessionImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|void
name|logCall
parameter_list|(
name|String
name|operation
parameter_list|)
throws|throws
name|UnsupportedRepositoryOperationException
block|{
if|if
condition|(
operator|!
name|ISLOCKINGSUPPORTED
condition|)
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"Support for JCR Locking is disabled (see OAK-6421 for further information)"
argument_list|)
throw|;
block|}
else|else
block|{
name|boolean
name|firstInvocation
init|=
name|NOTWARNEDYET
operator|.
name|getAndSet
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|firstInvocation
condition|)
block|{
name|String
name|explanation
init|=
literal|"Support for JCR Locking is deprecated and will be disabled in a future version of Jackrabbit Oak (see OAK-6421 for further information)"
decl_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|explanation
operator|+
literal|" - "
operator|+
name|createLogMessage
argument_list|(
name|operation
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
name|createLogMessage
argument_list|(
name|operation
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|isLockingSupported
parameter_list|()
block|{
return|return
name|ISLOCKINGSUPPORTED
return|;
block|}
specifier|private
specifier|static
name|String
name|createLogMessage
parameter_list|(
name|String
name|operation
parameter_list|)
block|{
name|StackTraceElement
name|elements
index|[]
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
name|StringBuilder
name|b
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|b
operator|.
name|append
argument_list|(
literal|"operation '"
operator|+
name|operation
operator|+
literal|"' called from:"
argument_list|)
expr_stmt|;
name|int
name|depth
init|=
literal|0
decl_stmt|;
for|for
control|(
name|StackTraceElement
name|e
range|:
name|elements
control|)
block|{
if|if
condition|(
name|depth
operator|<
name|LOGDEPTH
condition|)
block|{
name|String
name|cn
init|=
name|e
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|IGNOREDCLASSES
operator|.
name|contains
argument_list|(
name|cn
argument_list|)
operator|&&
operator|!
name|cn
operator|.
name|startsWith
argument_list|(
literal|"sun.reflect"
argument_list|)
condition|)
block|{
name|b
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
operator|.
name|append
argument_list|(
name|e
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|depth
operator|+=
literal|1
expr_stmt|;
block|}
block|}
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

