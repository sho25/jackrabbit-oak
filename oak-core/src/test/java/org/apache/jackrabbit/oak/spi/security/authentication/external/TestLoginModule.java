begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_comment
comment|/**  * ExternalLoginModuleImpl... TODO  */
end_comment

begin_class
specifier|public
class|class
name|TestLoginModule
extends|extends
name|ExternalLoginModule
block|{
specifier|static
name|Set
argument_list|<
name|ExternalGroup
argument_list|>
name|externalGroups
init|=
operator|new
name|HashSet
argument_list|<
name|ExternalGroup
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|externalGroups
operator|.
name|add
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"a"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"aa"
block|,
literal|"aaa"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|externalGroups
operator|.
name|add
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"b"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|externalGroups
operator|.
name|add
argument_list|(
operator|new
name|TestGroup
argument_list|(
literal|"c"
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
static|static
block|{
name|props
operator|.
name|put
argument_list|(
literal|"name"
argument_list|,
literal|"Test User"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"profile/name"
argument_list|,
literal|"Public Name"
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"profile/age"
argument_list|,
literal|72
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
literal|"./email"
argument_list|,
literal|"test@testuser.com"
argument_list|)
expr_stmt|;
block|}
specifier|static
name|ExternalUser
name|externalUser
init|=
operator|new
name|TestUser
argument_list|(
literal|"testUser"
argument_list|,
name|externalGroups
argument_list|,
name|props
argument_list|)
decl_stmt|;
name|boolean
name|success
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|loginSucceeded
parameter_list|()
block|{
return|return
name|success
return|;
block|}
annotation|@
name|Override
specifier|protected
name|ExternalUser
name|getExternalUser
parameter_list|()
block|{
return|return
name|externalUser
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
name|Credentials
name|creds
init|=
name|getCredentials
argument_list|()
decl_stmt|;
if|if
condition|(
name|creds
operator|instanceof
name|SimpleCredentials
condition|)
block|{
if|if
condition|(
name|externalUser
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|SimpleCredentials
operator|)
name|creds
operator|)
operator|.
name|getUserID
argument_list|()
argument_list|)
condition|)
block|{
name|success
operator|=
literal|true
expr_stmt|;
return|return
name|success
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Invalid user"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
specifier|static
class|class
name|TestUser
implements|implements
name|ExternalUser
block|{
specifier|private
specifier|final
name|String
name|userId
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|ExternalGroup
argument_list|>
name|groups
decl_stmt|;
specifier|private
specifier|final
name|Map
name|props
decl_stmt|;
specifier|private
name|TestUser
parameter_list|(
name|String
name|userId
parameter_list|,
name|Set
argument_list|<
name|ExternalGroup
argument_list|>
name|groups
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
parameter_list|)
block|{
name|this
operator|.
name|userId
operator|=
name|userId
expr_stmt|;
name|this
operator|.
name|groups
operator|=
name|groups
expr_stmt|;
name|this
operator|.
name|props
operator|=
name|props
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|userId
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
operator|new
name|PrincipalImpl
argument_list|(
name|userId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ExternalGroup
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|groups
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|getProperties
parameter_list|()
block|{
return|return
name|props
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestGroup
extends|extends
name|TestUser
implements|implements
name|ExternalGroup
block|{
specifier|private
specifier|final
name|String
index|[]
name|groupNames
decl_stmt|;
specifier|private
name|TestGroup
parameter_list|(
name|String
name|id
parameter_list|,
name|String
index|[]
name|groupNames
parameter_list|)
block|{
name|super
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
expr|<
name|ExternalGroup
operator|>
name|emptySet
argument_list|()
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupNames
operator|=
name|groupNames
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|ExternalGroup
argument_list|>
name|getGroups
parameter_list|()
block|{
name|Set
argument_list|<
name|ExternalGroup
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|ExternalGroup
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|gn
range|:
name|groupNames
control|)
block|{
name|groups
operator|.
name|add
argument_list|(
operator|new
name|TestGroup
argument_list|(
name|gn
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groups
return|;
block|}
block|}
block|}
end_class

end_unit

