begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|sort
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|LineIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Utility class to store a list of string and perform sort on that. For small size  * the list would be maintained in memory. If the size crosses the required threshold then  * the sorting would be performed externally  */
end_comment

begin_class
specifier|public
class|class
name|StringSort
implements|implements
name|Closeable
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|BATCH_SIZE
init|=
literal|2048
decl_stmt|;
specifier|private
specifier|final
name|int
name|overflowToDiskThreshold
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|ids
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|long
name|size
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|inMemBatch
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|useFile
decl_stmt|;
specifier|private
name|PersistentState
name|persistentState
decl_stmt|;
specifier|public
name|StringSort
parameter_list|(
name|int
name|overflowToDiskThreshold
parameter_list|,
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
operator|.
name|overflowToDiskThreshold
operator|=
name|overflowToDiskThreshold
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|useFile
condition|)
block|{
name|addToBatch
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ids
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|size
argument_list|()
operator|>=
name|overflowToDiskThreshold
condition|)
block|{
name|flushToFile
argument_list|(
name|ids
argument_list|)
expr_stmt|;
name|useFile
operator|=
literal|true
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"In memory buffer crossed the threshold of {}. "
operator|+
literal|"Switching to filesystem [{}] to manage the state"
argument_list|,
name|overflowToDiskThreshold
argument_list|,
name|persistentState
argument_list|)
expr_stmt|;
block|}
block|}
name|size
operator|++
expr_stmt|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|useFile
condition|)
block|{
comment|//Flush the last batch
name|flushToFile
argument_list|(
name|inMemBatch
argument_list|)
expr_stmt|;
name|persistentState
operator|.
name|sort
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|ids
argument_list|,
name|comparator
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getIds
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|useFile
condition|)
block|{
return|return
name|persistentState
operator|.
name|getIterator
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|ids
operator|.
name|iterator
argument_list|()
return|;
block|}
block|}
specifier|public
name|long
name|getSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|size
operator|==
literal|0
return|;
block|}
specifier|public
name|boolean
name|usingFile
parameter_list|()
block|{
return|return
name|useFile
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|persistentState
operator|!=
literal|null
condition|)
block|{
name|persistentState
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addToBatch
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|IOException
block|{
name|inMemBatch
operator|.
name|add
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|inMemBatch
operator|.
name|size
argument_list|()
operator|>=
name|BATCH_SIZE
condition|)
block|{
name|flushToFile
argument_list|(
name|inMemBatch
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|flushToFile
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|ids
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedWriter
name|w
init|=
name|getPersistentState
argument_list|()
operator|.
name|getWriter
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|id
range|:
name|ids
control|)
block|{
name|w
operator|.
name|write
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|w
operator|.
name|newLine
argument_list|()
expr_stmt|;
block|}
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|PersistentState
name|getPersistentState
parameter_list|()
block|{
comment|//Lazily initialize the persistent state
if|if
condition|(
name|persistentState
operator|==
literal|null
condition|)
block|{
name|persistentState
operator|=
operator|new
name|PersistentState
argument_list|(
name|comparator
argument_list|)
expr_stmt|;
block|}
return|return
name|persistentState
return|;
block|}
specifier|private
specifier|static
class|class
name|PersistentState
implements|implements
name|Closeable
block|{
comment|/**          * Maximum loop count when creating temp directories.          */
specifier|private
specifier|static
specifier|final
name|int
name|TEMP_DIR_ATTEMPTS
init|=
literal|10000
decl_stmt|;
specifier|private
specifier|final
name|Charset
name|charset
init|=
name|Charsets
operator|.
name|UTF_8
decl_stmt|;
specifier|private
specifier|final
name|File
name|workDir
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
decl_stmt|;
specifier|private
name|File
name|idFile
decl_stmt|;
specifier|private
name|File
name|sortedFile
decl_stmt|;
specifier|private
name|BufferedWriter
name|writer
decl_stmt|;
specifier|private
name|List
argument_list|<
name|CloseableIterator
argument_list|>
name|openedIterators
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
specifier|public
name|PersistentState
parameter_list|(
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|)
block|{
name|this
argument_list|(
name|comparator
argument_list|,
name|createTempDir
argument_list|(
literal|"oak-sorter-"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|PersistentState
parameter_list|(
name|Comparator
argument_list|<
name|String
argument_list|>
name|comparator
parameter_list|,
name|File
name|workDir
parameter_list|)
block|{
name|this
operator|.
name|workDir
operator|=
name|workDir
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
block|}
specifier|public
name|BufferedWriter
name|getWriter
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|idFile
operator|==
literal|null
condition|)
block|{
name|idFile
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"strings.txt"
argument_list|)
expr_stmt|;
name|sortedFile
operator|=
operator|new
name|File
argument_list|(
name|workDir
argument_list|,
literal|"strings-sorted.txt"
argument_list|)
expr_stmt|;
name|writer
operator|=
name|Files
operator|.
name|newWriter
argument_list|(
name|idFile
argument_list|,
name|charset
argument_list|)
expr_stmt|;
block|}
return|return
name|writer
return|;
block|}
specifier|public
name|void
name|sort
parameter_list|()
throws|throws
name|IOException
block|{
name|closeWriter
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|File
argument_list|>
name|sortedFiles
init|=
name|ExternalSort
operator|.
name|sortInBatch
argument_list|(
name|idFile
argument_list|,
name|comparator
argument_list|,
comment|//Comparator to use
name|ExternalSort
operator|.
name|DEFAULTMAXTEMPFILES
argument_list|,
name|ExternalSort
operator|.
name|DEFAULT_MAX_MEM_BYTES
argument_list|,
name|charset
argument_list|,
comment|//charset
name|workDir
argument_list|,
comment|//temp directory where intermediate files are created
literal|true
comment|//distinct
argument_list|)
decl_stmt|;
name|ExternalSort
operator|.
name|mergeSortedFiles
argument_list|(
name|sortedFiles
argument_list|,
name|sortedFile
argument_list|,
name|comparator
argument_list|,
name|charset
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getIterator
parameter_list|()
throws|throws
name|IOException
block|{
name|CloseableIterator
name|itr
init|=
operator|new
name|CloseableIterator
argument_list|(
name|Files
operator|.
name|newReader
argument_list|(
name|sortedFile
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
name|openedIterators
operator|.
name|add
argument_list|(
name|itr
argument_list|)
expr_stmt|;
return|return
name|itr
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PersistentState : workDir="
operator|+
name|workDir
operator|.
name|getAbsolutePath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
comment|//Closing is done in LIFO manner!
name|closer
operator|.
name|register
argument_list|(
operator|new
name|Closeable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|FileUtils
operator|.
name|deleteDirectory
argument_list|(
name|workDir
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|writer
argument_list|)
expr_stmt|;
for|for
control|(
name|CloseableIterator
name|citr
range|:
name|openedIterators
control|)
block|{
name|closer
operator|.
name|register
argument_list|(
name|citr
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|closeWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**          * Taken from com.google.common.io.Files#createTempDir()          * Modified to provide a prefix          */
specifier|private
specifier|static
name|File
name|createTempDir
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|File
name|baseDir
init|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|baseName
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
literal|"-"
decl_stmt|;
for|for
control|(
name|int
name|counter
init|=
literal|0
init|;
name|counter
operator|<
name|TEMP_DIR_ATTEMPTS
condition|;
name|counter
operator|++
control|)
block|{
name|File
name|tempDir
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|,
name|prefix
operator|+
name|baseName
operator|+
name|counter
argument_list|)
decl_stmt|;
if|if
condition|(
name|tempDir
operator|.
name|mkdir
argument_list|()
condition|)
block|{
return|return
name|tempDir
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Failed to create directory within "
operator|+
name|TEMP_DIR_ATTEMPTS
operator|+
literal|" attempts (tried "
operator|+
name|baseName
operator|+
literal|"0 to "
operator|+
name|baseName
operator|+
operator|(
name|TEMP_DIR_ATTEMPTS
operator|-
literal|1
operator|)
operator|+
literal|')'
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CloseableIterator
extends|extends
name|LineIterator
implements|implements
name|Closeable
block|{
specifier|public
name|CloseableIterator
parameter_list|(
name|Reader
name|reader
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|super
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

