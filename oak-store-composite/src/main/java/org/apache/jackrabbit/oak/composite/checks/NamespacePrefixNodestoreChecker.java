begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|checks
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|composite
operator|.
name|MountedNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|ReadOnlyNamespaceRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|RootFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|Service
argument_list|(
name|MountedNodeStoreChecker
operator|.
name|class
argument_list|)
specifier|public
class|class
name|NamespacePrefixNodestoreChecker
implements|implements
name|MountedNodeStoreChecker
argument_list|<
name|NamespacePrefixNodestoreChecker
operator|.
name|Context
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Context
name|createContext
parameter_list|(
name|NodeStore
name|globalStore
parameter_list|,
name|MountInfoProvider
name|mip
parameter_list|)
block|{
name|Root
name|root
init|=
name|RootFactory
operator|.
name|createReadOnlyRoot
argument_list|(
name|globalStore
operator|.
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|ReadOnlyNamespaceRegistry
name|registry
init|=
operator|new
name|ReadOnlyNamespaceRegistry
argument_list|(
name|root
argument_list|)
decl_stmt|;
return|return
operator|new
name|Context
argument_list|(
name|registry
operator|.
name|getPrefixes
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|Tree
name|tree
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|Context
name|context
parameter_list|)
block|{
name|String
name|name
init|=
name|tree
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|path
init|=
name|tree
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|validate
argument_list|(
name|mountedStore
argument_list|,
name|errorHolder
argument_list|,
name|context
argument_list|,
name|name
argument_list|,
name|path
argument_list|)
expr_stmt|;
for|for
control|(
name|PropertyState
name|prop
range|:
name|tree
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|String
name|propName
init|=
name|prop
operator|.
name|getName
argument_list|()
decl_stmt|;
name|validate
argument_list|(
name|mountedStore
argument_list|,
name|errorHolder
argument_list|,
name|context
argument_list|,
name|propName
argument_list|,
name|PathUtils
operator|.
name|concat
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|,
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|void
name|validate
parameter_list|(
name|MountedNodeStore
name|mountedStore
parameter_list|,
name|ErrorHolder
name|errorHolder
parameter_list|,
name|Context
name|context
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getPrefix
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|context
operator|.
name|validPrefixes
operator|.
name|contains
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
name|errorHolder
operator|.
name|report
argument_list|(
name|mountedStore
argument_list|,
name|path
argument_list|,
literal|"invalid namespace prefix "
operator|+
name|prefix
operator|+
literal|" , expected one of "
operator|+
name|context
operator|.
name|validPrefixes
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getPrefix
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|int
name|idx
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|idx
operator|<
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// name will not start with a colon as it's an invalid JCR name
comment|// and we assume the repositories to be well-formed
return|return
name|name
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|idx
argument_list|)
return|;
block|}
specifier|static
class|class
name|Context
block|{
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|validPrefixes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
specifier|public
name|Context
parameter_list|(
name|String
index|[]
name|prefixes
parameter_list|)
block|{
for|for
control|(
name|String
name|prefix
range|:
name|prefixes
control|)
block|{
name|validPrefixes
operator|.
name|add
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

