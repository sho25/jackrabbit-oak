begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|FluentIterable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|MongoDocumentTraverser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|CloseableIterable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|transform
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptyList
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStateEntryTraverser
implements|implements
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
implements|,
name|Closeable
block|{
specifier|private
specifier|final
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|RevisionVector
name|rootRevision
decl_stmt|;
specifier|private
specifier|final
name|DocumentNodeStore
name|documentNodeStore
decl_stmt|;
specifier|private
specifier|final
name|MongoDocumentStore
name|documentStore
decl_stmt|;
specifier|private
name|Consumer
argument_list|<
name|String
argument_list|>
name|progressReporter
init|=
name|id
lambda|->
block|{}
decl_stmt|;
specifier|private
name|Predicate
argument_list|<
name|String
argument_list|>
name|pathPredicate
init|=
name|path
lambda|->
literal|true
decl_stmt|;
specifier|public
name|NodeStateEntryTraverser
parameter_list|(
name|DocumentNodeStore
name|documentNodeStore
parameter_list|,
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
name|this
argument_list|(
name|documentNodeStore
operator|.
name|getHeadRevision
argument_list|()
argument_list|,
name|documentNodeStore
argument_list|,
name|documentStore
argument_list|)
expr_stmt|;
block|}
specifier|public
name|NodeStateEntryTraverser
parameter_list|(
name|RevisionVector
name|rootRevision
parameter_list|,
name|DocumentNodeStore
name|documentNodeStore
parameter_list|,
name|MongoDocumentStore
name|documentStore
parameter_list|)
block|{
name|this
operator|.
name|rootRevision
operator|=
name|rootRevision
expr_stmt|;
name|this
operator|.
name|documentNodeStore
operator|=
name|documentNodeStore
expr_stmt|;
name|this
operator|.
name|documentStore
operator|=
name|documentStore
expr_stmt|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|NodeStateEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|getIncludedDocs
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|NodeStateEntryTraverser
name|withProgressCallback
parameter_list|(
name|Consumer
argument_list|<
name|String
argument_list|>
name|progressReporter
parameter_list|)
block|{
name|this
operator|.
name|progressReporter
operator|=
name|progressReporter
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|public
name|NodeStateEntryTraverser
name|withPathPredicate
parameter_list|(
name|Predicate
argument_list|<
name|String
argument_list|>
name|pathPredicate
parameter_list|)
block|{
name|this
operator|.
name|pathPredicate
operator|=
name|pathPredicate
expr_stmt|;
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"Guava"
argument_list|)
specifier|private
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|getIncludedDocs
parameter_list|()
block|{
return|return
name|FluentIterable
operator|.
name|from
argument_list|(
name|getDocsFilteredByPath
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|doc
lambda|->
name|includeDoc
argument_list|(
name|doc
argument_list|)
argument_list|)
operator|.
name|transformAndConcat
argument_list|(
name|doc
lambda|->
name|getEntries
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|includeDoc
parameter_list|(
name|NodeDocument
name|doc
parameter_list|)
block|{
return|return
operator|!
name|doc
operator|.
name|isSplitDocument
argument_list|()
operator|&&
operator|!
name|NodeStateUtils
operator|.
name|isHiddenPath
argument_list|(
name|doc
operator|.
name|getPath
argument_list|()
argument_list|)
operator|&&
name|pathPredicate
operator|.
name|test
argument_list|(
name|doc
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"StaticPseudoFunctionalStyleMethod"
argument_list|)
specifier|private
name|Iterable
argument_list|<
name|NodeStateEntry
argument_list|>
name|getEntries
parameter_list|(
name|NodeDocument
name|doc
parameter_list|)
block|{
name|String
name|path
init|=
name|doc
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|DocumentNodeState
name|nodeState
init|=
name|documentNodeStore
operator|.
name|getNode
argument_list|(
name|path
argument_list|,
name|rootRevision
argument_list|)
decl_stmt|;
comment|//At DocumentNodeState api level the nodeState can be null
if|if
condition|(
name|nodeState
operator|==
literal|null
operator|||
operator|!
name|nodeState
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|emptyList
argument_list|()
return|;
block|}
return|return
name|transform
argument_list|(
name|concat
argument_list|(
name|singleton
argument_list|(
name|nodeState
argument_list|)
argument_list|,
name|nodeState
operator|.
name|getAllBundledNodesStates
argument_list|()
argument_list|)
argument_list|,
name|dns
lambda|->
operator|new
name|NodeStateEntry
argument_list|(
name|dns
argument_list|,
name|dns
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Iterable
argument_list|<
name|NodeDocument
argument_list|>
name|getDocsFilteredByPath
parameter_list|()
block|{
name|CloseableIterable
argument_list|<
name|NodeDocument
argument_list|>
name|docs
init|=
name|findAllDocuments
argument_list|()
decl_stmt|;
name|closer
operator|.
name|register
argument_list|(
name|docs
argument_list|)
expr_stmt|;
return|return
name|docs
return|;
block|}
specifier|private
name|CloseableIterable
argument_list|<
name|NodeDocument
argument_list|>
name|findAllDocuments
parameter_list|()
block|{
return|return
operator|new
name|MongoDocumentTraverser
argument_list|(
name|documentStore
argument_list|)
operator|.
name|getAllDocuments
argument_list|(
name|Collection
operator|.
name|NODES
argument_list|,
name|id
lambda|->
name|includeId
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|includeId
parameter_list|(
name|String
name|id
parameter_list|)
block|{
name|progressReporter
operator|.
name|accept
argument_list|(
name|id
argument_list|)
expr_stmt|;
comment|//Cannot interpret long paths as they are hashed. So let them
comment|//be included
if|if
condition|(
name|Utils
operator|.
name|isIdFromLongPath
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//Not easy to determine path for previous docs
comment|//Given there count is pretty low compared to others
comment|//include them all so that they become part of cache
if|if
condition|(
name|Utils
operator|.
name|isPreviousDocId
argument_list|(
name|id
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
name|String
name|path
init|=
name|Utils
operator|.
name|getPathFromId
argument_list|(
name|id
argument_list|)
decl_stmt|;
comment|//Exclude hidden nodes from index data
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHiddenPath
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|pathPredicate
operator|.
name|test
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
end_class

end_unit

