begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|byteCountToDisplaySize
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Formatter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * This utility breaks down space usage per record type.  * It accounts for value sharing. That is, an instance  * of this class will remember which records it has seen  * already and not count those again. Only the effective  * space taken by the records is taken into account. Slack  * space from aligning records is not accounted for.  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|RecordUsageAnalyser
extends|extends
name|SegmentParser
block|{
specifier|private
specifier|final
name|RecordIdSet
name|seenIds
init|=
operator|new
name|RecordIdSet
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|deadLinks
init|=
name|newHashSet
argument_list|()
decl_stmt|;
specifier|private
name|long
name|mapSize
decl_stmt|;
comment|// leaf and branch
specifier|private
name|long
name|listSize
decl_stmt|;
comment|// list and bucket
specifier|private
name|long
name|valueSize
decl_stmt|;
comment|// inlined values
specifier|private
name|long
name|templateSize
decl_stmt|;
comment|// template
specifier|private
name|long
name|nodeSize
decl_stmt|;
comment|// node
specifier|private
name|long
name|mapCount
decl_stmt|;
specifier|private
name|long
name|listCount
decl_stmt|;
specifier|private
name|long
name|propertyCount
decl_stmt|;
specifier|private
name|long
name|smallBlobCount
decl_stmt|;
specifier|private
name|long
name|mediumBlobCount
decl_stmt|;
specifier|private
name|long
name|longBlobCount
decl_stmt|;
specifier|private
name|long
name|externalBlobCount
decl_stmt|;
specifier|private
name|long
name|smallStringCount
decl_stmt|;
specifier|private
name|long
name|mediumStringCount
decl_stmt|;
specifier|private
name|long
name|longStringCount
decl_stmt|;
specifier|private
name|long
name|templateCount
decl_stmt|;
specifier|private
name|long
name|nodeCount
decl_stmt|;
comment|/**      * @return number of bytes in {@link RecordType#LEAF leaf} and {@link RecordType#BRANCH branch}      * records.      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getMapSize
parameter_list|()
block|{
return|return
name|mapSize
return|;
block|}
comment|/**      * @return number of bytes in {@link RecordType#LIST list} and {@link RecordType#BUCKET bucket}      * records.      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getListSize
parameter_list|()
block|{
return|return
name|listSize
return|;
block|}
comment|/**      * @return number of bytes in inlined values (strings and blobs)      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getValueSize
parameter_list|()
block|{
return|return
name|valueSize
return|;
block|}
comment|/**      * @return number of bytes in {@link RecordType#TEMPLATE template} records.      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getTemplateSize
parameter_list|()
block|{
return|return
name|templateSize
return|;
block|}
comment|/**      * @return number of bytes in {@link RecordType#NODE node} records.      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getNodeSize
parameter_list|()
block|{
return|return
name|nodeSize
return|;
block|}
comment|/**      * @return number of maps      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getMapCount
parameter_list|()
block|{
return|return
name|mapCount
return|;
block|}
comment|/**      * @return number of lists      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getListCount
parameter_list|()
block|{
return|return
name|listCount
return|;
block|}
comment|/**      * @return number of properties      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
return|return
name|propertyCount
return|;
block|}
comment|/**      * @return number of {@link Segment#SMALL_LIMIT small} blobs.      *      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getSmallBlobCount
parameter_list|()
block|{
return|return
name|smallBlobCount
return|;
block|}
comment|/**      * @return number of {@link Segment#MEDIUM_LIMIT medium} blobs.      *      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getMediumBlobCount
parameter_list|()
block|{
return|return
name|mediumBlobCount
return|;
block|}
comment|/**      * @return number of long blobs.      *      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getLongBlobCount
parameter_list|()
block|{
return|return
name|longBlobCount
return|;
block|}
comment|/**      * @return number of external blobs.      *      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getExternalBlobCount
parameter_list|()
block|{
return|return
name|externalBlobCount
return|;
block|}
comment|/**      * @return number of {@link Segment#SMALL_LIMIT small} strings.      *      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getSmallStringCount
parameter_list|()
block|{
return|return
name|smallStringCount
return|;
block|}
comment|/**      * @return number of {@link Segment#MEDIUM_LIMIT medium} strings.      *      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getMediumStringCount
parameter_list|()
block|{
return|return
name|mediumStringCount
return|;
block|}
comment|/**      * @return number of long strings.      *      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getLongStringCount
parameter_list|()
block|{
return|return
name|longStringCount
return|;
block|}
comment|/**      * @return number of templates.      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getTemplateCount
parameter_list|()
block|{
return|return
name|templateCount
return|;
block|}
comment|/**      * @return number of nodes.      */
annotation|@
name|Deprecated
specifier|public
name|long
name|getNodeCount
parameter_list|()
block|{
return|return
name|nodeCount
return|;
block|}
annotation|@
name|Deprecated
specifier|public
name|void
name|analyseNode
parameter_list|(
name|RecordId
name|nodeId
parameter_list|)
block|{
name|onNode
argument_list|(
literal|null
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"resource"
argument_list|)
name|Formatter
name|formatter
init|=
operator|new
name|Formatter
argument_list|(
name|sb
argument_list|)
decl_stmt|;
name|formatter
operator|.
name|format
argument_list|(
literal|"%s in maps (%s leaf and branch records)%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|mapSize
argument_list|)
argument_list|,
name|mapCount
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|format
argument_list|(
literal|"%s in lists (%s list and bucket records)%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|listSize
argument_list|)
argument_list|,
name|listCount
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|format
argument_list|(
literal|"%s in values (value and block records of %s properties, "
operator|+
literal|"%s/%s/%s/%s small/medium/long/external blobs, %s/%s/%s small/medium/long strings)%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|valueSize
argument_list|)
argument_list|,
name|propertyCount
argument_list|,
name|smallBlobCount
argument_list|,
name|mediumBlobCount
argument_list|,
name|longBlobCount
argument_list|,
name|externalBlobCount
argument_list|,
name|smallStringCount
argument_list|,
name|mediumStringCount
argument_list|,
name|longStringCount
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|format
argument_list|(
literal|"%s in templates (%s template records)%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|templateSize
argument_list|)
argument_list|,
name|templateCount
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|format
argument_list|(
literal|"%s in nodes (%s node records)%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|nodeSize
argument_list|)
argument_list|,
name|nodeCount
argument_list|)
expr_stmt|;
name|formatter
operator|.
name|format
argument_list|(
literal|"links to non existing segments: %s"
argument_list|,
name|deadLinks
argument_list|)
expr_stmt|;
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onNode
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|nodeId
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|NodeInfo
name|info
init|=
name|parseNode
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|this
operator|.
name|nodeCount
operator|++
expr_stmt|;
name|this
operator|.
name|nodeSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onTemplate
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|templateId
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|templateId
argument_list|)
condition|)
block|{
name|TemplateInfo
name|info
init|=
name|parseTemplate
argument_list|(
name|templateId
argument_list|)
decl_stmt|;
name|this
operator|.
name|templateCount
operator|++
expr_stmt|;
name|this
operator|.
name|templateSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapDiff
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|mapId
argument_list|)
condition|)
block|{
name|MapInfo
name|info
init|=
name|parseMapDiff
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|this
operator|.
name|mapCount
operator|++
expr_stmt|;
name|this
operator|.
name|mapSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapLeaf
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|mapId
argument_list|)
condition|)
block|{
name|MapInfo
name|info
init|=
name|parseMapLeaf
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|this
operator|.
name|mapCount
operator|++
expr_stmt|;
name|this
operator|.
name|mapSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onMapBranch
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|mapId
parameter_list|,
name|MapRecord
name|map
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|mapId
argument_list|)
condition|)
block|{
name|MapInfo
name|info
init|=
name|parseMapBranch
argument_list|(
name|mapId
argument_list|,
name|map
argument_list|)
decl_stmt|;
name|this
operator|.
name|mapCount
operator|++
expr_stmt|;
name|this
operator|.
name|mapSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onProperty
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|propertyId
parameter_list|,
name|PropertyTemplate
name|template
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|seenIds
operator|.
name|contains
argument_list|(
name|propertyId
argument_list|)
condition|)
block|{
name|PropertyInfo
name|info
init|=
name|parseProperty
argument_list|(
name|parentId
argument_list|,
name|propertyId
argument_list|,
name|template
argument_list|)
decl_stmt|;
name|this
operator|.
name|propertyCount
operator|++
expr_stmt|;
name|this
operator|.
name|valueSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|propertyId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onBlob
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|blobId
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|BlobInfo
name|info
init|=
name|parseBlob
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|this
operator|.
name|valueSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
switch|switch
condition|(
name|info
operator|.
name|blobType
condition|)
block|{
case|case
name|SMALL
case|:
name|this
operator|.
name|smallBlobCount
operator|++
expr_stmt|;
break|break;
case|case
name|MEDIUM
case|:
name|this
operator|.
name|mediumBlobCount
operator|++
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|this
operator|.
name|longBlobCount
operator|++
expr_stmt|;
break|break;
case|case
name|EXTERNAL
case|:
name|this
operator|.
name|externalBlobCount
operator|++
expr_stmt|;
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onString
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|stringId
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|stringId
argument_list|)
condition|)
block|{
name|BlobInfo
name|info
init|=
name|parseString
argument_list|(
name|stringId
argument_list|)
decl_stmt|;
name|this
operator|.
name|valueSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
switch|switch
condition|(
name|info
operator|.
name|blobType
condition|)
block|{
case|case
name|SMALL
case|:
name|this
operator|.
name|smallStringCount
operator|++
expr_stmt|;
break|break;
case|case
name|MEDIUM
case|:
name|this
operator|.
name|mediumStringCount
operator|++
expr_stmt|;
break|break;
case|case
name|LONG
case|:
name|this
operator|.
name|longStringCount
operator|++
expr_stmt|;
break|break;
case|case
name|EXTERNAL
case|:
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"String is too long: "
operator|+
name|info
operator|.
name|size
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|void
name|onList
parameter_list|(
name|RecordId
name|parentId
parameter_list|,
name|RecordId
name|listId
parameter_list|,
name|int
name|count
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
name|seenIds
operator|.
name|addIfNotPresent
argument_list|(
name|listId
argument_list|)
condition|)
block|{
name|ListInfo
name|info
init|=
name|parseList
argument_list|(
name|parentId
argument_list|,
name|listId
argument_list|,
name|count
argument_list|)
decl_stmt|;
name|this
operator|.
name|listCount
operator|++
expr_stmt|;
name|this
operator|.
name|listSize
operator|+=
name|info
operator|.
name|size
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SegmentNotFoundException
name|snfe
parameter_list|)
block|{
name|deadLinks
operator|.
name|add
argument_list|(
name|snfe
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

