begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENMIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_FROZENPRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|bundlor
operator|.
name|DocumentBundlor
operator|.
name|PROP_PATTERN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
operator|.
name|createProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|BundledTypesRegistryTest
block|{
specifier|private
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|basicSetup
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"nt:file"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_PATTERN
argument_list|,
name|asList
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|BundledTypesRegistry
name|registry
init|=
name|BundledTypesRegistry
operator|.
name|from
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|registry
operator|.
name|getBundlor
argument_list|(
name|EMPTY_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|registry
operator|.
name|getBundlor
argument_list|(
name|newNode
argument_list|(
literal|"nt:file"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|registry
operator|.
name|getBundlor
argument_list|(
name|newNode
argument_list|(
literal|"nt:resource"
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|DocumentBundlor
name|bundlor
init|=
name|registry
operator|.
name|getBundlor
argument_list|(
name|newNode
argument_list|(
literal|"nt:file"
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|bundlor
operator|.
name|isBundled
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bundlor
operator|.
name|isBundled
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|disabledIgnored
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"nt:file"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_PATTERN
argument_list|,
name|asList
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"nt:file"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|DocumentBundlor
operator|.
name|PROP_DISABLED
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|BundledTypesRegistry
name|registry
init|=
name|BundledTypesRegistry
operator|.
name|from
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|registry
operator|.
name|getBundlors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mixin
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"mix:foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_PATTERN
argument_list|,
name|asList
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|BundledTypesRegistry
name|registry
init|=
name|BundledTypesRegistry
operator|.
name|from
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|registry
operator|.
name|getBundlor
argument_list|(
name|newNode
argument_list|(
literal|"mix:foo"
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|versioned
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"nt:file"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_PATTERN
argument_list|,
name|asList
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|BundledTypesRegistry
name|registry
init|=
name|BundledTypesRegistry
operator|.
name|from
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_FROZENNODE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_FROZENPRIMARYTYPE
argument_list|,
literal|"nt:file"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|registry
operator|.
name|getBundlor
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|versionedMixins
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"mix:foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_PATTERN
argument_list|,
name|asList
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|BundledTypesRegistry
name|registry
init|=
name|BundledTypesRegistry
operator|.
name|from
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|JcrConstants
operator|.
name|NT_FROZENNODE
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_FROZENMIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
literal|"mix:foo"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|registry
operator|.
name|getBundlor
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|mixinOverPrimaryType
parameter_list|()
throws|throws
name|Exception
block|{
name|builder
operator|.
name|child
argument_list|(
literal|"mix:foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_PATTERN
argument_list|,
name|asList
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"nt:file"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|createProperty
argument_list|(
name|PROP_PATTERN
argument_list|,
name|asList
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|,
name|STRINGS
argument_list|)
argument_list|)
expr_stmt|;
name|BundledTypesRegistry
name|registry
init|=
name|BundledTypesRegistry
operator|.
name|from
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|NodeBuilder
name|b2
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|setType
argument_list|(
literal|"nt:file"
argument_list|,
literal|false
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|setType
argument_list|(
literal|"mix:foo"
argument_list|,
literal|true
argument_list|,
name|b2
argument_list|)
expr_stmt|;
name|DocumentBundlor
name|bundlor
init|=
name|registry
operator|.
name|getBundlor
argument_list|(
name|b2
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
comment|//Pattern based on mixin would be applicable
name|assertTrue
argument_list|(
name|bundlor
operator|.
name|isBundled
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|bundlor
operator|.
name|isBundled
argument_list|(
literal|"jcr:content"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|NodeState
name|newNode
parameter_list|(
name|String
name|typeName
parameter_list|,
name|boolean
name|mixin
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|setType
argument_list|(
name|typeName
argument_list|,
name|mixin
argument_list|,
name|builder
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|getNodeState
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|void
name|setType
parameter_list|(
name|String
name|typeName
parameter_list|,
name|boolean
name|mixin
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|mixin
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|typeName
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|typeName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

