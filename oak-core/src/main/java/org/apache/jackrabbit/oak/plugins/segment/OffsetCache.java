begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_class
specifier|abstract
class|class
name|OffsetCache
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|int
name|SIZE_INCREMENT
init|=
literal|1024
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
index|[]
name|NO_OFFSETS
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Object
index|[]
name|NO_VALUES
init|=
operator|new
name|Object
index|[
literal|0
index|]
decl_stmt|;
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
specifier|private
name|int
index|[]
name|offsets
init|=
name|NO_OFFSETS
decl_stmt|;
specifier|private
name|Object
index|[]
name|values
init|=
name|NO_VALUES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
specifier|synchronized
name|T
name|get
parameter_list|(
name|int
name|offset
parameter_list|)
block|{
name|int
name|i
init|=
name|Arrays
operator|.
name|binarySearch
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|,
name|length
argument_list|,
name|offset
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
name|i
operator|=
operator|~
name|i
expr_stmt|;
if|if
condition|(
name|length
operator|<
name|offsets
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|offsets
argument_list|,
name|i
argument_list|,
name|offsets
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
name|i
argument_list|,
name|values
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
index|[]
name|newOffsets
init|=
operator|new
name|int
index|[
name|length
operator|+
name|SIZE_INCREMENT
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|offsets
argument_list|,
literal|0
argument_list|,
name|newOffsets
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|offsets
argument_list|,
name|i
argument_list|,
name|newOffsets
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|offsets
operator|=
name|newOffsets
expr_stmt|;
name|Object
index|[]
name|newValues
init|=
operator|new
name|Object
index|[
name|length
operator|+
name|SIZE_INCREMENT
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
literal|0
argument_list|,
name|newValues
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|values
argument_list|,
name|i
argument_list|,
name|newValues
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|length
operator|-
name|i
argument_list|)
expr_stmt|;
name|values
operator|=
name|newValues
expr_stmt|;
block|}
name|offsets
index|[
name|i
index|]
operator|=
name|offset
expr_stmt|;
name|values
index|[
name|i
index|]
operator|=
name|load
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|T
operator|)
name|values
index|[
name|i
index|]
return|;
block|}
specifier|protected
specifier|abstract
name|T
name|load
parameter_list|(
name|int
name|offset
parameter_list|)
function_decl|;
block|}
end_class

end_unit

