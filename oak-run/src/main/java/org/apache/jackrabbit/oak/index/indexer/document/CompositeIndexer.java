begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
operator|.
name|indexer
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|NodeDocument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeIndexer
implements|implements
name|NodeStateIndexer
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|NodeStateIndexer
argument_list|>
name|indexers
decl_stmt|;
specifier|public
name|CompositeIndexer
parameter_list|(
name|List
argument_list|<
name|NodeStateIndexer
argument_list|>
name|indexers
parameter_list|)
block|{
name|this
operator|.
name|indexers
operator|=
name|checkNotNull
argument_list|(
name|indexers
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|indexers
operator|.
name|isEmpty
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldInclude
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|indexers
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|indexer
lambda|->
name|indexer
operator|.
name|shouldInclude
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|shouldInclude
parameter_list|(
name|NodeDocument
name|doc
parameter_list|)
block|{
return|return
name|indexers
operator|.
name|stream
argument_list|()
operator|.
name|anyMatch
argument_list|(
name|indexer
lambda|->
name|indexer
operator|.
name|shouldInclude
argument_list|(
name|doc
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|index
parameter_list|(
name|NodeStateEntry
name|entry
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
for|for
control|(
name|NodeStateIndexer
name|indexer
range|:
name|indexers
control|)
block|{
name|indexer
operator|.
name|index
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|indexesRelativeNodes
parameter_list|()
block|{
for|for
control|(
name|NodeStateIndexer
name|indexer
range|:
name|indexers
control|)
block|{
if|if
condition|(
name|indexer
operator|.
name|indexesRelativeNodes
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getRelativeIndexedNodeNames
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|NodeStateIndexer
name|indexer
range|:
name|indexers
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|indexer
operator|.
name|getRelativeIndexedNodeNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{      }
block|}
end_class

end_unit

