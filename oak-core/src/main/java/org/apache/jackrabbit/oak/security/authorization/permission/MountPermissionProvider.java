begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|LongUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|ProviderCtx
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|Mount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
operator|.
name|MountInfoProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_class
specifier|public
class|class
name|MountPermissionProvider
extends|extends
name|PermissionProviderImpl
block|{
annotation|@
name|NotNull
specifier|public
specifier|static
name|String
name|getPermissionRootName
parameter_list|(
annotation|@
name|NotNull
name|Mount
name|mount
parameter_list|,
annotation|@
name|NotNull
name|String
name|workspace
parameter_list|)
block|{
if|if
condition|(
name|mount
operator|.
name|isDefault
argument_list|()
condition|)
block|{
return|return
name|workspace
return|;
block|}
else|else
block|{
return|return
name|mount
operator|.
name|getPathFragmentName
argument_list|()
operator|+
literal|"-"
operator|+
name|workspace
return|;
block|}
block|}
specifier|private
specifier|final
name|MountInfoProvider
name|mountInfoProvider
decl_stmt|;
specifier|public
name|MountPermissionProvider
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|String
name|workspaceName
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|NotNull
name|RestrictionProvider
name|restrictionProvider
parameter_list|,
annotation|@
name|NotNull
name|ConfigurationParameters
name|options
parameter_list|,
annotation|@
name|NotNull
name|Context
name|ctx
parameter_list|,
annotation|@
name|NotNull
name|ProviderCtx
name|providerCtx
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|workspaceName
argument_list|,
name|principals
argument_list|,
name|restrictionProvider
argument_list|,
name|options
argument_list|,
name|ctx
argument_list|,
name|providerCtx
argument_list|)
expr_stmt|;
name|this
operator|.
name|mountInfoProvider
operator|=
name|providerCtx
operator|.
name|getMountInfoProvider
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|PermissionStore
name|getPermissionStore
parameter_list|(
name|Root
name|root
parameter_list|,
name|String
name|workspaceName
parameter_list|,
name|RestrictionProvider
name|restrictionProvider
parameter_list|)
block|{
name|List
argument_list|<
name|PermissionStoreImpl
argument_list|>
name|stores
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|stores
operator|.
name|add
argument_list|(
operator|new
name|PermissionStoreImpl
argument_list|(
name|root
argument_list|,
name|workspaceName
argument_list|,
name|restrictionProvider
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Mount
name|m
range|:
name|mountInfoProvider
operator|.
name|getNonDefaultMounts
argument_list|()
control|)
block|{
name|String
name|psRoot
init|=
name|getPermissionRootName
argument_list|(
name|m
argument_list|,
name|workspaceName
argument_list|)
decl_stmt|;
name|PermissionStoreImpl
name|ps
init|=
operator|new
name|PermissionStoreImpl
argument_list|(
name|root
argument_list|,
name|psRoot
argument_list|,
name|restrictionProvider
argument_list|)
decl_stmt|;
name|stores
operator|.
name|add
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MountPermissionStore
argument_list|(
name|stores
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|MountPermissionStore
implements|implements
name|PermissionStore
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|PermissionStoreImpl
argument_list|>
name|stores
decl_stmt|;
name|MountPermissionStore
parameter_list|(
name|List
argument_list|<
name|PermissionStoreImpl
argument_list|>
name|stores
parameter_list|)
block|{
name|this
operator|.
name|stores
operator|=
name|stores
expr_stmt|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|load
parameter_list|(
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|,
annotation|@
name|NotNull
name|String
name|path
parameter_list|)
block|{
for|for
control|(
name|PermissionStoreImpl
name|store
range|:
name|stores
control|)
block|{
name|Collection
argument_list|<
name|PermissionEntry
argument_list|>
name|col
init|=
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
return|return
name|col
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalPermissionEntries
name|load
parameter_list|(
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|)
block|{
name|PrincipalPermissionEntries
name|ppe
init|=
operator|new
name|PrincipalPermissionEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|PermissionStoreImpl
name|store
range|:
name|stores
control|)
block|{
name|ppe
operator|.
name|putAllEntries
argument_list|(
name|store
operator|.
name|load
argument_list|(
name|principalName
argument_list|)
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|ppe
operator|.
name|setFullyLoaded
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|ppe
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|NumEntries
name|getNumEntries
parameter_list|(
annotation|@
name|NotNull
name|String
name|principalName
parameter_list|,
name|long
name|max
parameter_list|)
block|{
name|long
name|num
init|=
literal|0
decl_stmt|;
name|boolean
name|isExact
init|=
literal|true
decl_stmt|;
for|for
control|(
name|PermissionStoreImpl
name|store
range|:
name|stores
control|)
block|{
name|NumEntries
name|ne
init|=
name|store
operator|.
name|getNumEntries
argument_list|(
name|principalName
argument_list|,
name|max
argument_list|)
decl_stmt|;
name|num
operator|=
name|LongUtils
operator|.
name|safeAdd
argument_list|(
name|num
argument_list|,
name|ne
operator|.
name|size
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ne
operator|.
name|isExact
condition|)
block|{
name|isExact
operator|=
literal|false
expr_stmt|;
block|}
comment|// if any of the stores doesn't reveal the exact number and max
comment|// is reached, stop asking the remaining stores.
comment|// as long as every store is reporting the exact number continue
comment|// in order to (possibly) be able to return the exact number.
if|if
condition|(
name|num
operator|>=
name|max
operator|&&
operator|!
name|isExact
condition|)
block|{
break|break;
block|}
block|}
return|return
name|NumEntries
operator|.
name|valueOf
argument_list|(
name|num
argument_list|,
name|isExact
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|)
block|{
for|for
control|(
name|PermissionStoreImpl
name|store
range|:
name|stores
control|)
block|{
name|store
operator|.
name|flush
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

