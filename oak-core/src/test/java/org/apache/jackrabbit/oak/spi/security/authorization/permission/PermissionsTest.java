begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Joiner
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Splitter
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionsTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|TEST
init|=
name|ImmutableMap
operator|.
expr|<
name|Long
decl_stmt|,
name|Set
argument_list|<
name|Long
argument_list|>
decl|>
name|of
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
argument_list|,
name|Permissions
operator|.
name|LOCK_MANAGEMENT
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
operator||
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|testGetNamesSinglePermission
parameter_list|()
block|{
for|for
control|(
name|long
name|permission
range|:
name|Permissions
operator|.
name|aggregates
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Permissions
operator|.
name|getNames
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|permission
argument_list|)
argument_list|,
name|names
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamesAllPermission
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Permissions
operator|.
name|getNames
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|,
name|names
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamesNoPermission
parameter_list|()
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Permissions
operator|.
name|getNames
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|names
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamesMultiple
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
expr|<
name|Long
decl_stmt|,
name|Set
argument_list|<
name|Long
argument_list|>
decl|>
name|of
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
argument_list|,
name|Permissions
operator|.
name|LOCK_MANAGEMENT
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
argument_list|)
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|,
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
operator||
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|permissions
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|p
range|:
name|test
operator|.
name|get
argument_list|(
name|permissions
argument_list|)
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Permissions
operator|.
name|getNames
argument_list|(
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamesAggregates
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
expr|<
name|Long
decl_stmt|,
name|Set
argument_list|<
name|Long
argument_list|>
decl|>
name|of
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|Permissions
operator|.
name|REMOVE
operator||
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|WRITE
operator||
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|WRITE
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|permissions
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|p
range|:
name|test
operator|.
name|get
argument_list|(
name|permissions
argument_list|)
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Permissions
operator|.
name|getNames
argument_list|(
name|permissions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringSinglePermission
parameter_list|()
block|{
for|for
control|(
name|long
name|permission
range|:
name|Permissions
operator|.
name|aggregates
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
control|)
block|{
name|String
name|str
init|=
name|Permissions
operator|.
name|getString
argument_list|(
name|permission
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|permission
argument_list|)
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringAllPermission
parameter_list|()
block|{
name|String
name|str
init|=
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringNoPermission
parameter_list|()
block|{
name|String
name|str
init|=
name|Permissions
operator|.
name|getString
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|str
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringMultiple
parameter_list|()
block|{
for|for
control|(
name|long
name|permissions
range|:
name|TEST
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|p
range|:
name|TEST
operator|.
name|get
argument_list|(
name|permissions
argument_list|)
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|Permissions
operator|.
name|getString
argument_list|(
name|permissions
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetStringAggregates
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|test
init|=
name|ImmutableMap
operator|.
expr|<
name|Long
decl_stmt|,
name|Set
argument_list|<
name|Long
argument_list|>
decl|>
name|of
argument_list|(
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|Permissions
operator|.
name|REMOVE
operator||
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|WRITE
operator||
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|,
name|Permissions
operator|.
name|WRITE
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|permissions
range|:
name|test
operator|.
name|keySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|expected
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|p
range|:
name|test
operator|.
name|get
argument_list|(
name|permissions
argument_list|)
control|)
block|{
name|expected
operator|.
name|add
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Splitter
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|split
argument_list|(
name|Permissions
operator|.
name|getString
argument_list|(
name|permissions
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAggregate
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|aggregates
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|permission
range|:
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|aggregates
operator|.
name|contains
argument_list|(
name|permission
argument_list|)
condition|)
block|{
name|assertTrue
argument_list|(
name|Permissions
operator|.
name|getString
argument_list|(
name|permission
argument_list|)
argument_list|,
name|Permissions
operator|.
name|isAggregate
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|getString
argument_list|(
name|permission
argument_list|)
argument_list|,
name|Permissions
operator|.
name|isAggregate
argument_list|(
name|permission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAggregateNoPermission
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|isAggregate
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregates
parameter_list|()
block|{
name|Map
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|aggregation
init|=
name|ImmutableMap
operator|.
expr|<
name|Long
decl_stmt|,
name|Set
argument_list|<
name|Long
argument_list|>
decl|>
name|of
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|)
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|)
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|,
name|ImmutableSet
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|permission
range|:
name|aggregation
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|aggregation
operator|.
name|get
argument_list|(
name|permission
argument_list|)
argument_list|,
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|Permissions
operator|.
name|aggregates
argument_list|(
name|permission
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregatesNoPermission
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|aggregates
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregatesAllPermission
parameter_list|()
block|{
name|Iterable
argument_list|<
name|Long
argument_list|>
name|aggregates
init|=
name|Permissions
operator|.
name|aggregates
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|Iterables
operator|.
name|contains
argument_list|(
name|aggregates
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Long
argument_list|>
name|expected
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|expected
operator|.
name|removeAll
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|aggregates
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRespectParentPermissions
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|permissions
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
operator||
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|REMOVE
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|p
range|:
name|permissions
control|)
block|{
name|assertTrue
argument_list|(
name|Permissions
operator|.
name|getString
argument_list|(
name|p
argument_list|)
argument_list|,
name|Permissions
operator|.
name|respectParentPermissions
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotRespectParentPermissions
parameter_list|()
block|{
name|List
argument_list|<
name|Long
argument_list|>
name|permissions
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
operator||
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
operator||
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|)
decl_stmt|;
for|for
control|(
name|long
name|p
range|:
name|permissions
control|)
block|{
name|assertFalse
argument_list|(
name|Permissions
operator|.
name|getString
argument_list|(
name|p
argument_list|)
argument_list|,
name|Permissions
operator|.
name|respectParentPermissions
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiff
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|ADD_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|WRITE
argument_list|,
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|SET_PROPERTY
operator||
name|Permissions
operator|.
name|REMOVE_NODE
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|WRITE
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|LOCK_MANAGEMENT
operator||
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiffFromAllPermissions
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|long
name|expected
init|=
operator|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
operator||
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
operator||
name|Permissions
operator|.
name|LIFECYCLE_MANAGEMENT
operator||
name|Permissions
operator|.
name|RETENTION_MANAGEMENT
operator||
name|Permissions
operator|.
name|MODIFY_CHILD_NODE_COLLECTION
operator||
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
operator||
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|WORKSPACE_MANAGEMENT
operator||
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
operator||
name|Permissions
operator|.
name|USER_MANAGEMENT
operator||
name|Permissions
operator|.
name|INDEX_DEFINITION_MANAGEMENT
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|ALL
argument_list|,
name|Permissions
operator|.
name|READ
operator||
name|Permissions
operator|.
name|WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDiffFromNoPermissions
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|ALL
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|diff
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsFromActions
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|Session
operator|.
name|ACTION_READ
operator|+
literal|","
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Permissions
operator|.
name|READ_NODE
operator||
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tl
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsFromPermissionNameActions
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|permissions
init|=
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
operator||
name|Permissions
operator|.
name|LOCK_MANAGEMENT
operator||
name|Permissions
operator|.
name|VERSION_MANAGEMENT
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Permissions
operator|.
name|getNames
argument_list|(
name|permissions
argument_list|)
decl_stmt|;
name|String
name|jcrActions
init|=
name|Text
operator|.
name|implode
argument_list|(
name|names
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|names
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|","
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|permissions
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|jcrActions
argument_list|,
name|tl
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsFromInvalidActions
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|Session
operator|.
name|ACTION_READ
operator|+
literal|",invalid"
argument_list|,
literal|"invalid"
argument_list|,
literal|"invalid,"
operator|+
name|Session
operator|.
name|ACTION_REMOVE
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|invalid
range|:
name|l
control|)
block|{
try|try
block|{
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|invalid
argument_list|,
name|tl
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsFromJackrabbitActions
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Permissions
operator|.
name|ADD_NODE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_NODE_TYPE_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_MANAGEMENT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_LOCKING
argument_list|,
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
argument_list|,
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_USER_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|USER_MANAGEMENT
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tl
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsOnAccessControlledNode
parameter_list|()
block|{
name|TreeLocation
name|tl
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/rep:policy"
argument_list|)
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|map
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|// read -> mapped to read-access-control
name|map
operator|.
name|put
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
comment|// all regular write -> mapped to modify-access-control (compatible and in
comment|// accordance to the previous behavior, where specifying an explicit
comment|// modify_access_control action was not possible.
name|map
operator|.
name|put
argument_list|(
name|Session
operator|.
name|ACTION_ADD_NODE
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
comment|// all other actions are mapped to the corresponding permission without
comment|// testing for item being ac-content
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_LOCKING
argument_list|,
name|Permissions
operator|.
name|LOCK_MANAGEMENT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_VERSIONING
argument_list|,
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|JackrabbitSession
operator|.
name|ACTION_USER_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|USER_MANAGEMENT
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|tl
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionRead
parameter_list|()
block|{
name|TreeLocation
name|treeLocation
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|treeLocation
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_NODE
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|treeLocation
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|treeLocation
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|nonExistingTree
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/nonExisting"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nonExistingTree
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|nonExistingTree
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|nonExistingTree
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|nonExistingProp
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/nonExisting"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nonExistingProp
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|nonExistingProp
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|nonExistingProp
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|existingProp
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/jcr:primaryType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|existingProp
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_PROPERTY
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|existingProp
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_READ
argument_list|,
name|existingProp
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionSetProperty
parameter_list|()
block|{
name|TreeLocation
name|treeLocation
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|treeLocation
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|treeLocation
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|treeLocation
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|nonExistingTree
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/nonExisting"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nonExistingTree
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|nonExistingTree
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|nonExistingTree
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|nonExistingProp
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/nonExisting"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nonExistingProp
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|ADD_PROPERTY
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|nonExistingProp
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|nonExistingProp
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|existingProp
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/jcr:primaryType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|existingProp
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_PROPERTY
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|existingProp
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|existingProp
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActionRemove
parameter_list|()
block|{
name|TreeLocation
name|treeLocation
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|treeLocation
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|REMOVE_NODE
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|treeLocation
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|treeLocation
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|nonExistingTree
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/nonExisting"
argument_list|)
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nonExistingTree
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|REMOVE
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|nonExistingTree
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|nonExistingTree
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|nonExistingProp
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/nonExisting"
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|nonExistingProp
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|REMOVE
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|nonExistingProp
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|nonExistingProp
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|TreeLocation
name|existingProp
init|=
name|TreeLocation
operator|.
name|create
argument_list|(
name|root
argument_list|,
literal|"/jcr:primaryType"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|existingProp
operator|.
name|getProperty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|REMOVE_PROPERTY
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_REMOVE
argument_list|,
name|existingProp
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|Session
operator|.
name|ACTION_SET_PROPERTY
argument_list|,
name|existingProp
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsNullString
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsEmptyString
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsUnknownName
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|NO_PERMISSION
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
literal|"unknown,permission,strings"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsSingleName
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsMultipleNames
parameter_list|()
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|Long
argument_list|,
name|Set
argument_list|<
name|Long
argument_list|>
argument_list|>
name|entry
range|:
name|TEST
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|p
range|:
name|entry
operator|.
name|getValue
argument_list|()
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|get
argument_list|(
name|p
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
name|Joiner
operator|.
name|on
argument_list|(
literal|','
argument_list|)
operator|.
name|join
argument_list|(
name|names
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
operator|.
name|longValue
argument_list|()
argument_list|,
name|Permissions
operator|.
name|getPermissions
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsForReservedPaths
parameter_list|()
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|mapping
init|=
name|ImmutableMap
operator|.
name|of
argument_list|(
name|NamespaceConstants
operator|.
name|NAMESPACES_PATH
argument_list|,
name|Permissions
operator|.
name|NAMESPACE_MANAGEMENT
argument_list|,
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
argument_list|,
name|Permissions
operator|.
name|NODE_TYPE_DEFINITION_MANAGEMENT
argument_list|,
name|PrivilegeConstants
operator|.
name|PRIVILEGES_PATH
argument_list|,
name|Permissions
operator|.
name|PRIVILEGE_MANAGEMENT
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|mapping
operator|.
name|keySet
argument_list|()
control|)
block|{
for|for
control|(
name|long
name|defaultPermission
range|:
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|mapping
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|longValue
argument_list|()
argument_list|,
name|Permissions
operator|.
name|getPermission
argument_list|(
name|path
argument_list|,
name|defaultPermission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsForVersionPaths
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|VersionConstants
operator|.
name|SYSTEM_PATHS
control|)
block|{
for|for
control|(
name|long
name|defaultPermission
range|:
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|Permissions
operator|.
name|VERSION_MANAGEMENT
argument_list|,
name|Permissions
operator|.
name|getPermission
argument_list|(
name|path
argument_list|,
name|defaultPermission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPermissionsForRegularPaths
parameter_list|()
block|{
for|for
control|(
name|String
name|path
range|:
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/"
argument_list|,
literal|"/a/b/c"
argument_list|,
literal|"/myfile/jcr:content"
argument_list|)
control|)
block|{
for|for
control|(
name|long
name|defaultPermission
range|:
name|Permissions
operator|.
name|PERMISSION_NAMES
operator|.
name|keySet
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|defaultPermission
argument_list|,
name|Permissions
operator|.
name|getPermission
argument_list|(
name|path
argument_list|,
name|defaultPermission
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

