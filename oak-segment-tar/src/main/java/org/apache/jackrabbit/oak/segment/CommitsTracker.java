begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|concurrentlinkedhashmap
operator|.
name|ConcurrentLinkedHashMap
import|;
end_import

begin_comment
comment|/**  * A simple tracker for the source of commits (writes) in  * {@link SegmentNodeStore}. It provides two basic functionalities:  *<ul>  *<li>exposes the number of commits executed per thread</li>  *<li>exposes the threads (and possibly their details - i.e., stack traces)  * currently waiting on the commit semaphore  *</ul>  *   * This class delegates thread-safety to its underlying state variables.   */
end_comment

begin_class
class|class
name|CommitsTracker
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_COMMITS_COUNT_MAP_SIZE
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|DEFAULT_COLLECT_STACK_TRACES
init|=
literal|true
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|collectStackTraces
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|queuedWritersMap
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|commitsCountMap
decl_stmt|;
name|CommitsTracker
parameter_list|()
block|{
name|this
argument_list|(
name|DEFAULT_COMMITS_COUNT_MAP_SIZE
argument_list|,
name|DEFAULT_COLLECT_STACK_TRACES
argument_list|)
expr_stmt|;
block|}
name|CommitsTracker
parameter_list|(
name|int
name|commitsCountMapMaxSize
parameter_list|,
name|boolean
name|collectStackTraces
parameter_list|)
block|{
name|this
operator|.
name|collectStackTraces
operator|=
name|collectStackTraces
expr_stmt|;
name|this
operator|.
name|commitsCountMap
operator|=
operator|new
name|ConcurrentLinkedHashMap
operator|.
name|Builder
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
operator|.
name|maximumWeightedCapacity
argument_list|(
name|commitsCountMapMaxSize
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|this
operator|.
name|queuedWritersMap
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|trackQueuedCommitOf
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|String
name|writerDetails
init|=
literal|"N/A"
decl_stmt|;
if|if
condition|(
name|collectStackTraces
condition|)
block|{
name|StringBuilder
name|threadDetails
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Stream
operator|.
name|of
argument_list|(
name|t
operator|.
name|getStackTrace
argument_list|()
argument_list|)
operator|.
name|forEach
argument_list|(
name|threadDetails
operator|::
name|append
argument_list|)
expr_stmt|;
name|writerDetails
operator|=
name|threadDetails
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|queuedWritersMap
operator|.
name|put
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
name|writerDetails
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|trackDequedCommitOf
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|queuedWritersMap
operator|.
name|remove
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|trackExecutedCommitOf
parameter_list|(
name|Thread
name|t
parameter_list|)
block|{
name|commitsCountMap
operator|.
name|compute
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|,
operator|(
name|w
operator|,
name|v
operator|)
operator|->
name|v
operator|==
literal|null
condition|?
literal|1
else|:
name|v
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setCollectStackTraces
parameter_list|(
name|boolean
name|flag
parameter_list|)
block|{
name|this
operator|.
name|collectStackTraces
operator|=
name|flag
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getQueuedWritersMap
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|queuedWritersMap
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|getCommitsCountMap
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|commitsCountMap
argument_list|)
return|;
block|}
block|}
end_class

end_unit

