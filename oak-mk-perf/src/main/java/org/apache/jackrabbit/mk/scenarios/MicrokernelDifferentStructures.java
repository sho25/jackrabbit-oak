begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|scenarios
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Chronometer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|Committer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|MicroKernelOperation
import|;
end_import

begin_class
specifier|public
class|class
name|MicrokernelDifferentStructures
block|{
comment|/**      * Tree structure:      *<p>      * rootNode (/)      *<p>      * N0 N1... Nn-1 Nn      */
specifier|public
specifier|static
name|void
name|writeNodesSameLevel
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|String
name|nodeNamePrefix
parameter_list|)
block|{
name|String
name|diff
init|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|nodesNumber
argument_list|,
name|nodeNamePrefix
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Committer
name|committer
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|committer
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodesSameLevel is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tree structure:      *<p>      * rootNode (/)      *<p>      * N0      *<p>      * N1      *<p>      * N2      *<p>      * N3      */
specifier|public
specifier|static
name|void
name|writeNodes1Child
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|String
name|nodeNamePrefix
parameter_list|)
block|{
name|String
name|diff
init|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|nodesNumber
argument_list|,
name|nodeNamePrefix
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Committer
name|committer
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|committer
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodes1Child is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tree structure:      *<p>      * Number of nodes per<b>level</b> =10^(<b>level</b>).      *<p>      * Each node has 10 children.      */
specifier|public
specifier|static
name|void
name|writeNodes10Children
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|String
name|nodeNamePrefix
parameter_list|)
block|{
name|String
name|diff
init|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
name|nodesNumber
argument_list|,
name|nodeNamePrefix
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Committer
name|committer
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|committer
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodes10Children is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tree structure:      *<p>      * Number of nodes per<b>level</b> =100^(<b>level</b>).      *<p>      * Each node has 100 children.      */
specifier|public
specifier|static
name|void
name|writeNodes100Children
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|String
name|nodeNamePrefix
parameter_list|)
block|{
name|String
name|diff
init|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
name|nodesNumber
argument_list|,
name|nodeNamePrefix
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Committer
name|committer
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|committer
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodes100Children is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Tree structure:      *<p>      * Number of nodes per<b>level</b> =1000^(<b>level</b>).      *<p>      * Each node has 1000 children.      */
specifier|public
specifier|static
name|void
name|writeNodes1000Children
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|Chronometer
name|chronometer
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|String
name|nodeNamePrefix
parameter_list|)
block|{
name|String
name|diff
init|=
name|MicroKernelOperation
operator|.
name|buildPyramidDiff
argument_list|(
literal|"/"
argument_list|,
literal|0
argument_list|,
literal|1000
argument_list|,
name|nodesNumber
argument_list|,
name|nodeNamePrefix
argument_list|,
operator|new
name|StringBuilder
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Committer
name|committer
init|=
operator|new
name|Committer
argument_list|()
decl_stmt|;
name|chronometer
operator|.
name|start
argument_list|()
expr_stmt|;
name|committer
operator|.
name|addNodes
argument_list|(
name|mk
argument_list|,
name|diff
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chronometer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total time for testWriteNodes1000Children is "
operator|+
name|chronometer
operator|.
name|getSeconds
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

