begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|mount
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
specifier|final
class|class
name|Mount
block|{
comment|/**      * Default Mount info which indicates that no explicit mount      * is created for given path      */
specifier|public
specifier|static
specifier|final
name|Mount
name|DEFAULT
init|=
operator|new
name|Mount
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|readOnly
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|defaultMount
decl_stmt|;
specifier|private
specifier|final
name|String
name|pathFragmentName
decl_stmt|;
specifier|public
name|Mount
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Mount
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|readOnly
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|readOnly
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Mount
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|readOnly
parameter_list|,
name|boolean
name|defaultMount
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|,
literal|"Mount name must not be null"
argument_list|)
expr_stmt|;
name|this
operator|.
name|readOnly
operator|=
name|readOnly
expr_stmt|;
name|this
operator|.
name|defaultMount
operator|=
name|defaultMount
expr_stmt|;
name|this
operator|.
name|pathFragmentName
operator|=
literal|"oak:"
operator|+
name|name
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|boolean
name|isReadOnly
parameter_list|()
block|{
return|return
name|readOnly
return|;
block|}
specifier|public
name|boolean
name|isDefault
parameter_list|()
block|{
return|return
name|defaultMount
return|;
block|}
comment|/**      * Decorated mount name which is meant to be used for constructing path      * which should become part of given mount      */
specifier|public
name|String
name|getPathFragmentName
parameter_list|()
block|{
return|return
name|pathFragmentName
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|getClass
argument_list|()
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Mount
name|mount
init|=
operator|(
name|Mount
operator|)
name|o
decl_stmt|;
return|return
name|name
operator|.
name|equals
argument_list|(
name|mount
operator|.
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|name
operator|.
name|hashCode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|String
name|readAttr
init|=
name|readOnly
condition|?
literal|"r"
else|:
literal|"rw"
decl_stmt|;
name|String
name|displayName
init|=
name|defaultMount
condition|?
literal|"default"
else|:
name|name
decl_stmt|;
return|return
name|displayName
operator|+
literal|"("
operator|+
name|readAttr
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

