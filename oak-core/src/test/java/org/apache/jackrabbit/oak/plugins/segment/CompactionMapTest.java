begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|get
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|inject
operator|.
name|internal
operator|.
name|util
operator|.
name|$Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|createTempFile
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|benchmark
operator|.
name|MicroBenchmark
operator|.
name|run
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|MAX_SEGMENT_SIZE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
operator|.
name|RECORD_ALIGN_BITS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentVersion
operator|.
name|V_11
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
operator|.
name|newFileStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeTrue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|benchmark
operator|.
name|MicroBenchmark
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|CompactionMapTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|BENCH
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"benchmark"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|SEED
init|=
name|Integer
operator|.
name|getInteger
argument_list|(
literal|"SEED"
argument_list|,
operator|new
name|Random
argument_list|()
operator|.
name|nextInt
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|(
name|SEED
argument_list|)
decl_stmt|;
specifier|private
name|File
name|directory
decl_stmt|;
specifier|private
name|SegmentStore
name|segmentStore
decl_stmt|;
specifier|private
name|CompactionMap
name|map
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|reference
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|directory
operator|=
name|createTempFile
argument_list|(
name|CompactionMapTest
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
argument_list|,
literal|"dir"
argument_list|,
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
expr_stmt|;
name|directory
operator|.
name|delete
argument_list|()
expr_stmt|;
name|directory
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|segmentStore
operator|=
name|newFileStore
argument_list|(
name|directory
argument_list|)
operator|.
name|create
argument_list|()
expr_stmt|;
name|SegmentWriter
name|writer
init|=
operator|new
name|SegmentWriter
argument_list|(
name|segmentStore
argument_list|,
name|getTracker
argument_list|()
argument_list|,
name|V_11
argument_list|)
decl_stmt|;
name|map
operator|=
operator|new
name|CompactionMap
argument_list|(
literal|100000
argument_list|,
name|writer
operator|.
name|getTracker
argument_list|()
argument_list|)
expr_stmt|;
name|reference
operator|=
name|newLinkedHashMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|segmentStore
operator|.
name|close
argument_list|()
expr_stmt|;
name|directory
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
specifier|private
name|SegmentTracker
name|getTracker
parameter_list|()
block|{
return|return
name|segmentStore
operator|.
name|getTracker
argument_list|()
return|;
block|}
comment|/**      * Returns a new valid record offset, between {@code a} and {@code b},      * exclusive.      */
specifier|private
specifier|static
name|int
name|newValidOffset
parameter_list|(
name|Random
name|random
parameter_list|,
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|)
block|{
name|int
name|p
init|=
operator|(
name|a
operator|>>
name|RECORD_ALIGN_BITS
operator|)
operator|+
literal|1
decl_stmt|;
name|int
name|q
init|=
operator|(
name|b
operator|>>
name|RECORD_ALIGN_BITS
operator|)
decl_stmt|;
return|return
operator|(
name|p
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|q
operator|-
name|p
argument_list|)
operator|)
operator|<<
name|RECORD_ALIGN_BITS
return|;
block|}
specifier|private
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|randomMap
parameter_list|(
name|int
name|maxSegments
parameter_list|,
name|int
name|maxEntriesPerSegment
parameter_list|)
block|{
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|map
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|segments
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxSegments
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
condition|;
name|i
operator|++
control|)
block|{
name|SegmentId
name|id
init|=
name|getTracker
argument_list|()
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
name|int
name|n
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxEntriesPerSegment
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
name|MAX_SEGMENT_SIZE
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|n
condition|;
name|j
operator|++
control|)
block|{
name|offset
operator|=
name|newValidOffset
argument_list|(
name|rnd
argument_list|,
operator|(
name|n
operator|-
name|j
operator|)
operator|<<
name|RECORD_ALIGN_BITS
argument_list|,
name|offset
argument_list|)
expr_stmt|;
name|RecordId
name|before
init|=
operator|new
name|RecordId
argument_list|(
name|id
argument_list|,
name|offset
argument_list|)
decl_stmt|;
name|RecordId
name|after
init|=
operator|new
name|RecordId
argument_list|(
name|getTracker
argument_list|()
operator|.
name|newDataSegmentId
argument_list|()
argument_list|,
name|newValidOffset
argument_list|(
name|rnd
argument_list|,
literal|0
argument_list|,
name|MAX_SEGMENT_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|before
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|map
return|;
block|}
specifier|private
name|void
name|addRandomEntries
parameter_list|(
name|int
name|maxSegments
parameter_list|,
name|int
name|maxEntriesPerSegment
parameter_list|)
block|{
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|tuple
range|:
name|randomMap
argument_list|(
name|maxSegments
argument_list|,
name|maxEntriesPerSegment
argument_list|)
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reference
operator|.
name|put
argument_list|(
name|tuple
operator|.
name|getKey
argument_list|()
argument_list|,
name|tuple
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
name|tuple
operator|.
name|getKey
argument_list|()
argument_list|,
name|tuple
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|removeRandomEntries
parameter_list|(
name|int
name|count
parameter_list|)
block|{
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|remove
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|count
operator|&&
operator|!
name|reference
operator|.
name|isEmpty
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|int
name|j
init|=
name|rnd
operator|.
name|nextInt
argument_list|(
name|reference
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|remove
operator|.
name|add
argument_list|(
name|get
argument_list|(
name|reference
operator|.
name|keySet
argument_list|()
argument_list|,
name|j
argument_list|)
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|removeUUIDs
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|sid
range|:
name|remove
control|)
block|{
name|removeUUIDs
operator|.
name|add
argument_list|(
operator|new
name|UUID
argument_list|(
name|sid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|sid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Iterator
argument_list|<
name|RecordId
argument_list|>
name|it
init|=
name|reference
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|sid
operator|.
name|equals
argument_list|(
name|it
operator|.
name|next
argument_list|()
operator|.
name|getSegmentId
argument_list|()
argument_list|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|map
operator|.
name|compress
argument_list|(
name|removeUUIDs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkMap
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|entry
range|:
name|reference
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|assertTrue
argument_list|(
literal|"Failed with seed "
operator|+
name|SEED
argument_list|,
name|map
operator|.
name|wasCompactedTo
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
literal|"Failed with seed "
operator|+
name|SEED
argument_list|,
name|map
operator|.
name|wasCompactedTo
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|randomTest
parameter_list|()
block|{
name|int
name|maxSegments
init|=
literal|10000
decl_stmt|;
name|int
name|maxEntriesPerSegment
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|10
condition|;
name|k
operator|++
control|)
block|{
name|addRandomEntries
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxSegments
argument_list|)
operator|+
literal|1
argument_list|,
name|rnd
operator|.
name|nextInt
argument_list|(
name|maxEntriesPerSegment
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|reference
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|removeRandomEntries
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|reference
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|checkMap
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|compress
argument_list|()
expr_stmt|;
name|checkMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|benchLargeMap
parameter_list|()
block|{
name|assumeTrue
argument_list|(
name|BENCH
argument_list|)
expr_stmt|;
comment|// check the memory use of really large mappings, 1M compacted segments with 10 records each.
name|Runtime
name|runtime
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
decl_stmt|;
name|Stopwatch
name|timer
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000000
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|%
literal|100000
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|": "
operator|+
operator|(
name|runtime
operator|.
name|totalMemory
argument_list|()
operator|-
name|runtime
operator|.
name|freeMemory
argument_list|()
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|+
literal|"MB, "
operator|+
name|timer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|timer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
name|SegmentId
name|sid
init|=
name|getTracker
argument_list|()
operator|.
name|newDataSegmentId
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|10
condition|;
name|j
operator|++
control|)
block|{
name|RecordId
name|rid
init|=
operator|new
name|RecordId
argument_list|(
name|sid
argument_list|,
name|j
operator|<<
name|RECORD_ALIGN_BITS
argument_list|)
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
name|rid
argument_list|,
name|rid
argument_list|)
expr_stmt|;
block|}
block|}
name|map
operator|.
name|compress
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"final: "
operator|+
operator|(
name|runtime
operator|.
name|totalMemory
argument_list|()
operator|-
name|runtime
operator|.
name|freeMemory
argument_list|()
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
operator|+
literal|"MB, "
operator|+
name|timer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|benchPut
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|BENCH
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|PutBenchmark
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|PutBenchmark
argument_list|(
literal|1000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|PutBenchmark
argument_list|(
literal|10000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|PutBenchmark
argument_list|(
literal|100000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|PutBenchmark
argument_list|(
literal|1000000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|benchGet
parameter_list|()
throws|throws
name|Exception
block|{
name|assumeTrue
argument_list|(
name|BENCH
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|GetBenchmark
argument_list|(
literal|1000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|GetBenchmark
argument_list|(
literal|10000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|GetBenchmark
argument_list|(
literal|100000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|run
argument_list|(
operator|new
name|GetBenchmark
argument_list|(
literal|1000000
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|PutBenchmark
extends|extends
name|Benchmark
block|{
specifier|private
specifier|final
name|int
name|maxSegments
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxEntriesPerSegment
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|putIds
decl_stmt|;
specifier|public
name|PutBenchmark
parameter_list|(
name|int
name|maxSegments
parameter_list|,
name|int
name|maxEntriesPerSegment
parameter_list|)
block|{
name|this
operator|.
name|maxSegments
operator|=
name|maxSegments
expr_stmt|;
name|this
operator|.
name|maxEntriesPerSegment
operator|=
name|maxEntriesPerSegment
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|maxSegments
operator|>
literal|0
condition|)
block|{
name|addRandomEntries
argument_list|(
name|maxSegments
argument_list|,
name|maxEntriesPerSegment
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeRun
parameter_list|()
throws|throws
name|Exception
block|{
name|putIds
operator|=
name|randomMap
argument_list|(
literal|1000
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|Entry
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
name|tuple
range|:
name|putIds
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|map
operator|.
name|put
argument_list|(
name|tuple
operator|.
name|getKey
argument_list|()
argument_list|,
name|tuple
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Put benchmark: maxSegments="
operator|+
name|maxSegments
operator|+
literal|", maxEntriesPerSegment="
operator|+
name|maxEntriesPerSegment
return|;
block|}
block|}
specifier|private
class|class
name|GetBenchmark
extends|extends
name|Benchmark
block|{
specifier|private
specifier|final
name|int
name|maxSegments
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxEntriesPerSegment
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RecordId
argument_list|>
name|getCandidateIds
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|RecordId
argument_list|>
name|getIds
init|=
name|newArrayList
argument_list|()
decl_stmt|;
specifier|public
name|GetBenchmark
parameter_list|(
name|int
name|maxSegments
parameter_list|,
name|int
name|maxEntriesPerSegment
parameter_list|)
block|{
name|this
operator|.
name|maxSegments
operator|=
name|maxSegments
expr_stmt|;
name|this
operator|.
name|maxEntriesPerSegment
operator|=
name|maxEntriesPerSegment
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|IOException
block|{
name|addRandomEntries
argument_list|(
name|maxSegments
argument_list|,
name|maxEntriesPerSegment
argument_list|)
expr_stmt|;
name|map
operator|.
name|compress
argument_list|()
expr_stmt|;
for|for
control|(
name|RecordId
name|recordId
range|:
name|reference
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|reference
operator|.
name|size
argument_list|()
argument_list|)
operator|%
literal|10000
operator|==
literal|0
condition|)
block|{
name|getCandidateIds
operator|.
name|add
argument_list|(
name|recordId
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|10000
condition|;
name|k
operator|++
control|)
block|{
name|getCandidateIds
operator|.
name|add
argument_list|(
operator|new
name|RecordId
argument_list|(
name|getTracker
argument_list|()
operator|.
name|newDataSegmentId
argument_list|()
argument_list|,
name|newValidOffset
argument_list|(
name|rnd
argument_list|,
literal|0
argument_list|,
name|MAX_SEGMENT_SIZE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeRun
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|10000
condition|;
name|k
operator|++
control|)
block|{
name|getIds
operator|.
name|add
argument_list|(
name|getCandidateIds
operator|.
name|get
argument_list|(
name|rnd
operator|.
name|nextInt
argument_list|(
name|getCandidateIds
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|RecordId
name|id
range|:
name|getIds
control|)
block|{
name|map
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterRun
parameter_list|()
throws|throws
name|Exception
block|{
name|getIds
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"Get benchmark: maxSegments="
operator|+
name|maxSegments
operator|+
literal|", maxEntriesPerSegment="
operator|+
name|maxEntriesPerSegment
return|;
block|}
block|}
block|}
end_class

end_unit

