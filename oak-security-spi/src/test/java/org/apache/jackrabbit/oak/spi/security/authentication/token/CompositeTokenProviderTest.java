begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Credentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|GuestCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|CompositeTokenProviderTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TOKEN
init|=
literal|"t"
decl_stmt|;
specifier|private
name|TokenInfo
name|info
decl_stmt|;
specifier|private
name|TokenProvider
name|composite
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|before
parameter_list|()
block|{
name|info
operator|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TokenInfo
operator|.
name|class
argument_list|)
expr_stmt|;
name|Mockito
operator|.
name|when
argument_list|(
name|info
operator|.
name|getToken
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|TOKEN
argument_list|)
expr_stmt|;
name|TokenProvider
name|tp1
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp2
init|=
operator|new
name|TestTokenProvider
argument_list|()
decl_stmt|;
name|composite
operator|=
name|CompositeTokenProvider
operator|.
name|newInstance
argument_list|(
name|tp1
argument_list|,
name|tp2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullProvider
parameter_list|()
block|{
name|TokenProvider
name|tp
init|=
name|CompositeTokenProvider
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|tp
argument_list|,
name|CompositeTokenProvider
operator|.
name|newInstance
argument_list|(
name|ImmutableList
operator|.
expr|<
name|TokenProvider
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|Credentials
name|creds
init|=
operator|new
name|Credentials
argument_list|()
block|{}
decl_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|doCreateToken
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|tp
operator|.
name|doCreateToken
argument_list|(
name|creds
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tp
operator|.
name|createToken
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tp
operator|.
name|createToken
argument_list|(
literal|"userID"
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|String
operator|>
name|of
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tp
operator|.
name|createToken
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tp
operator|.
name|createToken
argument_list|(
name|creds
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tp
operator|.
name|getTokenInfo
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|tp
operator|.
name|getTokenInfo
argument_list|(
literal|"anyString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleProvider
parameter_list|()
block|{
name|TokenProvider
name|base
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|CompositeTokenProvider
operator|.
name|newInstance
argument_list|(
name|base
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|base
argument_list|,
name|tp
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|base
argument_list|,
name|CompositeTokenProvider
operator|.
name|newInstance
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|base
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateCompositeProvider
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|composite
operator|instanceof
name|CompositeTokenProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateCompositeProviderFromList
parameter_list|()
block|{
name|TokenProvider
name|base
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TokenProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|TokenProvider
name|tp
init|=
name|CompositeTokenProvider
operator|.
name|newInstance
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|base
argument_list|,
name|base
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tp
operator|instanceof
name|CompositeTokenProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDoCreateToken
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|composite
operator|.
name|doCreateToken
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"id"
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|composite
operator|.
name|doCreateToken
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|composite
operator|.
name|doCreateToken
argument_list|(
operator|new
name|Credentials
argument_list|()
block|{}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCreateTokenFromCredentials
parameter_list|()
block|{
name|assertSame
argument_list|(
name|info
argument_list|,
name|composite
operator|.
name|createToken
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"id"
argument_list|,
operator|new
name|char
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|composite
operator|.
name|createToken
argument_list|(
operator|new
name|GuestCredentials
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|composite
operator|.
name|createToken
argument_list|(
operator|new
name|Credentials
argument_list|()
block|{         }
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|UnsupportedOperationException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testCreateTokenFromId
parameter_list|()
block|{
name|composite
operator|.
name|createToken
argument_list|(
literal|"id"
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|of
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetTokenInfo
parameter_list|()
block|{
name|assertSame
argument_list|(
name|info
argument_list|,
name|composite
operator|.
name|getTokenInfo
argument_list|(
name|TOKEN
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|composite
operator|.
name|getTokenInfo
argument_list|(
literal|"any"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
class|class
name|TestTokenProvider
implements|implements
name|TokenProvider
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|doCreateToken
parameter_list|(
annotation|@
name|NotNull
name|Credentials
name|credentials
parameter_list|)
block|{
return|return
name|credentials
operator|instanceof
name|SimpleCredentials
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|NotNull
name|Credentials
name|credentials
parameter_list|)
block|{
if|if
condition|(
name|credentials
operator|instanceof
name|SimpleCredentials
condition|)
block|{
return|return
name|info
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|TokenInfo
name|createToken
parameter_list|(
annotation|@
name|NotNull
name|String
name|userId
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|attributes
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|TokenInfo
name|getTokenInfo
parameter_list|(
annotation|@
name|NotNull
name|String
name|token
parameter_list|)
block|{
if|if
condition|(
name|TOKEN
operator|.
name|equals
argument_list|(
name|token
argument_list|)
condition|)
block|{
return|return
name|info
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
empty_stmt|;
block|}
end_class

end_unit

