begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|cluster
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Repository
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|util
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * A simple, temporary benchmark for many child nodes.  */
end_comment

begin_class
specifier|public
class|class
name|ManyChildrenTest
block|{
name|NodeStoreFixture
name|fixture
init|=
name|NodeStoreFixture
operator|.
name|MONGO_NS
decl_stmt|;
comment|//    NodeStoreFixture fixture = NodeStoreFixture.MONGO_MK;
comment|//    NodeStoreFixture fixture = NodeStoreFixture.SEGMENT_MK;
name|Session
name|session
decl_stmt|;
name|NodeStore
name|nodeStore
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|init
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// to test in a cluster, use:
comment|// nodeStore = fixture.createNodeStore(1);
name|nodeStore
operator|=
name|fixture
operator|.
name|createNodeStore
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodeStore
operator|!=
literal|null
condition|)
block|{
name|Repository
name|rep
init|=
operator|new
name|Jcr
argument_list|(
name|nodeStore
argument_list|)
operator|.
name|createRepository
argument_list|()
decl_stmt|;
name|session
operator|=
name|rep
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|logout
parameter_list|()
block|{
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
name|fixture
operator|.
name|dispose
argument_list|(
name|nodeStore
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|manyChildrenWithoutIndex
parameter_list|()
throws|throws
name|Exception
block|{
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|Node
name|index
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"oak:index"
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|hasNode
argument_list|(
literal|"nodetype"
argument_list|)
condition|)
block|{
name|index
operator|.
name|getNode
argument_list|(
literal|"nodetype"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|,
name|last
init|=
name|start
decl_stmt|;
comment|// to test with more nodes, use:
comment|// int count = 1000000;
name|int
name|count
init|=
literal|10
decl_stmt|;
name|Profiler
name|prof
init|=
literal|null
decl_stmt|;
name|String
name|nodeType
init|=
literal|"oak:unstructured"
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|hasNode
argument_list|(
literal|"many"
argument_list|)
condition|)
block|{
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|getNode
argument_list|(
literal|"many"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|Node
name|many
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"many"
argument_list|,
name|nodeType
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|many
operator|.
name|addNode
argument_list|(
literal|"test"
operator|+
name|i
argument_list|,
name|nodeType
argument_list|)
decl_stmt|;
name|n
operator|.
name|setProperty
argument_list|(
literal|"prop"
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|last
operator|>
literal|5000
condition|)
block|{
name|int
name|opsPerSecond
init|=
call|(
name|int
call|)
argument_list|(
name|i
operator|*
literal|1000
operator|/
operator|(
name|now
operator|-
name|start
operator|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" ops; "
operator|+
name|opsPerSecond
operator|+
literal|" op/s"
argument_list|)
expr_stmt|;
name|last
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|prof
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prof
operator|.
name|getTop
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opsPerSecond
operator|<
literal|1000
operator|&&
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|prof
operator|=
operator|new
name|Profiler
argument_list|()
expr_stmt|;
name|prof
operator|.
name|startCollecting
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|last
operator|=
name|start
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|n
init|=
name|many
operator|.
name|getNode
argument_list|(
literal|"test"
operator|+
name|i
argument_list|)
decl_stmt|;
name|long
name|x
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"prop"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getLong
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|i
argument_list|,
name|x
argument_list|)
expr_stmt|;
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|now
operator|-
name|last
operator|>
literal|5000
condition|)
block|{
name|int
name|opsPerSecond
init|=
call|(
name|int
call|)
argument_list|(
name|i
operator|*
literal|1000
operator|/
operator|(
name|now
operator|-
name|start
operator|)
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|i
operator|+
literal|" read ops; "
operator|+
name|opsPerSecond
operator|+
literal|" op/s"
argument_list|)
expr_stmt|;
name|last
operator|=
name|now
expr_stmt|;
if|if
condition|(
name|prof
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|prof
operator|.
name|getTop
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opsPerSecond
operator|<
literal|1000
operator|&&
name|i
operator|%
literal|100
operator|==
literal|0
condition|)
block|{
name|prof
operator|=
operator|new
name|Profiler
argument_list|()
expr_stmt|;
name|prof
operator|.
name|startCollecting
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

