begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|migration
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|copyOf
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_comment
comment|/**  * The NodeStateCopier and NodeStateCopier.Builder classes allow  * recursively copying a NodeState to a NodeBuilder.  *<br>  * The copy algorithm is optimized for copying nodes between two  * different NodeStore instances, i.e. where comparing NodeStates  * is imprecise and/or expensive.  *<br>  * The algorithm does a post-order traversal. I.e. it copies  * changed leaf-nodes first.  *<br>  * The work for a traversal without any differences between  * {@code source} and {@code target} is equivalent to the single  * execution of a naive equals implementation.  *<br>  *<b>Usage:</b> For most use-cases the Builder API should be  * preferred. It allows setting {@code includePaths},  * {@code excludePaths} and {@code mergePaths}.  *<br>  *<b>Include paths:</b> if include paths are set, only these paths  * and their sub-trees are copied. Any nodes that are not within the  * scope of an include path are<i>implicitly excluded</i>.  *<br>  *<b>Exclude paths:</b> if exclude paths are set, any nodes matching  * or below the excluded path are not copied. If an excluded node does  * exist in the target, it is removed (see also merge paths).  *<b>Exclude fragments:</b> if exclude fragments are set, nodes with names  * matching any of the fragments (and their subtrees) are not copied. If an  * excluded node does exist in the target, it is removed.  *<b>Merge paths:</b> if merge paths are set, any nodes matching or  * below the merged path will not be deleted from target, even if they  * are missing in (or excluded from) the source.  */
end_comment

begin_class
specifier|public
class|class
name|NodeStateCopier
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|NodeStateCopier
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includePaths
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludePaths
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|fragmentPaths
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludeFragments
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
decl_stmt|;
specifier|private
name|NodeStateCopier
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|includePaths
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excludePaths
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|fragmentPaths
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|excludeFragments
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
parameter_list|)
block|{
name|this
operator|.
name|includePaths
operator|=
name|includePaths
expr_stmt|;
name|this
operator|.
name|excludePaths
operator|=
name|excludePaths
expr_stmt|;
name|this
operator|.
name|fragmentPaths
operator|=
name|fragmentPaths
expr_stmt|;
name|this
operator|.
name|excludeFragments
operator|=
name|excludeFragments
expr_stmt|;
name|this
operator|.
name|mergePaths
operator|=
name|mergePaths
expr_stmt|;
block|}
comment|/**      * Create a NodeStateCopier.Builder.      *      * @return a NodeStateCopier.Builder      * @see NodeStateCopier.Builder      */
specifier|public
specifier|static
name|Builder
name|builder
parameter_list|()
block|{
return|return
operator|new
name|Builder
argument_list|()
return|;
block|}
comment|/**      * Shorthand method to copy one NodeStore to another. The changes in the      * target NodeStore are automatically persisted.      *      * @param source NodeStore to copy from.      * @param target NodeStore to copy to.      * @return true if the target has been modified      * @throws CommitFailedException if the operation fails      * @see NodeStateCopier.Builder#copy(NodeStore, NodeStore)      */
specifier|public
specifier|static
name|boolean
name|copyNodeStore
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|NodeStore
name|source
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|NodeStore
name|target
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|builder
argument_list|()
operator|.
name|copy
argument_list|(
name|checkNotNull
argument_list|(
name|source
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|target
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Copies all changed properties from the source NodeState to the target      * NodeBuilder instance.      *      * @param source The NodeState to copy from.      * @param target The NodeBuilder to copy to.      * @return Whether changes were made or not.      */
specifier|public
specifier|static
name|boolean
name|copyProperties
parameter_list|(
name|NodeState
name|source
parameter_list|,
name|NodeBuilder
name|target
parameter_list|)
block|{
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
comment|// remove removed properties
for|for
control|(
specifier|final
name|PropertyState
name|property
range|:
name|target
operator|.
name|getProperties
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|property
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|target
operator|.
name|removeProperty
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// add new properties and change changed properties
for|for
control|(
name|PropertyState
name|property
range|:
name|source
operator|.
name|getProperties
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|property
operator|.
name|equals
argument_list|(
name|target
operator|.
name|getProperty
argument_list|(
name|property
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
condition|)
block|{
name|target
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|hasChanges
return|;
block|}
specifier|private
name|boolean
name|copyNodeState
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|NodeState
name|sourceRoot
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|NodeBuilder
name|targetRoot
parameter_list|)
block|{
specifier|final
name|NodeState
name|wrappedSource
init|=
name|FilteringNodeState
operator|.
name|wrap
argument_list|(
literal|"/"
argument_list|,
name|sourceRoot
argument_list|,
name|this
operator|.
name|includePaths
argument_list|,
name|this
operator|.
name|excludePaths
argument_list|,
name|this
operator|.
name|fragmentPaths
argument_list|,
name|this
operator|.
name|excludeFragments
argument_list|)
decl_stmt|;
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|includePath
range|:
name|this
operator|.
name|includePaths
control|)
block|{
name|hasChanges
operator|=
name|copyMissingAncestors
argument_list|(
name|sourceRoot
argument_list|,
name|targetRoot
argument_list|,
name|includePath
argument_list|)
operator|||
name|hasChanges
expr_stmt|;
specifier|final
name|NodeState
name|sourceState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|wrappedSource
argument_list|,
name|includePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceState
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|NodeBuilder
name|targetBuilder
init|=
name|getChildNodeBuilder
argument_list|(
name|targetRoot
argument_list|,
name|includePath
argument_list|)
decl_stmt|;
name|hasChanges
operator|=
name|copyNodeState
argument_list|(
name|sourceState
argument_list|,
name|targetBuilder
argument_list|,
name|includePath
argument_list|,
name|this
operator|.
name|mergePaths
argument_list|)
operator|||
name|hasChanges
expr_stmt|;
block|}
block|}
return|return
name|hasChanges
return|;
block|}
comment|/**      * Recursively copies the source NodeState to the target NodeBuilder.      *<br>      * Nodes that exist in the {@code target} but not in the {@code source}      * are removed, unless they are descendants of one of the {@code mergePaths}.      * This is determined by checking if the {@code currentPath} is a descendant      * of any of the {@code mergePaths}.      *<br>      *<b>Note:</b> changes are not persisted.      *      * @param source NodeState to copy from      * @param target NodeBuilder to copy to      * @param currentPath The path of both the source and target arguments.      * @param mergePaths A Set of paths under which existing nodes should be      *                   preserved, even if the do not exist in the source.      * @return An indication of whether there were changes or not.      */
specifier|private
specifier|static
name|boolean
name|copyNodeState
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|NodeState
name|source
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|NodeBuilder
name|target
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|String
name|currentPath
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
parameter_list|)
block|{
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
comment|// delete deleted children
for|for
control|(
specifier|final
name|String
name|childName
range|:
name|target
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|source
operator|.
name|hasChildNode
argument_list|(
name|childName
argument_list|)
operator|&&
operator|!
name|isMerge
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentPath
argument_list|,
name|childName
argument_list|)
argument_list|,
name|mergePaths
argument_list|)
condition|)
block|{
name|target
operator|.
name|setChildNode
argument_list|(
name|childName
argument_list|,
name|EmptyNodeState
operator|.
name|MISSING_NODE
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|source
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
specifier|final
name|String
name|childName
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|NodeState
name|childSource
init|=
name|child
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|hasChildNode
argument_list|(
name|childName
argument_list|)
condition|)
block|{
comment|// add new children
name|target
operator|.
name|setChildNode
argument_list|(
name|childName
argument_list|,
name|childSource
argument_list|)
expr_stmt|;
name|hasChanges
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// recurse into existing children
specifier|final
name|NodeBuilder
name|childTarget
init|=
name|target
operator|.
name|getChildNode
argument_list|(
name|childName
argument_list|)
decl_stmt|;
specifier|final
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|currentPath
argument_list|,
name|childName
argument_list|)
decl_stmt|;
name|hasChanges
operator|=
name|copyNodeState
argument_list|(
name|childSource
argument_list|,
name|childTarget
argument_list|,
name|childPath
argument_list|,
name|mergePaths
argument_list|)
operator|||
name|hasChanges
expr_stmt|;
block|}
block|}
name|hasChanges
operator|=
name|copyProperties
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
operator|||
name|hasChanges
expr_stmt|;
if|if
condition|(
name|hasChanges
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Node {} has changes"
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|hasChanges
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isMerge
parameter_list|(
name|String
name|path
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
parameter_list|)
block|{
for|for
control|(
name|String
name|mergePath
range|:
name|mergePaths
control|)
block|{
if|if
condition|(
name|PathUtils
operator|.
name|isAncestor
argument_list|(
name|mergePath
argument_list|,
name|path
argument_list|)
operator|||
name|mergePath
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Ensure that all ancestors of {@code path} are present in {@code targetRoot}. Copies any      * missing ancestors from {@code sourceRoot}.      *      * @param sourceRoot NodeState to copy from      * @param targetRoot NodeBuilder to copy to      * @param path The path along which ancestors should be copied.      */
specifier|private
specifier|static
name|boolean
name|copyMissingAncestors
parameter_list|(
specifier|final
name|NodeState
name|sourceRoot
parameter_list|,
specifier|final
name|NodeBuilder
name|targetRoot
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
block|{
name|NodeState
name|current
init|=
name|sourceRoot
decl_stmt|;
name|NodeBuilder
name|currentBuilder
init|=
name|targetRoot
decl_stmt|;
name|boolean
name|hasChanges
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
if|if
condition|(
name|current
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|targetHasChild
init|=
name|currentBuilder
operator|.
name|hasChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|current
operator|=
name|current
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|currentBuilder
operator|=
name|currentBuilder
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|targetHasChild
condition|)
block|{
name|hasChanges
operator|=
name|copyProperties
argument_list|(
name|current
argument_list|,
name|currentBuilder
argument_list|)
operator|||
name|hasChanges
expr_stmt|;
block|}
block|}
block|}
return|return
name|hasChanges
return|;
block|}
comment|/**      * Allows retrieving a NodeBuilder by path relative to the given root NodeBuilder.      *      * All NodeBuilders are created via {@link NodeBuilder#child(String)} and are thus      * implicitly created.      *      * @param root The NodeBuilder to consider the root node.      * @param path An absolute or relative path, which is evaluated as a relative path under the root NodeBuilder.      * @return a NodeBuilder instance, never null      */
annotation|@
name|NotNull
specifier|private
specifier|static
name|NodeBuilder
name|getChildNodeBuilder
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|NodeBuilder
name|root
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|child
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|child
operator|=
name|child
operator|.
name|child
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|child
return|;
block|}
comment|/**      * The NodeStateCopier.Builder allows configuring a NodeState copy operation with      * {@code includePaths}, {@code excludePaths} and {@code mergePaths}.      *<br>      *<b>Include paths</b> can define which paths should be copied from the source to the      * target.      *<br>      *<b>Exclude paths</b> allow restricting which paths should be copied. This is      * especially useful when there are individual nodes in an included path that      * should not be copied.      *<br>      * By default copying will remove items that already exist in the target but do      * not exist in the source. If this behaviour is undesired that is where merge      * paths come in.      *<br>      *<b>Merge paths</b> dictate in which parts of the tree the copy operation should      * be<i>additive</i>, i.e. the content from source is merged with the content      * in the target. Nodes that are present in the target but not in the source are      * then not deleted. However, in the case where nodes are present in both the source      * and the target, the node from the source is copied with its properties and any      * properties previously present on the target's node are lost.      *<br>      * Finally, using one of the {@code copy} methods, NodeStores or NodeStates can      * be copied.      */
specifier|public
specifier|static
class|class
name|Builder
block|{
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|includePaths
init|=
name|of
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|excludePaths
init|=
name|emptySet
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|fragmentPaths
init|=
name|emptySet
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|excludeFragments
init|=
name|emptySet
argument_list|()
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|mergePaths
init|=
name|emptySet
argument_list|()
decl_stmt|;
specifier|private
name|Builder
parameter_list|()
block|{}
comment|/**          * Set include paths.          *          * @param paths include paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|include
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkNotNull
argument_list|(
name|paths
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|includePaths
operator|=
name|copyOf
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Convenience wrapper for {@link #include(Set)}.          *          * @param paths include paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|include
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|paths
parameter_list|)
block|{
return|return
name|include
argument_list|(
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|paths
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Set exclude paths.          *          * @param paths exclude paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|exclude
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkNotNull
argument_list|(
name|paths
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|excludePaths
operator|=
name|copyOf
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Convenience wrapper for {@link #exclude(Set)}.          *          * @param paths exclude paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|exclude
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|paths
parameter_list|)
block|{
return|return
name|exclude
argument_list|(
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|paths
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Set fragment paths.          *          * @param paths fragment paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|supportFragment
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkNotNull
argument_list|(
name|paths
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|fragmentPaths
operator|=
name|copyOf
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Convenience wrapper for {@link #supportFragment(Set)}.          *          * @param paths fragment paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|supportFragment
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|paths
parameter_list|)
block|{
return|return
name|supportFragment
argument_list|(
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|paths
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Set exclude fragments.          *          * @param fragments exclude fragments          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|excludeFragments
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|String
argument_list|>
name|fragments
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkNotNull
argument_list|(
name|fragments
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|excludeFragments
operator|=
name|copyOf
argument_list|(
name|fragments
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Convenience wrapper for {@link #exclude(Set)}.          *          * @param fragments exclude fragments          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|excludeFragments
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|fragments
parameter_list|)
block|{
return|return
name|exclude
argument_list|(
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|fragments
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Set merge paths.          *          * @param paths merge paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|merge
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkNotNull
argument_list|(
name|paths
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|mergePaths
operator|=
name|copyOf
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**          * Convenience wrapper for {@link #merge(Set)}.          *          * @param paths merge paths          * @return this Builder instance          * @see NodeStateCopier#NodeStateCopier(Set, Set, Set, Set, Set)          */
annotation|@
name|NotNull
specifier|public
name|Builder
name|merge
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|paths
parameter_list|)
block|{
return|return
name|merge
argument_list|(
name|copyOf
argument_list|(
name|checkNotNull
argument_list|(
name|paths
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Creates a NodeStateCopier to copy the {@code sourceRoot} NodeState to the          * {@code targetRoot} NodeBuilder, using any include, exclude and merge paths          * set on this NodeStateCopier.Builder.          *<br>          * It is the responsibility of the caller to persist any changes using e.g.          * {@link NodeStore#merge(NodeBuilder, CommitHook, CommitInfo)}.          *          * @param sourceRoot NodeState to copy from          * @param targetRoot NodeBuilder to copy to          * @return true if there were any changes, false if sourceRoot and targetRoot represent          *         the same content          */
specifier|public
name|boolean
name|copy
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|NodeState
name|sourceRoot
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|NodeBuilder
name|targetRoot
parameter_list|)
block|{
specifier|final
name|NodeStateCopier
name|copier
init|=
operator|new
name|NodeStateCopier
argument_list|(
name|includePaths
argument_list|,
name|excludePaths
argument_list|,
name|fragmentPaths
argument_list|,
name|excludeFragments
argument_list|,
name|mergePaths
argument_list|)
decl_stmt|;
return|return
name|copier
operator|.
name|copyNodeState
argument_list|(
name|checkNotNull
argument_list|(
name|sourceRoot
argument_list|)
argument_list|,
name|checkNotNull
argument_list|(
name|targetRoot
argument_list|)
argument_list|)
return|;
block|}
comment|/**          * Creates a NodeStateCopier to copy the {@code source} NodeStore to the          * {@code target} NodeStore, using any include, exclude and merge paths          * set on this NodeStateCopier.Builder.          *<br>          * Changes are automatically persisted with empty CommitHooks and CommitInfo          * via {@link NodeStore#merge(NodeBuilder, CommitHook, CommitInfo)}.          *          * @param source NodeStore to copy from          * @param target NodeStore to copy to          * @return true if there were any changes, false if source and target represent          *         the same content          * @throws CommitFailedException if the copy operation fails          */
specifier|public
name|boolean
name|copy
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|NodeStore
name|source
parameter_list|,
annotation|@
name|NotNull
specifier|final
name|NodeStore
name|target
parameter_list|)
throws|throws
name|CommitFailedException
block|{
specifier|final
name|NodeBuilder
name|targetRoot
init|=
name|checkNotNull
argument_list|(
name|target
argument_list|)
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
if|if
condition|(
name|copy
argument_list|(
name|checkNotNull
argument_list|(
name|source
argument_list|)
operator|.
name|getRoot
argument_list|()
argument_list|,
name|targetRoot
argument_list|)
condition|)
block|{
name|target
operator|.
name|merge
argument_list|(
name|targetRoot
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
end_class

end_unit

