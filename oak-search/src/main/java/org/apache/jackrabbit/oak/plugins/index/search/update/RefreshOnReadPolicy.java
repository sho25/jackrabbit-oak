begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|update
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_comment
comment|/**  * This policy ensures that any writes that have been done to index are made  * visible *before* any read is performed.  *  * Its meant as an alternative to {@link RefreshOnWritePolicy} and for "sync"  * indexes. For "nrt" indexes {@link TimedRefreshPolicy} should be preferred  *  *<p>  * The readers are not refreshed immediately upon write. Instead they would be  * refreshed if  *  *<ul>  *<li>Upon write if refreshDelta time has elapsed then readers would be  * refreshed</li>  *<li>Upon read if index is found to be updated then again readers would be  * refreshed</li>  *</ul>  *  *<p>  * This policy can result in some contention if index is being frequently  * updated and queried.  *  * *This is an experimental policy. Currently it causes high contention*  */
end_comment

begin_class
specifier|public
class|class
name|RefreshOnReadPolicy
implements|implements
name|ReaderRefreshPolicy
implements|,
name|IndexUpdateListener
block|{
specifier|private
specifier|final
name|AtomicBoolean
name|dirty
init|=
operator|new
name|AtomicBoolean
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|private
specifier|final
name|long
name|refreshDelta
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|lastRefreshTime
decl_stmt|;
specifier|public
name|RefreshOnReadPolicy
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|TimeUnit
name|unit
parameter_list|,
name|long
name|refreshDelta
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
name|this
operator|.
name|refreshDelta
operator|=
name|unit
operator|.
name|toMillis
argument_list|(
name|refreshDelta
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshOnReadIfRequired
parameter_list|(
name|Runnable
name|refreshCallback
parameter_list|)
block|{
if|if
condition|(
name|dirty
operator|.
name|get
argument_list|()
condition|)
block|{
name|refreshWithLock
argument_list|(
name|refreshCallback
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|refreshOnWriteIfRequired
parameter_list|(
name|Runnable
name|refreshCallback
parameter_list|)
block|{
name|long
name|currentTime
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|currentTime
operator|-
name|lastRefreshTime
operator|>
name|refreshDelta
condition|)
block|{
comment|//Do not set dirty instead directly refresh
name|refreshWithLock
argument_list|(
name|refreshCallback
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
comment|//Needs to be done in a lock otherwise
comment|//refreshWithLock would override this
name|dirty
operator|.
name|set
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|updated
parameter_list|()
block|{
comment|//Detect dirty based on call from refreshOnWriteIfRequired
comment|//as that would *always* be called if the index has been updated
comment|//And ensures that it gets calls after all changes for that index
comment|//for that transaction got committed
block|}
specifier|private
name|void
name|refreshWithLock
parameter_list|(
name|Runnable
name|refreshCallback
parameter_list|,
name|boolean
name|forceRefresh
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|dirty
operator|.
name|get
argument_list|()
operator|||
name|forceRefresh
condition|)
block|{
name|refreshCallback
operator|.
name|run
argument_list|()
expr_stmt|;
name|dirty
operator|.
name|set
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|lastRefreshTime
operator|=
name|clock
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

