begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|benchmark
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|UserManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|h2
operator|.
name|util
operator|.
name|Profiler
import|;
end_import

begin_class
specifier|public
class|class
name|FlatTreeWithAceForSamePrincipalTest
extends|extends
name|AbstractTest
block|{
specifier|private
name|Session
name|reader
decl_stmt|;
name|Profiler
name|profiler
init|=
operator|new
name|Profiler
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|beforeSuite
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|Session
name|writer
init|=
name|loginWriter
argument_list|()
decl_stmt|;
name|UserManager
name|userManager
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|writer
operator|)
operator|.
name|getUserManager
argument_list|()
decl_stmt|;
name|String
name|userId
init|=
literal|"test"
decl_stmt|;
name|Principal
name|userPrincipal
init|=
name|userManager
operator|.
name|createUser
argument_list|(
name|userId
argument_list|,
name|userId
argument_list|)
operator|.
name|getPrincipal
argument_list|()
decl_stmt|;
name|AccessControlManager
name|acm
init|=
name|writer
operator|.
name|getAccessControlManager
argument_list|()
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acm
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|userPrincipal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acm
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setPolicy
argument_list|(
literal|"/"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|Node
name|a
init|=
name|writer
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|a
operator|.
name|addNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
expr_stmt|;
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acm
argument_list|,
literal|"/a/node"
operator|+
name|i
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|userPrincipal
argument_list|,
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acm
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acm
operator|.
name|setPolicy
argument_list|(
literal|"/a/node"
operator|+
name|i
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|save
argument_list|()
expr_stmt|;
name|reader
operator|=
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
name|userId
argument_list|,
name|userId
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|profiler
operator|.
name|startCollecting
argument_list|()
expr_stmt|;
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"time "
operator|+
operator|(
name|end
operator|-
name|start
operator|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runTest
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|reader
operator|.
name|getNode
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|++
control|)
block|{
name|n
operator|.
name|getNode
argument_list|(
literal|"node"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|afterTest
parameter_list|()
throws|throws
name|Exception
block|{ 		  	}
specifier|protected
name|void
name|afterSuite
parameter_list|()
throws|throws
name|Exception
block|{ 		  	}
block|}
end_class

end_unit

