begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|copyOf
import|;
end_import

begin_comment
comment|/**  * A storage object for event filter configuration.  *<p>  * The parameters of the filter can then be set by chaining the set methods,  * since each method returns the same<code>EventFilter</code> with the indicated parameter set.  *<p>  * Once the filter is configured, it and an {@link javax.jcr.observation.EventListener} object are  * passed to  * {@link org.apache.jackrabbit.api.observation.JackrabbitObservationManager#addEventListener(javax.jcr.observation.EventListener, JackrabbitEventFilter)}.  *<p>  * The filter restricts which events are sent to the<code>EventListener</code> according to the  * following parameters. Note that the term<i>associated parent node</i> of an event means the  * parent node of the item at (or formerly at) the path returned by  * {@link javax.jcr.observation.Event#getPath}.  *<ul>  *<li>  *<code>eventTypes</code>:  * A bitwise<code>OR</code> of the event types to be listened to. See  * {@link javax.jcr.observation.Event} for details.  *</li>  *<li>  *<code>absPath</code>,<code>absPaths</code>,<code>excludedPaths</code>,  *<code>isDeep</code>: Only events whose associated parent node is at one  * of the paths in<code>absPath</code> or<code>absPaths</code> (or within  * its subgraph, if<code>isDeep</code> is<code>true</code>) will be received  * except if the associated parent node is at one of the paths in  *<code>excludedPaths</code> or its subgraph.  * It is permissible to register a listener for a path where no node currently  * exists.  *</li>  *<li>  *<code>uuid</code>:  * Only events whose associated parent node has one of  * the identifiers in this list will be received. If his parameter is  *<code>null</code> then no identifier-related restriction is placed on  * events received. Note that specifying an empty array instead of  *<code>null</code> would result in no nodes being listened to. The term  * "UUID" is used for compatibility with JCR 1.0.  *</li>  *<li>  *<code>nodeTypeName</code>:  * Only events whose associated parent node has  * one of the node types (or a subtype of one of the node types) in this  * list will be received. If his parameter is<code>null</code> then no node  * type-related restriction is placed on events received. Note that  * specifying an empty array instead of<code>null</code> would result in no  * nodes types being listened to.  *</li>  *<li>  *<code>noLocal</code>: if<code>true</code>, then events  * generated by the session through which the listener was registered are  * ignored. Otherwise, they are not ignored.  *</li>  *<li>  *<code>noExternal</code>: if<code>true</code>, then events  * from external cluster nodes are ignored. Otherwise, they are not ignored.  *</li>  *<li>  *<code>noInternal</code>: if<code>true</code>, then events  * from this cluster node are ignored. Otherwise, they are not ignored.  *</li>  *</ul>  * The restrictions are "ANDed" together. In other words, for a particular node to be "listened to" it  * must meet all the restrictions.  *  */
end_comment

begin_class
specifier|public
class|class
name|JackrabbitEventFilter
block|{
comment|// TODO extends EventFilter once JCR 2.1 is out
specifier|private
name|int
name|eventTypes
decl_stmt|;
specifier|private
name|String
name|absPath
decl_stmt|;
specifier|private
name|boolean
name|isDeep
decl_stmt|;
specifier|private
name|String
index|[]
name|identifiers
decl_stmt|;
specifier|private
name|String
index|[]
name|nodeTypeNames
decl_stmt|;
specifier|private
name|boolean
name|noLocal
decl_stmt|;
specifier|private
name|String
index|[]
name|absPaths
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
specifier|private
name|String
index|[]
name|excludedPaths
init|=
operator|new
name|String
index|[]
block|{}
decl_stmt|;
specifier|private
name|boolean
name|noExternal
decl_stmt|;
specifier|private
name|boolean
name|noInternal
decl_stmt|;
comment|/**      * Sets the<code>eventTypes</code> parameter of the filter.      * If left unset, this parameter defaults to<code>0</code>.      *      * @param eventTypes an<code>int</code>.      * @return This EventFilter object with the<code>eventTypes</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setEventTypes
parameter_list|(
name|int
name|eventTypes
parameter_list|)
block|{
name|this
operator|.
name|eventTypes
operator|=
name|eventTypes
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>eventTypes</code> parameter of the filter.      *      * @return an<code>int</code>.      */
specifier|public
name|int
name|getEventTypes
parameter_list|()
block|{
return|return
name|eventTypes
return|;
block|}
comment|/**      * Sets the<code>absPath</code> parameter of the filter.      * If left unset, this parameter defaults to<code>null</code>.      *      * @param absPath an absolute path<code>String</code>.      * @return This EventFilter object with the<code>absPath</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setAbsPath
parameter_list|(
name|String
name|absPath
parameter_list|)
block|{
name|this
operator|.
name|absPath
operator|=
name|absPath
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>absPath</code> parameter of the filter.      *      * @return a<code>String</code>.      */
specifier|public
name|String
name|getAbsPath
parameter_list|()
block|{
return|return
name|absPath
return|;
block|}
comment|/**      * Sets the<code>isDeep</code> parameter of the filter.      * If left unset, this parameter defaults to<code>false</code>.      *      * @param isDeep a<code>boolean</code>.      * @return This EventFilter object with the<code>isDeep</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setIsDeep
parameter_list|(
name|boolean
name|isDeep
parameter_list|)
block|{
name|this
operator|.
name|isDeep
operator|=
name|isDeep
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>isDeep</code> parameter of the filter.      *      * @return a<code>boolean</code>.      */
specifier|public
name|boolean
name|getIsDeep
parameter_list|()
block|{
return|return
name|isDeep
return|;
block|}
comment|/**      * Sets the<code>identifiers</code> parameter of the filter.      * If left unset, this parameter defaults to<code>null</code>.      *      * @param identifiers a<code>String</code> array.      * @return This EventFilter object with the<code>identifiers</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setIdentifiers
parameter_list|(
name|String
index|[]
name|identifiers
parameter_list|)
block|{
name|this
operator|.
name|identifiers
operator|=
name|copyOf
argument_list|(
name|identifiers
argument_list|,
name|identifiers
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|/**      * Returns the<code>uuids</code> parameter of the filter.      *      * @return a<code>String</code> array.      */
specifier|public
name|String
index|[]
name|getIdentifiers
parameter_list|()
block|{
return|return
name|identifiers
operator|==
literal|null
condition|?
literal|null
else|:
name|copyOf
argument_list|(
name|identifiers
argument_list|,
name|identifiers
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets the<code>nodeTypeNames</code> parameter of the filter.      * If left unset, this parameter defaults to<code>null</code>.      *      * @param nodeTypeNames a<code>String</code> array.      * @return This EventFilter object with the<code>nodeTypes</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setNodeTypes
parameter_list|(
name|String
index|[]
name|nodeTypeNames
parameter_list|)
block|{
name|this
operator|.
name|nodeTypeNames
operator|=
name|copyOf
argument_list|(
name|nodeTypeNames
argument_list|,
name|nodeTypeNames
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>nodeTypeName</code> parameter of the filter.      *      * @return a<code>String</code> array.      */
specifier|public
name|String
index|[]
name|getNodeTypes
parameter_list|()
block|{
return|return
name|nodeTypeNames
operator|==
literal|null
condition|?
literal|null
else|:
name|copyOf
argument_list|(
name|nodeTypeNames
argument_list|,
name|nodeTypeNames
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets the<code>noLocal</code> parameter of the filter.      * If left unset, this parameter defaults to<code>false</code>.      *      * @param noLocal a<code>boolean</code>.      * @return This EventFilter object with the<code>noLocal</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setNoLocal
parameter_list|(
name|boolean
name|noLocal
parameter_list|)
block|{
name|this
operator|.
name|noLocal
operator|=
name|noLocal
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>noLocal</code> parameter of the filter.      *      * @return a<code>boolean</code>.      */
specifier|public
name|boolean
name|getNoLocal
parameter_list|()
block|{
return|return
name|noLocal
return|;
block|}
comment|/**      * Sets the<code>absPaths</code> parameter of the filter.      * If left unset, this parameter defaults to an empty array.      *      * @param absPaths an absolute path<code>String</code> array.      * @return This EventFilter object with the<code>absPaths</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setAdditionalPaths
parameter_list|(
name|String
modifier|...
name|absPaths
parameter_list|)
block|{
name|this
operator|.
name|absPaths
operator|=
name|copyOf
argument_list|(
name|absPaths
argument_list|,
name|absPaths
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>absPaths</code> parameter of the filter.      *      * @return a<code>String</code> array.      */
specifier|public
name|String
index|[]
name|getAdditionalPaths
parameter_list|()
block|{
return|return
name|copyOf
argument_list|(
name|absPaths
argument_list|,
name|absPaths
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets the<code>excludedPaths</code> parameter of the filter.      * If left unset, this parameter defaults to an empty array.      *      * @param excludedPaths an absolute path<code>String</code> array.      * @return This EventFilter object with the<code>excludedPaths</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setExcludedPaths
parameter_list|(
name|String
modifier|...
name|excludedPaths
parameter_list|)
block|{
name|this
operator|.
name|excludedPaths
operator|=
name|copyOf
argument_list|(
name|excludedPaths
argument_list|,
name|excludedPaths
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>excludedPaths</code> parameter of the filter.      *      * @return a<code>String</code> array.      */
specifier|public
name|String
index|[]
name|getExcludedPaths
parameter_list|()
block|{
return|return
name|copyOf
argument_list|(
name|excludedPaths
argument_list|,
name|excludedPaths
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Sets the<code>noExternal</code> parameter of the filter.      * If left unset, this parameter defaults to<code>false</code>.      *      * @param noExternal a<code>boolean</code>.      * @return This EventFilter object with the<code>noExternal</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setNoExternal
parameter_list|(
name|boolean
name|noExternal
parameter_list|)
block|{
name|this
operator|.
name|noExternal
operator|=
name|noExternal
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>noExternal</code> parameter of the filter.      *      * @return a<code>boolean</code>.      */
specifier|public
name|boolean
name|getNoExternal
parameter_list|()
block|{
return|return
name|noExternal
return|;
block|}
comment|/**      * Sets the<code>noInternal</code> parameter of the filter.      * If left unset, this parameter defaults to<code>false</code>.      *      * @param noInternal a<code>boolean</code>.      * @return This EventFilter object with the<code>noExternal</code> parameter set.      */
specifier|public
name|JackrabbitEventFilter
name|setNoInternal
parameter_list|(
name|boolean
name|noInternal
parameter_list|)
block|{
name|this
operator|.
name|noInternal
operator|=
name|noInternal
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Returns the<code>noInternal</code> parameter of the filter.      *      * @return a<code>boolean</code>.      */
specifier|public
name|boolean
name|getNoInternal
parameter_list|()
block|{
return|return
name|noInternal
return|;
block|}
block|}
end_class

end_unit

