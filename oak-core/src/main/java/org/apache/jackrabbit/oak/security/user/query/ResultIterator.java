begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_comment
comment|/**  * Implements a query result iterator which only returns a maximum number of  * element from an underlying iterator starting at a given offset.  *  * @param<T> element type of the query results  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|ResultIterator
parameter_list|<
name|T
parameter_list|>
implements|implements
name|Iterator
argument_list|<
name|T
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|int
name|OFFSET_NONE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|MAX_ALL
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
specifier|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
decl_stmt|;
specifier|private
specifier|final
name|long
name|offset
decl_stmt|;
specifier|private
specifier|final
name|long
name|max
decl_stmt|;
specifier|private
name|int
name|pos
decl_stmt|;
specifier|private
name|T
name|next
decl_stmt|;
comment|/**      * Create a new {@code ResultIterator} with a given offset and maximum      *      * @param offset Offset to start iteration at. Must be non negative      * @param max Maximum elements this iterator should return.      * Set to {@link #MAX_ALL} for all results.      * @param iterator the underlying iterator      * @throws IllegalArgumentException if offset is negative      */
specifier|private
name|ResultIterator
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|max
parameter_list|,
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|<
name|OFFSET_NONE
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Offset must not be negative"
argument_list|)
throw|;
block|}
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|this
operator|.
name|max
operator|=
name|max
expr_stmt|;
block|}
comment|/**      * Returns an iterator respecting the specified {@code offset} and {@code max}.      *      * @param offset   offset to start iteration at. Must be non negative      * @param max      maximum elements this iterator should return. Set to      * {@link #MAX_ALL} for all      * @param iterator the underlying iterator      * @param<T>      element type      * @return an iterator which only returns the elements in the given bounds      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Iterator
argument_list|<
name|T
argument_list|>
name|create
parameter_list|(
name|long
name|offset
parameter_list|,
name|long
name|max
parameter_list|,
name|Iterator
argument_list|<
name|T
argument_list|>
name|iterator
parameter_list|)
block|{
if|if
condition|(
name|offset
operator|==
name|OFFSET_NONE
operator|&&
name|max
operator|==
name|MAX_ALL
condition|)
block|{
comment|// no constraints on offset nor max -> return the original iterator.
return|return
name|iterator
return|;
block|}
else|else
block|{
return|return
operator|new
name|ResultIterator
argument_list|<
name|T
argument_list|>
argument_list|(
name|offset
argument_list|,
name|max
argument_list|,
name|iterator
argument_list|)
return|;
block|}
block|}
comment|//-----------------------------------------------------------< Iterator>---
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
name|fetchNext
argument_list|()
expr_stmt|;
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|T
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
return|return
name|consumeNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
comment|//------------------------------------------------------------< private>---
specifier|private
name|void
name|fetchNext
parameter_list|()
block|{
for|for
control|(
init|;
name|pos
operator|<
name|offset
operator|&&
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
name|pos
operator|++
control|)
block|{
name|next
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|pos
argument_list|<
name|offset
operator|||
operator|!
name|iterator
operator|.
name|hasNext
operator|(
operator|)
operator|||
name|max
operator|>=
literal|0
operator|&&
name|pos
operator|-
name|offset
operator|+
literal|1
argument_list|>
name|max
condition|)
block|{
name|next
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|pos
operator|++
expr_stmt|;
block|}
block|}
specifier|private
name|T
name|consumeNext
parameter_list|()
block|{
name|T
name|element
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|element
return|;
block|}
block|}
end_class

end_unit

