begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|RootProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|composite
operator|.
name|CompositeAuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProviderImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|WhiteboardRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|RandomAuthorizableNodeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|UserAuthenticationFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|whiteboard
operator|.
name|WhiteboardAuthorizableActionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|whiteboard
operator|.
name|WhiteboardAuthorizableNodeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|whiteboard
operator|.
name|WhiteboardUserAuthenticationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|CompositeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|RegistrationConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|AuthenticationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|LoginModuleMonitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|LoginModuleStatsCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|CompositeTokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|token
operator|.
name|TokenConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|CompositePrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableNodeName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserAuthenticationFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|AuthorizableActionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|action
operator|.
name|DefaultAuthorizableActionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|sling
operator|.
name|testing
operator|.
name|mock
operator|.
name|osgi
operator|.
name|junit
operator|.
name|OsgiContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|RegistrationConstants
operator|.
name|OAK_SECURITY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|ArgumentMatchers
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|withSettings
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
operator|.
name|SERVICE_PID
import|;
end_import

begin_class
specifier|public
class|class
name|SecurityProviderRegistrationTest
extends|extends
name|AbstractSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|PROPS
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"pid"
argument_list|)
decl_stmt|;
annotation|@
name|Rule
specifier|public
specifier|final
name|OsgiContext
name|context
init|=
operator|new
name|OsgiContext
argument_list|()
decl_stmt|;
specifier|private
name|SecurityProviderRegistration
name|registration
init|=
operator|new
name|SecurityProviderRegistration
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|void
name|assertContext
parameter_list|(
annotation|@
name|NotNull
name|Context
name|context
parameter_list|,
name|int
name|expectedSize
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
name|boolean
name|isDefined
parameter_list|)
throws|throws
name|Exception
block|{
name|Class
argument_list|<
name|?
argument_list|>
name|c
init|=
name|context
operator|.
name|getClass
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|c
operator|.
name|getName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"CompositeContext"
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
name|c
operator|.
name|getDeclaredField
argument_list|(
literal|"delegatees"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedSize
operator|==
literal|0
condition|)
block|{
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
operator|(
operator|(
name|Context
index|[]
operator|)
name|f
operator|.
name|get
argument_list|(
name|context
argument_list|)
operator|)
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|isDefined
argument_list|,
name|context
operator|.
name|definesContextRoot
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isDefined
argument_list|,
name|context
operator|.
name|definesTree
argument_list|(
name|tree
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isDefined
argument_list|,
name|context
operator|.
name|definesProperty
argument_list|(
name|tree
argument_list|,
name|PropertyStates
operator|.
name|createProperty
argument_list|(
literal|"abc"
argument_list|,
literal|"abc"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|isDefined
argument_list|,
name|context
operator|.
name|definesLocation
argument_list|(
name|TreeLocation
operator|.
name|create
argument_list|(
name|tree
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
extends|extends
name|SecurityConfiguration
parameter_list|>
name|T
name|mockConfiguration
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|cl
parameter_list|)
block|{
name|T
name|sc
init|=
name|mock
argument_list|(
name|cl
argument_list|)
decl_stmt|;
name|Context
name|ctx
init|=
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|defaultAnswer
argument_list|(
name|invocationOnMock
lambda|->
name|Boolean
operator|.
name|TRUE
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|sc
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sc
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
return|return
name|sc
return|;
block|}
specifier|private
specifier|static
name|SecurityProviderRegistration
operator|.
name|Configuration
name|configWithRequiredServiceIds
parameter_list|(
annotation|@
name|NotNull
name|String
modifier|...
name|ids
parameter_list|)
block|{
return|return
operator|new
name|SecurityProviderRegistration
operator|.
name|Configuration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Class
argument_list|<
name|?
extends|extends
name|Annotation
argument_list|>
name|annotationType
parameter_list|()
block|{
return|return
name|SecurityProviderRegistration
operator|.
name|Configuration
operator|.
name|class
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|requiredServicePids
parameter_list|()
block|{
return|return
name|ids
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|authorizationCompositionType
parameter_list|()
block|{
return|return
literal|"AND"
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivateWithRequiredId
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"serviceId"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableNodeName
argument_list|(
name|sr
argument_list|,
name|mock
argument_list|(
name|AuthorizableNodeName
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivate
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceA"
argument_list|,
literal|"serviceB"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"serviceA"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|service
operator|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"serviceB"
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivateAddsPrecondition
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"preconditions"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
operator|)
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"requiredService"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
operator|)
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivateWithoutPreconditions
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|()
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|6
argument_list|,
name|Iterables
operator|.
name|size
argument_list|(
name|Iterables
operator|.
name|filter
argument_list|(
name|service
operator|.
name|getConfigurations
argument_list|()
argument_list|,
name|Predicates
operator|.
name|notNull
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModified
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"rpId"
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify requiredServiceIds by removing the rpId from the mandatory services
comment|// => should re-register the security provider
name|registration
operator|.
name|modified
argument_list|(
name|configWithRequiredServiceIds
argument_list|(
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|RestrictionProvider
name|rp
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rp
operator|instanceof
name|WhiteboardRestrictionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testModifiedPreconditionStillSatisfied
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"rpId"
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rpId"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|registration
operator|.
name|modified
argument_list|(
name|configWithRequiredServiceIds
argument_list|(
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service2
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|service
argument_list|,
name|service2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeactivate
parameter_list|()
throws|throws
name|Exception
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"nodeName"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorizableNodeName
name|mock
init|=
name|mock
argument_list|(
name|AuthorizableNodeName
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"nodeName"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableNodeName
argument_list|(
name|sr
argument_list|,
name|mock
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|registration
operator|.
name|deactivate
argument_list|()
expr_stmt|;
comment|// provider must have been unregistered
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeactivateWithoutPreconditions
parameter_list|()
throws|throws
name|Exception
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|()
argument_list|)
expr_stmt|;
name|UserAuthenticationFactory
name|mock
init|=
name|mock
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|serviceReference
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|OAK_SECURITY_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"my.custom.uaf"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindUserAuthenticationFactory
argument_list|(
name|serviceReference
argument_list|,
name|mock
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|deactivate
argument_list|()
expr_stmt|;
comment|// securityprovider must have been unregistered
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDeactivateClearsPreconditions
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"preconditions"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"nodeName"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
operator|(
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
operator|)
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|AuthorizableNodeName
name|mock
init|=
name|mock
argument_list|(
name|AuthorizableNodeName
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"nodeName"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableNodeName
argument_list|(
name|sr
argument_list|,
name|mock
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
operator|)
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|registration
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
operator|)
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindOptionalCandidate
parameter_list|()
throws|throws
name|Exception
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"preconditions"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TokenConfiguration
name|tc
init|=
name|mockConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindTokenConfiguration
argument_list|(
name|tc
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"otherServiceId"
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
name|preconditions
init|=
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|preconditions
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindOptionalCandidateAfterRegistration
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindTokenConfiguration
argument_list|(
name|mockConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// binding another (optional configuration) must not result in re-registration of the service
name|registration
operator|.
name|bindPrincipalConfiguration
argument_list|(
name|mockConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"optionalService"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service2
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|service
argument_list|,
name|service2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindMandatoryCandidate
parameter_list|()
throws|throws
name|Exception
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"preconditions"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|TokenConfiguration
name|tc
init|=
name|mockConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindTokenConfiguration
argument_list|(
name|tc
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|Preconditions
name|preconditions
init|=
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|preconditions
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnbindMandatoryCandidate
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"actionProvider"
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindUserConfiguration
argument_list|(
name|mockConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorizableActionProvider
name|ap
init|=
name|mock
argument_list|(
name|AuthorizableActionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"actionProvider"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableActionProvider
argument_list|(
name|sr
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindAuthorizableActionProvider
argument_list|(
name|sr
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|service
operator|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnbindMandatoryCandidateOnPreconditions
parameter_list|()
throws|throws
name|Exception
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"nodeName"
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"preconditions"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AuthorizableNodeName
name|mock
init|=
name|mock
argument_list|(
name|AuthorizableNodeName
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"nodeName"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableNodeName
argument_list|(
name|sr
argument_list|,
name|mock
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindAuthorizableNodeName
argument_list|(
name|sr
argument_list|,
name|mock
argument_list|)
expr_stmt|;
name|Preconditions
name|preconditions
init|=
operator|(
name|Preconditions
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|preconditions
operator|.
name|areSatisfied
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnbindOptionalCandidateAfterRegistration
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|UserAuthenticationFactory
name|uaf
init|=
name|mock
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|serviceReference
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"notMandatory"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindUserAuthenticationFactory
argument_list|(
name|serviceReference
argument_list|,
name|uaf
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"serviceId"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableActionProvider
argument_list|(
name|sr
argument_list|,
name|mock
argument_list|(
name|AuthorizableActionProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// unbinding an optional configuration must not result in unrregistration of the service
name|registration
operator|.
name|unbindUserAuthenticationFactory
argument_list|(
name|serviceReference
argument_list|,
name|uaf
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service2
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertSame
argument_list|(
name|service
argument_list|,
name|service2
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindAuthenticationConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"authenticationConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|AuthenticationConfiguration
name|ac
init|=
name|mockConfiguration
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ac
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindAnotherAuthenticationConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"authenticationConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AuthenticationConfiguration
name|ac
init|=
name|mockConfiguration
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ac
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|AuthenticationConfiguration
name|ac2
init|=
name|mockConfiguration
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthenticationConfiguration
argument_list|(
name|ac2
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ac2
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindAuthenticationConfigWithLoginModuleStatsCollector
parameter_list|()
throws|throws
name|Exception
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthenticationConfiguration
name|ac
init|=
name|mock
argument_list|(
name|AuthenticationConfiguration
operator|.
name|class
argument_list|,
name|withSettings
argument_list|()
operator|.
name|extraInterfaces
argument_list|(
name|LoginModuleStatsCollector
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getParameters
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|ac
operator|.
name|getContext
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|mock
argument_list|(
name|Context
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthenticationConfiguration
argument_list|(
name|ac
argument_list|)
expr_stmt|;
comment|// trigger maybeRegister
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|mockConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|OAK_SECURITY_NAME
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
operator|(
operator|(
name|LoginModuleStatsCollector
operator|)
name|ac
operator|)
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|setLoginModuleMonitor
argument_list|(
name|any
argument_list|(
name|LoginModuleMonitor
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindPrivilegeConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"privilegeConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeConfiguration
name|pc
init|=
name|mockConfiguration
argument_list|(
name|PrivilegeConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindPrivilegeConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|pc
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindPrivilegeConfiguration
argument_list|(
name|pc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindUserConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"userConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|UserConfiguration
name|uc
init|=
name|mockConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindUserConfiguration
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|uc
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindUserConfiguration
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindTokenConfiguration
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"tokenConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
operator|instanceof
name|CompositeTokenConfiguration
argument_list|)
expr_stmt|;
name|TokenConfiguration
name|tc
init|=
name|mockConfiguration
argument_list|(
name|TokenConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindTokenConfiguration
argument_list|(
name|tc
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|CompositeTokenConfiguration
name|composite
init|=
operator|(
name|CompositeTokenConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|composite
operator|.
name|getConfigurations
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|composite
operator|.
name|getConfigurations
argument_list|()
operator|.
name|contains
argument_list|(
name|tc
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindTokenConfiguration
argument_list|(
name|tc
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|composite
operator|=
operator|(
name|CompositeTokenConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|composite
operator|.
name|getConfigurations
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthorizationRanking
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"authorizationConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|testAc
init|=
name|mockConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|testAc
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|AuthorizationConfigurationImpl
name|ac
init|=
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
decl_stmt|;
name|ac
operator|.
name|setParameters
argument_list|(
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|CompositeConfiguration
operator|.
name|PARAM_RANKING
argument_list|,
literal|500
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|ac
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|testAc2
init|=
name|mockConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
name|ImmutableMap
operator|.
expr|<
name|String
decl_stmt|,
name|Object
decl|>
name|of
argument_list|(
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
operator|new
name|Integer
argument_list|(
literal|100
argument_list|)
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|testAc2
argument_list|,
name|props
argument_list|)
expr_stmt|;
name|CompositeAuthorizationConfiguration
name|cac
init|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AuthorizationConfiguration
argument_list|>
name|list
init|=
name|cac
operator|.
name|getConfigurations
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|ac
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|testAc2
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|testAc
argument_list|,
name|list
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAuthorizationContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"authorizationConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|ac
init|=
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|ac
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|CompositeAuthorizationConfiguration
name|cac
init|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|Context
name|ctx
init|=
name|cac
operator|.
name|getContext
argument_list|()
decl_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|1
argument_list|,
name|t
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|ac1
init|=
name|mockConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|ac1
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cac
operator|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cac
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|2
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|ac2
init|=
name|mockConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|ac2
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cac
operator|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cac
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|3
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// unbind again:
name|registration
operator|.
name|unbindAuthorizationConfiguration
argument_list|(
name|ac1
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cac
operator|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cac
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|2
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindAuthorizationConfiguration
argument_list|(
name|ac
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cac
operator|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cac
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|1
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindAuthorizationConfiguration
argument_list|(
name|ac2
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cac
operator|=
operator|(
name|CompositeAuthorizationConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cac
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|0
argument_list|,
name|t
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPrincipalContext
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"principalConfiguration"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|PrincipalConfiguration
name|pc
init|=
operator|new
name|PrincipalConfigurationImpl
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindPrincipalConfiguration
argument_list|(
name|pc
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|CompositePrincipalConfiguration
name|cpc
init|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|Context
name|ctx
init|=
name|cpc
operator|.
name|getContext
argument_list|()
decl_stmt|;
comment|// expected size = 0 because PrincipalConfigurationImpl comes with the default ctx
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|0
argument_list|,
name|t
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|PrincipalConfiguration
name|pc1
init|=
name|mockConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindPrincipalConfiguration
argument_list|(
name|pc1
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cpc
operator|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cpc
operator|.
name|getContext
argument_list|()
expr_stmt|;
comment|// expected size 1 because the PrincipalConfigurationImpl comes with the default ctx
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|1
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|PrincipalConfiguration
name|pc2
init|=
name|mockConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindPrincipalConfiguration
argument_list|(
name|pc2
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cpc
operator|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cpc
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|2
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// unbind again:
name|registration
operator|.
name|unbindPrincipalConfiguration
argument_list|(
name|pc
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cpc
operator|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cpc
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|2
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindPrincipalConfiguration
argument_list|(
name|pc1
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cpc
operator|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cpc
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|1
argument_list|,
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindPrincipalConfiguration
argument_list|(
name|pc2
argument_list|,
name|PROPS
argument_list|)
expr_stmt|;
name|cpc
operator|=
operator|(
name|CompositePrincipalConfiguration
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
expr_stmt|;
name|ctx
operator|=
name|cpc
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|assertContext
argument_list|(
name|ctx
argument_list|,
literal|0
argument_list|,
name|t
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindRestrictionProviderWithoutAuthorizationConfig
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"serviceId"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|ac
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ac
operator|instanceof
name|CompositeAuthorizationConfiguration
argument_list|)
expr_stmt|;
comment|// empty composite configuration => empty rp
name|RestrictionProvider
name|rp
init|=
name|ac
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertSame
argument_list|(
name|RestrictionProvider
operator|.
name|EMPTY
argument_list|,
name|rp
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindRestrictionProviderWithAuthorizationConfig
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"rpId"
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rpId"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rp
operator|instanceof
name|WhiteboardRestrictionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindWithMissingPID
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"rpId"
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnbindWithMissingPID
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"rpId"
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"rpId"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|sr
operator|.
name|getProperty
argument_list|(
name|SERVICE_PID
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindConfigurationWithMissingPID
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|mockConfiguration
init|=
name|mockConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|mockConfiguration
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnbindConfigurationWithMissingPID
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorizationConfiguration
name|mockConfiguration
init|=
name|mockConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
name|mockConfiguration
argument_list|,
name|ConfigurationParameters
operator|.
name|of
argument_list|(
name|OAK_SECURITY_NAME
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindAuthorizationConfiguration
argument_list|(
name|mockConfiguration
argument_list|,
name|ConfigurationParameters
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivateWithRequiredOakSecurityName
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"serviceId"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|ServiceReference
name|sr
init|=
name|when
argument_list|(
name|mock
argument_list|(
name|ServiceReference
operator|.
name|class
argument_list|)
operator|.
name|getProperty
argument_list|(
name|OAK_SECURITY_NAME
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
literal|"serviceId"
argument_list|)
operator|.
name|getMock
argument_list|()
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindRestrictionProvider
argument_list|(
name|sr
argument_list|,
name|rp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testActivateWithMixedServicePiAnddOakServiceName
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"rpId"
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceRegistration
name|sr
init|=
name|context
operator|.
name|bundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|RestrictionProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|mockRp
argument_list|,
operator|new
name|Hashtable
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"rpId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|sr
operator|.
name|getReference
argument_list|()
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|RegistrationConstants
operator|.
name|OAK_SECURITY_NAME
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rp
operator|instanceof
name|WhiteboardRestrictionProvider
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhileboardRestrictionProvider
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"rpId"
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|RestrictionProvider
name|mockRp
init|=
name|mock
argument_list|(
name|RestrictionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceRegistration
name|rpSr
init|=
name|context
operator|.
name|bundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|RestrictionProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|mockRp
argument_list|,
operator|new
name|Hashtable
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"rpId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindRestrictionProvider
argument_list|(
name|rpSr
operator|.
name|getReference
argument_list|()
argument_list|,
name|mockRp
argument_list|)
expr_stmt|;
name|registration
operator|.
name|bindAuthorizationConfiguration
argument_list|(
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|OAK_SECURITY_NAME
argument_list|,
literal|"authorizationId"
argument_list|)
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|rp
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|AuthorizationConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getRestrictionProvider
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|rp
operator|instanceof
name|WhiteboardRestrictionProvider
argument_list|)
expr_stmt|;
name|rp
operator|.
name|getSupportedRestrictions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockRp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getSupportedRestrictions
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhileboardAuthorizableActionProvider
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"apId"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorizableActionProvider
name|mockAp
init|=
name|mock
argument_list|(
name|AuthorizableActionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceRegistration
name|rpSr
init|=
name|context
operator|.
name|bundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|AuthorizableActionProvider
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|mockAp
argument_list|,
operator|new
name|Hashtable
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"apId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableActionProvider
argument_list|(
name|rpSr
operator|.
name|getReference
argument_list|()
argument_list|,
name|mockAp
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|AuthorizableActionProvider
name|ap
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_AUTHORIZABLE_ACTION_PROVIDER
argument_list|,
literal|null
argument_list|,
name|AuthorizableActionProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|ap
operator|instanceof
name|WhiteboardAuthorizableActionProvider
argument_list|)
expr_stmt|;
name|ap
operator|.
name|getAuthorizableActions
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockAp
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthorizableActions
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhileboardAuthorizableNodeName
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"anId"
argument_list|)
argument_list|)
expr_stmt|;
name|AuthorizableNodeName
name|mockAn
init|=
name|mock
argument_list|(
name|AuthorizableNodeName
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceRegistration
name|rpSr
init|=
name|context
operator|.
name|bundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|AuthorizableNodeName
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|mockAn
argument_list|,
operator|new
name|Hashtable
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"anId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindAuthorizableNodeName
argument_list|(
name|rpSr
operator|.
name|getReference
argument_list|()
argument_list|,
name|mockAn
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|AuthorizableNodeName
name|an
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_AUTHORIZABLE_NODE_NAME
argument_list|,
literal|null
argument_list|,
name|AuthorizableNodeName
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|an
operator|instanceof
name|WhiteboardAuthorizableNodeName
argument_list|)
expr_stmt|;
name|an
operator|.
name|generateNodeName
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockAn
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|generateNodeName
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhileboardUserAuthenticationFactory
parameter_list|()
block|{
name|registration
operator|.
name|activate
argument_list|(
name|context
operator|.
name|bundleContext
argument_list|()
argument_list|,
name|configWithRequiredServiceIds
argument_list|(
literal|"uafId"
argument_list|)
argument_list|)
expr_stmt|;
name|UserAuthenticationFactory
name|mockUaf
init|=
name|mock
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|ServiceRegistration
name|rpSr
init|=
name|context
operator|.
name|bundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|UserAuthenticationFactory
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|mockUaf
argument_list|,
operator|new
name|Hashtable
argument_list|(
name|ImmutableMap
operator|.
name|of
argument_list|(
name|SERVICE_PID
argument_list|,
literal|"uafId"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindUserAuthenticationFactory
argument_list|(
name|rpSr
operator|.
name|getReference
argument_list|()
argument_list|,
name|mockUaf
argument_list|)
expr_stmt|;
name|SecurityProvider
name|service
init|=
name|context
operator|.
name|getService
argument_list|(
name|SecurityProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|UserAuthenticationFactory
name|uaf
init|=
name|service
operator|.
name|getConfiguration
argument_list|(
name|UserConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getParameters
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_AUTHENTICATION_FACTORY
argument_list|,
literal|null
argument_list|,
name|UserAuthenticationFactory
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|uaf
operator|instanceof
name|WhiteboardUserAuthenticationFactory
argument_list|)
expr_stmt|;
name|uaf
operator|.
name|getAuthentication
argument_list|(
name|getUserConfiguration
argument_list|()
argument_list|,
name|root
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|mockUaf
argument_list|,
name|times
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|getAuthentication
argument_list|(
name|getUserConfiguration
argument_list|()
argument_list|,
name|root
argument_list|,
literal|"id"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleUserAuthenticationFactoriesRespectsRanking
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultipleServiceWithRanking
argument_list|(
literal|"userAuthenticationFactories"
argument_list|,
operator|new
name|UserAuthenticationFactoryImpl
argument_list|()
argument_list|,
operator|new
name|UserAuthenticationFactoryImpl
argument_list|()
argument_list|,
operator|new
name|UserAuthenticationFactoryImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleAuthorizableNodeNamesRespectsRanking
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultipleServiceWithRanking
argument_list|(
literal|"authorizableNodeNames"
argument_list|,
operator|new
name|RandomAuthorizableNodeName
argument_list|()
argument_list|,
operator|new
name|RandomAuthorizableNodeName
argument_list|()
argument_list|,
operator|new
name|RandomAuthorizableNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleAuthorizableActionProvidersRespectsRanking
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultipleServiceWithRanking
argument_list|(
literal|"authorizableActionProviders"
argument_list|,
operator|new
name|DefaultAuthorizableActionProvider
argument_list|()
argument_list|,
operator|new
name|DefaultAuthorizableActionProvider
argument_list|()
argument_list|,
operator|new
name|DefaultAuthorizableActionProvider
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleRestrictionProvidersRespectsRanking
parameter_list|()
throws|throws
name|Exception
block|{
name|testMultipleServiceWithRanking
argument_list|(
literal|"restrictionProviders"
argument_list|,
operator|new
name|RestrictionProviderImpl
argument_list|()
argument_list|,
operator|new
name|RestrictionProviderImpl
argument_list|()
argument_list|,
operator|new
name|RestrictionProviderImpl
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMultipleServiceWithRanking
parameter_list|(
annotation|@
name|NotNull
name|String
name|fieldName
parameter_list|,
annotation|@
name|NotNull
name|Object
name|service1
parameter_list|,
annotation|@
name|NotNull
name|Object
name|service2
parameter_list|,
annotation|@
name|NotNull
name|Object
name|service3
parameter_list|)
throws|throws
name|Exception
block|{
name|context
operator|.
name|registerService
argument_list|(
name|SecurityProviderRegistration
operator|.
name|class
argument_list|,
name|registration
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
literal|"requiredServicePids"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"s1"
block|,
literal|"s2"
block|,
literal|"s3"
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|service1
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|RegistrationConstants
operator|.
name|OAK_SECURITY_NAME
argument_list|,
literal|"s1"
argument_list|,
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|service2
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|RegistrationConstants
operator|.
name|OAK_SECURITY_NAME
argument_list|,
literal|"s2"
argument_list|)
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerInjectActivateService
argument_list|(
name|service3
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|RegistrationConstants
operator|.
name|OAK_SECURITY_NAME
argument_list|,
literal|"s3"
argument_list|,
name|Constants
operator|.
name|SERVICE_RANKING
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
name|fieldName
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SortedMap
name|m
init|=
operator|(
name|SortedMap
operator|)
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|m
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|c
init|=
name|m
operator|.
name|values
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|ImmutableList
operator|.
name|of
argument_list|(
name|service2
argument_list|,
name|service3
argument_list|,
name|service1
argument_list|)
argument_list|,
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindRootProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"rootProvider"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|RootProvider
name|rp
init|=
name|mock
argument_list|(
name|RootProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindRootProvider
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|rp
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindRootProvider
argument_list|(
name|rp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testBindUnbindTreeProvider
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|registration
operator|.
name|getClass
argument_list|()
operator|.
name|getDeclaredField
argument_list|(
literal|"treeProvider"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|TreeProvider
name|tp
init|=
name|mock
argument_list|(
name|TreeProvider
operator|.
name|class
argument_list|)
decl_stmt|;
name|registration
operator|.
name|bindTreeProvider
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|tp
argument_list|,
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
name|registration
operator|.
name|unbindTreeProvider
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|f
operator|.
name|get
argument_list|(
name|registration
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

