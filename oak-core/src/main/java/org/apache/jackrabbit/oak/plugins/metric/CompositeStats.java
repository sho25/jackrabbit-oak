begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|metric
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|CounterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|MeterStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|SimpleStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|TimerStats
import|;
end_import

begin_comment
comment|/**  * Stats instances which delegates to both TimeSeries based counter  * and Metrics based meters so as to allow both systems to collect  * stats  */
end_comment

begin_class
class|class
name|CompositeStats
implements|implements
name|CounterStats
implements|,
name|MeterStats
implements|,
name|TimerStats
block|{
specifier|private
specifier|final
name|SimpleStats
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|MetricCounterStats
name|counter
decl_stmt|;
specifier|private
specifier|final
name|MetricTimerStats
name|timer
decl_stmt|;
specifier|private
specifier|final
name|MetricMeterStats
name|meter
decl_stmt|;
specifier|public
name|CompositeStats
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricCounterStats
name|counter
parameter_list|)
block|{
name|this
argument_list|(
name|delegate
argument_list|,
name|counter
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompositeStats
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricTimerStats
name|timer
parameter_list|)
block|{
name|this
argument_list|(
name|delegate
argument_list|,
literal|null
argument_list|,
name|timer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CompositeStats
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricMeterStats
name|meter
parameter_list|)
block|{
name|this
argument_list|(
name|delegate
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|meter
argument_list|)
expr_stmt|;
block|}
specifier|private
name|CompositeStats
parameter_list|(
name|SimpleStats
name|delegate
parameter_list|,
name|MetricCounterStats
name|counter
parameter_list|,
name|MetricTimerStats
name|timer
parameter_list|,
name|MetricMeterStats
name|meter
parameter_list|)
block|{
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|counter
expr_stmt|;
name|this
operator|.
name|timer
operator|=
name|timer
expr_stmt|;
name|this
operator|.
name|meter
operator|=
name|meter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getCount
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|getCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|inc
parameter_list|()
block|{
name|delegate
operator|.
name|inc
argument_list|()
expr_stmt|;
name|counter
operator|.
name|inc
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dec
parameter_list|()
block|{
name|delegate
operator|.
name|dec
argument_list|()
expr_stmt|;
name|counter
operator|.
name|dec
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mark
parameter_list|()
block|{
name|delegate
operator|.
name|mark
argument_list|()
expr_stmt|;
name|meter
operator|.
name|mark
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|mark
parameter_list|(
name|long
name|n
parameter_list|)
block|{
name|delegate
operator|.
name|mark
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|meter
operator|.
name|mark
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
name|long
name|duration
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|delegate
operator|.
name|update
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|timer
operator|.
name|update
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isMeter
parameter_list|()
block|{
return|return
name|meter
operator|!=
literal|null
operator|&&
name|timer
operator|==
literal|null
operator|&&
name|counter
operator|==
literal|null
return|;
block|}
name|boolean
name|isTimer
parameter_list|()
block|{
return|return
name|meter
operator|==
literal|null
operator|&&
name|timer
operator|!=
literal|null
operator|&&
name|counter
operator|==
literal|null
return|;
block|}
name|boolean
name|isCounter
parameter_list|()
block|{
return|return
name|meter
operator|==
literal|null
operator|&&
name|timer
operator|==
literal|null
operator|&&
name|counter
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

