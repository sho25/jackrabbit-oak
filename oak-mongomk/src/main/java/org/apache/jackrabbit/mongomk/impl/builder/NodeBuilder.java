begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|builder
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|api
operator|.
name|model
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|json
operator|.
name|JsonUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mongomk
operator|.
name|impl
operator|.
name|model
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|JSONObject
import|;
end_import

begin_comment
comment|/**  * A builder to create {@link Node}s from<a hred="http://en.wikipedia.org/wiki/JavaScript_Object_Notation">JSON</a>  * strings.  *  * @author<a href="mailto:pmarx@adobe.com>Philipp Marx</a>  */
end_comment

begin_class
specifier|public
class|class
name|NodeBuilder
block|{
comment|/**      * Creates {@link Node} from the given {@code json} and an empty path as root path.      *      * @param json The {@code json}.      * @return The {@code Node}.      * @throws Exception If an error occurred while creating.      * @see #build(String, String)      */
specifier|public
specifier|static
name|Node
name|build
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|Exception
block|{
return|return
name|build
argument_list|(
name|json
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/**      * Creates {@link Node} from the given {@code json} and an empty path as root path.      *      * @param json The {@code json}.      * @param path The root path of the nodes.      * @return The {@code Node}.      * @throws Exception If an error occurred while creating.      * @see #build(String, String)      */
specifier|public
specifier|static
name|Node
name|build
parameter_list|(
name|String
name|json
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
name|NodeBuilder
name|nodeBuilder
init|=
operator|new
name|NodeBuilder
argument_list|()
decl_stmt|;
return|return
name|nodeBuilder
operator|.
name|doBuild
argument_list|(
name|json
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|private
name|NodeBuilder
parameter_list|()
block|{
comment|// only private construction
block|}
specifier|private
name|Node
name|doBuild
parameter_list|(
name|String
name|json
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|Exception
block|{
try|try
block|{
name|JSONObject
name|jsonObject
init|=
operator|new
name|JSONObject
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|JSONArray
name|names
init|=
name|jsonObject
operator|.
name|names
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"JSON must contain exactly 1 root node"
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|names
operator|.
name|getString
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|JSONObject
name|value
init|=
name|jsonObject
operator|.
name|getJSONObject
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|parseNode
argument_list|(
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|name
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|JSONException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Node
name|parseNode
parameter_list|(
name|String
name|path
parameter_list|,
name|JSONObject
name|jsonObject
parameter_list|)
throws|throws
name|Exception
block|{
name|String
name|realPath
init|=
name|path
decl_stmt|;
name|String
name|revisionId
init|=
literal|null
decl_stmt|;
name|int
name|index
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
block|{
name|realPath
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|revisionId
operator|=
name|path
operator|.
name|substring
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|NodeImpl
name|node
init|=
operator|new
name|NodeImpl
argument_list|(
name|realPath
argument_list|)
decl_stmt|;
name|node
operator|.
name|setRevisionId
argument_list|(
name|revisionId
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
literal|null
decl_stmt|;
for|for
control|(
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
name|Iterator
name|iterator
init|=
name|jsonObject
operator|.
name|keys
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|Object
name|value
init|=
name|jsonObject
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|JSONObject
condition|)
block|{
name|String
name|childPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|realPath
argument_list|,
name|key
argument_list|)
decl_stmt|;
name|Node
name|childNode
init|=
name|parseNode
argument_list|(
name|childPath
argument_list|,
operator|(
name|JSONObject
operator|)
name|value
argument_list|)
decl_stmt|;
name|node
operator|.
name|addChild
argument_list|(
name|childNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
name|properties
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|Object
name|converted
init|=
name|JsonUtil
operator|.
name|convertJsonValue
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|converted
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
end_class

end_unit

