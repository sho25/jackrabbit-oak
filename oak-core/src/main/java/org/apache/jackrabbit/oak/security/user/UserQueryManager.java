begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterators
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|SessionQueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
operator|.
name|XPathQueryBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
operator|.
name|query
operator|.
name|XPathQueryEvaluator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|AuthorizableType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO9075
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * UserQueryManager... TODO  */
end_comment

begin_class
class|class
name|UserQueryManager
block|{
comment|/**      * logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|UserQueryManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|UserManagerImpl
name|userManager
decl_stmt|;
specifier|private
specifier|final
name|Root
name|root
decl_stmt|;
specifier|private
specifier|final
name|String
name|userRoot
decl_stmt|;
specifier|private
specifier|final
name|String
name|groupRoot
decl_stmt|;
specifier|private
specifier|final
name|String
name|authorizableRoot
decl_stmt|;
name|UserQueryManager
parameter_list|(
name|UserManagerImpl
name|userManager
parameter_list|,
name|Root
name|root
parameter_list|)
block|{
name|this
operator|.
name|userManager
operator|=
name|userManager
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|userRoot
operator|=
name|userManager
operator|.
name|getConfig
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_USER_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_USER_PATH
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupRoot
operator|=
name|userManager
operator|.
name|getConfig
argument_list|()
operator|.
name|getConfigValue
argument_list|(
name|UserConstants
operator|.
name|PARAM_GROUP_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
argument_list|)
expr_stmt|;
name|String
name|parent
init|=
name|userRoot
decl_stmt|;
while|while
condition|(
operator|!
name|Text
operator|.
name|isDescendant
argument_list|(
name|parent
argument_list|,
name|groupRoot
argument_list|)
condition|)
block|{
name|parent
operator|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|parent
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|authorizableRoot
operator|=
name|parent
expr_stmt|;
block|}
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|find
parameter_list|(
name|Query
name|query
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|XPathQueryBuilder
name|builder
init|=
operator|new
name|XPathQueryBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|build
argument_list|(
name|builder
argument_list|)
expr_stmt|;
return|return
operator|new
name|XPathQueryEvaluator
argument_list|(
name|builder
argument_list|,
name|userManager
argument_list|,
name|root
argument_list|,
name|userManager
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
operator|.
name|eval
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|findAuthorizables
parameter_list|(
name|String
name|relativePath
parameter_list|,
name|String
name|value
parameter_list|,
name|AuthorizableType
name|authorizableType
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|userManager
operator|.
name|getNamePathMapper
argument_list|()
operator|.
name|getOakPath
argument_list|(
name|relativePath
argument_list|)
decl_stmt|;
return|return
name|findAuthorizables
argument_list|(
name|oakPath
argument_list|,
name|value
argument_list|,
literal|true
argument_list|,
name|authorizableType
argument_list|)
return|;
block|}
comment|/**      * Find the authorizable trees matching the following search parameters within      * the sub-tree defined by an authorizable tree:      *      * @param relPath A relative path (or a name) pointing to properties within      * the tree defined by a given authorizable node.      * @param value The property value to look for.      * @param exact A boolean flag indicating if the value must match exactly or not.s      * @param type Filter the search results to only return authorizable      * trees of a given type. Passing {@link org.apache.jackrabbit.oak.spi.security.user.AuthorizableType#AUTHORIZABLE} indicates that      * no filtering for a specific authorizable type is desired. However, properties      * might still be search in the complete sub-tree of authorizables depending      * on the other query parameters.      * @return An iterator of authorizable trees that match the specified      * search parameters and filters or an empty iterator if no result can be      * found.      * @throws javax.jcr.RepositoryException If an error occurs.      */
annotation|@
name|Nonnull
name|Iterator
argument_list|<
name|Authorizable
argument_list|>
name|findAuthorizables
parameter_list|(
name|String
name|relPath
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|AuthorizableType
name|type
parameter_list|)
throws|throws
name|RepositoryException
block|{
comment|// TODO: replace XPATH
name|String
name|statement
init|=
name|buildXPathStatement
argument_list|(
name|relPath
argument_list|,
name|value
argument_list|,
name|exact
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|SessionQueryEngine
name|queryEngine
init|=
name|root
operator|.
name|getQueryEngine
argument_list|()
decl_stmt|;
try|try
block|{
name|Result
name|result
init|=
name|queryEngine
operator|.
name|executeQuery
argument_list|(
name|statement
argument_list|,
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
operator|.
name|XPATH
argument_list|,
name|Long
operator|.
name|MAX_VALUE
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
name|userManager
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|Iterators
operator|.
name|filter
argument_list|(
name|Iterators
operator|.
name|transform
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
operator|.
name|iterator
argument_list|()
argument_list|,
operator|new
name|ResultRowToAuthorizable
argument_list|()
argument_list|)
argument_list|,
name|Predicates
operator|.
expr|<
name|Object
operator|>
name|notNull
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
annotation|@
name|Nonnull
specifier|private
name|String
name|buildXPathStatement
parameter_list|(
name|String
name|relPath
parameter_list|,
name|String
name|value
parameter_list|,
name|boolean
name|exact
parameter_list|,
name|AuthorizableType
name|type
parameter_list|)
block|{
name|StringBuilder
name|stmt
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|searchRoot
init|=
name|getSearchRoot
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|searchRoot
argument_list|)
condition|)
block|{
name|stmt
operator|.
name|append
argument_list|(
name|searchRoot
argument_list|)
expr_stmt|;
block|}
name|String
name|path
decl_stmt|;
name|String
name|propName
decl_stmt|;
name|String
name|ntName
decl_stmt|;
if|if
condition|(
name|relPath
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
comment|// search for properties somewhere below an authorizable node
name|path
operator|=
literal|null
expr_stmt|;
name|propName
operator|=
name|relPath
expr_stmt|;
name|ntName
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// FIXME: proper normalization of the relative path
name|path
operator|=
operator|(
name|relPath
operator|.
name|startsWith
argument_list|(
literal|"./"
argument_list|)
condition|?
literal|null
else|:
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|relPath
argument_list|,
literal|1
argument_list|)
operator|)
expr_stmt|;
name|propName
operator|=
name|Text
operator|.
name|getName
argument_list|(
name|relPath
argument_list|)
expr_stmt|;
name|ntName
operator|=
name|getNodeTypeName
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|"//"
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|append
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ntName
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|append
argument_list|(
literal|"element(*,"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|ntName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stmt
operator|.
name|append
argument_list|(
literal|"element(*"
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|stmt
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
operator|(
name|exact
operator|)
condition|?
literal|"@"
else|:
literal|"jcr:like(@"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|ISO9075
operator|.
name|encode
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|exact
condition|)
block|{
name|stmt
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|value
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|stmt
operator|.
name|append
argument_list|(
literal|",'%"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|escapeForQuery
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"%')"
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
return|return
name|stmt
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @param type      * @return The path of search root for the specified authorizable type.      */
annotation|@
name|Nonnull
specifier|private
name|String
name|getSearchRoot
parameter_list|(
name|AuthorizableType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|USER
condition|)
block|{
return|return
name|userRoot
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|GROUP
condition|)
block|{
return|return
name|groupRoot
return|;
block|}
else|else
block|{
return|return
name|authorizableRoot
return|;
block|}
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|String
name|escapeForQuery
parameter_list|(
name|String
name|value
parameter_list|)
block|{
name|StringBuilder
name|ret
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'\\'
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"\\\\"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|==
literal|'\''
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"''"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
specifier|private
specifier|static
name|String
name|getNodeTypeName
parameter_list|(
name|AuthorizableType
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|USER
condition|)
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_USER
return|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|AuthorizableType
operator|.
name|GROUP
condition|)
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_GROUP
return|;
block|}
else|else
block|{
return|return
name|UserConstants
operator|.
name|NT_REP_AUTHORIZABLE
return|;
block|}
block|}
specifier|private
class|class
name|ResultRowToAuthorizable
implements|implements
name|Function
argument_list|<
name|ResultRow
argument_list|,
name|Authorizable
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|Authorizable
name|apply
parameter_list|(
name|ResultRow
name|row
parameter_list|)
block|{
try|try
block|{
return|return
name|userManager
operator|.
name|getAuthorizable
argument_list|(
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to access authorizable "
operator|+
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

