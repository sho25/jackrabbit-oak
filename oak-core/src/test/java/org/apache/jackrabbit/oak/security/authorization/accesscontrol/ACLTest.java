begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFormatException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|GlobalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|LocalNameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NameMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|impl
operator|.
name|NamePathMapperImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AbstractAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|AbstractRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionDefinitionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionPattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|EveryonePrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singletonMap
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertSame
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Test {@code ACL} implementation.  */
end_comment

begin_class
specifier|public
class|class
name|ACLTest
extends|extends
name|AbstractAccessControlTest
implements|implements
name|PrivilegeConstants
implements|,
name|AccessControlConstants
block|{
specifier|private
specifier|static
name|void
name|assertACE
parameter_list|(
name|JackrabbitAccessControlEntry
name|ace
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Privilege
modifier|...
name|privileges
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|isAllow
argument_list|,
name|ace
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Sets
operator|.
name|newHashSet
argument_list|(
name|privileges
argument_list|)
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|(
name|ace
operator|.
name|getPrivileges
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNamePathMapper
parameter_list|()
throws|throws
name|Exception
block|{
name|assertSame
argument_list|(
name|getNamePathMapper
argument_list|()
argument_list|,
name|createEmptyACL
argument_list|()
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|assertSame
argument_list|(
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|,
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
name|ImmutableList
operator|.
expr|<
name|ACE
operator|>
name|of
argument_list|()
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPath
parameter_list|()
block|{
name|NameMapper
name|nameMapper
init|=
operator|new
name|GlobalNameMapper
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"jr"
argument_list|,
literal|"http://jackrabbit.apache.org"
argument_list|)
argument_list|)
decl_stmt|;
name|NamePathMapper
name|npMapper
init|=
operator|new
name|NamePathMapperImpl
argument_list|(
name|nameMapper
argument_list|)
decl_stmt|;
comment|// map of jcr-path to standard jcr-path
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|paths
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|paths
operator|.
name|put
argument_list|(
name|TEST_PATH
argument_list|,
name|TEST_PATH
argument_list|)
expr_stmt|;
name|paths
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|paths
operator|.
name|put
argument_list|(
literal|"/jr:testPath"
argument_list|,
literal|"/jr:testPath"
argument_list|)
expr_stmt|;
name|paths
operator|.
name|put
argument_list|(
literal|"/{http://jackrabbit.apache.org}testPath"
argument_list|,
literal|"/jr:testPath"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
operator|.
name|keySet
argument_list|()
control|)
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
expr|<
name|ACE
operator|>
name|emptyList
argument_list|()
argument_list|,
name|npMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|,
name|acl
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetOakPath
parameter_list|()
block|{
name|NamePathMapper
name|npMapper
init|=
operator|new
name|NamePathMapperImpl
argument_list|(
operator|new
name|LocalNameMapper
argument_list|(
name|singletonMap
argument_list|(
literal|"oak"
argument_list|,
literal|"http://jackrabbit.apache.org"
argument_list|)
argument_list|,
name|singletonMap
argument_list|(
literal|"jcr"
argument_list|,
literal|"http://jackrabbit.apache.org"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// map of jcr-path to oak path
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|paths
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|paths
operator|.
name|put
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|paths
operator|.
name|put
argument_list|(
name|TEST_PATH
argument_list|,
name|TEST_PATH
argument_list|)
expr_stmt|;
name|paths
operator|.
name|put
argument_list|(
literal|"/"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|String
name|oakPath
init|=
literal|"/oak:testPath"
decl_stmt|;
name|String
name|jcrPath
init|=
literal|"/jcr:testPath"
decl_stmt|;
name|paths
operator|.
name|put
argument_list|(
name|jcrPath
argument_list|,
name|oakPath
argument_list|)
expr_stmt|;
name|jcrPath
operator|=
literal|"/{http://jackrabbit.apache.org}testPath"
expr_stmt|;
name|paths
operator|.
name|put
argument_list|(
name|jcrPath
argument_list|,
name|oakPath
argument_list|)
expr_stmt|;
comment|// test if oak-path is properly set.
for|for
control|(
name|String
name|path
range|:
name|paths
operator|.
name|keySet
argument_list|()
control|)
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|path
argument_list|,
name|Collections
operator|.
expr|<
name|ACE
operator|>
name|emptyList
argument_list|()
argument_list|,
name|npMapper
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
argument_list|,
name|acl
operator|.
name|getOakPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyAcl
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSize
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|createTestEntries
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsEmpty
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|createTestEntries
argument_list|()
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEntries
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|ACE
argument_list|>
name|aces
init|=
name|createTestEntries
argument_list|()
decl_stmt|;
name|AbstractAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
name|aces
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aces
operator|.
name|size
argument_list|()
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|aces
operator|.
name|size
argument_list|()
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|containsAll
argument_list|(
name|aces
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
argument_list|)
operator|.
name|containsAll
argument_list|(
name|aces
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRestrictionNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
name|String
index|[]
name|restrNames
init|=
name|acl
operator|.
name|getRestrictionNames
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|restrNames
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|restrNames
argument_list|)
decl_stmt|;
for|for
control|(
name|RestrictionDefinition
name|def
range|:
name|getRestrictionProvider
argument_list|()
operator|.
name|getSupportedRestrictions
argument_list|(
name|TEST_PATH
argument_list|)
control|)
block|{
name|assertTrue
argument_list|(
name|names
operator|.
name|remove
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|names
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRestrictionType
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
for|for
control|(
name|RestrictionDefinition
name|def
range|:
name|getRestrictionProvider
argument_list|()
operator|.
name|getSupportedRestrictions
argument_list|(
name|TEST_PATH
argument_list|)
control|)
block|{
name|int
name|reqType
init|=
name|acl
operator|.
name|getRestrictionType
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|reqType
operator|>
name|PropertyType
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|def
operator|.
name|getRequiredType
argument_list|()
operator|.
name|tag
argument_list|()
argument_list|,
name|reqType
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetRestrictionTypeForUnknownName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
comment|// for backwards compatibility getRestrictionType(String) must return
comment|// UNDEFINED for a unknown restriction name:
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|UNDEFINED
argument_list|,
name|acl
operator|.
name|getRestrictionType
argument_list|(
literal|"unknownRestrictionName"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|unknownPrincipal
init|=
operator|new
name|InvalidTestPrincipal
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|unknownPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with an unknown principal should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInternalPrincipal
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Principal
name|internal
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"unknown"
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|internal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNullPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
literal|null
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with null principal should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
literal|""
argument_list|)
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with empty-named principal should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntriesWithCustomPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|oakPrincipal
init|=
operator|new
name|PrincipalImpl
argument_list|(
literal|"anonymous"
argument_list|)
decl_stmt|;
name|Principal
name|principal
init|=
operator|new
name|Principal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"anonymous"
return|;
block|}
block|}
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|oakPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|principal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|0
index|]
operator|.
name|getPrivileges
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithoutPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with empty privilege array should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with null privileges should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryWithInvalidPrivilege
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
operator|new
name|Privilege
index|[]
block|{
operator|new
name|InvalidPrivilege
argument_list|()
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Adding an ACE with invalid privileges should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddAccessControlEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntry2
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEntryTwice
parameter_list|()
throws|throws
name|Exception
block|{
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
name|createTestEntries
argument_list|()
argument_list|,
name|namePathMapper
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|acl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveInvalidEntry
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
operator|new
name|JackrabbitAccessControlEntry
argument_list|()
block|{
specifier|public
name|boolean
name|isAllow
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|String
index|[]
name|getRestrictionNames
parameter_list|()
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|public
name|Value
name|getRestriction
parameter_list|(
name|String
name|restrictionName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Value
index|[]
name|getRestrictions
parameter_list|(
name|String
name|restrictionName
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|Principal
name|getPrincipal
parameter_list|()
block|{
return|return
name|testPrincipal
return|;
block|}
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
return|return
name|testPrivileges
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Passing an unknown ACE should fail"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveNonExisting
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Removing a non-existing ACE should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderToTheEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|read
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|write
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|write
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|first
init|=
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|acl
operator|.
name|orderBefore
argument_list|(
name|first
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|JackrabbitAccessControlEntry
argument_list|>
name|entriesAfter
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|entriesAfter
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorder
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|read
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|write
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|AbstractAccessControlList
name|acl
init|=
name|createEmptyACL
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|write
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|first
init|=
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|AccessControlEntry
name|second
init|=
name|entries
index|[
literal|1
index|]
decl_stmt|;
name|AccessControlEntry
name|third
init|=
name|entries
index|[
literal|2
index|]
decl_stmt|;
comment|// reorder 'second' to the first position
name|acl
operator|.
name|orderBefore
argument_list|(
name|second
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|third
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
comment|// reorder 'third' before 'first'
name|acl
operator|.
name|orderBefore
argument_list|(
name|third
argument_list|,
name|first
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|second
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|third
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|first
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testReorderInvalidEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|read
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|write
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|read
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|EveryonePrincipal
operator|.
name|getInstance
argument_list|()
argument_list|,
name|write
argument_list|)
expr_stmt|;
name|AccessControlEntry
name|invalid
init|=
name|createEntry
argument_list|(
name|testPrincipal
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|,
name|JCR_WRITE
argument_list|)
decl_stmt|;
try|try
block|{
name|acl
operator|.
name|orderBefore
argument_list|(
name|invalid
argument_list|,
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"src entry not contained in list -> reorder should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|acl
operator|.
name|orderBefore
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
name|invalid
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"dest entry not contained in list -> reorder should fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// new entry extends privileges.
name|privileges
operator|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_ADD_CHILD_NODES
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected: only a single allow-entry with both privileges
name|assertTrue
argument_list|(
name|acl
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipleEntries2
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// adding just ADD_CHILD_NODES -> must not remove READ privilege
name|Privilege
index|[]
name|achPrivs
init|=
name|privilegesFromNames
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|achPrivs
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected: only a single allow-entry with add_child_nodes + read privilege
name|assertTrue
argument_list|(
name|acl
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplementaryEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// same entry but with revers 'isAllow' flag
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected: only a single deny-read entry
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|,
name|privileges
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplementaryEntry1
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privileges
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// revoke the 'READ' privilege
name|privileges
operator|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privileges
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected: 2 entries one allowing ADD_CHILD_NODES, the other denying READ
name|assertTrue
argument_list|(
name|acl
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplementaryEntry2
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|repwrite
init|=
name|privilegesFromNames
argument_list|(
name|REP_WRITE
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|repwrite
argument_list|)
expr_stmt|;
comment|// add deny entry for mod_props
name|Privilege
index|[]
name|modProperties
init|=
name|privilegesFromNames
argument_list|(
name|JCR_MODIFY_PROPERTIES
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|modProperties
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
comment|// expected: 2 entries with the allow entry being adjusted
name|assertTrue
argument_list|(
name|acl
operator|.
name|size
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|expected
init|=
name|privilegesFromNames
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
decl_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|modProperties
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplementaryEntry3
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|entries
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultiplePrincipals
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|everyone
init|=
name|principalManager
operator|.
name|getEveryone
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
comment|// add same privileges for another principal -> must modify as well.
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|everyone
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
comment|// .. 2 entries must be present.
name|assertTrue
argument_list|(
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
operator|==
literal|2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|everyone
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|1
index|]
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSetEntryForGroupPrincipal
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|privs
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|Principal
name|grPrincipal
init|=
name|principalManager
operator|.
name|getEveryone
argument_list|()
decl_stmt|;
comment|// adding allow-entry must succeed
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|grPrincipal
argument_list|,
name|privs
argument_list|)
argument_list|)
expr_stmt|;
comment|// adding deny-entry must succeed
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|grPrincipal
argument_list|,
name|privs
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|isAllow
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateGroupEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|Principal
name|everyone
init|=
name|principalManager
operator|.
name|getEveryone
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|everyone
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// adding an entry that should update the existing allow-entry for everyone.
name|acl
operator|.
name|addEntry
argument_list|(
name|everyone
argument_list|,
name|writePriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlEntry
name|princ2AllowEntry
init|=
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entries
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|everyone
argument_list|,
name|princ2AllowEntry
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|princ2AllowEntry
argument_list|,
literal|true
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testComplementaryGroupEntry
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|Principal
name|everyone
init|=
name|principalManager
operator|.
name|getEveryone
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|everyone
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|everyone
argument_list|,
name|writePriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// entry complementary to the first entry
comment|// -> must remove the allow-READ entry and update the deny-WRITE entry.
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlEntry
name|first
init|=
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entries
index|[
literal|0
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|everyone
argument_list|,
name|first
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlEntry
name|second
init|=
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entries
index|[
literal|1
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|testPrincipal
argument_list|,
name|second
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|second
argument_list|,
literal|false
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|,
name|JCR_WRITE
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllowWriteDenyRemoveGroupEntries
parameter_list|()
throws|throws
name|Exception
block|{
name|Principal
name|everyone
init|=
name|principalManager
operator|.
name|getEveryone
argument_list|()
decl_stmt|;
name|Privilege
index|[]
name|grPriv
init|=
name|privilegesFromNames
argument_list|(
name|REP_WRITE
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|dePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|everyone
argument_list|,
name|grPriv
argument_list|,
literal|true
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|everyone
argument_list|,
name|dePriv
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Privilege
argument_list|>
name|allows
init|=
operator|new
name|HashSet
argument_list|<
name|Privilege
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Privilege
argument_list|>
name|denies
init|=
operator|new
name|HashSet
argument_list|<
name|Privilege
argument_list|>
argument_list|()
decl_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|en
range|:
name|entries
control|)
block|{
if|if
condition|(
name|everyone
operator|.
name|equals
argument_list|(
name|en
operator|.
name|getPrincipal
argument_list|()
argument_list|)
operator|&&
name|en
operator|instanceof
name|JackrabbitAccessControlEntry
condition|)
block|{
name|JackrabbitAccessControlEntry
name|ace
init|=
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|en
decl_stmt|;
name|Privilege
index|[]
name|privs
init|=
name|ace
operator|.
name|getPrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|ace
operator|.
name|isAllow
argument_list|()
condition|)
block|{
name|allows
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|denies
operator|.
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|privs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Privilege
index|[]
name|expected
init|=
name|privilegesFromNames
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|,
name|JCR_MODIFY_PROPERTIES
argument_list|,
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|allows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ImmutableSet
operator|.
name|copyOf
argument_list|(
name|expected
argument_list|)
argument_list|,
name|allows
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|denies
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
name|privilegesFromNames
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|,
name|denies
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
name|denies
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUpdateAndComplementary
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|acReadPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|acReadPriv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acl
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|,
name|JCR_READ_ACCESS_CONTROL
argument_list|)
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|acl
operator|.
name|getEntries
argument_list|()
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|readPriv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDifferentPrivilegeImplementation
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
operator|new
name|PrincipalImpl
argument_list|(
name|testPrincipal
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|readPriv
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
operator|new
name|Principal
argument_list|()
block|{
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|testPrincipal
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
argument_list|,
name|readPriv
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNewEntriesAppendedAtEnd
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|principalManager
operator|.
name|getEveryone
argument_list|()
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|AccessControlEntry
index|[]
name|entries
init|=
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|entries
operator|.
name|length
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlEntry
name|last
init|=
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|entries
index|[
literal|2
index|]
decl_stmt|;
name|assertEquals
argument_list|(
name|testPrincipal
argument_list|,
name|last
operator|.
name|getPrincipal
argument_list|()
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|last
argument_list|,
literal|false
argument_list|,
name|writePriv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertionOrder
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|addNodePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_GLOB
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/.*"
argument_list|)
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|addNodePriv
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertACE
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|readPriv
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|,
name|writePriv
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|,
name|addNodePriv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInsertionOrder2
parameter_list|()
throws|throws
name|Exception
block|{
name|Privilege
index|[]
name|readPriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_READ
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|addNodePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_GLOB
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/.*"
argument_list|)
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|readPriv
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|addNodePriv
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|?
extends|extends
name|JackrabbitAccessControlEntry
argument_list|>
name|entries
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
name|assertACE
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
name|readPriv
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|,
name|addNodePriv
argument_list|)
expr_stmt|;
name|assertACE
argument_list|(
name|entries
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|,
name|writePriv
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|String
index|[]
name|names
init|=
name|acl
operator|.
name|getRestrictionNames
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|names
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|names
operator|.
name|length
argument_list|)
expr_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|String
index|[]
block|{
name|REP_GLOB
block|,
name|REP_NT_NAMES
block|,
name|REP_PREFIXES
block|,
name|REP_ITEM_NAMES
block|}
argument_list|,
name|names
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|acl
operator|.
name|getRestrictionType
argument_list|(
name|names
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|NAME
argument_list|,
name|acl
operator|.
name|getRestrictionType
argument_list|(
name|names
index|[
literal|1
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|STRING
argument_list|,
name|acl
operator|.
name|getRestrictionType
argument_list|(
name|names
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PropertyType
operator|.
name|NAME
argument_list|,
name|acl
operator|.
name|getRestrictionType
argument_list|(
name|names
index|[
literal|3
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|Privilege
index|[]
name|writePriv
init|=
name|privilegesFromNames
argument_list|(
name|JCR_WRITE
argument_list|)
decl_stmt|;
comment|// add entry without restr. -> must succeed
name|assertTrue
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ... again -> no modification.
name|assertFalse
argument_list|(
name|acl
operator|.
name|addAccessControlEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ... again using different method -> no modification.
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ... complementary entry -> must modify the acl
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// add an entry with a restrictions:
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_GLOB
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"/.*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ... same again -> no modification.
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
comment|// ... complementary entry -> must modify the acl.
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|writePriv
argument_list|,
literal|true
argument_list|,
name|restrictions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMvRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|ValueFactory
name|vf
init|=
name|getValueFactory
argument_list|()
decl_stmt|;
name|Value
index|[]
name|vs
init|=
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
name|JcrConstants
operator|.
name|NT_FILE
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|,
name|vf
operator|.
name|createValue
argument_list|(
name|JcrConstants
operator|.
name|NT_FOLDER
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_NT_NAMES
argument_list|,
name|vs
argument_list|)
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
name|REP_GLOB
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"/.*"
argument_list|)
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
operator|.
name|length
argument_list|)
expr_stmt|;
name|JackrabbitAccessControlEntry
name|ace
init|=
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
try|try
block|{
name|ace
operator|.
name|getRestriction
argument_list|(
name|REP_NT_NAMES
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ValueFormatException
name|e
parameter_list|)
block|{
comment|// success
block|}
name|Value
index|[]
name|vvs
init|=
name|ace
operator|.
name|getRestrictions
argument_list|(
name|REP_NT_NAMES
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
name|vs
argument_list|,
name|vvs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsupportedRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"unknownRestriction"
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid restrictions -> AccessControlException expected"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnsupportedRestrictions2
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"restr"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
try|try
block|{
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|singletonMap
argument_list|(
literal|"unsupported"
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|"value"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Unsupported restriction must be detected."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// mandatory restriction missing -> success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testInvalidRestrictionType
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"restr"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
try|try
block|{
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Value
operator|>
name|singletonMap
argument_list|(
literal|"restr"
argument_list|,
name|getValueFactory
argument_list|()
operator|.
name|createValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Invalid restriction type."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessControlException
name|e
parameter_list|)
block|{
comment|// mandatory restriction missing -> success
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMandatoryRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"mandatory"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMandatoryRestrictionsPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"mandatory"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"mandatory"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"name"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMandatoryRestrictionsPresentAsMV
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"mandatory"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"mandatory"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"name"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMandatoryMVRestrictions
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"mandatory"
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|AccessControlException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testMandatoryMVRestrictionsPresentAsSingle
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"mandatory"
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"mandatory"
argument_list|,
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"name"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
argument_list|)
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMandatoryMVRestrictionsPresent
parameter_list|()
throws|throws
name|Exception
block|{
name|RestrictionProvider
name|rp
init|=
operator|new
name|TestRestrictionProvider
argument_list|(
literal|"mandatory"
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|createACL
argument_list|(
name|TEST_PATH
argument_list|,
operator|new
name|ArrayList
argument_list|()
argument_list|,
name|namePathMapper
argument_list|,
name|rp
argument_list|)
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|Collections
operator|.
name|emptyMap
argument_list|()
argument_list|,
name|Collections
operator|.
name|singletonMap
argument_list|(
literal|"mandatory"
argument_list|,
operator|new
name|Value
index|[]
block|{
name|valueFactory
operator|.
name|createValue
argument_list|(
literal|"name"
argument_list|,
name|PropertyType
operator|.
name|NAME
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------------------------------------------------
specifier|private
class|class
name|InvalidPrivilege
implements|implements
name|Privilege
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"invalidPrivilege"
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAbstract
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAggregate
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getDeclaredAggregatePrivileges
parameter_list|()
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getAggregatePrivileges
parameter_list|()
block|{
return|return
operator|new
name|Privilege
index|[
literal|0
index|]
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|TestRestrictionProvider
extends|extends
name|AbstractRestrictionProvider
block|{
specifier|private
name|TestRestrictionProvider
parameter_list|(
name|String
name|name
parameter_list|,
name|Type
name|type
parameter_list|,
name|boolean
name|isMandatory
parameter_list|)
block|{
name|super
argument_list|(
name|Collections
operator|.
name|singletonMap
argument_list|(
name|name
argument_list|,
operator|new
name|RestrictionDefinitionImpl
argument_list|(
name|name
argument_list|,
name|type
argument_list|,
name|isMandatory
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|RestrictionPattern
name|getPattern
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|RestrictionPattern
name|getPattern
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
block|}
end_class

end_unit

