begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ServiceLoader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|parser
operator|.
name|JSONParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ComparisonFailure
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Abstract base class for {@link MicroKernel} integration tests.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractMicroKernelIT
block|{
comment|/**      * Finds and returns all {@link MicroKernelFixture} services available      * in the current classpath.      *      * @return available {@link MicroKernelFixture} services      */
annotation|@
name|Parameters
specifier|public
specifier|static
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|loadFixtures
parameter_list|()
block|{
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|fixtures
init|=
operator|new
name|ArrayList
argument_list|<
name|Object
index|[]
argument_list|>
argument_list|()
decl_stmt|;
name|Class
argument_list|<
name|MicroKernelFixture
argument_list|>
name|iface
init|=
name|MicroKernelFixture
operator|.
name|class
decl_stmt|;
name|ServiceLoader
argument_list|<
name|MicroKernelFixture
argument_list|>
name|loader
init|=
name|ServiceLoader
operator|.
name|load
argument_list|(
name|iface
argument_list|,
name|iface
operator|.
name|getClassLoader
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|MicroKernelFixture
name|fixture
range|:
name|loader
control|)
block|{
name|fixtures
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|fixture
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|fixtures
return|;
block|}
comment|/**      * The {@link MicroKernelFixture} service used by this test case instance.      */
specifier|protected
specifier|final
name|MicroKernelFixture
name|fixture
decl_stmt|;
comment|/**      * The {@link MicroKernel} cluster node instances used by this test case.      */
specifier|protected
specifier|final
name|MicroKernel
index|[]
name|mks
decl_stmt|;
comment|/**      * The {@link MicroKernel} instance used by this test case.      * In a clustered setup this is the first node of the cluster.      */
specifier|protected
name|MicroKernel
name|mk
decl_stmt|;
comment|/**      * A JSON parser instance that can be used for parsing JSON-format data;      * {@code JSONParser} instances are not<i>not</i> thread-safe.      * @see #getJSONParser()      */
specifier|private
name|JSONParser
name|parser
decl_stmt|;
comment|/**      * Creates a {@link MicroKernel} test case for a cluster of the given      * size created using the given {@link MicroKernelFixture} service.      *      * @param fixture {@link MicroKernelFixture} service      * @param nodeCount number of nodes that the test cluster should contain      */
specifier|protected
name|AbstractMicroKernelIT
parameter_list|(
name|MicroKernelFixture
name|fixture
parameter_list|,
name|int
name|nodeCount
parameter_list|)
block|{
assert|assert
name|nodeCount
operator|>
literal|0
assert|;
name|this
operator|.
name|fixture
operator|=
name|fixture
expr_stmt|;
name|this
operator|.
name|mks
operator|=
operator|new
name|MicroKernel
index|[
name|nodeCount
index|]
expr_stmt|;
block|}
comment|/**      * Prepares the test case by initializing the {@link #mks} and      * {@link #mk} variables with a new {@link MicroKernel} cluster      * from the {@link MicroKernelFixture} service associated with      * this test case.      */
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|fixture
operator|.
name|setUpCluster
argument_list|(
name|mks
argument_list|)
expr_stmt|;
name|mk
operator|=
name|mks
index|[
literal|0
index|]
expr_stmt|;
name|addInitialTestContent
argument_list|()
expr_stmt|;
block|}
comment|/**      * Adds initial content used by the test case. This method is      * called by the {@link #setUp()} method after the {@link MicroKernel}      * cluster has been set up and before the actual test is run.      * The default implementation does nothing, but subclasses can      * override this method to perform extra initialization.      */
specifier|protected
name|void
name|addInitialTestContent
parameter_list|()
block|{     }
comment|/**      * Releases the {@link MicroKernel} cluster used by this test case.      */
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|fixture
operator|.
name|tearDownCluster
argument_list|(
name|mks
argument_list|)
expr_stmt|;
block|}
comment|//--------------------------------< utility methods for parsing json data>
comment|/**      * Returns a {@code JSONParser} instance for parsing JSON format data.      * This method returns a cached instance.      *<p/>      * {@code JSONParser} instances are<i>not</i> thread-safe. Multi-threaded      * unit tests should therefore override this method and return a fresh      * instance on every invocation.      *      * @return a {@code JSONParser} instance      */
specifier|protected
specifier|synchronized
name|JSONParser
name|getJSONParser
parameter_list|()
block|{
if|if
condition|(
name|parser
operator|==
literal|null
condition|)
block|{
name|parser
operator|=
operator|new
name|JSONParser
argument_list|()
expr_stmt|;
block|}
return|return
name|parser
return|;
block|}
comment|/**      * Parses the provided string into a {@code JSONObject}.      *      * @param json string to be parsed      * @return a {@code JSONObject}      * @throws {@code AssertionError} if the string cannot be parsed into a {@code JSONObject}      */
specifier|protected
name|JSONObject
name|parseJSONObject
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|AssertionError
block|{
name|JSONParser
name|parser
init|=
name|getJSONParser
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|obj
init|=
name|parser
operator|.
name|parse
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|JSONObject
argument_list|)
expr_stmt|;
return|return
operator|(
name|JSONObject
operator|)
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a valid JSON object: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Parses the provided string into a {@code JSONObject}.      *      * @param json string to be parsed      * @return a {@code JSONArray}      * @throws {@code AssertionError} if the string cannot be parsed into a {@code JSONArray}      */
specifier|protected
name|JSONArray
name|parseJSONArray
parameter_list|(
name|String
name|json
parameter_list|)
throws|throws
name|AssertionError
block|{
name|JSONParser
name|parser
init|=
name|getJSONParser
argument_list|()
decl_stmt|;
try|try
block|{
name|Object
name|obj
init|=
name|parser
operator|.
name|parse
argument_list|(
name|json
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|obj
operator|instanceof
name|JSONArray
argument_list|)
expr_stmt|;
return|return
operator|(
name|JSONArray
operator|)
name|obj
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not a valid JSON array: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getNodeNames
parameter_list|(
name|JSONObject
name|obj
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|obj
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|JSONObject
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
specifier|protected
name|Set
argument_list|<
name|String
argument_list|>
name|getPropertyNames
parameter_list|(
name|JSONObject
name|obj
parameter_list|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|>
name|entries
init|=
name|obj
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
name|entry
range|:
name|entries
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|entry
operator|.
name|getValue
argument_list|()
operator|instanceof
name|JSONObject
operator|)
condition|)
block|{
name|names
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|names
return|;
block|}
specifier|protected
name|void
name|assertPropertyExists
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyNotExists
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyExists
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Class
name|type
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|type
operator|.
name|isInstance
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Double
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Long
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Boolean
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|String
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|val
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|assertPropertyValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|,
name|Object
index|[]
name|expected
parameter_list|)
throws|throws
name|AssertionError
block|{
name|JSONArray
name|array
init|=
name|resolveArrayValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|,
name|array
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// JSON numeric types: Double, Long
comment|// convert types as necessary for comparison using equals method
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|o1
init|=
name|expected
index|[
name|i
index|]
decl_stmt|;
name|Object
name|o2
init|=
name|array
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|o1
operator|instanceof
name|Number
operator|&&
name|o2
operator|instanceof
name|Number
condition|)
block|{
if|if
condition|(
name|o1
operator|instanceof
name|Integer
condition|)
block|{
name|o1
operator|=
operator|new
name|Long
argument_list|(
operator|(
name|Integer
operator|)
name|o1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|instanceof
name|Short
condition|)
block|{
name|o1
operator|=
operator|new
name|Long
argument_list|(
operator|(
name|Short
operator|)
name|o1
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o1
operator|instanceof
name|Float
condition|)
block|{
name|o1
operator|=
operator|new
name|Double
argument_list|(
operator|(
name|Float
operator|)
name|o1
argument_list|)
expr_stmt|;
block|}
block|}
name|assertEquals
argument_list|(
name|o1
argument_list|,
name|o2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|JSONObject
name|resolveObjectValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|JSONObject
condition|)
block|{
return|return
operator|(
name|JSONObject
operator|)
name|val
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to resolve JSONObject value at "
operator|+
name|relPath
operator|+
literal|": "
operator|+
name|val
argument_list|)
throw|;
block|}
specifier|protected
name|JSONObject
name|getObjectArrayEntry
parameter_list|(
name|JSONArray
name|array
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|pos
operator|>=
literal|0
operator|&&
name|pos
operator|<
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Object
name|entry
init|=
name|array
operator|.
name|get
argument_list|(
name|pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|instanceof
name|JSONObject
condition|)
block|{
return|return
operator|(
name|JSONObject
operator|)
name|entry
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to resolve JSONObject array entry at pos "
operator|+
name|pos
operator|+
literal|": "
operator|+
name|entry
argument_list|)
throw|;
block|}
specifier|protected
name|JSONArray
name|resolveArrayValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
name|Object
name|val
init|=
name|resolveValue
argument_list|(
name|obj
argument_list|,
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|instanceof
name|JSONArray
condition|)
block|{
return|return
operator|(
name|JSONArray
operator|)
name|val
return|;
block|}
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"failed to resolve JSONArray value at "
operator|+
name|relPath
operator|+
literal|": "
operator|+
name|val
argument_list|)
throw|;
block|}
specifier|protected
name|Object
name|resolveValue
parameter_list|(
name|JSONObject
name|obj
parameter_list|,
name|String
name|relPath
parameter_list|)
block|{
name|String
name|names
index|[]
init|=
name|relPath
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|Object
name|val
init|=
name|obj
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
if|if
condition|(
operator|!
operator|(
name|val
operator|instanceof
name|JSONObject
operator|)
condition|)
block|{
throw|throw
operator|new
name|AssertionError
argument_list|(
literal|"not found: "
operator|+
name|relPath
argument_list|)
throw|;
block|}
name|val
operator|=
operator|(
operator|(
name|JSONObject
operator|)
name|val
operator|)
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|val
return|;
block|}
block|}
end_class

end_unit

