begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitWorkspace
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Privilege Management  * =============================================================================  *  * Title: Privilege Management (Basics)  * -----------------------------------------------------------------------------  *  * Goal:  * Learn about the retrieving privileges in {@link javax.jcr.security.AccessControlManager)  * and the API defined by the {@link org.apache.jackrabbit.api.security.authorization.PrivilegeManager}  * API extension.  *  * Exercises:  *  * - {@link #testGetPrivilege()}  *   Use this exercise to become familiar with the different ways to retrieve  *   a privilege.  *  * - {@link #testGetSupportedAndRegisteredPrivileges()}  *   Learn about the difference between supported and registered privileges.  *   Based on the API contract compare the results of the 2 methods in the current  *   implementation and discuss different ways of implementation.  *  *   Question: How could you compare the 'supported' with the 'registered' privileges?  *   Question: What can you say about the difference?  *   Question: What can you say about the default implementation of {@link AccessControlManager#getSupportedPrivileges(String)}  *  *  * Related Exercises:  * -----------------------------------------------------------------------------  *  * - {@link L3_BuiltInPrivilegesTest}  * - {@link L4_CustomPrivilegeTest}  *  *</pre>  *  * @see javax.jcr.security.AccessControlManager  * @see org.apache.jackrabbit.api.security.authorization.PrivilegeManager  */
end_comment

begin_class
specifier|public
class|class
name|L2_PrivilegeManagementTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|AccessControlManager
name|accessControlManager
decl_stmt|;
specifier|private
name|PrivilegeManager
name|privilegeManager
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|accessControlManager
operator|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|superuser
operator|instanceof
name|JackrabbitSession
operator|)
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"not a JackrabbitSession"
argument_list|)
throw|;
block|}
name|privilegeManager
operator|=
operator|(
operator|(
name|JackrabbitWorkspace
operator|)
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|)
operator|.
name|getPrivilegeManager
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|testGetPrivilege
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|privilegeName
init|=
name|Privilege
operator|.
name|JCR_READ
decl_stmt|;
name|Privilege
name|readPriv
init|=
literal|null
decl_stmt|;
comment|// EXERCISE: retrieve privilege from 'accessControlManager'
name|Privilege
name|readPriv2
init|=
literal|null
decl_stmt|;
comment|// EXERCISE: retrive the privilege from 'privilegeManager'
name|assertTrue
argument_list|(
name|readPriv
operator|.
name|equals
argument_list|(
name|readPriv2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testGetSupportedAndRegisteredPrivileges
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Privilege
index|[]
name|supportedPrivilges
init|=
name|accessControlManager
operator|.
name|getSupportedPrivileges
argument_list|(
name|testRoot
argument_list|)
decl_stmt|;
name|Privilege
index|[]
name|registered
init|=
name|privilegeManager
operator|.
name|getRegisteredPrivileges
argument_list|()
decl_stmt|;
comment|// EXERCISE: compare the supported and the registered privileges
comment|// EXERCISE: read the API contract for the 2 methods
block|}
block|}
end_class

end_unit

