begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|cow
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CopyOnWriteStoreMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EmptyHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  *<p>The copy-on-write (COW) node store implementation allows to temporarily  * switch the repository into the "testing" mode, in which all the changes are  * stored in a volatile storage, namely the MemoryNodeStore. After switching  * back to the "production" mode, the test changes should be dropped.</p>  *  *<p>If the CoW is enabled, a special :cow=true property will be set on the  * root node returned by getRoot(). It's being used in the merge() to decide  * which store be modified. Removing this property will result in merging  * changes to the main node store, even in the CoW mode.</p>  *  *<p>The checkpoint support is provided by the {@link BranchNodeStore} class.  * All the existing checkpoints are still available in the CoW mode (until they  * expire). New checkpoints are only created in the MemoryNodeStore.</p>  *  *<p>Known limitations:</p>  *  *<ul>  *<li>turning the CoW mode on and off requires cleaning up the  *<a href="https://jackrabbit.apache.org/oak/docs/query/lucene.html#copy-on-read">lucene  *     indexing cache</a>,</li>  *<li>switching the CoW mode may result in repository inconsistencies  *     (eg. if two merges belongs to the same logical commit sequence),</li>  *<li>in the CoW mode the changes are stored in MemoryNodeStore, so it  *     shouldn't be enabled for too long (otherwise it may exhaust the heap).</li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|COWNodeStore
implements|implements
name|NodeStore
implements|,
name|Observable
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Observer
argument_list|>
name|observers
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|store
decl_stmt|;
specifier|private
specifier|volatile
name|BranchNodeStore
name|branchStore
decl_stmt|;
specifier|public
name|COWNodeStore
parameter_list|(
name|NodeStore
name|store
parameter_list|)
block|{
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
specifier|public
name|void
name|enableCopyOnWrite
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|BranchNodeStore
name|branchStore
init|=
operator|new
name|BranchNodeStore
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|NodeBuilder
name|b
init|=
name|branchStore
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
name|b
operator|.
name|setProperty
argument_list|(
literal|":cow"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|branchStore
operator|.
name|merge
argument_list|(
name|b
argument_list|,
name|EmptyHook
operator|.
name|INSTANCE
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|branchStore
operator|.
name|addObserver
argument_list|(
parameter_list|(
name|root
parameter_list|,
name|info
parameter_list|)
lambda|->
name|observers
operator|.
name|stream
argument_list|()
operator|.
name|forEach
argument_list|(
name|o
lambda|->
name|o
operator|.
name|contentChanged
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|branchStore
operator|=
name|branchStore
expr_stmt|;
block|}
specifier|public
name|void
name|disableCopyOnWrite
parameter_list|()
block|{
name|BranchNodeStore
name|branchStore
init|=
name|this
operator|.
name|branchStore
decl_stmt|;
name|this
operator|.
name|branchStore
operator|=
literal|null
expr_stmt|;
name|branchStore
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
specifier|private
name|NodeStore
name|getNodeStore
parameter_list|()
block|{
name|NodeStore
name|s
init|=
name|branchStore
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
name|s
operator|=
name|store
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
specifier|private
name|NodeStore
name|getNodeStore
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|.
name|hasProperty
argument_list|(
literal|":cow"
argument_list|)
condition|)
block|{
name|NodeStore
name|s
init|=
name|branchStore
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Node store for this builder is no longer available"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|s
return|;
block|}
block|}
else|else
block|{
return|return
name|store
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Closeable
name|addObserver
parameter_list|(
name|Observer
name|observer
parameter_list|)
block|{
name|observer
operator|.
name|contentChanged
argument_list|(
name|getRoot
argument_list|()
argument_list|,
name|CommitInfo
operator|.
name|EMPTY_EXTERNAL
argument_list|)
expr_stmt|;
name|observers
operator|.
name|add
argument_list|(
name|observer
argument_list|)
expr_stmt|;
return|return
parameter_list|()
lambda|->
name|observers
operator|.
name|remove
argument_list|(
name|observer
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|getRoot
parameter_list|()
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|merge
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
annotation|@
name|Nonnull
name|CommitHook
name|commitHook
parameter_list|,
annotation|@
name|Nonnull
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|getNodeStore
argument_list|(
name|builder
argument_list|)
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|commitHook
argument_list|,
name|info
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|NodeState
name|rebase
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|(
name|builder
argument_list|)
operator|.
name|rebase
argument_list|(
name|builder
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|(
name|builder
argument_list|)
operator|.
name|reset
argument_list|(
name|builder
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Blob
name|createBlob
parameter_list|(
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|createBlob
argument_list|(
name|inputStream
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Blob
name|getBlob
parameter_list|(
annotation|@
name|Nonnull
name|String
name|reference
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|getBlob
argument_list|(
name|reference
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|,
annotation|@
name|Nonnull
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|properties
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|,
name|properties
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|checkpoint
argument_list|(
name|lifetime
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointInfo
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|String
argument_list|>
name|checkpoints
parameter_list|()
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|checkpoints
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|retrieve
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|release
parameter_list|(
annotation|@
name|Nonnull
name|String
name|checkpoint
parameter_list|)
block|{
return|return
name|getNodeStore
argument_list|()
operator|.
name|release
argument_list|(
name|checkpoint
argument_list|)
return|;
block|}
class|class
name|MBeanImpl
implements|implements
name|CopyOnWriteStoreMBean
block|{
annotation|@
name|Override
specifier|public
name|String
name|enableCopyOnWrite
parameter_list|()
block|{
try|try
block|{
name|COWNodeStore
operator|.
name|this
operator|.
name|enableCopyOnWrite
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CommitFailedException
name|e
parameter_list|)
block|{
return|return
literal|"can't enable the copy on write: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
return|return
literal|"success"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|disableCopyOnWrite
parameter_list|()
block|{
name|COWNodeStore
operator|.
name|this
operator|.
name|disableCopyOnWrite
argument_list|()
expr_stmt|;
return|return
literal|"success"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|branchStore
operator|==
literal|null
condition|?
literal|"disabled"
else|:
literal|"enabled"
return|;
block|}
block|}
block|}
end_class

end_unit

