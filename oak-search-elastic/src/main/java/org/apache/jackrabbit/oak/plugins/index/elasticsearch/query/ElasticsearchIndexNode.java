begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|query
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIndexCoordinateFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|elasticsearch
operator|.
name|ElasticsearchIndexDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
operator|.
name|IndexStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_class
specifier|public
class|class
name|ElasticsearchIndexNode
implements|implements
name|IndexNode
block|{
specifier|private
specifier|final
name|ElasticsearchIndexDefinition
name|indexDefinition
decl_stmt|;
specifier|private
name|ElasticsearchIndexCoordinateFactory
name|factory
decl_stmt|;
specifier|static
name|ElasticsearchIndexNode
name|fromIndexPath
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|root
parameter_list|,
annotation|@
name|NotNull
name|String
name|indexPath
parameter_list|)
block|{
name|NodeState
name|indexNS
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|root
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
name|ElasticsearchIndexDefinition
name|indexDefinition
init|=
operator|new
name|ElasticsearchIndexDefinition
argument_list|(
name|root
argument_list|,
name|indexNS
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
return|return
operator|new
name|ElasticsearchIndexNode
argument_list|(
name|indexDefinition
argument_list|)
return|;
block|}
specifier|private
name|ElasticsearchIndexNode
parameter_list|(
name|ElasticsearchIndexDefinition
name|indexDefinition
parameter_list|)
block|{
name|this
operator|.
name|indexDefinition
operator|=
name|indexDefinition
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|release
parameter_list|()
block|{
comment|// do nothing
block|}
annotation|@
name|Override
specifier|public
name|ElasticsearchIndexDefinition
name|getDefinition
parameter_list|()
block|{
return|return
name|indexDefinition
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIndexNodeId
parameter_list|()
block|{
comment|// TODO: does it matter that we simply return 0 as there's no observation based _refresh_ going on here
comment|// and we always defer to ES to its own thing
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
annotation|@
name|Nullable
name|IndexStatistics
name|getIndexStatistics
parameter_list|()
block|{
return|return
operator|new
name|ElasticsearchIndexStatistics
argument_list|(
name|factory
operator|.
name|getElasticsearchIndexCoordinate
argument_list|(
name|indexDefinition
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|setFactory
parameter_list|(
name|ElasticsearchIndexCoordinateFactory
name|factory
parameter_list|)
block|{
name|this
operator|.
name|factory
operator|=
name|factory
expr_stmt|;
block|}
block|}
end_class

end_unit

