begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ValidatorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|VisibleValidator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|SystemPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Validator provider to ensure that the principal-cache stored with a given  * user is only maintained by the {@link org.apache.jackrabbit.oak.security.user.UserPrincipalProvider}  * associated with a internal system session.  */
end_comment

begin_class
class|class
name|CacheValidatorProvider
extends|extends
name|ValidatorProvider
implements|implements
name|CacheConstants
block|{
specifier|private
specifier|final
name|boolean
name|isSystem
decl_stmt|;
specifier|private
specifier|final
name|TreeProvider
name|treeProvider
decl_stmt|;
name|CacheValidatorProvider
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|NotNull
name|TreeProvider
name|treeProvider
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|isSystem
operator|=
name|principals
operator|.
name|contains
argument_list|(
name|SystemPrincipal
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
name|this
operator|.
name|treeProvider
operator|=
name|treeProvider
expr_stmt|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|protected
name|Validator
name|getRootValidator
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|TypePredicate
name|cachePredicate
init|=
operator|new
name|TypePredicate
argument_list|(
name|after
argument_list|,
name|NT_REP_CACHE
argument_list|)
decl_stmt|;
name|boolean
name|isValidCommitInfo
init|=
name|CommitMarker
operator|.
name|isValidCommitInfo
argument_list|(
name|info
argument_list|)
decl_stmt|;
return|return
operator|new
name|CacheValidator
argument_list|(
name|treeProvider
operator|.
name|createReadOnlyTree
argument_list|(
name|before
argument_list|)
argument_list|,
name|treeProvider
operator|.
name|createReadOnlyTree
argument_list|(
name|after
argument_list|)
argument_list|,
name|cachePredicate
argument_list|,
name|isValidCommitInfo
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------------------------
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|asCommitAttributes
parameter_list|()
block|{
return|return
name|Collections
operator|.
name|singletonMap
argument_list|(
name|CommitMarker
operator|.
name|KEY
argument_list|,
name|CommitMarker
operator|.
name|INSTANCE
argument_list|)
return|;
block|}
specifier|private
specifier|static
specifier|final
class|class
name|CommitMarker
block|{
specifier|private
specifier|static
specifier|final
name|String
name|KEY
init|=
name|CommitMarker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|CommitMarker
name|INSTANCE
init|=
operator|new
name|CommitMarker
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|isValidCommitInfo
parameter_list|(
annotation|@
name|NotNull
name|CommitInfo
name|commitInfo
parameter_list|)
block|{
return|return
name|CommitMarker
operator|.
name|INSTANCE
operator|==
name|commitInfo
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CommitMarker
operator|.
name|KEY
argument_list|)
return|;
block|}
specifier|private
name|CommitMarker
parameter_list|()
block|{}
block|}
comment|//-----------------------------------------------------< CacheValidator>---
specifier|private
specifier|final
class|class
name|CacheValidator
extends|extends
name|DefaultValidator
block|{
specifier|private
specifier|final
name|Tree
name|parentBefore
decl_stmt|;
specifier|private
specifier|final
name|Tree
name|parentAfter
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|cachePredicate
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isValidCommitInfo
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|isCache
decl_stmt|;
specifier|private
name|CacheValidator
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|parentBefore
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|parentAfter
parameter_list|,
name|TypePredicate
name|cachePredicate
parameter_list|,
name|boolean
name|isValidCommitInfo
parameter_list|)
block|{
name|this
operator|.
name|parentBefore
operator|=
name|parentBefore
expr_stmt|;
name|this
operator|.
name|parentAfter
operator|=
name|parentAfter
expr_stmt|;
name|this
operator|.
name|cachePredicate
operator|=
name|cachePredicate
expr_stmt|;
name|this
operator|.
name|isValidCommitInfo
operator|=
name|isValidCommitInfo
expr_stmt|;
name|isCache
operator|=
name|isCache
argument_list|(
name|parentAfter
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|isCache
condition|)
block|{
name|checkValidCommit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|isCache
condition|)
block|{
name|checkValidCommit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|beforeTree
init|=
name|checkNotNull
argument_list|(
name|parentBefore
argument_list|)
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|Tree
name|afterTree
init|=
name|parentAfter
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCache
operator|||
name|isCache
argument_list|(
name|beforeTree
argument_list|)
operator|||
name|isCache
argument_list|(
name|afterTree
argument_list|)
condition|)
block|{
name|checkValidCommit
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|VisibleValidator
argument_list|(
operator|new
name|CacheValidator
argument_list|(
name|beforeTree
argument_list|,
name|afterTree
argument_list|,
name|cachePredicate
argument_list|,
name|isValidCommitInfo
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Validator
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|Tree
name|tree
init|=
name|parentAfter
operator|.
name|getChild
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCache
operator|||
name|isCache
argument_list|(
name|tree
argument_list|)
condition|)
block|{
name|checkValidCommit
argument_list|()
expr_stmt|;
block|}
return|return
operator|new
name|VisibleValidator
argument_list|(
operator|new
name|CacheValidator
argument_list|(
literal|null
argument_list|,
name|tree
argument_list|,
name|cachePredicate
argument_list|,
name|isValidCommitInfo
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isCache
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
block|{
return|return
operator|(
name|REP_CACHE
operator|.
name|equals
argument_list|(
name|tree
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|cachePredicate
operator|.
name|test
argument_list|(
name|tree
argument_list|)
operator|)
return|;
block|}
specifier|private
name|void
name|checkValidCommit
parameter_list|()
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
operator|!
operator|(
name|isSystem
operator|&&
name|isValidCommitInfo
operator|)
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|CommitFailedException
operator|.
name|CONSTRAINT
argument_list|,
literal|34
argument_list|,
literal|"Attempt to create or change the system maintained cache."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

