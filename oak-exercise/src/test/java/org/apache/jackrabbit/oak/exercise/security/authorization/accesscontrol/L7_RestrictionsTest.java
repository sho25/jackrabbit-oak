begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ValueFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|CustomRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|exercise
operator|.
name|ExerciseUtility
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AccessControlConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|AbstractJCRTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_comment
comment|/**  *<pre>  * Module: Authorization (Access Control Management)  * =============================================================================  *  * Title: Restrictions and Restriction Management  * -----------------------------------------------------------------------------  *  * Goal:  * Become familiar with the concept of additional restrictions added to a given  * access control entry and the API to read and write them.  *  * For simplicity this test make use of the default restrictions provided by Oak.  * Be aware that these are not built-in constants as additional restrictions  * are pluggable at runtime. See the advanced exercises.  *  * Exercises:  *  * - {@link #testApplicableRestrictions()}  *   This test uses Jackrabbit API methods to obtain the applicable restrictions.  *   Complete the test such that you also now the required type of the  *   restrictions.  *  *   Question: Can you determine from the Jackrabbit API if the restriction is multivalued?  *  * - {@link #testAddEntryWithRestrictions()}  *   Create an new ACE with a single valued restriction like e.g. the path globbing  *   restriction.  *  * - {@link #testAddEntryWithMultiValuedRestriction()}  *   Create an new ACE with multiple restrictions mixing both single and multi-  *   valued restrictions.  *  * - {@link #testRetrieveRestrictionsFromACE()}  *   This test creates an ACE with restrictions. Complete the test by verifying  *   your expectations wrt restrictions present on the ACE.  *  *  * Advanced Exercises:  * -----------------------------------------------------------------------------  *  * While the restriction API provided by Jackrabbit API is rather limited the  * Oak internal way to handle, store and read these restictions is a bit  * more elaborate.  *  * Use the Oak code base and the documentation at  * http://jackrabbit.apache.org/oak/docs/security/accesscontrol/restriction.html  * to complete the following additional exercises.  *  * - Take a look at the interfaces and classes defined in  *   {@code org.apache.jackrabbit.oak.spi.security.authorization.restriction}  *  * - Investigate how you could plug your custom restriction provider and try  *   to implement it according to the instructions on the Oak.  *   Use the stub at {@link CustomRestrictionProvider}  *   to complete this exercise.  *  * - Make your custom restriction provider an OSGi service and deploy it in a  *   OSGi-base repository setup like Sling (Granite|CQ). Use a low-level  *   repository browser tool (or a test) to create ACEs making use of the custom  *   restrictions you decided to implement.  *  *</pre>  *  * @see<a href="http://jackrabbit.apache.org/oak/docs/security/accesscontrol/restriction.html">Restriction Management Documentation</a>  */
end_comment

begin_class
specifier|public
class|class
name|L7_RestrictionsTest
extends|extends
name|AbstractJCRTest
block|{
specifier|private
name|AccessControlManager
name|acMgr
decl_stmt|;
specifier|private
name|JackrabbitAccessControlList
name|acl
decl_stmt|;
specifier|private
name|Principal
name|testPrincipal
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|testPrivileges
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|acMgr
operator|=
name|superuser
operator|.
name|getAccessControlManager
argument_list|()
expr_stmt|;
name|testPrincipal
operator|=
name|ExerciseUtility
operator|.
name|createTestGroup
argument_list|(
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
argument_list|)
operator|.
name|getPrincipal
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|acl
operator|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|superuser
argument_list|,
name|testRoot
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|testPrivileges
operator|=
name|AccessControlUtils
operator|.
name|privilegesFromNames
argument_list|(
name|acMgr
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
name|Privilege
operator|.
name|JCR_WRITE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|Authorizable
name|testGroup
init|=
operator|(
operator|(
name|JackrabbitSession
operator|)
name|superuser
operator|)
operator|.
name|getUserManager
argument_list|()
operator|.
name|getAuthorizable
argument_list|(
name|testPrincipal
argument_list|)
decl_stmt|;
if|if
condition|(
name|testGroup
operator|!=
literal|null
condition|)
block|{
name|testGroup
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|tearDown
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testApplicableRestrictions
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
index|[]
name|restrictionNames
init|=
name|acl
operator|.
name|getRestrictionNames
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|restrictionNames
control|)
block|{
name|int
name|type
init|=
name|acl
operator|.
name|getRestrictionType
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|int
name|expectedType
init|=
name|PropertyType
operator|.
name|UNDEFINED
decl_stmt|;
if|if
condition|(
name|AccessControlConstants
operator|.
name|REP_GLOB
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|expectedType
operator|=
name|PropertyType
operator|.
name|UNDEFINED
expr_stmt|;
comment|// EXERCISE
block|}
elseif|else
if|if
condition|(
name|AccessControlConstants
operator|.
name|REP_NT_NAMES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|expectedType
operator|=
name|PropertyType
operator|.
name|UNDEFINED
expr_stmt|;
comment|// EXERCISE
block|}
elseif|else
if|if
condition|(
name|AccessControlConstants
operator|.
name|REP_PREFIXES
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|expectedType
operator|=
name|PropertyType
operator|.
name|UNDEFINED
expr_stmt|;
comment|// EXERCISE
block|}
name|assertEquals
argument_list|(
name|expectedType
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAddEntryWithRestrictions
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE : create the restriction map containing a globbing pattern.
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
literal|null
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testAddEntryWithMultiValuedRestriction
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// EXERCISE : create the restriction map containing a globbing pattern.
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
literal|null
decl_stmt|;
comment|// EXERCISE : create a map with the multi-valued restrictions as well.
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
init|=
literal|null
decl_stmt|;
name|assertTrue
argument_list|(
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRetrieveRestrictionsFromACE
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|ValueFactory
name|vf
init|=
name|superuser
operator|.
name|getValueFactory
argument_list|()
decl_stmt|;
name|acl
operator|.
name|addEntry
argument_list|(
name|testPrincipal
argument_list|,
name|testPrivileges
argument_list|,
literal|false
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessControlConstants
operator|.
name|REP_GLOB
argument_list|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"/*"
argument_list|)
argument_list|)
argument_list|,
name|ImmutableMap
operator|.
name|of
argument_list|(
name|AccessControlConstants
operator|.
name|REP_PREFIXES
argument_list|,
operator|new
name|Value
index|[]
block|{
name|vf
operator|.
name|createValue
argument_list|(
literal|"jcr"
argument_list|)
block|,
name|vf
operator|.
name|createValue
argument_list|(
literal|"rep"
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|ace
operator|instanceof
name|JackrabbitAccessControlEntry
condition|)
block|{
name|JackrabbitAccessControlEntry
name|jace
init|=
operator|(
name|JackrabbitAccessControlEntry
operator|)
name|ace
decl_stmt|;
comment|// EXERCISE retrieve the restriction names present on the ace and verify your expectations.
comment|// EXERCISE retrieve the restriction values for each restriction and verify your expectations.
block|}
block|}
block|}
block|}
end_class

end_unit

