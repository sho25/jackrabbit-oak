begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypePredicate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|ReadWriteVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
operator|.
name|of
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_BASEVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISCHECKEDOUT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PREDECESSORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONHISTORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MultiGenericPropertyState
operator|.
name|nameProperty
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|MIX_REP_VERSIONABLE_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionHistoryUtil
operator|.
name|getVersionHistoryNodeState
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|version
operator|.
name|VersionHistoryUtil
operator|.
name|getVersionStorage
import|;
end_import

begin_comment
comment|/**  * The VersionableEditor provides two possible ways to handle  * versionable nodes:  *<ul>  *<li>it can copy the version histories of versionable nodes, or</li>  *<li>  *         it can skip copying version histories and remove the  *         {@code mix:versionable} mixin together with any related  *         properties (see {@link #removeVersionProperties(NodeBuilder)}).  *</li>  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|VersionableEditor
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|VersionableEditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|SKIPPED_PATHS
init|=
name|of
argument_list|(
literal|"/oak:index"
argument_list|,
literal|"/jcr:system/jcr:versionStorage"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Provider
name|provider
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|rootBuilder
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|versionStorage
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isReferenceable
decl_stmt|;
specifier|private
specifier|final
name|TypePredicate
name|isVersionable
decl_stmt|;
specifier|private
specifier|final
name|VersionCopier
name|versionCopier
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteVersionManager
name|vMgr
decl_stmt|;
specifier|private
name|String
name|path
decl_stmt|;
specifier|private
name|VersionableEditor
parameter_list|(
name|Provider
name|provider
parameter_list|,
name|NodeBuilder
name|rootBuilder
parameter_list|)
block|{
name|this
operator|.
name|rootBuilder
operator|=
name|rootBuilder
expr_stmt|;
name|this
operator|.
name|versionStorage
operator|=
name|getVersionStorage
argument_list|(
name|rootBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|vMgr
operator|=
operator|new
name|ReadWriteVersionManager
argument_list|(
name|versionStorage
argument_list|,
name|rootBuilder
argument_list|)
expr_stmt|;
name|this
operator|.
name|provider
operator|=
name|provider
expr_stmt|;
name|this
operator|.
name|isVersionable
operator|=
operator|new
name|TypePredicate
argument_list|(
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|isReferenceable
operator|=
operator|new
name|TypePredicate
argument_list|(
name|rootBuilder
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
name|this
operator|.
name|versionCopier
operator|=
operator|new
name|VersionCopier
argument_list|(
name|rootBuilder
argument_list|,
name|getVersionStorage
argument_list|(
name|provider
operator|.
name|sourceRoot
argument_list|)
argument_list|,
name|versionStorage
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
literal|"/"
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|Provider
implements|implements
name|EditorProvider
block|{
specifier|private
specifier|final
name|NodeState
name|sourceRoot
decl_stmt|;
specifier|private
specifier|final
name|String
name|workspaceName
decl_stmt|;
specifier|private
specifier|final
name|VersionCopyConfiguration
name|config
decl_stmt|;
specifier|public
name|Provider
parameter_list|(
name|NodeState
name|sourceRoot
parameter_list|,
name|String
name|workspaceName
parameter_list|,
name|VersionCopyConfiguration
name|config
parameter_list|)
block|{
name|this
operator|.
name|sourceRoot
operator|=
name|sourceRoot
expr_stmt|;
name|this
operator|.
name|workspaceName
operator|=
name|workspaceName
expr_stmt|;
name|this
operator|.
name|config
operator|=
name|config
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|getRootEditor
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|NodeBuilder
name|rootBuilder
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
operator|new
name|VersionableEditor
argument_list|(
name|this
argument_list|,
name|rootBuilder
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
specifier|final
name|String
name|path
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|this
operator|.
name|path
argument_list|,
name|name
argument_list|)
decl_stmt|;
comment|// skip deleted nodes and well known paths that may not contain versionable nodes
if|if
condition|(
name|after
operator|==
literal|null
operator|||
name|SKIPPED_PATHS
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// assign path field only after checking that we don't skip this subtree
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
specifier|final
name|VersionCopyConfiguration
name|c
init|=
name|provider
operator|.
name|config
decl_stmt|;
if|if
condition|(
name|isVersionable
operator|.
name|apply
argument_list|(
name|after
argument_list|)
condition|)
block|{
specifier|final
name|String
name|versionableUuid
init|=
name|getProperty
argument_list|(
name|after
argument_list|,
name|JCR_UUID
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|.
name|isCopyVersions
argument_list|()
operator|&&
name|c
operator|.
name|skipOrphanedVersionsCopy
argument_list|()
condition|)
block|{
name|copyVersionHistory
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|c
operator|.
name|isCopyVersions
argument_list|()
operator|&&
operator|!
name|c
operator|.
name|skipOrphanedVersionsCopy
argument_list|()
condition|)
block|{
comment|// all version histories have been copied, but maybe the date
comment|// range for orphaned entries is narrower
if|if
condition|(
name|c
operator|.
name|getOrphanedMinDate
argument_list|()
operator|.
name|after
argument_list|(
name|c
operator|.
name|getVersionsMinDate
argument_list|()
argument_list|)
condition|)
block|{
name|copyVersionHistory
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isVersionHistoryExists
argument_list|(
name|versionableUuid
argument_list|)
condition|)
block|{
name|setVersionablePath
argument_list|(
name|versionableUuid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeBuilder
name|versionableBuilder
init|=
name|getNodeBuilder
argument_list|(
name|rootBuilder
argument_list|,
name|this
operator|.
name|path
argument_list|)
decl_stmt|;
name|removeVersionProperties
argument_list|(
name|versionableBuilder
argument_list|)
expr_stmt|;
if|if
condition|(
name|isVersionable
operator|.
name|apply
argument_list|(
name|versionableBuilder
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
name|logger
operator|.
name|warn
argument_list|(
literal|"Node {} is still versionable. Creating empty version history."
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|createEmptyHistory
argument_list|(
name|versionableBuilder
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|this
return|;
block|}
specifier|private
name|boolean
name|copyVersionHistory
parameter_list|(
name|NodeState
name|versionable
parameter_list|)
block|{
assert|assert
name|versionable
operator|.
name|exists
argument_list|()
assert|;
specifier|final
name|String
name|versionableUuid
init|=
name|versionable
operator|.
name|getProperty
argument_list|(
name|JCR_UUID
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
return|return
name|versionCopier
operator|.
name|copyVersionHistory
argument_list|(
name|versionableUuid
argument_list|,
name|provider
operator|.
name|config
operator|.
name|getVersionsMinDate
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|setVersionablePath
parameter_list|(
name|String
name|versionableUuid
parameter_list|)
block|{
specifier|final
name|NodeBuilder
name|versionHistory
init|=
name|VersionHistoryUtil
operator|.
name|getVersionHistoryBuilder
argument_list|(
name|versionStorage
argument_list|,
name|versionableUuid
argument_list|)
decl_stmt|;
name|versionHistory
operator|.
name|setProperty
argument_list|(
name|provider
operator|.
name|workspaceName
argument_list|,
name|path
argument_list|,
name|Type
operator|.
name|PATH
argument_list|)
expr_stmt|;
name|addMixin
argument_list|(
name|versionHistory
argument_list|,
name|MIX_REP_VERSIONABLE_PATHS
argument_list|)
expr_stmt|;
block|}
specifier|private
name|boolean
name|isVersionHistoryExists
parameter_list|(
name|String
name|versionableUuid
parameter_list|)
block|{
return|return
name|getVersionHistoryNodeState
argument_list|(
name|versionStorage
operator|.
name|getNodeState
argument_list|()
argument_list|,
name|versionableUuid
argument_list|)
operator|.
name|exists
argument_list|()
return|;
block|}
specifier|private
name|void
name|removeVersionProperties
parameter_list|(
specifier|final
name|NodeBuilder
name|versionableBuilder
parameter_list|)
block|{
assert|assert
name|versionableBuilder
operator|.
name|exists
argument_list|()
assert|;
name|removeMixin
argument_list|(
name|versionableBuilder
argument_list|,
name|MIX_VERSIONABLE
argument_list|)
expr_stmt|;
comment|// we don't know if the UUID is otherwise referenced,
comment|// so make sure the node remains referencable
if|if
condition|(
operator|!
name|isReferenceable
operator|.
name|apply
argument_list|(
name|versionableBuilder
operator|.
name|getNodeState
argument_list|()
argument_list|)
condition|)
block|{
name|addMixin
argument_list|(
name|versionableBuilder
argument_list|,
name|MIX_REFERENCEABLE
argument_list|)
expr_stmt|;
block|}
name|versionableBuilder
operator|.
name|removeProperty
argument_list|(
name|JCR_VERSIONHISTORY
argument_list|)
expr_stmt|;
name|versionableBuilder
operator|.
name|removeProperty
argument_list|(
name|JCR_PREDECESSORS
argument_list|)
expr_stmt|;
name|versionableBuilder
operator|.
name|removeProperty
argument_list|(
name|JCR_BASEVERSION
argument_list|)
expr_stmt|;
name|versionableBuilder
operator|.
name|removeProperty
argument_list|(
name|JCR_ISCHECKEDOUT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createEmptyHistory
parameter_list|(
name|NodeBuilder
name|versionable
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|vMgr
operator|.
name|getOrCreateVersionHistory
argument_list|(
name|versionable
argument_list|,
name|Collections
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|emptyMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|childNodeAdded
argument_list|(
name|name
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
return|return
name|childNodeAdded
argument_list|(
name|name
argument_list|,
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|this
operator|.
name|path
operator|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|this
operator|.
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|getProperty
parameter_list|(
name|NodeState
name|state
parameter_list|,
name|String
name|name
parameter_list|,
name|Type
argument_list|<
name|T
argument_list|>
name|type
parameter_list|)
block|{
if|if
condition|(
name|state
operator|.
name|hasProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|state
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
operator|.
name|getValue
argument_list|(
name|type
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|NodeBuilder
name|getNodeBuilder
parameter_list|(
name|NodeBuilder
name|root
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|NodeBuilder
name|builder
init|=
name|root
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|builder
operator|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
specifier|private
specifier|static
name|void
name|addMixin
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|.
name|hasProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mixins
init|=
name|newHashSet
argument_list|(
name|builder
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixins
operator|.
name|add
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|nameProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|mixins
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|nameProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|of
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|removeMixin
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|builder
operator|.
name|hasProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|mixins
init|=
name|newHashSet
argument_list|(
name|builder
operator|.
name|getProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|NAMES
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixins
operator|.
name|remove
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|mixins
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|.
name|removeProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|nameProperty
argument_list|(
name|JCR_MIXINTYPES
argument_list|,
name|mixins
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

