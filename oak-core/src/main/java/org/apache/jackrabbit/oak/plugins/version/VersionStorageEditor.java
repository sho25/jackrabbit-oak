begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SortedMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONLABELS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONSTORAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|REP_ADD_VERSION_LABELS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
operator|.
name|REP_REMOVE_VERSION_LABELS
import|;
end_import

begin_comment
comment|/**  * Implements an editor watching for well known properties on the  * /jcr:system/jcr:versionStorage node to trigger version operations (like  * adding/removing labels or removing versions) on the protected version storage  * tree.  *<p>  * This editor supports the following operations:  *<ul>  *<li>{@link VersionConstants#REP_ADD_VERSION_LABELS}: adds version labels to  * existing version histories. The property is multi-valued and each value is a  * PATH, which looks like this:  *<code>&lt;version-history-path>/jcr:versionLabels/&lt;version-label>/&lt;version-name></code>.  * The<code>version-history-path</code> is a relative path to the version  * history node starting at the /jcr:system/jcr:versionStorage node.  * An attempt to add a version label that already exists will result in a  * {@link CommitFailedException}.</li>  *<li>{@link VersionConstants#REP_REMOVE_VERSION_LABELS}: removes version labels from  * existing version histories. The property is multi-valued and each value is a  * PATH, which looks like this:  *<code>&lt;version-history-path>/jcr:versionLabels/&lt;version-label>/&lt;version-name></code>.  * The<code>version-history-path</code> is a relative path to the version  * history node starting at the /jcr:system/jcr:versionStorage node. The  *<code>&lt;version-name></code> part is ignored when labels are removed and  * can be anything, though it must be a valid JCR/Oak name.  * An attempt to remove a version label, which does not exist, will result in a  * {@link CommitFailedException}.</li>  *</ul>  */
end_comment

begin_class
class|class
name|VersionStorageEditor
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|final
name|NodeBuilder
name|versionStorageNode
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|workspaceRoot
decl_stmt|;
specifier|private
name|ReadWriteVersionManager
name|vMgr
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|pathRemainder
decl_stmt|;
specifier|private
specifier|final
name|SortedMap
argument_list|<
name|Integer
argument_list|,
name|Operation
argument_list|>
name|operations
init|=
name|Maps
operator|.
name|newTreeMap
argument_list|()
decl_stmt|;
name|VersionStorageEditor
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|versionStorageNode
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|workspaceRoot
parameter_list|)
block|{
name|this
argument_list|(
name|versionStorageNode
argument_list|,
name|workspaceRoot
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
name|JCR_SYSTEM
argument_list|,
name|JCR_VERSIONSTORAGE
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|VersionStorageEditor
parameter_list|(
annotation|@
name|Nonnull
name|NodeBuilder
name|versionStorageNode
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|workspaceRoot
parameter_list|,
annotation|@
name|Nonnull
name|List
argument_list|<
name|String
argument_list|>
name|pathRemainder
parameter_list|)
block|{
name|this
operator|.
name|versionStorageNode
operator|=
name|versionStorageNode
expr_stmt|;
name|this
operator|.
name|workspaceRoot
operator|=
name|workspaceRoot
expr_stmt|;
name|this
operator|.
name|pathRemainder
operator|=
name|checkNotNull
argument_list|(
name|pathRemainder
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|pathRemainder
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|pathRemainder
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
operator|new
name|VersionStorageEditor
argument_list|(
name|versionStorageNode
argument_list|,
name|workspaceRoot
argument_list|,
name|pathRemainder
operator|.
name|subList
argument_list|(
literal|1
argument_list|,
name|pathRemainder
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|after
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|REP_REMOVE_VERSION_LABELS
argument_list|)
condition|)
block|{
name|operations
operator|.
name|put
argument_list|(
literal|1
argument_list|,
operator|new
name|RemoveVersionLabels
argument_list|(
name|after
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|versionStorageNode
operator|.
name|removeProperty
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|after
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|REP_ADD_VERSION_LABELS
argument_list|)
condition|)
block|{
name|operations
operator|.
name|put
argument_list|(
literal|2
argument_list|,
operator|new
name|AddVersionLabels
argument_list|(
name|after
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|PATHS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|versionStorageNode
operator|.
name|removeProperty
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|leave
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|Operation
name|op
range|:
name|operations
operator|.
name|values
argument_list|()
control|)
block|{
name|op
operator|.
name|perform
argument_list|()
expr_stmt|;
block|}
block|}
comment|//-------------------------< internal>-------------------------------------
specifier|private
name|ReadWriteVersionManager
name|getVersionManager
parameter_list|()
block|{
if|if
condition|(
name|vMgr
operator|==
literal|null
condition|)
block|{
name|vMgr
operator|=
operator|new
name|ReadWriteVersionManager
argument_list|(
name|versionStorageNode
argument_list|,
name|workspaceRoot
argument_list|)
expr_stmt|;
block|}
return|return
name|vMgr
return|;
block|}
interface|interface
name|Operation
block|{
name|void
name|perform
parameter_list|()
throws|throws
name|CommitFailedException
function_decl|;
block|}
specifier|private
class|class
name|AddVersionLabels
implements|implements
name|Operation
block|{
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|labelPaths
decl_stmt|;
specifier|public
name|AddVersionLabels
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|labelPaths
parameter_list|)
block|{
name|this
operator|.
name|labelPaths
operator|=
name|labelPaths
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|()
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|String
name|s
range|:
name|labelPaths
control|)
block|{
name|VersionLabel
name|label
init|=
operator|new
name|VersionLabel
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|getVersionManager
argument_list|()
operator|.
name|addVersionLabel
argument_list|(
name|label
operator|.
name|versionHistoryPath
argument_list|,
name|label
operator|.
name|label
argument_list|,
name|label
operator|.
name|versionName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
class|class
name|RemoveVersionLabels
implements|implements
name|Operation
block|{
specifier|private
name|Iterable
argument_list|<
name|String
argument_list|>
name|labelPaths
decl_stmt|;
specifier|public
name|RemoveVersionLabels
parameter_list|(
name|Iterable
argument_list|<
name|String
argument_list|>
name|labelPaths
parameter_list|)
block|{
name|this
operator|.
name|labelPaths
operator|=
name|labelPaths
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|perform
parameter_list|()
throws|throws
name|CommitFailedException
block|{
for|for
control|(
name|String
name|s
range|:
name|labelPaths
control|)
block|{
name|VersionLabel
name|label
init|=
operator|new
name|VersionLabel
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|getVersionManager
argument_list|()
operator|.
name|removeVersionLabel
argument_list|(
name|label
operator|.
name|versionHistoryPath
argument_list|,
name|label
operator|.
name|label
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|VersionLabel
block|{
specifier|private
specifier|final
name|String
name|versionHistoryPath
decl_stmt|;
specifier|private
specifier|final
name|String
name|label
decl_stmt|;
specifier|private
specifier|final
name|String
name|versionName
decl_stmt|;
comment|/**          * @param path a label path as defined in the constructor of          * {@link VersionStorageEditor}.          * @throws IllegalArgumentException if the path is malformed          */
name|VersionLabel
parameter_list|(
annotation|@
name|Nonnull
name|String
name|path
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
name|checkArgument
argument_list|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|checkNotNull
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
literal|"Version label path must be relative"
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|elements
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
comment|// length of the path must be 7:
comment|// intermediate versionstorage nodes : 3
comment|// version history node : 1
comment|// jcr:versionLabels : 1
comment|// version label : 1
comment|// version name : 1
if|if
condition|(
name|elements
operator|.
name|size
argument_list|()
operator|!=
literal|7
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid version label path: "
operator|+
name|path
argument_list|)
throw|;
block|}
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|slash
init|=
literal|""
decl_stmt|;
for|for
control|(
name|String
name|element
range|:
name|elements
operator|.
name|subList
argument_list|(
literal|0
argument_list|,
literal|4
argument_list|)
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|slash
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|element
argument_list|)
expr_stmt|;
name|slash
operator|=
literal|"/"
expr_stmt|;
block|}
name|versionHistoryPath
operator|=
name|builder
operator|.
name|toString
argument_list|()
expr_stmt|;
name|checkArgument
argument_list|(
name|elements
operator|.
name|get
argument_list|(
literal|4
argument_list|)
operator|.
name|equals
argument_list|(
name|JCR_VERSIONLABELS
argument_list|)
argument_list|,
literal|"Invalid version label path: "
operator|+
name|path
argument_list|)
expr_stmt|;
name|label
operator|=
name|elements
operator|.
name|get
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|versionName
operator|=
name|elements
operator|.
name|get
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

