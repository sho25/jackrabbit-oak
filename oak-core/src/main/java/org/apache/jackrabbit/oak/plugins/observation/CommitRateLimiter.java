begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|OAK
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * This {@code CommitHook} can be used to block or delay commits for any length of time.  * As long as commits are blocked this hook throws a {@code CommitFailedException}.  */
end_comment

begin_class
specifier|public
class|class
name|CommitRateLimiter
implements|implements
name|CommitHook
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|CommitRateLimiter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|blockCommits
decl_stmt|;
specifier|private
specifier|volatile
name|long
name|delay
decl_stmt|;
comment|// the observation call depth of the current thread
comment|// (only updated by the current thread, so technically isn't necessary that
comment|// this is an AtomicInteger, but it's simpler to use it)
specifier|private
specifier|static
name|ThreadLocal
argument_list|<
name|AtomicInteger
argument_list|>
name|NON_BLOCKING_LEVEL
init|=
operator|new
name|ThreadLocal
argument_list|<
name|AtomicInteger
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|EXCEPTION_ON_BLOCK
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
literal|"oak.commitRateLimiter.exceptionOnBlock"
argument_list|)
decl_stmt|;
comment|/**      * Block any further commits until {@link #unblockCommits()} is called.      */
specifier|public
name|void
name|blockCommits
parameter_list|()
block|{
name|blockCommits
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Unblock blocked commits.      */
specifier|public
name|void
name|unblockCommits
parameter_list|()
block|{
name|blockCommits
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|boolean
name|getBlockCommits
parameter_list|()
block|{
return|return
name|blockCommits
return|;
block|}
comment|/**      * Number of milliseconds to delay commits going through this hook.      * If {@code 0}, any currently blocked commit will be unblocked.      * @param delay  milliseconds      */
specifier|public
name|void
name|setDelay
parameter_list|(
name|long
name|delay
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|delay
operator|!=
name|delay
condition|)
block|{
comment|// only log if the delay has changed
name|LOG
operator|.
name|trace
argument_list|(
literal|"setDelay: delay changed from "
operator|+
name|this
operator|.
name|delay
operator|+
literal|" to "
operator|+
name|delay
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
if|if
condition|(
name|delay
operator|==
literal|0
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
name|this
operator|.
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|NodeState
name|processCommit
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|blockCommits
operator|&&
name|isThreadBlocking
argument_list|()
condition|)
block|{
name|blockCommit
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|delay
argument_list|()
expr_stmt|;
block|}
return|return
name|after
return|;
block|}
specifier|public
name|void
name|blockCommit
parameter_list|()
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|EXCEPTION_ON_BLOCK
condition|)
block|{
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|OAK
argument_list|,
literal|1
argument_list|,
literal|"System busy. Try again later."
argument_list|)
throw|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
while|while
condition|(
name|getBlockCommits
argument_list|()
condition|)
block|{
name|wait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|OAK
argument_list|,
literal|2
argument_list|,
literal|"Interrupted while waiting to commit"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|protected
name|void
name|delay
parameter_list|()
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|delay
operator|>
literal|0
operator|&&
name|isThreadBlocking
argument_list|()
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
try|try
block|{
name|long
name|t0
init|=
name|Clock
operator|.
name|ACCURATE
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|dt
init|=
name|delay
decl_stmt|;
while|while
condition|(
name|delay
operator|>
literal|0
operator|&&
name|dt
operator|>
literal|0
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"delay: waiting {}ms (delay={}ms)"
argument_list|,
name|dt
argument_list|,
name|delay
argument_list|)
expr_stmt|;
name|wait
argument_list|(
name|dt
argument_list|)
expr_stmt|;
name|dt
operator|=
name|dt
operator|-
name|Clock
operator|.
name|ACCURATE
operator|.
name|getTime
argument_list|()
operator|+
name|t0
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|CommitFailedException
argument_list|(
name|OAK
argument_list|,
literal|2
argument_list|,
literal|"Interrupted while waiting to commit"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * The current thread will now run code that must not be throttled or      * blocked, such as processing events (EventListener.onEvent is going to be      * called).      */
specifier|public
name|void
name|beforeNonBlocking
parameter_list|()
block|{
name|AtomicInteger
name|value
init|=
name|NON_BLOCKING_LEVEL
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|value
operator|=
operator|new
name|AtomicInteger
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|NON_BLOCKING_LEVEL
operator|.
name|set
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * The current thread finished running code that must not be throttled or      * blocked.      */
specifier|public
name|void
name|afterNonBlocking
parameter_list|()
block|{
name|AtomicInteger
name|value
init|=
name|NON_BLOCKING_LEVEL
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
comment|// TODO should not happen (log an error?)
block|}
else|else
block|{
name|value
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Check whether the current thread is non-blocking.      *       * @return whether thread thread is non-blocking      */
specifier|public
name|boolean
name|isThreadBlocking
parameter_list|()
block|{
name|AtomicInteger
name|value
init|=
name|NON_BLOCKING_LEVEL
operator|.
name|get
argument_list|()
decl_stmt|;
comment|// no delay while processing events
return|return
name|value
operator|==
literal|null
operator|||
name|value
operator|.
name|get
argument_list|()
operator|==
literal|0
return|;
block|}
block|}
end_class

end_unit

