begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|MathContext
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|ConsolidatedCacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Tracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
operator|.
name|timeInWords
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_class
annotation|@
name|Component
specifier|public
class|class
name|ConsolidatedCacheStats
implements|implements
name|ConsolidatedCacheStatsMBean
block|{
specifier|private
name|Tracker
argument_list|<
name|CacheStatsMBean
argument_list|>
name|cacheStats
decl_stmt|;
specifier|private
name|Registration
name|mbeanReg
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TabularData
name|getCacheStats
parameter_list|()
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|CacheStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Consolidated Cache Stats"
argument_list|,
name|CacheStatsData
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"name"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
for|for
control|(
name|CacheStatsMBean
name|stats
range|:
name|cacheStats
operator|.
name|getServices
argument_list|()
control|)
block|{
name|tds
operator|.
name|put
argument_list|(
operator|new
name|CacheStatsData
argument_list|(
name|stats
argument_list|)
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|cacheStats
operator|=
name|wb
operator|.
name|track
argument_list|(
name|CacheStatsMBean
operator|.
name|class
argument_list|)
expr_stmt|;
name|mbeanReg
operator|=
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|ConsolidatedCacheStatsMBean
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|ConsolidatedCacheStatsMBean
operator|.
name|TYPE
argument_list|,
literal|"Consolidated Cache statistics"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|mbeanReg
operator|!=
literal|null
condition|)
block|{
name|mbeanReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cacheStats
operator|!=
literal|null
condition|)
block|{
name|cacheStats
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|CacheStatsData
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"name"
block|,
literal|"requestCount"
block|,
literal|"hitCount"
block|,
literal|"hitRate"
block|,
literal|"missCount"
block|,
literal|"missRate"
block|,
literal|"loadCount"
block|,
literal|"loadSuccessCount"
block|,
literal|"loadExceptionCount"
block|,
literal|"totalLoadTime"
block|,
literal|"averageLoadPenalty"
block|,
literal|"evictionCount"
block|,
literal|"elementCount"
block|,
literal|"totalWeight"
block|,
literal|"maxWeight"
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
name|FIELD_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|BIGDECIMAL
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|BIGDECIMAL
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|CacheStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Cache statistics"
argument_list|,
name|CacheStatsData
operator|.
name|FIELD_NAMES
argument_list|,
name|CacheStatsData
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|CacheStatsData
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|CacheStatsMBean
name|stats
decl_stmt|;
specifier|public
name|CacheStatsData
parameter_list|(
name|CacheStatsMBean
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|stats
operator|.
name|getName
argument_list|()
block|,
name|stats
operator|.
name|getRequestCount
argument_list|()
block|,
name|stats
operator|.
name|getHitCount
argument_list|()
block|,
operator|new
name|BigDecimal
argument_list|(
name|stats
operator|.
name|getHitRate
argument_list|()
argument_list|,
operator|new
name|MathContext
argument_list|(
literal|2
argument_list|)
argument_list|)
block|,
name|stats
operator|.
name|getMissCount
argument_list|()
block|,
operator|new
name|BigDecimal
argument_list|(
name|stats
operator|.
name|getMissRate
argument_list|()
argument_list|,
operator|new
name|MathContext
argument_list|(
literal|2
argument_list|)
argument_list|)
block|,
name|stats
operator|.
name|getLoadCount
argument_list|()
block|,
name|stats
operator|.
name|getLoadSuccessCount
argument_list|()
block|,
name|stats
operator|.
name|getLoadExceptionCount
argument_list|()
block|,
name|timeInWords
argument_list|(
name|stats
operator|.
name|getTotalLoadTime
argument_list|()
argument_list|)
block|,
name|TimeUnit
operator|.
name|NANOSECONDS
operator|.
name|toMillis
argument_list|(
operator|(
name|long
operator|)
name|stats
operator|.
name|getAverageLoadPenalty
argument_list|()
argument_list|)
operator|+
literal|"ms"
block|,
name|stats
operator|.
name|getEvictionCount
argument_list|()
block|,
name|stats
operator|.
name|getElementCount
argument_list|()
block|,
name|humanReadableByteCount
argument_list|(
name|stats
operator|.
name|estimateCurrentWeight
argument_list|()
argument_list|)
block|,
name|humanReadableByteCount
argument_list|(
name|stats
operator|.
name|getMaxTotalWeight
argument_list|()
argument_list|)
block|,             }
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

