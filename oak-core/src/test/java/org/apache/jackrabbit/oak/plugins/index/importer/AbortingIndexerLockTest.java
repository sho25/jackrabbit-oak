begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|IndexStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|AsyncIndexInfoService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|times
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|AbortingIndexerLockTest
block|{
specifier|private
name|AsyncIndexInfoService
name|infoService
decl_stmt|;
specifier|private
name|IndexStatsMBean
name|statsMBean
init|=
name|mock
argument_list|(
name|IndexStatsMBean
operator|.
name|class
argument_list|)
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
block|{
name|infoService
operator|=
name|mock
argument_list|(
name|AsyncIndexInfoService
operator|.
name|class
argument_list|)
expr_stmt|;
name|AsyncIndexInfo
name|info
init|=
operator|new
name|AsyncIndexInfo
argument_list|(
literal|"async"
argument_list|,
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|,
name|statsMBean
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|infoService
operator|.
name|getInfo
argument_list|(
literal|"async"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lockBasics
parameter_list|()
throws|throws
name|Exception
block|{
name|AbortingIndexerLock
name|lock
init|=
operator|new
name|AbortingIndexerLock
argument_list|(
name|infoService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|statsMBean
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_DONE
argument_list|)
expr_stmt|;
name|SimpleToken
name|lockToken
init|=
name|lock
operator|.
name|lock
argument_list|(
literal|"async"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lockToken
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|statsMBean
argument_list|)
operator|.
name|abortAndPause
argument_list|()
expr_stmt|;
name|lock
operator|.
name|unlock
argument_list|(
name|lockToken
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|statsMBean
argument_list|)
operator|.
name|resume
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lockWithRetry
parameter_list|()
throws|throws
name|Exception
block|{
name|AbortingIndexerLock
name|lock
init|=
operator|new
name|AbortingIndexerLock
argument_list|(
name|infoService
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|statsMBean
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_DONE
argument_list|)
expr_stmt|;
name|SimpleToken
name|lockToken
init|=
name|lock
operator|.
name|lock
argument_list|(
literal|"async"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|lockToken
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|statsMBean
argument_list|)
operator|.
name|abortAndPause
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|statsMBean
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|lockTimedout
parameter_list|()
throws|throws
name|Exception
block|{
name|Clock
operator|.
name|Virtual
name|clock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|AbortingIndexerLock
name|lock
init|=
operator|new
name|AbortingIndexerLock
argument_list|(
name|infoService
argument_list|,
name|clock
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|statsMBean
operator|.
name|getStatus
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
argument_list|)
operator|.
name|then
argument_list|(
name|invocation
lambda|->
block|{
name|clock
operator|.
name|waitUntil
argument_list|(
name|AbortingIndexerLock
operator|.
name|TIMEOUT_SECONDS
operator|*
literal|1000
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|IndexStatsMBean
operator|.
name|STATUS_RUNNING
return|;
block|}
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|.
name|lock
argument_list|(
literal|"async"
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|ignore
parameter_list|)
block|{          }
name|verify
argument_list|(
name|statsMBean
argument_list|)
operator|.
name|abortAndPause
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|statsMBean
argument_list|,
name|times
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|.
name|getStatus
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

