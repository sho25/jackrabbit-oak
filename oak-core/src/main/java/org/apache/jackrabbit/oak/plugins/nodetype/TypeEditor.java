begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_REQUIREDTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_UUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VALUECONSTRAINTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|MIX_REFERENCEABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
operator|.
name|CONSTRAINT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRING
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|UUIDUtils
operator|.
name|isValidUUID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|MISSING_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_ABSTRACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|constraint
operator|.
name|Constraints
operator|.
name|valueConstraint
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|jcr
operator|.
name|ValueFactoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|DefaultEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Editor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * Validator implementation that check JCR node type constraints.  *  * TODO: check protected properties and the structure they enforce. some of  *       those checks may have to go into separate validator classes. This class  *       should only perform checks based on node type information. E.g. it  *       cannot and should not check whether the value of the protected jcr:uuid  *       is unique.  */
end_comment

begin_class
class|class
name|TypeEditor
extends|extends
name|DefaultEditor
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TypeEditor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|strict
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|typesToCheck
decl_stmt|;
specifier|private
name|boolean
name|checkThisNode
decl_stmt|;
specifier|private
specifier|final
name|TypeEditor
name|parent
decl_stmt|;
specifier|private
specifier|final
name|String
name|nodeName
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|types
decl_stmt|;
specifier|private
specifier|final
name|EffectiveType
name|effective
decl_stmt|;
specifier|private
specifier|final
name|NodeBuilder
name|builder
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|validate
decl_stmt|;
name|TypeEditor
parameter_list|(
name|boolean
name|strict
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|typesToCheck
parameter_list|,
name|NodeState
name|types
parameter_list|,
name|String
name|primary
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|mixins
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|this
operator|.
name|strict
operator|=
name|strict
expr_stmt|;
name|this
operator|.
name|typesToCheck
operator|=
name|typesToCheck
expr_stmt|;
name|this
operator|.
name|checkThisNode
operator|=
name|typesToCheck
operator|==
literal|null
operator|||
name|typesToCheck
operator|.
name|contains
argument_list|(
name|primary
argument_list|)
operator|||
name|any
argument_list|(
name|mixins
argument_list|,
name|in
argument_list|(
name|typesToCheck
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|checkNotNull
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|this
operator|.
name|effective
operator|=
name|createEffectiveType
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|primary
argument_list|,
name|mixins
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|validate
operator|=
literal|false
expr_stmt|;
block|}
specifier|private
name|TypeEditor
parameter_list|(
annotation|@
name|Nonnull
name|TypeEditor
name|parent
parameter_list|,
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|primary
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|mixins
parameter_list|,
annotation|@
name|Nonnull
name|NodeBuilder
name|builder
parameter_list|,
name|boolean
name|validate
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|this
operator|.
name|strict
operator|=
name|parent
operator|.
name|strict
expr_stmt|;
name|this
operator|.
name|typesToCheck
operator|=
name|parent
operator|.
name|typesToCheck
expr_stmt|;
name|this
operator|.
name|checkThisNode
operator|=
name|typesToCheck
operator|==
literal|null
operator|||
name|typesToCheck
operator|.
name|contains
argument_list|(
name|primary
argument_list|)
operator|||
name|any
argument_list|(
name|mixins
argument_list|,
name|in
argument_list|(
name|typesToCheck
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|checkNotNull
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
name|checkNotNull
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|parent
operator|.
name|types
expr_stmt|;
name|this
operator|.
name|effective
operator|=
name|createEffectiveType
argument_list|(
name|parent
operator|.
name|effective
argument_list|,
name|name
argument_list|,
name|primary
argument_list|,
name|mixins
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|checkNotNull
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|this
operator|.
name|validate
operator|=
name|validate
expr_stmt|;
block|}
comment|/**      * Test constructor.      */
name|TypeEditor
parameter_list|(
name|EffectiveType
name|effective
parameter_list|)
block|{
name|this
operator|.
name|strict
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|typesToCheck
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|checkThisNode
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|parent
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|nodeName
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|types
operator|=
name|EMPTY_NODE
expr_stmt|;
name|this
operator|.
name|effective
operator|=
name|checkNotNull
argument_list|(
name|effective
argument_list|)
expr_stmt|;
name|this
operator|.
name|builder
operator|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
expr_stmt|;
name|this
operator|.
name|validate
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * Throws or logs the specified constraint violation.      *      * @param code code of this violation      * @param message description of the violation      * @throws CommitFailedException the constraint violation      */
specifier|private
name|void
name|constraintViolation
parameter_list|(
name|int
name|code
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|path
init|=
name|getPath
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|+
literal|'['
operator|+
name|effective
operator|+
literal|']'
expr_stmt|;
name|CommitFailedException
name|exception
init|=
operator|new
name|CommitFailedException
argument_list|(
name|CONSTRAINT
argument_list|,
name|code
argument_list|,
name|path
operator|+
literal|": "
operator|+
name|message
argument_list|)
decl_stmt|;
if|if
condition|(
name|strict
condition|)
block|{
throw|throw
name|exception
throw|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|"/"
return|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|.
name|parent
operator|==
literal|null
condition|)
block|{
return|return
literal|'/'
operator|+
name|nodeName
return|;
block|}
else|else
block|{
return|return
name|parent
operator|.
name|getPath
argument_list|()
operator|+
literal|'/'
operator|+
name|nodeName
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyAdded
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|propertyChanged
argument_list|(
literal|null
argument_list|,
name|after
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyChanged
parameter_list|(
name|PropertyState
name|before
parameter_list|,
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|checkThisNode
condition|)
block|{
name|checkPropertyTypeConstraints
argument_list|(
name|after
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|propertyDeleted
parameter_list|(
name|PropertyState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|name
init|=
name|before
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|checkThisNode
operator|&&
name|effective
operator|.
name|isMandatoryProperty
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|22
argument_list|,
literal|"Mandatory property "
operator|+
name|name
operator|+
literal|" can not be removed"
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|enter
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|checkThisNode
operator|&&
name|validate
condition|)
block|{
comment|// when adding a new node, or changing node type on an existing
comment|// node, we need to reverify type constraints
name|checkNodeTypeConstraints
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|checkThisNode
operator|=
literal|false
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeAdded
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
comment|// TODO: add any auto-created items that are still missing
return|return
name|childNodeChanged
argument_list|(
name|name
argument_list|,
name|MISSING_NODE
argument_list|,
name|after
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|TypeEditor
name|childNodeChanged
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|,
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|String
name|primary
init|=
name|after
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|mixins
init|=
name|after
operator|.
name|getNames
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
if|if
condition|(
name|primary
operator|==
literal|null
operator|&&
name|effective
operator|!=
literal|null
condition|)
block|{
comment|// no primary type defined, find and apply a default type
name|primary
operator|=
name|effective
operator|.
name|getDefaultType
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|primary
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|primary
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraintViolation
argument_list|(
literal|4
argument_list|,
literal|"No default primary type available "
operator|+
literal|" for child node "
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
block|}
comment|// if node type didn't change no need to validate child node
name|boolean
name|validate
init|=
name|primaryChanged
argument_list|(
name|before
argument_list|,
name|primary
argument_list|)
operator|||
name|mixinsChanged
argument_list|(
name|before
argument_list|,
name|mixins
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childBuilder
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|TypeEditor
name|editor
init|=
operator|new
name|TypeEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|primary
argument_list|,
name|mixins
argument_list|,
name|childBuilder
argument_list|,
name|validate
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkThisNode
operator|&&
name|validate
operator|&&
operator|!
name|effective
operator|.
name|isValidChildNode
argument_list|(
name|name
argument_list|,
name|editor
operator|.
name|getEffective
argument_list|()
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|1
argument_list|,
literal|"No matching definition found for child node "
operator|+
name|name
operator|+
literal|" with effective type "
operator|+
name|editor
operator|.
name|getEffective
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|editor
return|;
block|}
annotation|@
name|Override
specifier|public
name|Editor
name|childNodeDeleted
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|before
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|checkThisNode
operator|&&
name|effective
operator|.
name|isMandatoryChildNode
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|26
argument_list|,
literal|"Mandatory child node "
operator|+
name|name
operator|+
literal|" can not be removed"
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
comment|// no further checking needed for the removed subtree
block|}
comment|//-----------------------------------------------------------< private>--
annotation|@
name|Nonnull
specifier|private
name|EffectiveType
name|createEffectiveType
parameter_list|(
annotation|@
name|CheckForNull
name|EffectiveType
name|parent
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|name
parameter_list|,
annotation|@
name|CheckForNull
name|String
name|primary
parameter_list|,
annotation|@
name|Nonnull
name|Iterable
argument_list|<
name|String
argument_list|>
name|mixins
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|List
argument_list|<
name|NodeState
argument_list|>
name|list
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
name|NodeState
name|type
init|=
operator|(
name|primary
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|types
operator|.
name|getChildNode
argument_list|(
name|primary
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|!
name|type
operator|.
name|exists
argument_list|()
condition|)
block|{
name|constraintViolation
argument_list|(
literal|1
argument_list|,
literal|"The primary type "
operator|+
name|primary
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|2
argument_list|,
literal|"Mixin type "
operator|+
name|primary
operator|+
literal|" used as the primary type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_IS_ABSTRACT
argument_list|)
condition|)
block|{
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|name
operator|!=
literal|null
operator|&&
name|primary
operator|.
name|equals
argument_list|(
name|parent
operator|.
name|getDefaultType
argument_list|(
name|name
argument_list|)
argument_list|)
condition|)
block|{
comment|// OAK-1013: Allow (with a warning) an abstract primary
comment|// type if it's the default type implied by the parent node
name|log
operator|.
name|warn
argument_list|(
literal|"Abstract type "
operator|+
name|primary
operator|+
literal|" used as the default primary type of node "
operator|+
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|constraintViolation
argument_list|(
literal|2
argument_list|,
literal|"Abstract type "
operator|+
name|primary
operator|+
literal|" used as the primary type"
argument_list|)
expr_stmt|;
block|}
block|}
name|list
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
comment|// mixin types
for|for
control|(
name|String
name|mixin
range|:
name|mixins
control|)
block|{
name|type
operator|=
name|types
operator|.
name|getChildNode
argument_list|(
name|mixin
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|exists
argument_list|()
condition|)
block|{
name|constraintViolation
argument_list|(
literal|5
argument_list|,
literal|"The mixin type "
operator|+
name|mixin
operator|+
literal|" does not exist"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_ISMIXIN
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|6
argument_list|,
literal|"Primary type "
operator|+
name|mixin
operator|+
literal|" used as a mixin type"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|.
name|getBoolean
argument_list|(
name|JCR_IS_ABSTRACT
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|7
argument_list|,
literal|"Abstract type "
operator|+
name|mixin
operator|+
literal|" used as a mixin type"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|list
operator|.
name|add
argument_list|(
name|type
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|EffectiveType
argument_list|(
name|list
argument_list|)
return|;
block|}
annotation|@
name|Nonnull
specifier|private
name|EffectiveType
name|getEffective
parameter_list|()
block|{
return|return
name|effective
return|;
block|}
specifier|private
specifier|static
name|int
name|getRequiredType
parameter_list|(
name|NodeState
name|definition
parameter_list|)
block|{
name|int
name|type
init|=
name|PropertyType
operator|.
name|UNDEFINED
decl_stmt|;
name|PropertyState
name|required
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|JCR_REQUIREDTYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|required
operator|!=
literal|null
condition|)
block|{
name|String
name|value
init|=
name|required
operator|.
name|getValue
argument_list|(
name|STRING
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"BINARY"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|BINARY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"BOOLEAN"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|BOOLEAN
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"DATE"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|DATE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"DECIMAL"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|DECIMAL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"DOUBLE"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|DOUBLE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"LONG"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|LONG
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"NAME"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|NAME
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"PATH"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|PATH
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"REFERENCE"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|REFERENCE
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"STRING"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|STRING
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"URI"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|URI
expr_stmt|;
block|}
elseif|else
if|if
condition|(
literal|"WEAKREFERENCE"
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|type
operator|=
name|PropertyType
operator|.
name|WEAKREFERENCE
expr_stmt|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|private
name|void
name|checkRequiredType
parameter_list|(
name|PropertyState
name|property
parameter_list|,
name|int
name|requiredType
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|requiredType
operator|!=
name|property
operator|.
name|getType
argument_list|()
operator|.
name|tag
argument_list|()
condition|)
block|{
name|constraintViolation
argument_list|(
literal|55
argument_list|,
literal|"Required property type violation in "
operator|+
name|property
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkValueConstraints
parameter_list|(
name|NodeState
name|definition
parameter_list|,
name|PropertyState
name|property
parameter_list|,
name|int
name|requiredType
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|property
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
name|PropertyState
name|constraints
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|JCR_VALUECONSTRAINTS
argument_list|)
decl_stmt|;
if|if
condition|(
name|constraints
operator|==
literal|null
operator|||
name|constraints
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return;
block|}
for|for
control|(
name|String
name|constraint
range|:
name|constraints
operator|.
name|getValue
argument_list|(
name|STRINGS
argument_list|)
control|)
block|{
name|Predicate
argument_list|<
name|Value
argument_list|>
name|predicate
init|=
name|valueConstraint
argument_list|(
name|requiredType
argument_list|,
name|constraint
argument_list|)
decl_stmt|;
for|for
control|(
name|Value
name|v
range|:
name|ValueFactoryImpl
operator|.
name|createValues
argument_list|(
name|property
argument_list|,
name|NamePathMapper
operator|.
name|DEFAULT
argument_list|)
control|)
block|{
if|if
condition|(
name|predicate
operator|.
name|apply
argument_list|(
name|v
argument_list|)
condition|)
block|{
return|return;
block|}
block|}
block|}
name|constraintViolation
argument_list|(
literal|5
argument_list|,
literal|"Value constraint violation in "
operator|+
name|property
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|primaryChanged
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|String
name|after
parameter_list|)
block|{
name|String
name|pre
init|=
name|before
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
return|return
operator|!
name|Objects
operator|.
name|equal
argument_list|(
name|pre
argument_list|,
name|after
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|mixinsChanged
parameter_list|(
name|NodeState
name|before
parameter_list|,
name|Iterable
argument_list|<
name|String
argument_list|>
name|after
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|pre
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|before
operator|.
name|getNames
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|pre
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|post
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|after
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|post
argument_list|)
expr_stmt|;
if|if
condition|(
name|pre
operator|.
name|isEmpty
argument_list|()
operator|&&
name|post
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
elseif|else
if|if
condition|(
name|pre
operator|.
name|isEmpty
argument_list|()
operator|||
name|post
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
operator|!
name|Iterables
operator|.
name|elementsEqual
argument_list|(
name|pre
argument_list|,
name|post
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|checkNodeTypeConstraints
parameter_list|(
name|NodeState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|EffectiveType
name|effective
init|=
name|getEffective
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|properties
init|=
name|effective
operator|.
name|getMandatoryProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|PropertyState
name|ps
range|:
name|after
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|ps
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|checkPropertyTypeConstraints
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
comment|// verify the presence of all mandatory items
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|constraintViolation
argument_list|(
literal|21
argument_list|,
literal|"Mandatory property "
operator|+
name|properties
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
operator|+
literal|" not found in a new node"
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|after
operator|.
name|getChildNodeNames
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|child
range|:
name|effective
operator|.
name|getMandatoryChildNodes
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|names
operator|.
name|remove
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|25
argument_list|,
literal|"Mandatory child node "
operator|+
name|child
operator|+
literal|" not found in a new node"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|names
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|NodeState
name|child
init|=
name|after
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|primary
init|=
name|child
operator|.
name|getName
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|mixins
init|=
name|child
operator|.
name|getNames
argument_list|(
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
name|NodeBuilder
name|childBuilder
init|=
name|builder
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|TypeEditor
name|editor
init|=
operator|new
name|TypeEditor
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|primary
argument_list|,
name|mixins
argument_list|,
name|childBuilder
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|effective
operator|.
name|isValidChildNode
argument_list|(
name|name
argument_list|,
name|editor
operator|.
name|getEffective
argument_list|()
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|25
argument_list|,
literal|"Unexpected child node "
operator|+
name|names
operator|+
literal|" found in a new node"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|checkPropertyTypeConstraints
parameter_list|(
name|PropertyState
name|after
parameter_list|)
throws|throws
name|CommitFailedException
block|{
if|if
condition|(
name|NodeStateUtils
operator|.
name|isHidden
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|NodeState
name|definition
init|=
name|effective
operator|.
name|getDefinition
argument_list|(
name|after
argument_list|)
decl_stmt|;
if|if
condition|(
name|definition
operator|==
literal|null
condition|)
block|{
name|constraintViolation
argument_list|(
literal|4
argument_list|,
literal|"No matching property definition found for "
operator|+
name|after
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|JCR_UUID
operator|.
name|equals
argument_list|(
name|after
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|effective
operator|.
name|isNodeType
argument_list|(
name|MIX_REFERENCEABLE
argument_list|)
condition|)
block|{
comment|// special handling for the jcr:uuid property of mix:referenceable
comment|// TODO: this should be done in a pluggable extension
if|if
condition|(
operator|!
name|isValidUUID
argument_list|(
name|after
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
argument_list|)
condition|)
block|{
name|constraintViolation
argument_list|(
literal|12
argument_list|,
literal|"Invalid UUID value in the jcr:uuid property"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|requiredType
init|=
name|getRequiredType
argument_list|(
name|definition
argument_list|)
decl_stmt|;
if|if
condition|(
name|requiredType
operator|!=
name|PropertyType
operator|.
name|UNDEFINED
condition|)
block|{
name|checkRequiredType
argument_list|(
name|after
argument_list|,
name|requiredType
argument_list|)
expr_stmt|;
name|checkValueConstraints
argument_list|(
name|definition
argument_list|,
name|after
argument_list|,
name|requiredType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

