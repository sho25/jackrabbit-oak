begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|inventory
operator|.
name|Format
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
operator|.
name|IndexDefinitionUpdater
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|importer
operator|.
name|IndexerInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
operator|.
name|IndexDefinitionPrinter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|IndexerSupport
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|/**      * Directory name in output directory under which indexes are      * stored      */
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_INDEX_ROOT_DIR
init|=
literal|"indexes"
decl_stmt|;
comment|/**      * Checkpoint value which indicate that head state needs to be used      * This would be mostly used for testing purpose      */
specifier|private
specifier|static
specifier|final
name|String
name|HEAD_AS_CHECKPOINT
init|=
literal|"head"
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|checkpointInfo
init|=
name|Collections
operator|.
name|emptyMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|IndexHelper
name|indexHelper
decl_stmt|;
specifier|private
name|File
name|localIndexDir
decl_stmt|;
specifier|private
name|File
name|indexDefinitions
decl_stmt|;
specifier|private
name|String
name|checkpoint
decl_stmt|;
specifier|public
name|IndexerSupport
parameter_list|(
name|IndexHelper
name|indexHelper
parameter_list|,
name|String
name|checkpoint
parameter_list|)
block|{
name|this
operator|.
name|indexHelper
operator|=
name|indexHelper
expr_stmt|;
name|this
operator|.
name|checkpoint
operator|=
name|checkpoint
expr_stmt|;
block|}
specifier|public
name|File
name|getLocalIndexDir
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|localIndexDir
operator|==
literal|null
condition|)
block|{
name|localIndexDir
operator|=
operator|new
name|File
argument_list|(
name|indexHelper
operator|.
name|getWorkDir
argument_list|()
argument_list|,
name|LOCAL_INDEX_ROOT_DIR
argument_list|)
expr_stmt|;
name|FileUtils
operator|.
name|forceMkdir
argument_list|(
name|localIndexDir
argument_list|)
expr_stmt|;
block|}
return|return
name|localIndexDir
return|;
block|}
specifier|public
name|File
name|copyIndexFilesToOutput
parameter_list|()
throws|throws
name|IOException
block|{
name|File
name|destDir
init|=
operator|new
name|File
argument_list|(
name|indexHelper
operator|.
name|getOutputDir
argument_list|()
argument_list|,
name|getLocalIndexDir
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|FileUtils
operator|.
name|moveDirectoryToDirectory
argument_list|(
name|getLocalIndexDir
argument_list|()
argument_list|,
name|indexHelper
operator|.
name|getOutputDir
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|destDir
return|;
block|}
specifier|public
name|void
name|writeMetaInfo
parameter_list|(
name|String
name|checkpoint
parameter_list|)
throws|throws
name|IOException
block|{
operator|new
name|IndexerInfo
argument_list|(
name|getLocalIndexDir
argument_list|()
argument_list|,
name|checkpoint
argument_list|)
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
specifier|public
name|NodeState
name|retrieveNodeStateForCheckpoint
parameter_list|()
block|{
name|NodeState
name|checkpointedState
decl_stmt|;
if|if
condition|(
name|HEAD_AS_CHECKPOINT
operator|.
name|equals
argument_list|(
name|checkpoint
argument_list|)
condition|)
block|{
name|checkpointedState
operator|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|getRoot
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Using head state for indexing. Such an index cannot be imported back"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|checkpointedState
operator|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|retrieve
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
name|checkNotNull
argument_list|(
name|checkpointedState
argument_list|,
literal|"Not able to retrieve revision referred via checkpoint [%s]"
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|checkpointInfo
operator|=
name|indexHelper
operator|.
name|getNodeStore
argument_list|()
operator|.
name|checkpointInfo
argument_list|(
name|checkpoint
argument_list|)
expr_stmt|;
block|}
return|return
name|checkpointedState
return|;
block|}
specifier|public
name|void
name|updateIndexDefinitions
parameter_list|(
name|NodeBuilder
name|rootBuilder
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
if|if
condition|(
name|indexDefinitions
operator|!=
literal|null
condition|)
block|{
operator|new
name|IndexDefinitionUpdater
argument_list|(
name|indexDefinitions
argument_list|)
operator|.
name|apply
argument_list|(
name|rootBuilder
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|dumpIndexDefinitions
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
throws|throws
name|IOException
throws|,
name|CommitFailedException
block|{
name|IndexDefinitionPrinter
name|printer
init|=
operator|new
name|IndexDefinitionPrinter
argument_list|(
name|nodeStore
argument_list|,
name|indexHelper
operator|.
name|getIndexPathService
argument_list|()
argument_list|)
decl_stmt|;
name|printer
operator|.
name|setFilter
argument_list|(
literal|"{\"properties\":[\"*\", \"-:childOrder\"],\"nodes\":[\"*\", \"-:index-definition\"]}"
argument_list|)
expr_stmt|;
name|PrinterDumper
name|dumper
init|=
operator|new
name|PrinterDumper
argument_list|(
name|getLocalIndexDir
argument_list|()
argument_list|,
name|IndexDefinitionUpdater
operator|.
name|INDEX_DEFINITIONS_JSON
argument_list|,
literal|false
argument_list|,
name|Format
operator|.
name|JSON
argument_list|,
name|printer
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getCheckpointInfo
parameter_list|()
block|{
return|return
name|checkpointInfo
return|;
block|}
specifier|public
name|void
name|setIndexDefinitions
parameter_list|(
name|File
name|indexDefinitions
parameter_list|)
block|{
name|this
operator|.
name|indexDefinitions
operator|=
name|indexDefinitions
expr_stmt|;
block|}
block|}
end_class

end_unit

