begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyStates
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|factories
operator|.
name|TreeFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeLocation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mockito
operator|.
name|Mockito
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_class
specifier|public
class|class
name|PrivilegeContextTest
block|{
specifier|private
specifier|final
name|Context
name|ctx
init|=
name|PrivilegeContext
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Tree
name|mockTree
parameter_list|(
annotation|@
name|Nonnull
name|String
name|name
parameter_list|,
annotation|@
name|Nonnull
name|String
name|ntName
parameter_list|)
block|{
name|Tree
name|t
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|when
argument_list|(
name|t
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|ntName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|t
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefinesProperty
parameter_list|()
block|{
for|for
control|(
name|String
name|propName
range|:
name|PrivilegeConstants
operator|.
name|PRIVILEGE_PROPERTY_NAMES
control|)
block|{
name|PropertyState
name|property
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|propName
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|PrivilegeConstants
operator|.
name|PRIVILEGE_NODETYPE_NAMES
control|)
block|{
name|assertTrue
argument_list|(
name|ctx
operator|.
name|definesProperty
argument_list|(
name|mockTree
argument_list|(
literal|"anyName"
argument_list|,
name|ntName
argument_list|)
argument_list|,
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNameNotDefinesProperty
parameter_list|()
block|{
for|for
control|(
name|String
name|propName
range|:
operator|new
name|String
index|[]
block|{
literal|"anyName"
block|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
block|}
control|)
block|{
name|PropertyState
name|property
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|propName
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
name|PrivilegeConstants
operator|.
name|PRIVILEGE_NODETYPE_NAMES
control|)
block|{
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesProperty
argument_list|(
name|mockTree
argument_list|(
literal|"anyName"
argument_list|,
name|ntName
argument_list|)
argument_list|,
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testParentNotDefinesProperty
parameter_list|()
block|{
for|for
control|(
name|String
name|propName
range|:
name|PrivilegeConstants
operator|.
name|PRIVILEGE_PROPERTY_NAMES
control|)
block|{
name|PropertyState
name|property
init|=
name|PropertyStates
operator|.
name|createProperty
argument_list|(
name|propName
argument_list|,
literal|"value"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|ntName
range|:
operator|new
name|String
index|[]
block|{
name|JcrConstants
operator|.
name|NT_BASE
block|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
block|}
control|)
block|{
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesProperty
argument_list|(
name|mockTree
argument_list|(
literal|"anyName"
argument_list|,
name|ntName
argument_list|)
argument_list|,
name|property
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefinesContextRoot
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|ctx
operator|.
name|definesContextRoot
argument_list|(
name|mockTree
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|PrivilegeConstants
operator|.
name|NT_REP_PRIVILEGES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotDefinesContextRoot
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesContextRoot
argument_list|(
name|mockTree
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|PrivilegeConstants
operator|.
name|NT_REP_PRIVILEGE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesContextRoot
argument_list|(
name|mockTree
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesContextRoot
argument_list|(
name|mockTree
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|NodeTypeConstants
operator|.
name|NT_REP_NAMED_CHILD_NODE_DEFINITIONS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesContextRoot
argument_list|(
name|mockTree
argument_list|(
literal|"anyName"
argument_list|,
name|PrivilegeConstants
operator|.
name|NT_REP_PRIVILEGES
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefinesTree
parameter_list|()
block|{
for|for
control|(
name|String
name|ntName
range|:
name|PrivilegeConstants
operator|.
name|PRIVILEGE_NODETYPE_NAMES
control|)
block|{
name|assertTrue
argument_list|(
name|ctx
operator|.
name|definesTree
argument_list|(
name|mockTree
argument_list|(
literal|"anyName"
argument_list|,
name|ntName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEmptyNotDefinesTree
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesTree
argument_list|(
name|TreeFactory
operator|.
name|createReadOnlyTree
argument_list|(
name|EmptyNodeState
operator|.
name|EMPTY_NODE
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotDefinesTree
parameter_list|()
block|{
for|for
control|(
name|String
name|ntName
range|:
operator|new
name|String
index|[]
block|{
name|JcrConstants
operator|.
name|NT_UNSTRUCTURED
block|,
name|JcrConstants
operator|.
name|NT_BASE
block|,
name|NodeTypeConstants
operator|.
name|NT_REP_SYSTEM
block|,
name|NodeTypeConstants
operator|.
name|NT_REP_ROOT
block|}
control|)
block|{
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesTree
argument_list|(
name|mockTree
argument_list|(
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGES
argument_list|,
name|ntName
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefinesLocation
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|PrivilegeConstants
operator|.
name|PRIVILEGES_PATH
argument_list|,
name|PrivilegeConstants
operator|.
name|PRIVILEGES_PATH
operator|+
literal|"/child"
argument_list|,
name|PrivilegeConstants
operator|.
name|PRIVILEGES_PATH
operator|+
literal|"/another/child"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|TreeLocation
name|location
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TreeLocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|path
argument_list|,
name|ctx
operator|.
name|definesLocation
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNotDefinesLocation
parameter_list|()
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
name|PathUtils
operator|.
name|ROOT_PATH
argument_list|,
name|PrivilegeConstants
operator|.
name|PRIVILEGES_PATH
operator|+
literal|"sibling"
argument_list|,
literal|"/some/other/path"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|TreeLocation
name|location
init|=
name|Mockito
operator|.
name|mock
argument_list|(
name|TreeLocation
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|location
operator|.
name|getPath
argument_list|()
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|path
argument_list|,
name|ctx
operator|.
name|definesLocation
argument_list|(
name|location
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDefinesInternal
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|ctx
operator|.
name|definesInternal
argument_list|(
name|Mockito
operator|.
name|mock
argument_list|(
name|Tree
operator|.
name|class
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

