begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|NamePathTest
block|{
specifier|private
name|Session
name|session
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|=
operator|new
name|Jcr
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|createRepository
argument_list|()
operator|.
name|login
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|session
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSlashInPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"//jcr:content"
argument_list|,
literal|"//content"
argument_list|)
decl_stmt|;
name|testPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSlashInName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/jcr:content"
argument_list|,
literal|"/content"
argument_list|,
literal|"jcr:con/ent"
argument_list|,
literal|"jc/r:content"
argument_list|,
literal|"con/ent"
argument_list|)
decl_stmt|;
name|testNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColonInPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/jcr:con:ent"
argument_list|)
decl_stmt|;
name|testPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testColonInName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"jcr:con:ent"
argument_list|)
decl_stmt|;
name|testNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSquareBracketsInPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"//jcr:content"
argument_list|,
literal|"/jcr:con]ent"
argument_list|,
literal|"/con]ent"
argument_list|)
decl_stmt|;
name|testPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSquareBracketsInName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"jcr:content[1]"
argument_list|,
literal|"content[1]"
argument_list|,
literal|"jcr:conten[t]"
argument_list|,
literal|"conten[t]"
argument_list|,
literal|"jcr:con[]ent"
argument_list|,
literal|"jcr[]:content"
argument_list|,
literal|"con[]ent"
argument_list|,
literal|"jcr:con[t]ent"
argument_list|,
literal|"jc[t]r:content"
argument_list|,
literal|"con[t]ent"
argument_list|,
literal|"jcr:con]ent"
argument_list|,
literal|"jc]r:content"
argument_list|,
literal|"con]ent"
argument_list|,
literal|"jcr:con[ent"
argument_list|,
literal|"jc[r:content"
argument_list|,
literal|"con[ent"
argument_list|)
decl_stmt|;
name|testNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsteriskInPath
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/jcr:con*ent"
argument_list|,
literal|"/jcr:*ontent"
argument_list|,
literal|"/jcr:conten*"
argument_list|,
literal|"/con*ent"
argument_list|,
literal|"/*ontent"
argument_list|,
literal|"/conten*"
argument_list|)
decl_stmt|;
name|testPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAsteriskInName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"jcr:con*ent"
argument_list|,
literal|"jcr:*ontent"
argument_list|,
literal|"jcr:conten*"
argument_list|,
literal|"con*ent"
argument_list|,
literal|"*ontent"
argument_list|,
literal|"conten*"
argument_list|)
decl_stmt|;
name|testNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerticalLineInPath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/jcr:con|ent"
argument_list|,
literal|"/jcr:|ontent"
argument_list|,
literal|"/jcr:conten|"
argument_list|,
literal|"/|ontent"
argument_list|,
literal|"/conten|"
argument_list|,
literal|"/con|ent"
argument_list|)
decl_stmt|;
name|testPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testVerticalLineInName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"jcr:con|ent"
argument_list|,
literal|"jcr:|ontent"
argument_list|,
literal|"jcr:conten|"
argument_list|,
literal|"con|ent"
argument_list|,
literal|"|ontent"
argument_list|,
literal|"conten|"
argument_list|)
decl_stmt|;
name|testNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhitespaceInPath
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"/content "
argument_list|,
literal|"/ content"
argument_list|,
literal|"/content\t"
argument_list|,
literal|"/\tcontent"
argument_list|,
literal|"/jcr:con\tent"
argument_list|,
literal|"con\tent"
argument_list|)
decl_stmt|;
name|testPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testWhitespaceInName
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|ImmutableList
operator|.
name|of
argument_list|(
literal|"jcr:content "
argument_list|,
literal|"content "
argument_list|,
literal|" content"
argument_list|,
literal|"jcr:content\t"
argument_list|,
literal|"content\t"
argument_list|,
literal|"\tcontent"
argument_list|,
literal|"con\tent"
argument_list|)
decl_stmt|;
name|testNames
argument_list|(
name|names
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSpaceInNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
literal|"c o n t e n t"
argument_list|)
decl_stmt|;
name|session
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testPaths
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|paths
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|String
name|path
range|:
name|paths
control|)
block|{
name|testPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testPath
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryException
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|.
name|itemExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
name|session
operator|.
name|setNamespacePrefix
argument_list|(
literal|"foo"
argument_list|,
literal|"http://foo.bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|itemExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"path = "
operator|+
name|path
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"path = "
operator|+
name|path
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testNames
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|names
parameter_list|)
throws|throws
name|RepositoryException
block|{
for|for
control|(
name|String
name|name
range|:
name|names
control|)
block|{
name|testName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|testName
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Exception
name|exception
init|=
literal|null
decl_stmt|;
try|try
block|{
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|exception
operator|=
name|e
expr_stmt|;
block|}
finally|finally
block|{
name|session
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|session
operator|.
name|setNamespacePrefix
argument_list|(
literal|"foo"
argument_list|,
literal|"http://foo.bar"
argument_list|)
expr_stmt|;
try|try
block|{
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|"name = "
operator|+
name|name
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|assertNotNull
argument_list|(
literal|"name = "
operator|+
name|name
argument_list|,
name|exception
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

