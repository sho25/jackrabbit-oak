begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_comment
comment|/**  * Useful methods for building/committing nodes.  * @author rogoz  *  */
end_comment

begin_class
specifier|public
class|class
name|MKOperation
block|{
comment|/** 	 * Commit an empty node. 	 *  	 * @param mk 	 *            The microkernel that performs the operation. 	 * @param parentNode 	 *            The path where the commit will be performed. 	 * @param name 	 *            Name of the node. 	 * @return 	 */
specifier|private
specifier|static
name|String
name|commitEmptyNode
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|parentNode
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|mk
operator|.
name|commit
argument_list|(
name|parentNode
argument_list|,
literal|"+\""
operator|+
name|name
operator|+
literal|"\" : {} \n"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
return|;
block|}
comment|/** 	 * Recursively builds a pyramid tree structure.Each node is added in a 	 * separate commit. 	 *  	 * @param mk 	 *            Microkernel used for adding nodes. 	 * @param startingPoint 	 *            The path where the node will be added. 	 * @param index 	 * @param numberOfChildren 	 *            Number of children per level. 	 * @param nodesNumber 	 *            Total nodes number. 	 * @param nodePrefixName 	 *            The node's name prefix.The complete node name is 	 *            prefix+indexNumber. 	 **/
specifier|public
specifier|static
name|void
name|addPyramidStructure
parameter_list|(
name|MicroKernel
name|mk
parameter_list|,
name|String
name|startingPoint
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|numberOfChildren
parameter_list|,
name|long
name|nodesNumber
parameter_list|,
name|String
name|nodePrefixName
parameter_list|)
block|{
comment|// if all the nodes are on the same level
if|if
condition|(
name|numberOfChildren
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesNumber
condition|;
name|i
operator|++
control|)
block|{
name|commitEmptyNode
argument_list|(
name|mk
argument_list|,
name|startingPoint
argument_list|,
name|nodePrefixName
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// System.out.println("Created node " + i);
block|}
return|return;
block|}
if|if
condition|(
name|index
operator|>=
name|nodesNumber
condition|)
return|return;
name|commitEmptyNode
argument_list|(
name|mk
argument_list|,
name|startingPoint
argument_list|,
name|nodePrefixName
operator|+
name|index
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfChildren
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|startingPoint
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|startingPoint
operator|=
name|startingPoint
operator|+
literal|"/"
expr_stmt|;
name|addPyramidStructure
argument_list|(
name|mk
argument_list|,
name|startingPoint
operator|+
name|nodePrefixName
operator|+
name|index
argument_list|,
name|index
operator|*
name|numberOfChildren
operator|+
name|i
argument_list|,
name|numberOfChildren
argument_list|,
name|nodesNumber
argument_list|,
name|nodePrefixName
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Builds a diff representing a pyramid node structure. 	 *  	 * @param The 	 *            path where the first node will be added. 	 * @param index 	 * @param numberOfChildren 	 *            The number of children that each node must have. 	 * @param nodesNumber 	 *            Total number of nodes. 	 * @param nodePrefixName 	 *            The node name prefix. 	 * @param diff 	 *            The string where the diff is builded.Put an empty string for 	 *            creating a new structure. 	 * @return 	 */
specifier|public
specifier|static
name|StringBuilder
name|buildPyramidDiff
parameter_list|(
name|String
name|startingPoint
parameter_list|,
name|int
name|index
parameter_list|,
name|int
name|numberOfChildren
parameter_list|,
name|int
name|nodesNumber
parameter_list|,
name|String
name|nodePrefixName
parameter_list|,
name|StringBuilder
name|diff
parameter_list|)
block|{
if|if
condition|(
name|numberOfChildren
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodesNumber
condition|;
name|i
operator|++
control|)
name|diff
operator|.
name|append
argument_list|(
name|addNodeToDiff
argument_list|(
name|startingPoint
argument_list|,
name|nodePrefixName
operator|+
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|diff
return|;
block|}
if|if
condition|(
name|index
operator|>=
name|nodesNumber
condition|)
return|return
name|diff
return|;
name|diff
operator|.
name|append
argument_list|(
name|addNodeToDiff
argument_list|(
name|startingPoint
argument_list|,
name|nodePrefixName
operator|+
name|index
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|numberOfChildren
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|startingPoint
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|startingPoint
operator|=
name|startingPoint
operator|+
literal|"/"
expr_stmt|;
name|buildPyramidDiff
argument_list|(
name|startingPoint
operator|+
name|nodePrefixName
operator|+
name|index
argument_list|,
name|index
operator|*
name|numberOfChildren
operator|+
name|i
argument_list|,
name|numberOfChildren
argument_list|,
name|nodesNumber
argument_list|,
name|nodePrefixName
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
return|return
name|diff
return|;
block|}
specifier|private
specifier|static
name|String
name|addNodeToDiff
parameter_list|(
name|String
name|startingPoint
parameter_list|,
name|String
name|nodeName
parameter_list|)
block|{
if|if
condition|(
operator|!
name|startingPoint
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|startingPoint
operator|=
name|startingPoint
operator|+
literal|"/"
expr_stmt|;
return|return
operator|(
literal|"+\""
operator|+
name|startingPoint
operator|+
name|nodeName
operator|+
literal|"\" : {} \n"
operator|)
return|;
block|}
block|}
end_class

end_unit

