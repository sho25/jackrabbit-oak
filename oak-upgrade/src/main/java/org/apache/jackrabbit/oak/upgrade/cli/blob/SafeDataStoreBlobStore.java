begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|cli
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|data
operator|.
name|DataStoreException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|DataStoreBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|InMemoryDataRecord
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|stats
operator|.
name|StatsCollectingStreams
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * This implementation of the DataStoreBlobStore won't throw an exception if  * it can't find blob with given id. The WARN message will be emitted instead  * and the empty InputStream will be returned.  */
end_comment

begin_class
specifier|public
class|class
name|SafeDataStoreBlobStore
extends|extends
name|DataStoreBlobStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|SafeDataStoreBlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
name|SafeDataStoreBlobStore
parameter_list|(
name|DataStore
name|delegate
parameter_list|)
block|{
name|super
argument_list|(
name|delegate
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|(
annotation|@
name|Nonnull
name|String
name|encodedBlobId
parameter_list|)
block|{
name|checkNotNull
argument_list|(
name|encodedBlobId
argument_list|)
expr_stmt|;
name|String
name|blobId
init|=
name|extractBlobId
argument_list|(
name|encodedBlobId
argument_list|)
decl_stmt|;
comment|//Reference are not created for in memory record
if|if
condition|(
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DataRecord
name|record
decl_stmt|;
try|try
block|{
name|record
operator|=
name|delegate
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|record
operator|!=
literal|null
condition|)
block|{
return|return
name|record
operator|.
name|getReference
argument_list|()
return|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"No blob found for id [{}]"
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to access the blobId for  [{}]"
argument_list|,
name|blobId
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|protected
name|InputStream
name|getStream
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|DataRecord
name|record
init|=
name|getDataRecord
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"No blob found for id [{}]"
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
return|;
block|}
name|InputStream
name|in
init|=
name|getDataRecord
argument_list|(
name|blobId
argument_list|)
operator|.
name|getStream
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|in
operator|instanceof
name|BufferedInputStream
operator|)
condition|)
block|{
name|in
operator|=
operator|new
name|BufferedInputStream
argument_list|(
name|in
argument_list|)
expr_stmt|;
block|}
return|return
name|StatsCollectingStreams
operator|.
name|wrap
argument_list|(
name|stats
argument_list|,
name|blobId
argument_list|,
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|DataStoreException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|DataRecord
name|getDataRecord
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|DataStoreException
block|{
name|DataRecord
name|id
decl_stmt|;
if|if
condition|(
name|InMemoryDataRecord
operator|.
name|isInstance
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|id
operator|=
name|InMemoryDataRecord
operator|.
name|getInstance
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|delegate
operator|.
name|getRecordIfStored
argument_list|(
operator|new
name|DataIdentifier
argument_list|(
name|blobId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|id
return|;
block|}
block|}
end_class

end_unit

