begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NamespaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|OnParentVersionAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|RepositoryConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|config
operator|.
name|UserManagerConfig
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|fs
operator|.
name|FileSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|fs
operator|.
name|FileSystemException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|nodetype
operator|.
name|NodeTypeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|persistence
operator|.
name|PersistenceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeRegistry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|security
operator|.
name|user
operator|.
name|UserManagerImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|CompositeIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexUpdateProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|reference
operator|.
name|ReferenceEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|NamespaceConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|TypeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|AuthorizationConfigurationImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CompositeHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|EditorHook
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|upgrade
operator|.
name|security
operator|.
name|GroupEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|Name
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QItemDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QNodeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QNodeTypeDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QPropertyDefinition
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|QValueConstraint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkState
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newHashMap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Arrays
operator|.
name|asList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_AUTOCREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CHILDNODEDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_DEFAULTPRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_HASORDERABLECHILDNODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ISMIXIN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MANDATORY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_MULTIPLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_NODETYPENAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_ONPARENTVERSION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYITEMNAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PROPERTYDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_PROTECTED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_REQUIREDPRIMARYTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_REQUIREDTYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SAMENAMESIBLINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SUPERTYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_SYSTEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VALUECONSTRAINTS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_VERSIONSTORAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_CHILDNODEDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_NODETYPE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|NT_PROPERTYDEFINITION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|ACTIVITIES_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|ROOT_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|core
operator|.
name|RepositoryImpl
operator|.
name|VERSION_STORAGE_NODE_ID
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|STRINGS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|name
operator|.
name|Namespaces
operator|.
name|addCustomMapping
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_AVAILABLE_QUERY_OPERATORS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_ABSTRACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_FULLTEXT_SEARCHABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_QUERYABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_IS_QUERY_ORDERABLE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|JCR_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|NT_REP_PRIVILEGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|NT_REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_AGGREGATES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_BITS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_IS_ABSTRACT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_NEXT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
operator|.
name|REP_PRIVILEGES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|spi
operator|.
name|commons
operator|.
name|name
operator|.
name|NameConstants
operator|.
name|ANY_NAME
import|;
end_import

begin_class
specifier|public
class|class
name|RepositoryUpgrade
block|{
comment|/**      * Logger instance      */
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|RepositoryUpgrade
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Source repository context.      */
specifier|private
specifier|final
name|RepositoryContext
name|source
decl_stmt|;
comment|/**      * Target node store.      */
specifier|private
specifier|final
name|NodeStore
name|target
decl_stmt|;
specifier|private
name|boolean
name|copyBinariesByReference
init|=
literal|false
decl_stmt|;
comment|/**      * Copies the contents of the repository in the given source directory      * to the given target node store.      *      * @param source source repository directory      * @param target target node store      * @throws RepositoryException if the copy operation fails      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|File
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|copy
argument_list|(
name|RepositoryConfig
operator|.
name|create
argument_list|(
name|source
argument_list|)
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copies the contents of the repository with the given configuration      * to the given target node builder.      *      * @param source source repository configuration      * @param target target node store      * @throws RepositoryException if the copy operation fails      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
name|RepositoryConfig
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|RepositoryContext
name|context
init|=
name|RepositoryContext
operator|.
name|create
argument_list|(
name|source
argument_list|)
decl_stmt|;
try|try
block|{
operator|new
name|RepositoryUpgrade
argument_list|(
name|context
argument_list|,
name|target
argument_list|)
operator|.
name|copy
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getRepository
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Creates a tool for copying the full contents of the source repository      * to the given target repository. Any existing content in the target      * repository will be overwritten.      *      * @param source source repository context      * @param target target node store      */
specifier|public
name|RepositoryUpgrade
parameter_list|(
name|RepositoryContext
name|source
parameter_list|,
name|NodeStore
name|target
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
name|this
operator|.
name|target
operator|=
name|target
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCopyBinariesByReference
parameter_list|()
block|{
return|return
name|copyBinariesByReference
return|;
block|}
specifier|public
name|void
name|setCopyBinariesByReference
parameter_list|(
name|boolean
name|copyBinariesByReference
parameter_list|)
block|{
name|this
operator|.
name|copyBinariesByReference
operator|=
name|copyBinariesByReference
expr_stmt|;
block|}
comment|/**      * Copies the full content from the source to the target repository.      *<p>      * The source repository<strong>must not be modified</strong> while      * the copy operation is running to avoid an inconsistent copy.      *<p>      * This method leaves the search indexes of the target repository in      * an       * Note that both the source and the target repository must be closed      * during the copy operation as this method requires exclusive access      * to the repositories.      *      * @throws RepositoryException if the copy operation fails      */
specifier|public
name|void
name|copy
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|RepositoryConfig
name|config
init|=
name|source
operator|.
name|getRepositoryConfig
argument_list|()
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying repository content from {} to Oak"
argument_list|,
name|config
operator|.
name|getHomeDir
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|NodeBuilder
name|builder
init|=
name|target
operator|.
name|getRoot
argument_list|()
operator|.
name|builder
argument_list|()
decl_stmt|;
comment|// init target repository first
operator|new
name|InitialContent
argument_list|()
operator|.
name|initialize
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|idxToPrefix
init|=
name|newHashMap
argument_list|()
decl_stmt|;
name|copyNamespaces
argument_list|(
name|builder
argument_list|,
name|uriToPrefix
argument_list|,
name|idxToPrefix
argument_list|)
expr_stmt|;
name|copyNodeTypes
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|copyPrivileges
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|NodeState
name|root
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|copyVersionStore
argument_list|(
name|builder
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|idxToPrefix
argument_list|)
expr_stmt|;
name|String
name|workspaceName
init|=
name|copyWorkspaces
argument_list|(
name|builder
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|idxToPrefix
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Applying default commit hooks"
argument_list|)
expr_stmt|;
name|String
name|groupsPath
decl_stmt|;
name|UserManagerConfig
name|userConfig
init|=
name|config
operator|.
name|getSecurityConfig
argument_list|()
operator|.
name|getSecurityManagerConfig
argument_list|()
operator|.
name|getUserManagerConfig
argument_list|()
decl_stmt|;
if|if
condition|(
name|userConfig
operator|!=
literal|null
condition|)
block|{
name|groupsPath
operator|=
name|userConfig
operator|.
name|getParameters
argument_list|()
operator|.
name|getProperty
argument_list|(
name|UserManagerImpl
operator|.
name|PARAM_GROUPS_PATH
argument_list|,
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupsPath
operator|=
name|UserConstants
operator|.
name|DEFAULT_GROUP_PATH
expr_stmt|;
block|}
comment|// TODO: default hooks?
name|List
argument_list|<
name|CommitHook
argument_list|>
name|hooks
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|hooks
operator|.
name|add
argument_list|(
operator|new
name|EditorHook
argument_list|(
operator|new
name|CompositeEditorProvider
argument_list|(
operator|new
name|GroupEditorProvider
argument_list|(
name|groupsPath
argument_list|)
argument_list|,
operator|new
name|TypeEditorProvider
argument_list|(
literal|false
argument_list|)
argument_list|,
operator|new
name|IndexUpdateProvider
argument_list|(
operator|new
name|CompositeIndexEditorProvider
argument_list|(
operator|new
name|ReferenceEditorProvider
argument_list|()
argument_list|,
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hooks
operator|.
name|addAll
argument_list|(
operator|new
name|AuthorizationConfigurationImpl
argument_list|()
operator|.
name|getCommitHooks
argument_list|(
name|workspaceName
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|merge
argument_list|(
name|builder
argument_list|,
name|CompositeHook
operator|.
name|compose
argument_list|(
name|hooks
argument_list|)
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
literal|"Failed to copy content"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getOakName
parameter_list|(
name|Name
name|name
parameter_list|)
throws|throws
name|NamespaceException
block|{
name|String
name|uri
init|=
name|name
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|String
name|local
init|=
name|name
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
operator|||
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|local
return|;
block|}
else|else
block|{
return|return
name|source
operator|.
name|getNamespaceRegistry
argument_list|()
operator|.
name|getPrefix
argument_list|(
name|uri
argument_list|)
operator|+
literal|":"
operator|+
name|local
return|;
block|}
block|}
comment|/**      * Copies the registered namespaces to the target repository, and returns      * the internal namespace index mapping used in bundle serialization.      *      * @param root root builder      * @param uriToPrefix namespace URI to prefix mapping      * @param idxToPrefix index to prefix mapping      * @throws RepositoryException      */
specifier|private
name|void
name|copyNamespaces
parameter_list|(
name|NodeBuilder
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|idxToPrefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeBuilder
name|system
init|=
name|root
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeBuilder
name|namespaces
init|=
name|system
operator|.
name|child
argument_list|(
name|NamespaceConstants
operator|.
name|REP_NAMESPACES
argument_list|)
decl_stmt|;
name|Properties
name|registry
init|=
name|loadProperties
argument_list|(
literal|"/namespaces/ns_reg.properties"
argument_list|)
decl_stmt|;
name|Properties
name|indexes
init|=
name|loadProperties
argument_list|(
literal|"/namespaces/ns_idx.properties"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|prefixHint
range|:
name|registry
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
name|String
name|prefix
decl_stmt|;
name|String
name|uri
init|=
name|registry
operator|.
name|getProperty
argument_list|(
name|prefixHint
argument_list|)
decl_stmt|;
if|if
condition|(
literal|".empty.key"
operator|.
name|equals
argument_list|(
name|prefixHint
argument_list|)
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
comment|// the default empty mapping is not stored
block|}
else|else
block|{
name|prefix
operator|=
name|addCustomMapping
argument_list|(
name|namespaces
argument_list|,
name|uri
argument_list|,
name|prefixHint
argument_list|)
expr_stmt|;
block|}
name|String
name|index
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|index
operator|=
name|indexes
operator|.
name|getProperty
argument_list|(
literal|".empty.key"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|index
operator|=
name|indexes
operator|.
name|getProperty
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|Integer
name|idx
decl_stmt|;
if|if
condition|(
name|index
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|Integer
operator|.
name|decode
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
do|do
block|{
name|idx
operator|=
operator|(
name|uri
operator|.
name|hashCode
argument_list|()
operator|+
name|i
operator|++
operator|)
operator|&
literal|0x00ffffff
expr_stmt|;
block|}
do|while
condition|(
name|idxToPrefix
operator|.
name|containsKey
argument_list|(
name|idx
argument_list|)
condition|)
do|;
block|}
name|checkState
argument_list|(
name|uriToPrefix
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
name|checkState
argument_list|(
name|idxToPrefix
operator|.
name|put
argument_list|(
name|idx
argument_list|,
name|prefix
argument_list|)
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
name|Namespaces
operator|.
name|buildIndexNode
argument_list|(
name|namespaces
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|loadProperties
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|FileSystem
name|filesystem
init|=
name|source
operator|.
name|getFileSystem
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|filesystem
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|InputStream
name|stream
init|=
name|filesystem
operator|.
name|getInputStream
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|FileSystemException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|properties
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"deprecation"
argument_list|)
specifier|private
name|void
name|copyPrivileges
parameter_list|(
name|NodeBuilder
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|PrivilegeRegistry
name|registry
init|=
name|source
operator|.
name|getPrivilegeRegistry
argument_list|()
decl_stmt|;
name|NodeBuilder
name|privileges
init|=
name|root
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
operator|.
name|child
argument_list|(
name|REP_PRIVILEGES
argument_list|)
decl_stmt|;
name|privileges
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_PRIVILEGES
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|next
init|=
name|PrivilegeBits
operator|.
name|NEXT_AFTER_BUILT_INS
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying registered privileges"
argument_list|)
expr_stmt|;
for|for
control|(
name|Privilege
name|privilege
range|:
name|registry
operator|.
name|getRegisteredPrivileges
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|privilege
operator|.
name|getName
argument_list|()
decl_stmt|;
name|NodeBuilder
name|def
init|=
name|privileges
operator|.
name|child
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_REP_PRIVILEGE
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|privilege
operator|.
name|isAbstract
argument_list|()
condition|)
block|{
name|def
operator|.
name|setProperty
argument_list|(
name|REP_IS_ABSTRACT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|Privilege
index|[]
name|aggregate
init|=
name|privilege
operator|.
name|getDeclaredAggregatePrivileges
argument_list|()
decl_stmt|;
if|if
condition|(
name|aggregate
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayListWithCapacity
argument_list|(
name|aggregate
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Privilege
name|p
range|:
name|aggregate
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|def
operator|.
name|setProperty
argument_list|(
name|REP_AGGREGATES
argument_list|,
name|names
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
block|}
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|BUILT_IN
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|bits
operator|!=
literal|null
condition|)
block|{
name|def
operator|.
name|setProperty
argument_list|(
name|bits
operator|.
name|asPropertyState
argument_list|(
name|REP_BITS
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|aggregate
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|bits
operator|=
name|next
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|nextBits
argument_list|()
expr_stmt|;
name|def
operator|.
name|setProperty
argument_list|(
name|bits
operator|.
name|asPropertyState
argument_list|(
name|REP_BITS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|privileges
operator|.
name|setProperty
argument_list|(
name|next
operator|.
name|asPropertyState
argument_list|(
name|REP_NEXT
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolve privilege bits also for all aggregates
for|for
control|(
name|String
name|name
range|:
name|privileges
operator|.
name|getChildNodeNames
argument_list|()
control|)
block|{
name|resolvePrivilegeBits
argument_list|(
name|privileges
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|PrivilegeBits
name|resolvePrivilegeBits
parameter_list|(
name|NodeBuilder
name|privileges
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|NodeBuilder
name|def
init|=
name|privileges
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|PropertyState
name|b
init|=
name|def
operator|.
name|getProperty
argument_list|(
name|REP_BITS
argument_list|)
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
return|return
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|b
argument_list|)
return|;
block|}
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|n
range|:
name|def
operator|.
name|getNames
argument_list|(
name|REP_AGGREGATES
argument_list|)
control|)
block|{
name|bits
operator|.
name|add
argument_list|(
name|resolvePrivilegeBits
argument_list|(
name|privileges
argument_list|,
name|n
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|def
operator|.
name|setProperty
argument_list|(
name|bits
operator|.
name|asPropertyState
argument_list|(
name|REP_BITS
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|bits
return|;
block|}
specifier|private
name|void
name|copyNodeTypes
parameter_list|(
name|NodeBuilder
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|NodeTypeRegistry
name|sourceRegistry
init|=
name|source
operator|.
name|getNodeTypeRegistry
argument_list|()
decl_stmt|;
name|NodeBuilder
name|system
init|=
name|root
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|NodeBuilder
name|types
init|=
name|system
operator|.
name|child
argument_list|(
name|JCR_NODE_TYPES
argument_list|)
decl_stmt|;
name|logger
operator|.
name|info
argument_list|(
literal|"Copying registered node types"
argument_list|)
expr_stmt|;
for|for
control|(
name|Name
name|name
range|:
name|sourceRegistry
operator|.
name|getRegisteredNodeTypes
argument_list|()
control|)
block|{
name|String
name|oakName
init|=
name|getOakName
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// skip built-in nodetypes (OAK-1235)
if|if
condition|(
operator|!
name|types
operator|.
name|hasChildNode
argument_list|(
name|oakName
argument_list|)
condition|)
block|{
name|QNodeTypeDefinition
name|def
init|=
name|sourceRegistry
operator|.
name|getNodeTypeDef
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|NodeBuilder
name|type
init|=
name|types
operator|.
name|child
argument_list|(
name|oakName
argument_list|)
decl_stmt|;
name|copyNodeType
argument_list|(
name|def
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|copyNodeType
parameter_list|(
name|QNodeTypeDefinition
name|def
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|NamespaceException
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_NODETYPE
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
comment|// - jcr:nodeTypeName (NAME) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_NODETYPENAME
argument_list|,
name|getOakName
argument_list|(
name|def
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
comment|// - jcr:supertypes (NAME) protected multiple
name|Name
index|[]
name|supertypes
init|=
name|def
operator|.
name|getSupertypes
argument_list|()
decl_stmt|;
if|if
condition|(
name|supertypes
operator|!=
literal|null
operator|&&
name|supertypes
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayListWithCapacity
argument_list|(
name|supertypes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Name
name|supertype
range|:
name|supertypes
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|getOakName
argument_list|(
name|supertype
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_SUPERTYPES
argument_list|,
name|names
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
block|}
comment|// - jcr:isAbstract (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_IS_ABSTRACT
argument_list|,
name|def
operator|.
name|isAbstract
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:isQueryable (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_IS_QUERYABLE
argument_list|,
name|def
operator|.
name|isQueryable
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:isMixin (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_ISMIXIN
argument_list|,
name|def
operator|.
name|isMixin
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:hasOrderableChildNodes (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_HASORDERABLECHILDNODES
argument_list|,
name|def
operator|.
name|hasOrderableChildNodes
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:primaryItemName (NAME) protected
name|Name
name|primary
init|=
name|def
operator|.
name|getPrimaryItemName
argument_list|()
decl_stmt|;
if|if
condition|(
name|primary
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYITEMNAME
argument_list|,
name|getOakName
argument_list|(
name|primary
argument_list|)
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
comment|// + jcr:propertyDefinition (nt:propertyDefinition) = nt:propertyDefinition protected sns
name|QPropertyDefinition
index|[]
name|properties
init|=
name|def
operator|.
name|getPropertyDefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|properties
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|JCR_PROPERTYDEFINITION
operator|+
literal|'['
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|']'
decl_stmt|;
name|copyPropertyDefinition
argument_list|(
name|properties
index|[
name|i
index|]
argument_list|,
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// + jcr:childNodeDefinition (nt:childNodeDefinition) = nt:childNodeDefinition protected sns
name|QNodeDefinition
index|[]
name|childNodes
init|=
name|def
operator|.
name|getChildNodeDefs
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childNodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|name
init|=
name|JCR_CHILDNODEDEFINITION
operator|+
literal|'['
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|']'
decl_stmt|;
name|copyChildNodeDefinition
argument_list|(
name|childNodes
index|[
name|i
index|]
argument_list|,
name|builder
operator|.
name|child
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|copyPropertyDefinition
parameter_list|(
name|QPropertyDefinition
name|def
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|NamespaceException
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_PROPERTYDEFINITION
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|copyItemDefinition
argument_list|(
name|def
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// - jcr:requiredType (STRING) protected mandatory
comment|//< 'STRING', 'URI', 'BINARY', 'LONG', 'DOUBLE',
comment|//     'DECIMAL', 'BOOLEAN', 'DATE', 'NAME', 'PATH',
comment|//     'REFERENCE', 'WEAKREFERENCE', 'UNDEFINED'
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_REQUIREDTYPE
argument_list|,
name|Type
operator|.
name|fromTag
argument_list|(
name|def
operator|.
name|getRequiredType
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:valueConstraints (STRING) protected multiple
name|QValueConstraint
index|[]
name|constraints
init|=
name|def
operator|.
name|getValueConstraints
argument_list|()
decl_stmt|;
if|if
condition|(
name|constraints
operator|!=
literal|null
operator|&&
name|constraints
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
name|newArrayListWithCapacity
argument_list|(
name|constraints
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|QValueConstraint
name|constraint
range|:
name|constraints
control|)
block|{
name|strings
operator|.
name|add
argument_list|(
name|constraint
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_VALUECONSTRAINTS
argument_list|,
name|strings
argument_list|,
name|STRINGS
argument_list|)
expr_stmt|;
block|}
comment|// - jcr:defaultValues (UNDEFINED) protected multiple
name|QValue
index|[]
name|values
init|=
name|def
operator|.
name|getDefaultValues
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|!=
literal|null
condition|)
block|{
comment|// TODO
block|}
comment|// - jcr:multiple (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_MULTIPLE
argument_list|,
name|def
operator|.
name|isMultiple
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:availableQueryOperators (NAME) protected mandatory multiple
name|List
argument_list|<
name|String
argument_list|>
name|operators
init|=
name|asList
argument_list|(
name|def
operator|.
name|getAvailableQueryOperators
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_AVAILABLE_QUERY_OPERATORS
argument_list|,
name|operators
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
comment|// - jcr:isFullTextSearchable (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_IS_FULLTEXT_SEARCHABLE
argument_list|,
name|def
operator|.
name|isFullTextSearchable
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:isQueryOrderable (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_IS_QUERY_ORDERABLE
argument_list|,
name|def
operator|.
name|isQueryOrderable
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyChildNodeDefinition
parameter_list|(
name|QNodeDefinition
name|def
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|NamespaceException
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PRIMARYTYPE
argument_list|,
name|NT_CHILDNODEDEFINITION
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
name|copyItemDefinition
argument_list|(
name|def
argument_list|,
name|builder
argument_list|)
expr_stmt|;
comment|// - jcr:requiredPrimaryTypes (NAME) = 'nt:base' protected mandatory multiple
name|Name
index|[]
name|types
init|=
name|def
operator|.
name|getRequiredPrimaryTypes
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|names
init|=
name|newArrayListWithCapacity
argument_list|(
name|types
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|Name
name|type
range|:
name|types
control|)
block|{
name|names
operator|.
name|add
argument_list|(
name|getOakName
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_REQUIREDPRIMARYTYPES
argument_list|,
name|names
argument_list|,
name|NAMES
argument_list|)
expr_stmt|;
comment|// - jcr:defaultPrimaryType (NAME) protected
name|Name
name|type
init|=
name|def
operator|.
name|getDefaultPrimaryType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_DEFAULTPRIMARYTYPE
argument_list|,
name|getOakName
argument_list|(
name|type
argument_list|)
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
comment|// - jcr:sameNameSiblings (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_SAMENAMESIBLINGS
argument_list|,
name|def
operator|.
name|allowsSameNameSiblings
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyItemDefinition
parameter_list|(
name|QItemDefinition
name|def
parameter_list|,
name|NodeBuilder
name|builder
parameter_list|)
throws|throws
name|NamespaceException
block|{
comment|// - jcr:name (NAME) protected
name|Name
name|name
init|=
name|def
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|name
operator|.
name|equals
argument_list|(
name|ANY_NAME
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_NAME
argument_list|,
name|getOakName
argument_list|(
name|name
argument_list|)
argument_list|,
name|NAME
argument_list|)
expr_stmt|;
block|}
comment|// - jcr:autoCreated (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_AUTOCREATED
argument_list|,
name|def
operator|.
name|isAutoCreated
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:mandatory (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_MANDATORY
argument_list|,
name|def
operator|.
name|isMandatory
argument_list|()
argument_list|)
expr_stmt|;
comment|// - jcr:onParentVersion (STRING) protected mandatory
comment|//< 'COPY', 'VERSION', 'INITIALIZE', 'COMPUTE', 'IGNORE', 'ABORT'
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_ONPARENTVERSION
argument_list|,
name|OnParentVersionAction
operator|.
name|nameFromValue
argument_list|(
name|def
operator|.
name|getOnParentVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// - jcr:protected (BOOLEAN) protected mandatory
name|builder
operator|.
name|setProperty
argument_list|(
name|JCR_PROTECTED
argument_list|,
name|def
operator|.
name|isProtected
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyVersionStore
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|idxToPrefix
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Copying version histories"
argument_list|)
expr_stmt|;
name|PersistenceManager
name|pm
init|=
name|source
operator|.
name|getInternalVersionManager
argument_list|()
operator|.
name|getPersistenceManager
argument_list|()
decl_stmt|;
name|NodeBuilder
name|system
init|=
name|builder
operator|.
name|child
argument_list|(
name|JCR_SYSTEM
argument_list|)
decl_stmt|;
name|system
operator|.
name|setChildNode
argument_list|(
name|JCR_VERSIONSTORAGE
argument_list|,
operator|new
name|JackrabbitNodeState
argument_list|(
name|pm
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|VERSION_STORAGE_NODE_ID
argument_list|,
literal|"/jcr:system/jcr:versionStorage"
argument_list|,
name|copyBinariesByReference
argument_list|)
argument_list|)
expr_stmt|;
name|system
operator|.
name|setChildNode
argument_list|(
literal|"jcr:activities"
argument_list|,
operator|new
name|JackrabbitNodeState
argument_list|(
name|pm
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|ACTIVITIES_NODE_ID
argument_list|,
literal|"/jcr:system/jcr:activities"
argument_list|,
name|copyBinariesByReference
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|copyWorkspaces
parameter_list|(
name|NodeBuilder
name|builder
parameter_list|,
name|NodeState
name|root
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|uriToPrefix
parameter_list|,
name|Map
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|idxToPrefix
parameter_list|)
throws|throws
name|RepositoryException
throws|,
name|IOException
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Copying default workspace"
argument_list|)
expr_stmt|;
comment|// Copy all the default workspace content
name|RepositoryConfig
name|config
init|=
name|source
operator|.
name|getRepositoryConfig
argument_list|()
decl_stmt|;
name|String
name|name
init|=
name|config
operator|.
name|getDefaultWorkspaceName
argument_list|()
decl_stmt|;
name|PersistenceManager
name|pm
init|=
name|source
operator|.
name|getWorkspaceInfo
argument_list|(
name|name
argument_list|)
operator|.
name|getPersistenceManager
argument_list|()
decl_stmt|;
name|NodeState
name|state
init|=
operator|new
name|JackrabbitNodeState
argument_list|(
name|pm
argument_list|,
name|root
argument_list|,
name|uriToPrefix
argument_list|,
name|ROOT_NODE_ID
argument_list|,
literal|"/"
argument_list|,
name|copyBinariesByReference
argument_list|)
decl_stmt|;
for|for
control|(
name|PropertyState
name|property
range|:
name|state
operator|.
name|getProperties
argument_list|()
control|)
block|{
name|builder
operator|.
name|setProperty
argument_list|(
name|property
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ChildNodeEntry
name|child
range|:
name|state
operator|.
name|getChildNodeEntries
argument_list|()
control|)
block|{
name|String
name|childName
init|=
name|child
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|JCR_SYSTEM
operator|.
name|equals
argument_list|(
name|childName
argument_list|)
condition|)
block|{
name|builder
operator|.
name|setChildNode
argument_list|(
name|childName
argument_list|,
name|child
operator|.
name|getNodeState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
block|}
block|}
end_class

end_unit

