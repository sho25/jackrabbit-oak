begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Charsets
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|TikaHelperTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|(
operator|new
name|File
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|supportedTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|TikaHelper
name|tika
init|=
operator|new
name|TikaHelper
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|tika
operator|.
name|isSupportedMediaType
argument_list|(
literal|"text/plain"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|indexedTypes
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|config
init|=
name|temporaryFolder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|String
name|configText
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
literal|"<properties>\n"
operator|+
literal|"<detectors>\n"
operator|+
literal|"<detector class=\"org.apache.tika.detect.DefaultDetector\"/>\n"
operator|+
literal|"</detectors>\n"
operator|+
literal|"<parsers>\n"
operator|+
literal|"<parser class=\"org.apache.tika.parser.DefaultParser\"/>\n"
operator|+
literal|"<parser class=\"org.apache.tika.parser.EmptyParser\">\n"
operator|+
literal|"<mime>application/xml</mime>\n"
operator|+
literal|"</parser>\n"
operator|+
literal|"</parsers>\n"
operator|+
literal|"</properties>"
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|configText
argument_list|,
name|config
argument_list|,
name|Charsets
operator|.
name|UTF_8
argument_list|)
expr_stmt|;
name|TikaHelper
name|tika
init|=
operator|new
name|TikaHelper
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|tika
operator|.
name|isIndexed
argument_list|(
literal|"application/xml"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

