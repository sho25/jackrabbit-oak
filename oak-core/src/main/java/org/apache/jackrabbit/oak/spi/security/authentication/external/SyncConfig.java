begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*************************************************************************  *  * ADOBE CONFIDENTIAL  * ___________________  *  *  Copyright ${today.year} Adobe Systems Incorporated  *  All Rights Reserved.  *  * NOTICE:  All information contained herein is, and remains  * the property of Adobe Systems Incorporated and its suppliers,  * if any.  The intellectual and technical concepts contained  * herein are proprietary to Adobe Systems Incorporated and its  * suppliers and are protected by trade secret or copyright law.  * Dissemination of this information or reproduction of this material  * is strictly forbidden unless prior written permission is obtained  * from Adobe Systems Incorporated.  **************************************************************************/
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|external
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_comment
comment|/**  * {@code SyncConfig} defines how users and groups from an external source are synced into the repository.  */
end_comment

begin_class
specifier|public
class|class
name|SyncConfig
block|{
comment|/**      * Base config class for users and groups      */
specifier|public
specifier|abstract
specifier|static
class|class
name|Authorizable
block|{
specifier|private
name|long
name|expirationTime
decl_stmt|;
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|autoMembership
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertyMapping
decl_stmt|;
specifier|private
name|String
name|pathPrefix
decl_stmt|;
comment|/**          * Returns the duration in milliseconds until a synced authorizable gets expired. An expired authorizable will          * be re-synced.          * @return the expiration time in milliseconds.          */
specifier|public
name|long
name|getExpirationTime
parameter_list|()
block|{
return|return
name|expirationTime
return|;
block|}
specifier|public
name|void
name|setExpirationTime
parameter_list|(
name|long
name|expirationTime
parameter_list|)
block|{
name|this
operator|.
name|expirationTime
operator|=
name|expirationTime
expr_stmt|;
block|}
comment|/**          * Defines the set of group names that are automatically added to synced authorizable.          * @return set of group names.          */
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAutoMembership
parameter_list|()
block|{
return|return
name|autoMembership
return|;
block|}
specifier|public
name|void
name|setAutoMembership
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|autoMembership
parameter_list|)
block|{
name|this
operator|.
name|autoMembership
operator|=
name|autoMembership
expr_stmt|;
block|}
comment|/**          * Defines the mapping from external to internal property names. Only the external properties defined as keys of          * this map are synced with the mapped internal properties.          *          * Example:          *<xmp>          *     {          *         "cn": "givenName",          *         "c": "country"          *     }          *</xmp>          *          * The implicit properties like userid, groupname, password must not be mapped.          *          * @return the property mapping          */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getPropertyMapping
parameter_list|()
block|{
return|return
name|propertyMapping
return|;
block|}
specifier|public
name|void
name|setPropertyMapping
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|propertyMapping
parameter_list|)
block|{
name|this
operator|.
name|propertyMapping
operator|=
name|propertyMapping
expr_stmt|;
block|}
comment|/**          * Defines the authorizables intermediate path prefix that is used when creating new authorizables. This prefix          * is always prepended to the path provided by the {@link ExternalIdentity}.          * @return the intermediate path prefix.          */
specifier|public
name|String
name|getPathPrefix
parameter_list|()
block|{
return|return
name|pathPrefix
return|;
block|}
specifier|public
name|void
name|setPathPrefix
parameter_list|(
name|String
name|pathPrefix
parameter_list|)
block|{
name|this
operator|.
name|pathPrefix
operator|=
name|pathPrefix
expr_stmt|;
block|}
block|}
comment|/**      * User specific config.      */
specifier|public
specifier|static
class|class
name|User
extends|extends
name|Authorizable
block|{
specifier|private
name|long
name|membershipExpirationTime
decl_stmt|;
specifier|private
name|long
name|groupNestingDepth
decl_stmt|;
comment|/**          * Returns the duration in milliseconds until the group membership of a user is expired. If the          * membership information is expired it is re-synced according to the maximum nesting depth.          * Note that the membership is the groups an authorizable is member of, not the list of members of a group.          * Also note, that the group membership expiration time can be higher than the user expiration time itself and          * that value has no effect when syncing individual groups only when syncing a users membership ancestry.          *          * @return the expiration time in milliseconds.          */
specifier|public
name|long
name|getMembershipExpirationTime
parameter_list|()
block|{
return|return
name|membershipExpirationTime
return|;
block|}
specifier|public
name|void
name|setMembershipExpirationTime
parameter_list|(
name|long
name|membershipExpirationTime
parameter_list|)
block|{
name|this
operator|.
name|membershipExpirationTime
operator|=
name|membershipExpirationTime
expr_stmt|;
block|}
comment|/**          * Returns the maximum depth of group nesting when membership relations are synced. A value of 0 effectively          * disables group membership lookup. A value of 1 only adds the direct groups of a user. This value has no effect          * when syncing individual groups only when syncing a users membership ancestry.          * @return the group nesting depth          */
specifier|public
name|long
name|getGroupNestingDepth
parameter_list|()
block|{
return|return
name|groupNestingDepth
return|;
block|}
specifier|public
name|void
name|setGroupNestingDepth
parameter_list|(
name|long
name|groupNestingDepth
parameter_list|)
block|{
name|this
operator|.
name|groupNestingDepth
operator|=
name|groupNestingDepth
expr_stmt|;
block|}
block|}
comment|/**      * Group specific config      */
specifier|public
specifier|static
class|class
name|Group
extends|extends
name|Authorizable
block|{      }
specifier|private
specifier|final
name|User
name|user
init|=
operator|new
name|User
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Group
name|group
init|=
operator|new
name|Group
argument_list|()
decl_stmt|;
comment|/**      * Returns the sync configuration for users.      * @return the user sync configuration.      */
specifier|public
name|User
name|user
parameter_list|()
block|{
return|return
name|user
return|;
block|}
comment|/**      * Returns the sync configuration for groups.      * @return the group sync configuration.      */
specifier|public
name|Group
name|group
parameter_list|()
block|{
return|return
name|group
return|;
block|}
block|}
end_class

end_unit

