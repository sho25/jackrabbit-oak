begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|Authorizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|user
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test for the administrator user.  */
end_comment

begin_class
specifier|public
class|class
name|AdministratorTest
extends|extends
name|AbstractUserTest
block|{
specifier|private
name|User
name|admin
decl_stmt|;
annotation|@
name|Before
annotation|@
name|Override
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|Authorizable
name|a
init|=
name|userMgr
operator|.
name|getAuthorizable
argument_list|(
name|superuser
operator|.
name|getUserID
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|a
operator|==
literal|null
operator|||
name|a
operator|.
name|isGroup
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|(
literal|"Admin user does not exist"
argument_list|)
throw|;
block|}
name|admin
operator|=
operator|(
name|User
operator|)
name|a
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testIsAdmin
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
name|assertTrue
argument_list|(
name|admin
operator|.
name|isAdmin
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDisable
parameter_list|()
throws|throws
name|NotExecutableException
throws|,
name|RepositoryException
block|{
try|try
block|{
name|admin
operator|.
name|disable
argument_list|(
literal|"-> out"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"The admin cannot be disabled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAdmin
parameter_list|()
throws|throws
name|NotExecutableException
block|{
try|try
block|{
name|admin
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"The admin user cannot be removed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
comment|// OK superuser cannot be removed. not even by the superuser itself.
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveAdminNode
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|NotExecutableException
block|{
name|String
name|adminId
init|=
name|admin
operator|.
name|getID
argument_list|()
decl_stmt|;
comment|// access the node corresponding to the admin user and remove it
name|Node
name|adminNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|admin
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|adminNode
operator|.
name|remove
argument_list|()
expr_stmt|;
comment|// use session obtained from the node as usermgr may point to a dedicated
comment|// system workspace different from the superusers workspace.
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Admin user node cannot be removed."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// success -> get rid of possibly pending transient modifications
name|superuser
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

