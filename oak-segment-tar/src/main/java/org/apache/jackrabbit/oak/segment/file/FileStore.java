begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayListWithCapacity
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newLinkedList
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
operator|.
name|newLinkedHashMap
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|format
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|System
operator|.
name|currentTimeMillis
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Thread
operator|.
name|currentThread
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
operator|.
name|wrap
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MILLISECONDS
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|MINUTES
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
operator|.
name|SECONDS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
operator|.
name|humanReadableByteCount
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
operator|.
name|isDataSegmentId
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriterBuilder
operator|.
name|segmentWriterBuilder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|EXPEDITE_OPTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
operator|.
name|TarRevisions
operator|.
name|timeout
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|FileLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|OverlappingFileLockException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormatSymbols
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicBoolean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|CheckForNull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Stopwatch
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Supplier
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Suppliers
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|math3
operator|.
name|stat
operator|.
name|descriptive
operator|.
name|DescriptiveStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|ReferenceCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Compactor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentIdTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentNotFoundExceptionListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|SegmentWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|WriterCacheManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|compaction
operator|.
name|SegmentGCOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The storage implementation for tar files.  */
end_comment

begin_class
specifier|public
class|class
name|FileStore
extends|extends
name|AbstractFileStore
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|FileStore
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|static
specifier|final
name|String
name|LOCK_FILE_NAME
init|=
literal|"repo.lock"
decl_stmt|;
comment|/**      * GC counter for logging purposes      */
specifier|private
specifier|static
specifier|final
name|AtomicLong
name|GC_COUNT
init|=
operator|new
name|AtomicLong
argument_list|(
literal|0
argument_list|)
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentWriter
name|segmentWriter
decl_stmt|;
specifier|private
specifier|final
name|int
name|maxFileSize
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GarbageCollector
name|garbageCollector
decl_stmt|;
specifier|private
specifier|volatile
name|List
argument_list|<
name|TarReader
argument_list|>
name|readers
decl_stmt|;
specifier|private
specifier|volatile
name|TarWriter
name|tarWriter
decl_stmt|;
specifier|private
specifier|final
name|RandomAccessFile
name|lockFile
decl_stmt|;
specifier|private
specifier|final
name|FileLock
name|lock
decl_stmt|;
specifier|private
name|TarRevisions
name|revisions
decl_stmt|;
comment|/**      * Scheduler for running<em>short</em> background operations      */
specifier|private
specifier|final
name|Scheduler
name|fileStoreScheduler
init|=
operator|new
name|Scheduler
argument_list|(
literal|"FileStore background tasks"
argument_list|)
decl_stmt|;
comment|/**      * List of old tar file generations that are waiting to be removed. They can      * not be removed immediately, because they first need to be closed, and the      * JVM needs to release the memory mapped file references.      */
specifier|private
specifier|final
name|FileReaper
name|fileReaper
init|=
operator|new
name|FileReaper
argument_list|()
decl_stmt|;
comment|/**      * This flag is periodically updated by calling the {@code SegmentGCOptions}      * at regular intervals.      */
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientDiskSpace
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/**      * This flag is raised whenever the available memory falls under a specified      * threshold. See {@link GCMemoryBarrier}      */
specifier|private
specifier|final
name|AtomicBoolean
name|sufficientMemory
init|=
operator|new
name|AtomicBoolean
argument_list|(
literal|true
argument_list|)
decl_stmt|;
comment|/**      * Flag signalling shutdown of the file store      */
specifier|private
specifier|volatile
name|boolean
name|shutdown
decl_stmt|;
specifier|private
specifier|final
name|ReadWriteLock
name|fileStoreLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FileStoreStats
name|stats
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentNotFoundExceptionListener
name|snfeListener
decl_stmt|;
name|FileStore
parameter_list|(
specifier|final
name|FileStoreBuilder
name|builder
parameter_list|)
throws|throws
name|InvalidFileStoreVersionException
throws|,
name|IOException
block|{
name|super
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|lockFile
operator|=
operator|new
name|RandomAccessFile
argument_list|(
operator|new
name|File
argument_list|(
name|directory
argument_list|,
name|LOCK_FILE_NAME
argument_list|)
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
try|try
block|{
name|lock
operator|=
name|lockFile
operator|.
name|getChannel
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OverlappingFileLockException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|directory
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" is in use by another store."
argument_list|,
name|ex
argument_list|)
throw|;
block|}
name|this
operator|.
name|segmentWriter
operator|=
name|segmentWriterBuilder
argument_list|(
literal|"sys"
argument_list|)
operator|.
name|withGeneration
argument_list|(
operator|new
name|Supplier
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Integer
name|get
parameter_list|()
block|{
return|return
name|getGcGeneration
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|withWriterPool
argument_list|()
operator|.
name|with
argument_list|(
name|builder
operator|.
name|getCacheManager
argument_list|()
argument_list|)
operator|.
name|build
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|maxFileSize
operator|=
name|builder
operator|.
name|getMaxFileSize
argument_list|()
operator|*
name|MB
expr_stmt|;
name|this
operator|.
name|garbageCollector
operator|=
operator|new
name|GarbageCollector
argument_list|(
name|builder
operator|.
name|getGcOptions
argument_list|()
argument_list|,
name|builder
operator|.
name|getGcListener
argument_list|()
argument_list|,
operator|new
name|GCJournal
argument_list|(
name|directory
argument_list|)
argument_list|,
name|builder
operator|.
name|getCacheManager
argument_list|()
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|Integer
argument_list|,
name|Map
argument_list|<
name|Character
argument_list|,
name|File
argument_list|>
argument_list|>
name|map
init|=
name|collectFiles
argument_list|(
name|directory
argument_list|)
decl_stmt|;
name|Manifest
name|manifest
init|=
name|Manifest
operator|.
name|empty
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|manifest
operator|=
name|checkManifest
argument_list|(
name|openManifest
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|saveManifest
argument_list|(
name|manifest
argument_list|)
expr_stmt|;
name|this
operator|.
name|readers
operator|=
name|newArrayListWithCapacity
argument_list|(
name|map
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|Integer
index|[]
name|indices
init|=
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|map
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|indices
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|indices
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|readers
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|map
operator|.
name|get
argument_list|(
name|indices
index|[
name|i
index|]
argument_list|)
argument_list|,
name|memoryMapping
argument_list|,
name|recovery
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|stats
operator|=
operator|new
name|FileStoreStats
argument_list|(
name|builder
operator|.
name|getStatsProvider
argument_list|()
argument_list|,
name|this
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|writeNumber
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|indices
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|writeNumber
operator|=
name|indices
index|[
name|indices
operator|.
name|length
operator|-
literal|1
index|]
operator|+
literal|1
expr_stmt|;
block|}
name|this
operator|.
name|tarWriter
operator|=
operator|new
name|TarWriter
argument_list|(
name|directory
argument_list|,
name|stats
argument_list|,
name|writeNumber
argument_list|)
expr_stmt|;
name|this
operator|.
name|snfeListener
operator|=
name|builder
operator|.
name|getSnfeListener
argument_list|()
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|format
argument_list|(
literal|"TarMK flush [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|5
argument_list|,
name|SECONDS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|shutdown
condition|)
block|{
return|return;
block|}
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to flush the TarMK at {}"
argument_list|,
name|directory
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|format
argument_list|(
literal|"TarMK filer reaper [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|5
argument_list|,
name|SECONDS
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|fileReaper
operator|.
name|reap
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|fileStoreScheduler
operator|.
name|scheduleAtFixedRate
argument_list|(
name|format
argument_list|(
literal|"TarMK disk space check [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
literal|1
argument_list|,
name|MINUTES
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
name|SegmentGCOptions
name|gcOptions
init|=
name|builder
operator|.
name|getGcOptions
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|checkDiskSpace
argument_list|(
name|gcOptions
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"TarMK opened: {} (mmap={})"
argument_list|,
name|directory
argument_list|,
name|memoryMapping
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
literal|"TarMK readers {}"
argument_list|,
name|this
operator|.
name|readers
argument_list|)
expr_stmt|;
block|}
name|FileStore
name|bind
parameter_list|(
name|TarRevisions
name|revisions
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|revisions
operator|=
name|revisions
expr_stmt|;
name|this
operator|.
name|revisions
operator|.
name|bind
argument_list|(
name|this
argument_list|,
name|initialNode
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|saveManifest
parameter_list|(
name|Manifest
name|manifest
parameter_list|)
throws|throws
name|IOException
block|{
name|manifest
operator|.
name|setStoreVersion
argument_list|(
name|CURRENT_STORE_VERSION
argument_list|)
expr_stmt|;
name|manifest
operator|.
name|save
argument_list|(
name|getManifestFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Nonnull
specifier|private
name|Supplier
argument_list|<
name|RecordId
argument_list|>
name|initialNode
parameter_list|()
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|RecordId
name|get
parameter_list|()
block|{
try|try
block|{
name|SegmentWriter
name|writer
init|=
name|segmentWriterBuilder
argument_list|(
literal|"init"
argument_list|)
operator|.
name|build
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"root"
argument_list|,
name|EMPTY_NODE
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|node
init|=
name|writer
operator|.
name|writeNode
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|node
operator|.
name|getRecordId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Failed to write initial node"
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|;
block|}
specifier|private
name|int
name|getGcGeneration
parameter_list|()
block|{
return|return
name|revisions
operator|.
name|getHead
argument_list|()
operator|.
name|getSegmentId
argument_list|()
operator|.
name|getGcGeneration
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|CacheStatsMBean
name|getStringDeduplicationCacheStats
parameter_list|()
block|{
return|return
name|segmentWriter
operator|.
name|getStringCacheStats
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|CacheStatsMBean
name|getTemplateDeduplicationCacheStats
parameter_list|()
block|{
return|return
name|segmentWriter
operator|.
name|getTemplateCacheStats
argument_list|()
return|;
block|}
annotation|@
name|CheckForNull
specifier|public
name|CacheStatsMBean
name|getNodeDeduplicationCacheStats
parameter_list|()
block|{
return|return
name|segmentWriter
operator|.
name|getNodeCacheStats
argument_list|()
return|;
block|}
comment|/**      * @return  a runnable for running garbage collection      */
specifier|public
name|Runnable
name|getGCRunner
parameter_list|()
block|{
return|return
operator|new
name|SafeRunnable
argument_list|(
name|format
argument_list|(
literal|"TarMK revision gc [%s]"
argument_list|,
name|directory
argument_list|)
argument_list|,
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|gc
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|error
argument_list|(
literal|"Error running revision garbage collection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * @return the size of this store. This method shouldn't be called from      * a very tight loop as it contents with the {@link #fileStoreLock}.      */
specifier|private
name|long
name|size
parameter_list|()
block|{
name|List
argument_list|<
name|TarReader
argument_list|>
name|readersSnapshot
init|=
literal|null
decl_stmt|;
name|long
name|writeFileSnapshotSize
init|=
literal|0
decl_stmt|;
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|readersSnapshot
operator|=
name|ImmutableList
operator|.
name|copyOf
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|writeFileSnapshotSize
operator|=
name|tarWriter
operator|!=
literal|null
condition|?
name|tarWriter
operator|.
name|fileLength
argument_list|()
else|:
literal|0
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|long
name|size
init|=
name|writeFileSnapshotSize
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readersSnapshot
control|)
block|{
name|size
operator|+=
name|reader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|size
return|;
block|}
specifier|public
name|int
name|readerCount
parameter_list|()
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|readers
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|FileStoreStats
name|getStats
parameter_list|()
block|{
return|return
name|stats
return|;
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|revisions
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|revisions
operator|.
name|flush
argument_list|(
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tarWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|stats
operator|.
name|flushed
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Run garbage collection: estimation, compaction, cleanup      * @throws IOException      */
specifier|public
name|void
name|gc
parameter_list|()
throws|throws
name|IOException
block|{
name|garbageCollector
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
comment|/**      * Run the compaction gain estimation process.      * @return      */
specifier|public
name|GCEstimation
name|estimateCompactionGain
parameter_list|()
block|{
return|return
name|garbageCollector
operator|.
name|estimateCompactionGain
argument_list|(
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|false
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Copy every referenced record in data (non-bulk) segments. Bulk segments      * are fully kept (they are only removed in cleanup, if there is no      * reference to them).      * @return {@code true} on success, {@code false} otherwise.      */
specifier|public
name|boolean
name|compact
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|garbageCollector
operator|.
name|compact
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/**      * Run garbage collection on the segment level: reclaim those data segments      * that are from an old segment generation and those bulk segments that are not      * reachable anymore.      * Those tar files that shrink by at least 25% are rewritten to a new tar generation      * skipping the reclaimed segments.      */
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|garbageCollector
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
comment|/**      * Finds all external blob references that are currently accessible      * in this repository and adds them to the given collector. Useful      * for collecting garbage in an external data store.      *<p>      * Note that this method only collects blob references that are already      * stored in the repository (at the time when this method is called), so      * the garbage collector will need some other mechanism for tracking      * in-memory references and references stored while this method is      * running.      * @param collector  reference collector called back for each blob reference found      */
specifier|public
name|void
name|collectBlobReferences
parameter_list|(
name|ReferenceCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|garbageCollector
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|)
expr_stmt|;
block|}
comment|/**      * Cancel a running revision garbage collection compaction process as soon as possible.      * Does nothing if gc is not running.      */
specifier|public
name|void
name|cancelGC
parameter_list|()
block|{
name|garbageCollector
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|SegmentWriter
name|getWriter
parameter_list|()
block|{
return|return
name|segmentWriter
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|TarRevisions
name|getRevisions
parameter_list|()
block|{
return|return
name|revisions
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// Flag the store as shutting / shut down
name|shutdown
operator|=
literal|true
expr_stmt|;
comment|// avoid deadlocks by closing (and joining) the background
comment|// thread before acquiring the synchronization lock
name|fileStoreScheduler
operator|.
name|close
argument_list|()
expr_stmt|;
try|try
block|{
name|flush
argument_list|()
expr_stmt|;
name|revisions
operator|.
name|close
argument_list|()
expr_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|closeAndLogOnFail
argument_list|(
name|tarWriter
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|readers
decl_stmt|;
name|readers
operator|=
name|newArrayList
argument_list|()
expr_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|list
control|)
block|{
name|closeAndLogOnFail
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|lock
operator|!=
literal|null
condition|)
block|{
name|lock
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|closeAndLogOnFail
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Failed to close the TarMK at "
operator|+
name|directory
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Try removing pending files in case the scheduler didn't have a chance to run yet
name|fileReaper
operator|.
name|reap
argument_list|()
expr_stmt|;
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
comment|// for any memory-mappings that are no longer used
name|log
operator|.
name|info
argument_list|(
literal|"TarMK closed: {}"
argument_list|,
name|directory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|containsSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|)
block|{
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
return|return
name|containsSegment
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|containsSegment
parameter_list|(
name|long
name|msb
parameter_list|,
name|long
name|lsb
parameter_list|)
block|{
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
if|if
condition|(
name|tarWriter
operator|!=
literal|null
condition|)
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|tarWriter
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|reader
operator|.
name|containsEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
annotation|@
name|Nonnull
specifier|public
name|Segment
name|readSegment
parameter_list|(
specifier|final
name|SegmentId
name|id
parameter_list|)
block|{
try|try
block|{
return|return
name|segmentCache
operator|.
name|getSegment
argument_list|(
name|id
argument_list|,
operator|new
name|Callable
argument_list|<
name|Segment
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Segment
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|long
name|msb
init|=
name|id
operator|.
name|getMostSignificantBits
argument_list|()
decl_stmt|;
name|long
name|lsb
init|=
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// Cleanup might already have closed the file.
comment|// The segment should be available from another file.
name|log
operator|.
name|debug
argument_list|(
literal|"Skipping closed tar file {}"
argument_list|,
name|reader
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|FileStore
operator|.
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file {}"
argument_list|,
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tarWriter
operator|!=
literal|null
condition|)
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
try|try
block|{
name|ByteBuffer
name|buffer
init|=
name|tarWriter
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|FileStore
operator|.
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file {}"
argument_list|,
name|tarWriter
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|// the writer might have switched to a new file,
comment|// so we need to re-check the readers
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
try|try
block|{
if|if
condition|(
name|reader
operator|.
name|isClosed
argument_list|()
condition|)
block|{
comment|// Cleanup might already have closed the file.
comment|// The segment should be available from another file.
name|log
operator|.
name|info
argument_list|(
literal|"Skipping closed tar file {}"
argument_list|,
name|reader
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|ByteBuffer
name|buffer
init|=
name|reader
operator|.
name|readEntry
argument_list|(
name|msb
argument_list|,
name|lsb
argument_list|)
decl_stmt|;
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|Segment
argument_list|(
name|FileStore
operator|.
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|buffer
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Failed to read from tar file {}"
argument_list|,
name|reader
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
throw|throw
operator|new
name|SegmentNotFoundException
argument_list|(
name|id
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ExecutionException
name|e
parameter_list|)
block|{
name|SegmentNotFoundException
name|snfe
init|=
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|SegmentNotFoundException
condition|?
operator|(
name|SegmentNotFoundException
operator|)
name|e
operator|.
name|getCause
argument_list|()
else|:
operator|new
name|SegmentNotFoundException
argument_list|(
name|id
argument_list|,
name|e
argument_list|)
decl_stmt|;
name|snfeListener
operator|.
name|notify
argument_list|(
name|id
argument_list|,
name|snfe
argument_list|)
expr_stmt|;
throw|throw
name|snfe
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|writeSegment
parameter_list|(
name|SegmentId
name|id
parameter_list|,
name|byte
index|[]
name|buffer
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|IOException
block|{
name|Segment
name|segment
init|=
literal|null
decl_stmt|;
comment|// If the segment is a data segment, create a new instance of Segment to
comment|// access some internal information stored in the segment and to store
comment|// in an in-memory cache for later use.
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|ByteBuffer
name|data
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|4096
condition|)
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|put
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
name|data
operator|.
name|rewind
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|ByteBuffer
operator|.
name|wrap
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
block|}
name|segment
operator|=
operator|new
name|Segment
argument_list|(
name|this
argument_list|,
name|segmentReader
argument_list|,
name|id
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|int
name|generation
init|=
name|Segment
operator|.
name|getGcGeneration
argument_list|(
name|wrap
argument_list|(
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|,
name|id
operator|.
name|asUUID
argument_list|()
argument_list|)
decl_stmt|;
comment|// Flush the segment to disk
name|long
name|size
init|=
name|tarWriter
operator|.
name|writeEntry
argument_list|(
name|id
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|id
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|,
name|buffer
argument_list|,
name|offset
argument_list|,
name|length
argument_list|,
name|generation
argument_list|)
decl_stmt|;
comment|// If the segment is a data segment, update the graph before
comment|// (potentially) flushing the TAR file.
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
name|populateTarGraph
argument_list|(
name|segment
argument_list|,
name|tarWriter
argument_list|)
expr_stmt|;
name|populateTarBinaryReferences
argument_list|(
name|segment
argument_list|,
name|tarWriter
argument_list|)
expr_stmt|;
block|}
comment|// Close the TAR file if the size exceeds the maximum.
if|if
condition|(
name|size
operator|>=
name|maxFileSize
condition|)
block|{
name|newWriter
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
comment|// Keep this data segment in memory as it's likely to be accessed soon.
if|if
condition|(
name|segment
operator|!=
literal|null
condition|)
block|{
name|segmentCache
operator|.
name|putSegment
argument_list|(
name|segment
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Switch to a new tar writer.      * This method may only be called when holding the write lock of {@link #fileStoreLock}      * @throws IOException      */
specifier|private
name|void
name|newWriter
parameter_list|()
throws|throws
name|IOException
block|{
name|TarWriter
name|newWriter
init|=
name|tarWriter
operator|.
name|createNextGeneration
argument_list|()
decl_stmt|;
if|if
condition|(
name|newWriter
operator|!=
name|tarWriter
condition|)
block|{
name|File
name|writeFile
init|=
name|tarWriter
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|list
init|=
name|newArrayListWithCapacity
argument_list|(
literal|1
operator|+
name|readers
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|TarReader
operator|.
name|open
argument_list|(
name|writeFile
argument_list|,
name|memoryMapping
argument_list|)
argument_list|)
expr_stmt|;
name|list
operator|.
name|addAll
argument_list|(
name|readers
argument_list|)
expr_stmt|;
name|readers
operator|=
name|list
expr_stmt|;
name|tarWriter
operator|=
name|newWriter
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkDiskSpace
parameter_list|(
name|SegmentGCOptions
name|gcOptions
parameter_list|)
block|{
name|long
name|repositoryDiskSpace
init|=
name|size
argument_list|()
decl_stmt|;
name|long
name|availableDiskSpace
init|=
name|directory
operator|.
name|getFreeSpace
argument_list|()
decl_stmt|;
name|boolean
name|updated
init|=
name|gcOptions
operator|.
name|isDiskSpaceSufficient
argument_list|(
name|repositoryDiskSpace
argument_list|,
name|availableDiskSpace
argument_list|)
decl_stmt|;
name|boolean
name|previous
init|=
name|sufficientDiskSpace
operator|.
name|getAndSet
argument_list|(
name|updated
argument_list|)
decl_stmt|;
if|if
condition|(
name|previous
operator|&&
operator|!
name|updated
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Available disk space ({}) is too low, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updated
operator|&&
operator|!
name|previous
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Available disk space ({}) is sufficient again for repository operations, current repository size is approx. {}"
argument_list|,
name|humanReadableByteCount
argument_list|(
name|availableDiskSpace
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|repositoryDiskSpace
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|GarbageCollector
block|{
annotation|@
name|Nonnull
specifier|private
specifier|final
name|SegmentGCOptions
name|gcOptions
decl_stmt|;
comment|/**          * {@code GcListener} listening to this instance's gc progress          */
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GCListener
name|gcListener
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|GCJournal
name|gcJournal
decl_stmt|;
annotation|@
name|Nonnull
specifier|private
specifier|final
name|WriterCacheManager
name|cacheManager
decl_stmt|;
specifier|private
specifier|volatile
name|boolean
name|cancelled
decl_stmt|;
name|GarbageCollector
parameter_list|(
annotation|@
name|Nonnull
name|SegmentGCOptions
name|gcOptions
parameter_list|,
annotation|@
name|Nonnull
name|GCListener
name|gcListener
parameter_list|,
annotation|@
name|Nonnull
name|GCJournal
name|gcJournal
parameter_list|,
annotation|@
name|Nonnull
name|WriterCacheManager
name|cacheManager
parameter_list|)
block|{
name|this
operator|.
name|gcOptions
operator|=
name|gcOptions
expr_stmt|;
name|this
operator|.
name|gcListener
operator|=
name|gcListener
expr_stmt|;
name|this
operator|.
name|gcJournal
operator|=
name|gcJournal
expr_stmt|;
name|this
operator|.
name|cacheManager
operator|=
name|cacheManager
expr_stmt|;
block|}
specifier|synchronized
name|void
name|run
parameter_list|()
throws|throws
name|IOException
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: started"
argument_list|,
name|GC_COUNT
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
name|GCMemoryBarrier
name|gcMemoryBarrier
init|=
operator|new
name|GCMemoryBarrier
argument_list|(
name|sufficientMemory
argument_list|,
name|gcListener
argument_list|,
name|GC_COUNT
operator|.
name|get
argument_list|()
argument_list|,
name|gcOptions
argument_list|)
decl_stmt|;
name|boolean
name|sufficientEstimatedGain
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|gcOptions
operator|.
name|isEstimationDisabled
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation skipped because it was explicitly disabled"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gcOptions
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation skipped because compaction is paused"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation started"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
init|=
operator|new
name|CancelCompactionSupplier
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|GCEstimation
name|estimate
init|=
name|estimateCompactionGain
argument_list|(
name|cancel
argument_list|)
decl_stmt|;
if|if
condition|(
name|cancel
operator|.
name|get
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation interrupted: {}. Skipping compaction."
argument_list|,
name|GC_COUNT
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
name|gcMemoryBarrier
operator|.
name|close
argument_list|()
expr_stmt|;
return|return;
block|}
name|sufficientEstimatedGain
operator|=
name|estimate
operator|.
name|gcNeeded
argument_list|()
expr_stmt|;
name|String
name|gcLog
init|=
name|estimate
operator|.
name|gcLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: estimation completed in {} ({} ms). {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: estimation completed in {} ({} ms). {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|gcLog
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sufficientEstimatedGain
condition|)
block|{
if|if
condition|(
operator|!
name|gcOptions
operator|.
name|isPaused
argument_list|()
condition|)
block|{
name|logAndClear
argument_list|(
name|segmentWriter
operator|.
name|getNodeWriteTimeStats
argument_list|()
argument_list|,
name|segmentWriter
operator|.
name|getNodeCompactTimeStats
argument_list|()
argument_list|)
expr_stmt|;
name|log
argument_list|(
name|segmentWriter
operator|.
name|getNodeCacheOccupancyInfo
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|gen
init|=
name|compact
argument_list|()
decl_stmt|;
if|if
condition|(
name|gen
operator|>
literal|0
condition|)
block|{
name|fileReaper
operator|.
name|add
argument_list|(
name|cleanupOldGenerations
argument_list|(
name|gen
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|gen
operator|<
literal|0
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleaning up after failed compaction"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|fileReaper
operator|.
name|add
argument_list|(
name|cleanupGeneration
argument_list|(
operator|-
name|gen
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|logAndClear
argument_list|(
name|segmentWriter
operator|.
name|getNodeWriteTimeStats
argument_list|()
argument_list|,
name|segmentWriter
operator|.
name|getNodeCompactTimeStats
argument_list|()
argument_list|)
expr_stmt|;
name|log
argument_list|(
name|segmentWriter
operator|.
name|getNodeCacheOccupancyInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|skipped
argument_list|(
literal|"TarMK GC #{}: compaction paused"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
name|gcMemoryBarrier
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**          * Estimated compaction gain. The result will be undefined if stopped through          * the passed {@code stop} signal.          * @param stop  signal for stopping the estimation process.          * @return compaction gain estimate          */
specifier|synchronized
name|GCEstimation
name|estimateCompactionGain
parameter_list|(
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|stop
parameter_list|)
block|{
return|return
operator|new
name|SizeDeltaGcEstimation
argument_list|(
name|gcOptions
argument_list|,
name|gcJournal
argument_list|,
name|stats
operator|.
name|getApproximateSize
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|void
name|logAndClear
parameter_list|(
annotation|@
name|Nonnull
name|DescriptiveStatistics
name|nodeWriteTimeStats
parameter_list|,
annotation|@
name|Nonnull
name|DescriptiveStatistics
name|nodeCompactTimeStats
parameter_list|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Node write time statistics (ns) {}"
argument_list|,
name|toString
argument_list|(
name|nodeWriteTimeStats
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Node compact time statistics (ns) {}"
argument_list|,
name|toString
argument_list|(
name|nodeCompactTimeStats
argument_list|)
argument_list|)
expr_stmt|;
name|nodeWriteTimeStats
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nodeCompactTimeStats
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|log
parameter_list|(
annotation|@
name|CheckForNull
name|String
name|nodeCacheOccupancyInfo
parameter_list|)
block|{
if|if
condition|(
name|nodeCacheOccupancyInfo
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"NodeCache occupancy: {}"
argument_list|,
name|nodeCacheOccupancyInfo
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|toString
parameter_list|(
name|DescriptiveStatistics
name|statistics
parameter_list|)
block|{
name|DecimalFormat
name|sci
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"##0.0E0"
argument_list|)
decl_stmt|;
name|DecimalFormatSymbols
name|symbols
init|=
name|sci
operator|.
name|getDecimalFormatSymbols
argument_list|()
decl_stmt|;
name|symbols
operator|.
name|setNaN
argument_list|(
literal|"NaN"
argument_list|)
expr_stmt|;
name|symbols
operator|.
name|setInfinity
argument_list|(
literal|"Inf"
argument_list|)
expr_stmt|;
name|sci
operator|.
name|setDecimalFormatSymbols
argument_list|(
name|symbols
argument_list|)
expr_stmt|;
return|return
literal|"min="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getMin
argument_list|()
argument_list|)
operator|+
literal|", 10%="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|10.0
argument_list|)
argument_list|)
operator|+
literal|", 50%="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|50.0
argument_list|)
argument_list|)
operator|+
literal|", 90%="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getPercentile
argument_list|(
literal|90.0
argument_list|)
argument_list|)
operator|+
literal|", max="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getMax
argument_list|()
argument_list|)
operator|+
literal|", mean="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getMean
argument_list|()
argument_list|)
operator|+
literal|", stdev="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getStandardDeviation
argument_list|()
argument_list|)
operator|+
literal|", N="
operator|+
name|sci
operator|.
name|format
argument_list|(
name|statistics
operator|.
name|getN
argument_list|()
argument_list|)
return|;
block|}
specifier|synchronized
name|int
name|compact
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|int
name|newGeneration
init|=
name|getGcGeneration
argument_list|()
operator|+
literal|1
decl_stmt|;
try|try
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction started, gc options={}"
argument_list|,
name|GC_COUNT
argument_list|,
name|gcOptions
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|before
init|=
name|getHead
argument_list|()
decl_stmt|;
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
init|=
operator|new
name|CancelCompactionSupplier
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|SegmentWriter
name|writer
init|=
name|segmentWriterBuilder
argument_list|(
literal|"c"
argument_list|)
operator|.
name|with
argument_list|(
name|cacheManager
argument_list|)
operator|.
name|withGeneration
argument_list|(
name|newGeneration
argument_list|)
operator|.
name|withoutWriterPool
argument_list|()
operator|.
name|build
argument_list|(
name|FileStore
operator|.
name|this
argument_list|)
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compact
argument_list|(
name|before
argument_list|,
name|writer
argument_list|,
name|cancel
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cancelled: {}."
argument_list|,
name|GC_COUNT
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
return|return
operator|-
name|newGeneration
return|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compacted {} to {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|cycles
init|=
literal|0
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|cycles
operator|<
name|gcOptions
operator|.
name|getRetryCount
argument_list|()
operator|&&
operator|!
operator|(
name|success
operator|=
name|revisions
operator|.
name|setHead
argument_list|(
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|EXPEDITE_OPTION
argument_list|)
operator|)
condition|)
block|{
comment|// Some other concurrent changes have been made.
comment|// Rebase (and compact) those changes on top of the
comment|// compacted state before retrying to set the head.
name|cycles
operator|++
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction detected concurrent commits while compacting. "
operator|+
literal|"Compacting these commits. Cycle {} of {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|cycles
argument_list|,
name|gcOptions
operator|.
name|getRetryCount
argument_list|()
argument_list|)
expr_stmt|;
name|SegmentNodeState
name|head
init|=
name|getHead
argument_list|()
decl_stmt|;
name|after
operator|=
name|compact
argument_list|(
name|head
argument_list|,
name|writer
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cancelled: {}."
argument_list|,
name|GC_COUNT
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
return|return
operator|-
name|newGeneration
return|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compacted {} against {} to {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|head
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|before
operator|.
name|getRecordId
argument_list|()
argument_list|,
name|after
operator|.
name|getRecordId
argument_list|()
argument_list|)
expr_stmt|;
name|before
operator|=
name|head
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction gave up compacting concurrent commits after {} cycles."
argument_list|,
name|GC_COUNT
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
name|int
name|forceTimeout
init|=
name|gcOptions
operator|.
name|getForceTimeout
argument_list|()
decl_stmt|;
if|if
condition|(
name|forceTimeout
operator|>
literal|0
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: trying to force compact remaining commits for {} seconds"
argument_list|,
name|GC_COUNT
argument_list|,
name|forceTimeout
argument_list|)
expr_stmt|;
name|cycles
operator|++
expr_stmt|;
name|success
operator|=
name|forceCompact
argument_list|(
name|writer
argument_list|,
name|or
argument_list|(
name|cancel
argument_list|,
name|timeOut
argument_list|(
name|forceTimeout
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
if|if
condition|(
name|cancel
operator|.
name|get
argument_list|()
condition|)
block|{
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction failed to force compact remaining commits. "
operator|+
literal|"Compaction was cancelled: {}."
argument_list|,
name|GC_COUNT
argument_list|,
name|cancel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gcListener
operator|.
name|warn
argument_list|(
literal|"TarMK GC #{}: compaction failed to force compact remaining commits. "
operator|+
literal|"Most likely compaction didn't get exclusive access to the store."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|success
condition|)
block|{
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|gcListener
operator|.
name|compactionSucceeded
argument_list|(
name|newGeneration
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction succeeded in {} ({} ms), after {} cycles"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
name|newGeneration
return|;
block|}
else|else
block|{
name|gcListener
operator|.
name|compactionFailed
argument_list|(
name|newGeneration
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction failed after {} ({} ms), and {} cycles"
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|cycles
argument_list|)
expr_stmt|;
return|return
operator|-
name|newGeneration
return|;
block|}
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #"
operator|+
name|GC_COUNT
operator|+
literal|": compaction interrupted"
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return
operator|-
name|newGeneration
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #"
operator|+
name|GC_COUNT
operator|+
literal|": compaction encountered an error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
name|newGeneration
return|;
block|}
block|}
comment|/**          * @param duration          * @param unit          * @return  {@code Supplier} instance which returns true once the time specified in          * {@code duration} and {@code unit} has passed.          */
specifier|private
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|timeOut
parameter_list|(
specifier|final
name|long
name|duration
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|TimeUnit
name|unit
parameter_list|)
block|{
return|return
operator|new
name|Supplier
argument_list|<
name|Boolean
argument_list|>
argument_list|()
block|{
name|long
name|deadline
init|=
name|currentTimeMillis
argument_list|()
operator|+
name|MILLISECONDS
operator|.
name|convert
argument_list|(
name|duration
argument_list|,
name|unit
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
return|return
name|currentTimeMillis
argument_list|()
operator|>
name|deadline
return|;
block|}
block|}
return|;
block|}
comment|/**          * @param supplier1          * @param supplier2          * @return {@code Supplier} instance that returns {@code true} iff {@code supplier1} returns          * {@code true} or otherwise {@code supplier2} returns {@code true}.          */
specifier|private
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|or
parameter_list|(
annotation|@
name|Nonnull
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|supplier1
parameter_list|,
annotation|@
name|Nonnull
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|supplier2
parameter_list|)
block|{
if|if
condition|(
name|supplier1
operator|.
name|get
argument_list|()
condition|)
block|{
return|return
name|Suppliers
operator|.
name|ofInstance
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|supplier2
return|;
block|}
block|}
specifier|private
name|SegmentNodeState
name|compact
parameter_list|(
name|NodeState
name|head
parameter_list|,
name|SegmentWriter
name|writer
parameter_list|,
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|gcOptions
operator|.
name|isOffline
argument_list|()
condition|)
block|{
return|return
operator|new
name|Compactor
argument_list|(
name|segmentReader
argument_list|,
name|writer
argument_list|,
name|getBlobStore
argument_list|()
argument_list|,
name|cancel
argument_list|,
name|gcOptions
argument_list|)
operator|.
name|compact
argument_list|(
name|EMPTY_NODE
argument_list|,
name|head
argument_list|,
name|EMPTY_NODE
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|writer
operator|.
name|writeNode
argument_list|(
name|head
argument_list|,
name|cancel
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|forceCompact
parameter_list|(
annotation|@
name|Nonnull
specifier|final
name|SegmentWriter
name|writer
parameter_list|,
annotation|@
name|Nonnull
specifier|final
name|Supplier
argument_list|<
name|Boolean
argument_list|>
name|cancel
parameter_list|)
throws|throws
name|InterruptedException
block|{
return|return
name|revisions
operator|.
name|setHead
argument_list|(
operator|new
name|Function
argument_list|<
name|RecordId
argument_list|,
name|RecordId
argument_list|>
argument_list|()
block|{
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|RecordId
name|apply
parameter_list|(
name|RecordId
name|base
parameter_list|)
block|{
try|try
block|{
name|long
name|t0
init|=
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|SegmentNodeState
name|after
init|=
name|compact
argument_list|(
name|segmentReader
operator|.
name|readNode
argument_list|(
name|base
argument_list|)
argument_list|,
name|writer
argument_list|,
name|cancel
argument_list|)
decl_stmt|;
if|if
condition|(
name|after
operator|==
literal|null
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: compaction cancelled after {} seconds"
argument_list|,
name|GC_COUNT
argument_list|,
operator|(
name|currentTimeMillis
argument_list|()
operator|-
name|t0
operator|)
operator|/
literal|1000
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|after
operator|.
name|getRecordId
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|gcListener
operator|.
name|error
argument_list|(
literal|"TarMK GC #{"
operator|+
name|GC_COUNT
operator|+
literal|"}: Error during forced compaction."
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
argument_list|,
name|timeout
argument_list|(
name|gcOptions
operator|.
name|getForceTimeout
argument_list|()
argument_list|,
name|SECONDS
argument_list|)
argument_list|)
return|;
block|}
specifier|synchronized
name|void
name|cleanup
parameter_list|()
throws|throws
name|IOException
block|{
name|fileReaper
operator|.
name|add
argument_list|(
name|cleanupOldGenerations
argument_list|(
name|getGcGeneration
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**          * Cleanup segments that are from an old generation. That segments whose generation          * is {@code gcGeneration - SegmentGCOptions.getRetainedGenerations()} or older.          * @param gcGeneration          * @return list of files to be removed          * @throws IOException          */
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|cleanupOldGenerations
parameter_list|(
name|int
name|gcGeneration
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|reclaimGeneration
init|=
name|gcGeneration
operator|-
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|reclaimPredicate
init|=
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|generation
parameter_list|)
block|{
return|return
name|generation
operator|<=
name|reclaimGeneration
return|;
block|}
block|}
decl_stmt|;
return|return
name|cleanup
argument_list|(
name|reclaimPredicate
argument_list|,
literal|"gc-count="
operator|+
name|GC_COUNT
operator|+
literal|",gc-status=success"
operator|+
literal|",store-generation="
operator|+
name|gcGeneration
operator|+
literal|",reclaim-predicate=(generation<="
operator|+
name|reclaimGeneration
operator|+
literal|")"
argument_list|)
return|;
block|}
comment|/**          * Cleanup segments whose generation matches the {@code reclaimGeneration} predicate.          * @param reclaimGeneration          * @param gcInfo  gc information to be passed to {@link SegmentIdTable#clearSegmentIdTables(Set, String)}          * @return list of files to be removed          * @throws IOException          */
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|cleanup
parameter_list|(
annotation|@
name|Nonnull
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|reclaimGeneration
parameter_list|,
annotation|@
name|Nonnull
name|String
name|gcInfo
parameter_list|)
throws|throws
name|IOException
block|{
name|Stopwatch
name|watch
init|=
name|Stopwatch
operator|.
name|createStarted
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|bulkRefs
init|=
name|newHashSet
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|TarReader
argument_list|,
name|TarReader
argument_list|>
name|cleaned
init|=
name|newLinkedHashMap
argument_list|()
decl_stmt|;
name|long
name|initialSize
init|=
literal|0
decl_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup started."
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
name|newWriter
argument_list|()
expr_stmt|;
name|segmentCache
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Suggest to the JVM that now would be a good time
comment|// to clear stale weak references in the SegmentTracker
name|System
operator|.
name|gc
argument_list|()
expr_stmt|;
name|collectBulkReferences
argument_list|(
name|bulkRefs
argument_list|)
expr_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
name|cleaned
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|reader
argument_list|)
expr_stmt|;
name|initialSize
operator|+=
name|reader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: current repository size is {} ({} bytes)"
argument_list|,
name|GC_COUNT
argument_list|,
name|humanReadableByteCount
argument_list|(
name|initialSize
argument_list|)
argument_list|,
name|initialSize
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaim
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|cleaned
operator|.
name|keySet
argument_list|()
control|)
block|{
name|reader
operator|.
name|mark
argument_list|(
name|bulkRefs
argument_list|,
name|reclaim
argument_list|,
name|reclaimGeneration
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"{}: size of bulk references/reclaim set {}/{}"
argument_list|,
name|reader
argument_list|,
name|bulkRefs
operator|.
name|size
argument_list|()
argument_list|,
name|reclaim
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup interrupted"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|Set
argument_list|<
name|UUID
argument_list|>
name|reclaimed
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|cleaned
operator|.
name|keySet
argument_list|()
control|)
block|{
name|cleaned
operator|.
name|put
argument_list|(
name|reader
argument_list|,
name|reader
operator|.
name|sweep
argument_list|(
name|reclaim
argument_list|,
name|reclaimed
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|shutdown
condition|)
block|{
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup interrupted"
argument_list|,
name|GC_COUNT
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// it doesn't account for concurrent commits that might have happened
name|long
name|afterCleanupSize
init|=
literal|0
decl_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|oldReaders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// Replace current list of reader with the cleaned readers taking care not to lose
comment|// any new reader that might have come in through concurrent calls to newWriter()
name|List
argument_list|<
name|TarReader
argument_list|>
name|sweptReaders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|reader
range|:
name|readers
control|)
block|{
if|if
condition|(
name|cleaned
operator|.
name|containsKey
argument_list|(
name|reader
argument_list|)
condition|)
block|{
name|TarReader
name|newReader
init|=
name|cleaned
operator|.
name|get
argument_list|(
name|reader
argument_list|)
decl_stmt|;
if|if
condition|(
name|newReader
operator|!=
literal|null
condition|)
block|{
name|sweptReaders
operator|.
name|add
argument_list|(
name|newReader
argument_list|)
expr_stmt|;
name|afterCleanupSize
operator|+=
name|newReader
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
comment|// if these two differ, the former represents the swept version of the latter
if|if
condition|(
name|newReader
operator|!=
name|reader
condition|)
block|{
name|oldReaders
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|sweptReaders
operator|.
name|add
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
name|readers
operator|=
name|sweptReaders
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|tracker
operator|.
name|clearSegmentIdTables
argument_list|(
name|reclaimed
argument_list|,
name|gcInfo
argument_list|)
expr_stmt|;
comment|// Close old readers *after* setting readers to the new readers to avoid accessing
comment|// a closed reader from readSegment()
name|LinkedList
argument_list|<
name|File
argument_list|>
name|toRemove
init|=
name|newLinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|TarReader
name|oldReader
range|:
name|oldReaders
control|)
block|{
name|closeAndLogOnFail
argument_list|(
name|oldReader
argument_list|)
expr_stmt|;
name|File
name|file
init|=
name|oldReader
operator|.
name|getFile
argument_list|()
decl_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup marking file for deletion: {}"
argument_list|,
name|GC_COUNT
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|toRemove
operator|.
name|addLast
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|long
name|finalSize
init|=
name|size
argument_list|()
decl_stmt|;
name|long
name|reclaimedSize
init|=
name|initialSize
operator|-
name|afterCleanupSize
decl_stmt|;
name|stats
operator|.
name|reclaimed
argument_list|(
name|reclaimedSize
argument_list|)
expr_stmt|;
name|gcJournal
operator|.
name|persist
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|cleaned
argument_list|(
name|reclaimedSize
argument_list|,
name|finalSize
argument_list|)
expr_stmt|;
name|gcListener
operator|.
name|info
argument_list|(
literal|"TarMK GC #{}: cleanup completed in {} ({} ms). Post cleanup size is {} ({} bytes)"
operator|+
literal|" and space reclaimed {} ({} bytes)."
argument_list|,
name|GC_COUNT
argument_list|,
name|watch
argument_list|,
name|watch
operator|.
name|elapsed
argument_list|(
name|MILLISECONDS
argument_list|)
argument_list|,
name|humanReadableByteCount
argument_list|(
name|finalSize
argument_list|)
argument_list|,
name|finalSize
argument_list|,
name|humanReadableByteCount
argument_list|(
name|reclaimedSize
argument_list|)
argument_list|,
name|reclaimedSize
argument_list|)
expr_stmt|;
return|return
name|toRemove
return|;
block|}
specifier|private
name|void
name|collectBulkReferences
parameter_list|(
name|Set
argument_list|<
name|UUID
argument_list|>
name|bulkRefs
parameter_list|)
block|{
name|Set
argument_list|<
name|UUID
argument_list|>
name|refs
init|=
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|tracker
operator|.
name|getReferencedSegmentIds
argument_list|()
control|)
block|{
name|refs
operator|.
name|add
argument_list|(
name|id
operator|.
name|asUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tarWriter
operator|.
name|collectReferences
argument_list|(
name|refs
argument_list|)
expr_stmt|;
for|for
control|(
name|UUID
name|ref
range|:
name|refs
control|)
block|{
if|if
condition|(
operator|!
name|isDataSegmentId
argument_list|(
name|ref
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
condition|)
block|{
name|bulkRefs
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**          * Cleanup segments of the given generation {@code gcGeneration}.          * @param gcGeneration          * @return list of files to be removed          * @throws IOException          */
specifier|private
name|List
argument_list|<
name|File
argument_list|>
name|cleanupGeneration
parameter_list|(
specifier|final
name|int
name|gcGeneration
parameter_list|)
throws|throws
name|IOException
block|{
name|Predicate
argument_list|<
name|Integer
argument_list|>
name|cleanupPredicate
init|=
operator|new
name|Predicate
argument_list|<
name|Integer
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
name|Integer
name|generation
parameter_list|)
block|{
return|return
name|generation
operator|==
name|gcGeneration
return|;
block|}
block|}
decl_stmt|;
return|return
name|cleanup
argument_list|(
name|cleanupPredicate
argument_list|,
literal|"gc-count="
operator|+
name|GC_COUNT
operator|+
literal|",gc-status=failed"
operator|+
literal|",store-generation="
operator|+
operator|(
name|gcGeneration
operator|-
literal|1
operator|)
operator|+
literal|",reclaim-predicate=(generation=="
operator|+
name|gcGeneration
operator|+
literal|")"
argument_list|)
return|;
block|}
comment|/**          * Finds all external blob references that are currently accessible          * in this repository and adds them to the given collector. Useful          * for collecting garbage in an external data store.          *<p>          * Note that this method only collects blob references that are already          * stored in the repository (at the time when this method is called), so          * the garbage collector will need some other mechanism for tracking          * in-memory references and references stored while this method is          * running.          * @param collector  reference collector called back for each blob reference found          */
specifier|synchronized
name|void
name|collectBlobReferences
parameter_list|(
name|ReferenceCollector
name|collector
parameter_list|)
throws|throws
name|IOException
block|{
name|segmentWriter
operator|.
name|flush
argument_list|()
expr_stmt|;
name|List
argument_list|<
name|TarReader
argument_list|>
name|tarReaders
init|=
name|newArrayList
argument_list|()
decl_stmt|;
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|newWriter
argument_list|()
expr_stmt|;
name|tarReaders
operator|.
name|addAll
argument_list|(
name|FileStore
operator|.
name|this
operator|.
name|readers
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|fileStoreLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
name|int
name|minGeneration
init|=
name|getGcGeneration
argument_list|()
operator|-
name|gcOptions
operator|.
name|getRetainedGenerations
argument_list|()
operator|+
literal|1
decl_stmt|;
for|for
control|(
name|TarReader
name|tarReader
range|:
name|tarReaders
control|)
block|{
name|tarReader
operator|.
name|collectBlobReferences
argument_list|(
name|collector
argument_list|,
name|minGeneration
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|cancel
parameter_list|()
block|{
name|cancelled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**          * Represents the cancellation policy for the compaction phase. If the disk          * space was considered insufficient at least once during compaction (or if          * the space was never sufficient to begin with), compaction is considered          * canceled. Furthermore when the file store is shutting down, compaction is          * considered canceled.          */
specifier|private
class|class
name|CancelCompactionSupplier
implements|implements
name|Supplier
argument_list|<
name|Boolean
argument_list|>
block|{
specifier|private
specifier|final
name|FileStore
name|store
decl_stmt|;
specifier|private
name|String
name|reason
decl_stmt|;
specifier|public
name|CancelCompactionSupplier
parameter_list|(
annotation|@
name|Nonnull
name|FileStore
name|store
parameter_list|)
block|{
name|cancelled
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|store
operator|=
name|store
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Boolean
name|get
parameter_list|()
block|{
comment|// The outOfDiskSpace and shutdown flags can only transition from
comment|// false (their initial values), to true. Once true, there should
comment|// be no way to go back.
if|if
condition|(
operator|!
name|store
operator|.
name|sufficientDiskSpace
operator|.
name|get
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Not enough disk space"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|store
operator|.
name|sufficientMemory
operator|.
name|get
argument_list|()
condition|)
block|{
name|reason
operator|=
literal|"Not enough memory"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|store
operator|.
name|shutdown
condition|)
block|{
name|reason
operator|=
literal|"The FileStore is shutting down"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|cancelled
condition|)
block|{
name|reason
operator|=
literal|"Cancelled by user"
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|reason
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

