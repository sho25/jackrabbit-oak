begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toBoolean
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toInteger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
operator|.
name|toLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_CHILDREN_CACHE_PERCENTAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_DIFF_CACHE_PERCENTAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_DOC_CHILDREN_CACHE_PERCENTAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_NODE_CACHE_PERCENTAGE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Dictionary
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|sql
operator|.
name|DataSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClient
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoClientURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ConfigurationPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Modified
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|PropertyOption
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CacheStatsMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|jmx
operator|.
name|CheckpointMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|cache
operator|.
name|CacheStats
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PropertiesUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|ObserverTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobGarbageCollector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|SharedDataStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|SharedDataStoreUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|MongoConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|identifier
operator|.
name|ClusterRepositoryInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|GarbageCollectableBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGC
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|RevisionGCMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardExecutor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|ServiceRegistration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|service
operator|.
name|component
operator|.
name|ComponentContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_comment
comment|/**  * The OSGi service to start/stop a DocumentNodeStore instance.  */
end_comment

begin_class
annotation|@
name|Component
argument_list|(
name|policy
operator|=
name|ConfigurationPolicy
operator|.
name|REQUIRE
argument_list|,
name|metatype
operator|=
literal|true
argument_list|,
name|label
operator|=
literal|"Apache Jackrabbit Oak Document NodeStore Service"
argument_list|,
name|description
operator|=
literal|"NodeStore implementation based on Document model. For configuration option refer "
operator|+
literal|"to http://jackrabbit.apache.org/oak/docs/osgi_config.html#DocumentNodeStore. Note that for system "
operator|+
literal|"stability purpose it is advisable to not change these settings at runtime. Instead the config change "
operator|+
literal|"should be done via file system based config file and this view should ONLY be used to determine which "
operator|+
literal|"options are supported"
argument_list|)
specifier|public
class|class
name|DocumentNodeStoreService
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_URI
init|=
literal|"mongodb://localhost:27017/oak"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_OFF_HEAP_CACHE
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CHANGES_SIZE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_BLOB_CACHE_SIZE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_DB
init|=
literal|"oak"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEFAULT_PERSISTENT_CACHE
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_SEGMENT_COUNT
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_CACHE_STACK_MOVE_DISTANCE
init|=
literal|16
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"oak.documentstore."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DESCRIPTION
init|=
literal|"oak.nodestore.description"
decl_stmt|;
comment|/**      * Name of framework property to configure Mongo Connection URI      */
specifier|private
specifier|static
specifier|final
name|String
name|FWK_PROP_URI
init|=
literal|"oak.mongo.uri"
decl_stmt|;
comment|/**      * Name of framework property to configure Mongo Database name      * to use      */
specifier|private
specifier|static
specifier|final
name|String
name|FWK_PROP_DB
init|=
literal|"oak.mongo.db"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|DEFAULT_URI
argument_list|,
name|label
operator|=
literal|"Mongo URI"
argument_list|,
name|description
operator|=
literal|"Mongo connection URI used to connect to Mongo. Refer to "
operator|+
literal|"http://docs.mongodb.org/manual/reference/connection-string/ for details. Note that this value "
operator|+
literal|"can be overridden via framework property 'oak.mongo.uri'"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_URI
init|=
literal|"mongouri"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|DEFAULT_DB
argument_list|,
name|label
operator|=
literal|"Mongo DB name"
argument_list|,
name|description
operator|=
literal|"Name of the database in Mongo. Note that this value "
operator|+
literal|"can be overridden via framework property 'oak.mongo.db'"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_DB
init|=
literal|"db"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_CACHE
argument_list|,
name|label
operator|=
literal|"Cache Size (in MB)"
argument_list|,
name|description
operator|=
literal|"Cache size in MB. This is distributed among various caches used in DocumentNodeStore"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CACHE
init|=
literal|"cache"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_NODE_CACHE_PERCENTAGE
argument_list|,
name|label
operator|=
literal|"NodeState Cache"
argument_list|,
name|description
operator|=
literal|"Percentage of cache to be allocated towards Node cache"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_NODE_CACHE_PERCENTAGE
init|=
literal|"nodeCachePercentage"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_CHILDREN_CACHE_PERCENTAGE
argument_list|,
name|label
operator|=
literal|"NodeState Children Cache"
argument_list|,
name|description
operator|=
literal|"Percentage of cache to be allocated towards Children cache"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CHILDREN_CACHE_PERCENTAGE
init|=
literal|"childrenCachePercentage"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_DIFF_CACHE_PERCENTAGE
argument_list|,
name|label
operator|=
literal|"Diff Cache"
argument_list|,
name|description
operator|=
literal|"Percentage of cache to be allocated towards Diff cache"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_DIFF_CACHE_PERCENTAGE
init|=
literal|"diffCachePercentage"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_DOC_CHILDREN_CACHE_PERCENTAGE
argument_list|,
name|label
operator|=
literal|"Document Children Cache"
argument_list|,
name|description
operator|=
literal|"Percentage of cache to be allocated towards Document children cache"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_DOC_CHILDREN_CACHE_PERCENTAGE
init|=
literal|"docChildrenCachePercentage"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_CACHE_SEGMENT_COUNT
argument_list|,
name|label
operator|=
literal|"LIRS Cache Segment Count"
argument_list|,
name|description
operator|=
literal|"The number of segments in the LIRS cache "
operator|+
literal|"(default 16, a higher count means higher concurrency "
operator|+
literal|"but slightly lower cache hit rate)"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CACHE_SEGMENT_COUNT
init|=
literal|"cacheSegmentCount"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DocumentMK
operator|.
name|Builder
operator|.
name|DEFAULT_CACHE_STACK_MOVE_DISTANCE
argument_list|,
name|label
operator|=
literal|"LIRS Cache Stack Move Distance"
argument_list|,
name|description
operator|=
literal|"The delay to move entries to the head of the queue "
operator|+
literal|"in the LIRS cache "
operator|+
literal|"(default 16, a higher value means higher concurrency "
operator|+
literal|"but slightly lower cache hit rate)"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CACHE_STACK_MOVE_DISTANCE
init|=
literal|"cacheStackMoveDistance"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROP_OFF_HEAP_CACHE
init|=
literal|"offHeapCache"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_CHANGES_SIZE
argument_list|,
name|label
operator|=
literal|"Mongo Changes Collection Size (in MB)"
argument_list|,
name|description
operator|=
literal|"With the MongoDB backend, the DocumentNodeStore uses a capped collection to cache the diff. "
operator|+
literal|"This value is used to determine the size of that capped collection"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_CHANGES_SIZE
init|=
literal|"changesSize"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|intValue
operator|=
name|DEFAULT_BLOB_CACHE_SIZE
argument_list|,
name|label
operator|=
literal|"Blob Cache Size (in MB)"
argument_list|,
name|description
operator|=
literal|"Cache size to store blobs in memory. Used only with default BlobStore "
operator|+
literal|"(as per DocumentStore type)"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_BLOB_CACHE_SIZE
init|=
literal|"blobCacheSize"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|value
operator|=
name|DEFAULT_PERSISTENT_CACHE
argument_list|,
name|label
operator|=
literal|"Persistent Cache Config"
argument_list|,
name|description
operator|=
literal|"Configuration for enabling Persistent cache. By default it is not enabled. Refer to "
operator|+
literal|"http://jackrabbit.apache.org/oak/docs/nodestore/persistent-cache.html for various options"
argument_list|)
specifier|private
specifier|static
specifier|final
name|String
name|PROP_PERSISTENT_CACHE
init|=
literal|"persistentCache"
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Custom BlobStore"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that a custom BlobStore is to be used. "
operator|+
literal|"By default, for MongoDB, MongoBlobStore is used; for RDB, RDBBlobStore is used."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_BLOB_STORE
init|=
literal|"customBlobStore"
decl_stmt|;
comment|/**      * Boolean value indicating a different DataSource has to be used for      * BlobStore      */
annotation|@
name|Property
argument_list|(
name|boolValue
operator|=
literal|false
argument_list|,
name|label
operator|=
literal|"Custom DataSource"
argument_list|,
name|description
operator|=
literal|"Boolean value indicating that DataSource is configured "
operator|+
literal|"separately, and that it should be used"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|CUSTOM_BLOB_DATA_SOURCE
init|=
literal|"customBlobDataSource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|MB
init|=
literal|1024
operator|*
literal|1024
decl_stmt|;
specifier|private
specifier|static
enum|enum
name|DocumentStoreType
block|{
name|MONGO
block|,
name|RDB
block|;
specifier|static
name|DocumentStoreType
name|fromString
parameter_list|(
name|String
name|type
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
return|return
name|MONGO
return|;
block|}
return|return
name|valueOf
argument_list|(
name|type
operator|.
name|toUpperCase
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|this
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|ServiceRegistration
name|reg
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Registration
argument_list|>
name|registrations
init|=
operator|new
name|ArrayList
argument_list|<
name|Registration
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|WhiteboardExecutor
name|executor
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|)
specifier|private
specifier|volatile
name|BlobStore
name|blobStore
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
literal|"(datasource.name=oak)"
argument_list|)
specifier|private
specifier|volatile
name|DataSource
name|dataSource
decl_stmt|;
annotation|@
name|Reference
argument_list|(
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_UNARY
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|target
operator|=
literal|"(datasource.name=oak)"
argument_list|)
specifier|private
specifier|volatile
name|DataSource
name|blobDataSource
decl_stmt|;
specifier|private
name|DocumentMK
name|mk
decl_stmt|;
specifier|private
name|ObserverTracker
name|observerTracker
decl_stmt|;
specifier|private
name|ComponentContext
name|context
decl_stmt|;
specifier|private
name|Whiteboard
name|whiteboard
decl_stmt|;
comment|/**      * Revisions older than this time would be garbage collected      */
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_VER_GC_MAX_AGE
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
comment|//TimeUnit.DAYS.toSeconds(1);
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|DEFAULT_VER_GC_MAX_AGE
argument_list|,
name|label
operator|=
literal|"Version GC Max Age (in secs)"
argument_list|,
name|description
operator|=
literal|"Version Garbage Collector (GC) logic will only consider those deleted for GC which "
operator|+
literal|"are not accessed recently (currentTime - lastModifiedTime> versionGcMaxAgeInSecs). For "
operator|+
literal|"example as per default only those document which have been *marked* deleted 24 hrs ago will be "
operator|+
literal|"considered for GC. This also applies how older revision of live document are GC."
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_VER_GC_MAX_AGE
init|=
literal|"versionGcMaxAgeInSecs"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_REV_RECOVERY_INTERVAL
init|=
literal|"lastRevRecoveryJobIntervalInSecs"
decl_stmt|;
comment|/**      * Blob modified before this time duration would be considered for Blob GC      */
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_BLOB_GC_MAX_AGE
init|=
literal|24
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|DEFAULT_BLOB_GC_MAX_AGE
argument_list|,
name|label
operator|=
literal|"Blob GC Max Age (in secs)"
argument_list|,
name|description
operator|=
literal|"Blob Garbage Collector (GC) logic will only consider those blobs for GC which "
operator|+
literal|"are not accessed recently (currentTime - lastModifiedTime> blobGcMaxAgeInSecs). For "
operator|+
literal|"example as per default only those blobs which have been created 24 hrs ago will be "
operator|+
literal|"considered for GC"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_BLOB_GC_MAX_AGE
init|=
literal|"blobGcMaxAgeInSecs"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_MAX_REPLICATION_LAG
init|=
literal|6
operator|*
literal|60
operator|*
literal|60
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|longValue
operator|=
name|DEFAULT_MAX_REPLICATION_LAG
argument_list|,
name|label
operator|=
literal|"Max Replication Lag (in secs)"
argument_list|,
name|description
operator|=
literal|"Value in seconds. Determines the duration beyond which it can be safely assumed "
operator|+
literal|"that the state on the secondaries is consistent with the primary, and it is safe to read from them"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_REPLICATION_LAG
init|=
literal|"maxReplicationLagInSecs"
decl_stmt|;
specifier|private
name|long
name|maxReplicationLagInSecs
init|=
name|DEFAULT_MAX_REPLICATION_LAG
decl_stmt|;
annotation|@
name|Property
argument_list|(
name|options
operator|=
block|{
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"MONGO"
argument_list|,
name|value
operator|=
literal|"MONGO"
argument_list|)
block|,
annotation|@
name|PropertyOption
argument_list|(
name|name
operator|=
literal|"RDB"
argument_list|,
name|value
operator|=
literal|"RDB"
argument_list|)
block|}
argument_list|,
name|value
operator|=
literal|"MONGO"
argument_list|,
name|label
operator|=
literal|"DocumentStore Type"
argument_list|,
name|description
operator|=
literal|"Type of DocumentStore to use for persistence. Defaults to MONGO"
argument_list|)
specifier|public
specifier|static
specifier|final
name|String
name|PROP_DS_TYPE
init|=
literal|"documentStoreType"
decl_stmt|;
specifier|private
name|DocumentStoreType
name|documentStoreType
decl_stmt|;
specifier|private
name|boolean
name|customBlobStore
decl_stmt|;
specifier|private
name|boolean
name|customBlobDataSource
decl_stmt|;
annotation|@
name|Activate
specifier|protected
name|void
name|activate
parameter_list|(
name|ComponentContext
name|context
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
throws|throws
name|Exception
block|{
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
name|whiteboard
operator|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|executor
operator|=
operator|new
name|WhiteboardExecutor
argument_list|()
expr_stmt|;
name|executor
operator|.
name|start
argument_list|(
name|whiteboard
argument_list|)
expr_stmt|;
name|maxReplicationLagInSecs
operator|=
name|toLong
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_REPLICATION_LAG
argument_list|)
argument_list|,
name|DEFAULT_MAX_REPLICATION_LAG
argument_list|)
expr_stmt|;
name|customBlobStore
operator|=
name|toBoolean
argument_list|(
name|prop
argument_list|(
name|CUSTOM_BLOB_STORE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|customBlobDataSource
operator|=
name|toBoolean
argument_list|(
name|prop
argument_list|(
name|CUSTOM_BLOB_DATA_SOURCE
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|documentStoreType
operator|=
name|DocumentStoreType
operator|.
name|fromString
argument_list|(
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|config
operator|.
name|get
argument_list|(
name|PROP_DS_TYPE
argument_list|)
argument_list|,
literal|"MONGO"
argument_list|)
argument_list|)
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|registerNodeStoreIfPossible
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Component still not activated. Ignoring the initialization call"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|customBlobStore
operator|&&
name|blobStore
operator|==
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"BlobStore use enabled. DocumentNodeStoreService would be initialized when "
operator|+
literal|"BlobStore would be available"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|documentStoreType
operator|==
name|DocumentStoreType
operator|.
name|RDB
operator|&&
operator|(
name|dataSource
operator|==
literal|null
operator|||
operator|(
name|customBlobDataSource
operator|&&
name|blobDataSource
operator|==
literal|null
operator|)
operator|)
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"DataSource use enabled. DocumentNodeStoreService would be initialized when "
operator|+
literal|"DataSource would be available"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|registerNodeStore
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerNodeStore
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|uri
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|prop
argument_list|(
name|PROP_URI
argument_list|,
name|FWK_PROP_URI
argument_list|)
argument_list|,
name|DEFAULT_URI
argument_list|)
decl_stmt|;
name|String
name|db
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|prop
argument_list|(
name|PROP_DB
argument_list|,
name|FWK_PROP_DB
argument_list|)
argument_list|,
name|DEFAULT_DB
argument_list|)
decl_stmt|;
name|int
name|offHeapCache
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_OFF_HEAP_CACHE
argument_list|)
argument_list|,
name|DEFAULT_OFF_HEAP_CACHE
argument_list|)
decl_stmt|;
name|int
name|cacheSize
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_CACHE
argument_list|)
argument_list|,
name|DEFAULT_CACHE
argument_list|)
decl_stmt|;
name|int
name|nodeCachePercentage
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_NODE_CACHE_PERCENTAGE
argument_list|)
argument_list|,
name|DEFAULT_NODE_CACHE_PERCENTAGE
argument_list|)
decl_stmt|;
name|int
name|childrenCachePercentage
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_CHILDREN_CACHE_PERCENTAGE
argument_list|)
argument_list|,
name|DEFAULT_CHILDREN_CACHE_PERCENTAGE
argument_list|)
decl_stmt|;
name|int
name|docChildrenCachePercentage
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_DOC_CHILDREN_CACHE_PERCENTAGE
argument_list|)
argument_list|,
name|DEFAULT_DOC_CHILDREN_CACHE_PERCENTAGE
argument_list|)
decl_stmt|;
name|int
name|diffCachePercentage
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_DIFF_CACHE_PERCENTAGE
argument_list|)
argument_list|,
name|DEFAULT_DIFF_CACHE_PERCENTAGE
argument_list|)
decl_stmt|;
name|int
name|changesSize
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_CHANGES_SIZE
argument_list|)
argument_list|,
name|DEFAULT_CHANGES_SIZE
argument_list|)
decl_stmt|;
name|int
name|blobCacheSize
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_BLOB_CACHE_SIZE
argument_list|)
argument_list|,
name|DEFAULT_BLOB_CACHE_SIZE
argument_list|)
decl_stmt|;
name|String
name|persistentCache
init|=
name|PropertiesUtil
operator|.
name|toString
argument_list|(
name|prop
argument_list|(
name|PROP_PERSISTENT_CACHE
argument_list|)
argument_list|,
name|DEFAULT_PERSISTENT_CACHE
argument_list|)
decl_stmt|;
name|int
name|cacheSegmentCount
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_CACHE_SEGMENT_COUNT
argument_list|)
argument_list|,
name|DEFAULT_CACHE_SEGMENT_COUNT
argument_list|)
decl_stmt|;
name|int
name|cacheStackMoveDistance
init|=
name|toInteger
argument_list|(
name|prop
argument_list|(
name|PROP_CACHE_STACK_MOVE_DISTANCE
argument_list|)
argument_list|,
name|DEFAULT_CACHE_STACK_MOVE_DISTANCE
argument_list|)
decl_stmt|;
name|DocumentMK
operator|.
name|Builder
name|mkBuilder
init|=
operator|new
name|DocumentMK
operator|.
name|Builder
argument_list|()
operator|.
name|memoryCacheSize
argument_list|(
name|cacheSize
operator|*
name|MB
argument_list|)
operator|.
name|memoryCacheDistribution
argument_list|(
name|nodeCachePercentage
argument_list|,
name|childrenCachePercentage
argument_list|,
name|docChildrenCachePercentage
argument_list|,
name|diffCachePercentage
argument_list|)
operator|.
name|setCacheSegmentCount
argument_list|(
name|cacheSegmentCount
argument_list|)
operator|.
name|setCacheStackMoveDistance
argument_list|(
name|cacheStackMoveDistance
argument_list|)
operator|.
name|offHeapCacheSize
argument_list|(
name|offHeapCache
operator|*
name|MB
argument_list|)
decl_stmt|;
if|if
condition|(
name|persistentCache
operator|!=
literal|null
operator|&&
name|persistentCache
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|mkBuilder
operator|.
name|setPersistentCache
argument_list|(
name|persistentCache
argument_list|)
expr_stmt|;
block|}
comment|//Set blobstore before setting the DB
if|if
condition|(
name|customBlobStore
condition|)
block|{
name|checkNotNull
argument_list|(
name|blobStore
argument_list|,
literal|"Use of custom BlobStore enabled via  [%s] but blobStore reference not "
operator|+
literal|"initialized"
argument_list|,
name|CUSTOM_BLOB_STORE
argument_list|)
expr_stmt|;
name|mkBuilder
operator|.
name|setBlobStore
argument_list|(
name|blobStore
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|documentStoreType
operator|==
name|DocumentStoreType
operator|.
name|RDB
condition|)
block|{
name|checkNotNull
argument_list|(
name|dataSource
argument_list|,
literal|"DataStore type set [%s] but DataSource reference not initialized"
argument_list|,
name|PROP_DS_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|customBlobDataSource
condition|)
block|{
name|checkNotNull
argument_list|(
name|blobDataSource
argument_list|,
literal|"DataStore type set [%s] and BlobStore is configured to use different "
operator|+
literal|"DataSource via [%s] but BlobDataSource reference not initialized"
argument_list|,
name|PROP_DS_TYPE
argument_list|,
name|CUSTOM_BLOB_DATA_SOURCE
argument_list|)
expr_stmt|;
name|mkBuilder
operator|.
name|setRDBConnection
argument_list|(
name|dataSource
argument_list|,
name|blobDataSource
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Connected to datasources {} {}"
argument_list|,
name|dataSource
argument_list|,
name|blobDataSource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mkBuilder
operator|.
name|setRDBConnection
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Connected to datasource {}"
argument_list|,
name|dataSource
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|MongoClientOptions
operator|.
name|Builder
name|builder
init|=
name|MongoConnection
operator|.
name|getDefaultBuilder
argument_list|()
decl_stmt|;
name|MongoClientURI
name|mongoURI
init|=
operator|new
name|MongoClientURI
argument_list|(
name|uri
argument_list|,
name|builder
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
comment|// Take care around not logging the uri directly as it
comment|// might contain passwords
name|log
operator|.
name|info
argument_list|(
literal|"Starting DocumentNodeStore with host={}, db={}, cache size (MB)={}, persistentCache={}, "
operator|+
literal|"'changes' collection size (MB)={}, blobCacheSize (MB)={}, maxReplicationLagInSecs={}"
argument_list|,
name|mongoURI
operator|.
name|getHosts
argument_list|()
argument_list|,
name|db
argument_list|,
name|cacheSize
argument_list|,
name|persistentCache
argument_list|,
name|changesSize
argument_list|,
name|blobCacheSize
argument_list|,
name|maxReplicationLagInSecs
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Mongo Connection details {}"
argument_list|,
name|MongoConnection
operator|.
name|toString
argument_list|(
name|mongoURI
operator|.
name|getOptions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MongoClient
name|client
init|=
operator|new
name|MongoClient
argument_list|(
name|mongoURI
argument_list|)
decl_stmt|;
name|DB
name|mongoDB
init|=
name|client
operator|.
name|getDB
argument_list|(
name|db
argument_list|)
decl_stmt|;
name|mkBuilder
operator|.
name|setMaxReplicationLag
argument_list|(
name|maxReplicationLagInSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
name|mkBuilder
operator|.
name|setMongoDB
argument_list|(
name|mongoDB
argument_list|,
name|changesSize
argument_list|,
name|blobCacheSize
argument_list|)
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
literal|"Connected to database {}"
argument_list|,
name|mongoDB
argument_list|)
expr_stmt|;
block|}
name|mkBuilder
operator|.
name|setExecutor
argument_list|(
name|executor
argument_list|)
expr_stmt|;
name|mk
operator|=
name|mkBuilder
operator|.
name|open
argument_list|()
expr_stmt|;
comment|// If a shared data store register the repo id in the data store
if|if
condition|(
name|SharedDataStoreUtils
operator|.
name|isShared
argument_list|(
name|blobStore
argument_list|)
condition|)
block|{
try|try
block|{
name|String
name|repoId
init|=
name|ClusterRepositoryInfo
operator|.
name|createId
argument_list|(
name|mk
operator|.
name|getNodeStore
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|SharedDataStore
operator|)
name|blobStore
operator|)
operator|.
name|addMetadataRecord
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SharedDataStoreUtils
operator|.
name|SharedStoreRecordType
operator|.
name|REPOSITORY
operator|.
name|getNameFromId
argument_list|(
name|repoId
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Could not register a unique repositoryId"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|registerJMXBeans
argument_list|(
name|mk
operator|.
name|getNodeStore
argument_list|()
argument_list|)
expr_stmt|;
name|registerLastRevRecoveryJob
argument_list|(
name|mk
operator|.
name|getNodeStore
argument_list|()
argument_list|)
expr_stmt|;
name|NodeStore
name|store
decl_stmt|;
name|DocumentNodeStore
name|mns
init|=
name|mk
operator|.
name|getNodeStore
argument_list|()
decl_stmt|;
name|store
operator|=
name|mns
expr_stmt|;
name|observerTracker
operator|=
operator|new
name|ObserverTracker
argument_list|(
name|mns
argument_list|)
expr_stmt|;
name|observerTracker
operator|.
name|start
argument_list|(
name|context
operator|.
name|getBundleContext
argument_list|()
argument_list|)
expr_stmt|;
name|DocumentStore
name|ds
init|=
name|mk
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
name|Dictionary
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|props
init|=
operator|new
name|Hashtable
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|Constants
operator|.
name|SERVICE_PID
argument_list|,
name|DocumentNodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|.
name|put
argument_list|(
name|DESCRIPTION
argument_list|,
name|getMetadata
argument_list|(
name|ds
argument_list|)
argument_list|)
expr_stmt|;
name|reg
operator|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|registerService
argument_list|(
name|NodeStore
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
name|store
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|protected
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|observerTracker
operator|!=
literal|null
condition|)
block|{
name|observerTracker
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|bindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
throws|throws
name|IOException
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Initializing DocumentNodeStore with BlobStore [{}]"
argument_list|,
name|blobStore
argument_list|)
expr_stmt|;
name|this
operator|.
name|blobStore
operator|=
name|blobStore
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|unbindBlobStore
parameter_list|(
name|BlobStore
name|blobStore
parameter_list|)
block|{
name|this
operator|.
name|blobStore
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|bindDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|dataSource
operator|=
name|dataSource
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|unbindDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|dataSource
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|bindBlobDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|blobDataSource
operator|=
name|dataSource
expr_stmt|;
name|registerNodeStoreIfPossible
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"UnusedDeclaration"
argument_list|)
specifier|protected
name|void
name|unbindBlobDataSource
parameter_list|(
name|DataSource
name|dataSource
parameter_list|)
block|{
name|this
operator|.
name|blobDataSource
operator|=
literal|null
expr_stmt|;
name|unregisterNodeStore
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|unregisterNodeStore
parameter_list|()
block|{
for|for
control|(
name|Registration
name|r
range|:
name|registrations
control|)
block|{
name|r
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|reg
operator|!=
literal|null
condition|)
block|{
name|reg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|mk
operator|!=
literal|null
condition|)
block|{
name|mk
operator|.
name|dispose
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|executor
operator|!=
literal|null
condition|)
block|{
name|executor
operator|.
name|stop
argument_list|()
expr_stmt|;
name|executor
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|registerJMXBeans
parameter_list|(
specifier|final
name|DocumentNodeStore
name|store
parameter_list|)
throws|throws
name|IOException
block|{
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getNodeCacheStats
argument_list|()
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|store
operator|.
name|getNodeCacheStats
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getNodeChildrenCacheStats
argument_list|()
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|store
operator|.
name|getNodeChildrenCacheStats
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getDocChildrenCacheStats
argument_list|()
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|store
operator|.
name|getDocChildrenCacheStats
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|CacheStats
name|cs
range|:
name|store
operator|.
name|getDiffCacheStats
argument_list|()
control|)
block|{
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|cs
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|cs
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|DocumentStore
name|ds
init|=
name|store
operator|.
name|getDocumentStore
argument_list|()
decl_stmt|;
if|if
condition|(
name|ds
operator|.
name|getCacheStats
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CacheStatsMBean
operator|.
name|class
argument_list|,
name|ds
operator|.
name|getCacheStats
argument_list|()
argument_list|,
name|CacheStatsMBean
operator|.
name|TYPE
argument_list|,
name|ds
operator|.
name|getCacheStats
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|CheckpointMBean
operator|.
name|class
argument_list|,
operator|new
name|DocumentCheckpointMBean
argument_list|(
name|store
argument_list|)
argument_list|,
name|CheckpointMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store checkpoint management"
argument_list|)
argument_list|)
expr_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|DocumentNodeStoreMBean
operator|.
name|class
argument_list|,
name|store
operator|.
name|getMBean
argument_list|()
argument_list|,
name|DocumentNodeStoreMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store management"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|versionGcMaxAgeInSecs
init|=
name|toLong
argument_list|(
name|prop
argument_list|(
name|PROP_VER_GC_MAX_AGE
argument_list|)
argument_list|,
name|DEFAULT_VER_GC_MAX_AGE
argument_list|)
decl_stmt|;
specifier|final
name|long
name|blobGcMaxAgeInSecs
init|=
name|toLong
argument_list|(
name|prop
argument_list|(
name|PROP_BLOB_GC_MAX_AGE
argument_list|)
argument_list|,
name|DEFAULT_BLOB_GC_MAX_AGE
argument_list|)
decl_stmt|;
if|if
condition|(
name|store
operator|.
name|getBlobStore
argument_list|()
operator|instanceof
name|GarbageCollectableBlobStore
condition|)
block|{
name|BlobGarbageCollector
name|gc
init|=
operator|new
name|BlobGarbageCollector
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|collectGarbage
parameter_list|(
name|boolean
name|sweep
parameter_list|)
throws|throws
name|Exception
block|{
name|store
operator|.
name|createBlobGarbageCollector
argument_list|(
name|blobGcMaxAgeInSecs
argument_list|,
name|ClusterRepositoryInfo
operator|.
name|getId
argument_list|(
name|mk
operator|.
name|getNodeStore
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collectGarbage
argument_list|(
name|sweep
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|BlobGCMBean
operator|.
name|class
argument_list|,
operator|new
name|BlobGC
argument_list|(
name|gc
argument_list|,
name|executor
argument_list|)
argument_list|,
name|BlobGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store blob garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|RevisionGC
name|revisionGC
init|=
operator|new
name|RevisionGC
argument_list|(
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|store
operator|.
name|getVersionGarbageCollector
argument_list|()
operator|.
name|gc
argument_list|(
name|versionGcMaxAgeInSecs
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while executing the Version Garbage Collector"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|,
name|executor
argument_list|)
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|registerMBean
argument_list|(
name|whiteboard
argument_list|,
name|RevisionGCMBean
operator|.
name|class
argument_list|,
name|revisionGC
argument_list|,
name|RevisionGCMBean
operator|.
name|TYPE
argument_list|,
literal|"Document node store revision garbage collection"
argument_list|)
argument_list|)
expr_stmt|;
comment|//TODO Register JMX bean for Off Heap Cache stats
block|}
specifier|private
name|void
name|registerLastRevRecoveryJob
parameter_list|(
specifier|final
name|DocumentNodeStore
name|nodeStore
parameter_list|)
block|{
name|long
name|leaseTime
init|=
name|toLong
argument_list|(
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|PROP_REV_RECOVERY_INTERVAL
argument_list|)
argument_list|,
name|ClusterNodeInfo
operator|.
name|DEFAULT_LEASE_DURATION_MILLIS
argument_list|)
decl_stmt|;
name|Runnable
name|recoverJob
init|=
operator|new
name|Runnable
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
name|nodeStore
operator|.
name|getLastRevRecoveryAgent
argument_list|()
operator|.
name|performRecoveryIfNeeded
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|registrations
operator|.
name|add
argument_list|(
name|WhiteboardUtils
operator|.
name|scheduleWithFixedDelay
argument_list|(
name|whiteboard
argument_list|,
name|recoverJob
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
operator|.
name|toSeconds
argument_list|(
name|leaseTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Object
name|prop
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|prop
argument_list|(
name|propName
argument_list|,
name|PREFIX
operator|+
name|propName
argument_list|)
return|;
block|}
specifier|private
name|Object
name|prop
parameter_list|(
name|String
name|propName
parameter_list|,
name|String
name|fwkPropName
parameter_list|)
block|{
comment|//Prefer framework property first
name|Object
name|value
init|=
name|context
operator|.
name|getBundleContext
argument_list|()
operator|.
name|getProperty
argument_list|(
name|fwkPropName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
return|return
name|value
return|;
block|}
comment|//Fallback to one from config
return|return
name|context
operator|.
name|getProperties
argument_list|()
operator|.
name|get
argument_list|(
name|propName
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
index|[]
name|getMetadata
parameter_list|(
name|DocumentStore
name|ds
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
name|ds
operator|.
name|getMetadata
argument_list|()
argument_list|)
decl_stmt|;
name|meta
operator|.
name|put
argument_list|(
literal|"nodeStoreType"
argument_list|,
literal|"document"
argument_list|)
expr_stmt|;
name|String
index|[]
name|result
init|=
operator|new
name|String
index|[
name|meta
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|e
range|:
name|meta
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|result
index|[
name|i
operator|++
index|]
operator|=
name|e
operator|.
name|getKey
argument_list|()
operator|+
literal|"="
operator|+
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

