begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|stats
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexPlan
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|index
operator|.
name|FilterImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryIndexProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|NodeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|groups
operator|.
name|Tuple
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|spi
operator|.
name|ILoggingEvent
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|core
operator|.
name|read
operator|.
name|ListAppender
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|org
operator|.
name|assertj
operator|.
name|core
operator|.
name|api
operator|.
name|Assertions
import|;
end_import

begin_comment
comment|/**  * Tests for cases where two or more indices return a similar cost estimation for the same query  */
end_comment

begin_class
specifier|public
class|class
name|QuerySimilarCostTest
extends|extends
name|AbstractQueryTest
block|{
specifier|private
name|TestIndexProvider
name|testIndexProvider
init|=
operator|new
name|TestIndexProvider
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|SQL2Parser
name|p
init|=
name|SQL2ParserTest
operator|.
name|createTestSQL2Parser
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexEditorProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|PropertyIndexProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|testIndexProvider
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
comment|/*     Given 2 index plan with similar cost     we expect a log at debug level to intimate user to either modify either of the indices or the query      */
annotation|@
name|Test
specifier|public
name|void
name|testSimilarCostIndices
parameter_list|()
throws|throws
name|Exception
block|{
name|Logger
name|queryImplLogger
init|=
operator|(
name|Logger
operator|)
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|QueryImpl
operator|.
name|class
argument_list|)
decl_stmt|;
name|queryImplLogger
operator|.
name|setLevel
argument_list|(
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
operator|.
name|DEBUG
argument_list|)
expr_stmt|;
name|ListAppender
argument_list|<
name|ILoggingEvent
argument_list|>
name|listAppender
init|=
operator|new
name|ListAppender
argument_list|<>
argument_list|()
decl_stmt|;
name|listAppender
operator|.
name|start
argument_list|()
expr_stmt|;
name|queryImplLogger
operator|.
name|addAppender
argument_list|(
name|listAppender
argument_list|)
expr_stmt|;
name|NodeUtil
name|node
init|=
operator|new
name|NodeUtil
argument_list|(
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|uuid
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|node
operator|.
name|setString
argument_list|(
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|executeQuery
argument_list|(
literal|"SELECT * FROM [nt:base] WHERE [jcr:uuid] is not null"
argument_list|,
name|SQL2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|String
name|expectedLogMessage
init|=
name|String
operator|.
name|format
argument_list|(
literal|"selected index %s "
operator|+
literal|"with plan testIndexPlan1 and %s with plan testIndexPlan2 have similar costs 11.0 and 11.0 "
operator|+
literal|"for query Filter(query=SELECT * FROM [nt:base] WHERE [jcr:uuid] is not null, path=*, property=[jcr:uuid=[is not null]]) - check query explanation / index definitions"
argument_list|,
name|testIndexProvider
operator|.
name|index
argument_list|,
name|testIndexProvider
operator|.
name|index
argument_list|)
decl_stmt|;
name|Assertions
operator|.
name|assertThat
argument_list|(
name|listAppender
operator|.
name|list
argument_list|)
operator|.
name|extracting
argument_list|(
name|ILoggingEvent
operator|::
name|getMessage
argument_list|,
name|ILoggingEvent
operator|::
name|getLevel
argument_list|)
operator|.
name|contains
argument_list|(
name|Tuple
operator|.
name|tuple
argument_list|(
name|expectedLogMessage
argument_list|,
name|Level
operator|.
name|DEBUG
argument_list|)
argument_list|)
expr_stmt|;
name|queryImplLogger
operator|.
name|addAppender
argument_list|(
name|listAppender
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|TestIndexProvider
implements|implements
name|QueryIndexProvider
block|{
name|TestIndex
name|index
init|=
operator|new
name|TestIndex
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
annotation|@
name|NotNull
name|List
argument_list|<
name|?
extends|extends
name|QueryIndex
argument_list|>
name|getQueryIndexes
parameter_list|(
name|NodeState
name|nodeState
parameter_list|)
block|{
return|return
name|ImmutableList
operator|.
expr|<
name|QueryIndex
operator|>
name|of
argument_list|(
name|index
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|TestIndex
implements|implements
name|QueryIndex
implements|,
name|QueryIndex
operator|.
name|AdvancedQueryIndex
block|{
name|int
name|invocationCount
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|double
name|getMinimumCost
parameter_list|()
block|{
return|return
name|PropertyIndexPlan
operator|.
name|COST_OVERHEAD
operator|+
literal|0.1
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getCost
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
name|invocationCount
operator|++
expr_stmt|;
return|return
name|Double
operator|.
name|POSITIVE_INFINITY
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlan
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
literal|"test-index"
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|getPlans
parameter_list|(
name|Filter
name|filter
parameter_list|,
name|List
argument_list|<
name|QueryIndex
operator|.
name|OrderEntry
argument_list|>
name|sortOrder
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
name|IndexPlan
operator|.
name|Builder
name|b
init|=
operator|new
name|IndexPlan
operator|.
name|Builder
argument_list|()
decl_stmt|;
name|Filter
name|f
init|=
operator|new
name|FilterImpl
argument_list|(
literal|null
argument_list|,
literal|"SELECT * FROM [nt:file]"
argument_list|,
operator|new
name|QueryEngineSettings
argument_list|()
argument_list|)
decl_stmt|;
name|IndexPlan
name|plan1
init|=
name|b
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|10
argument_list|)
operator|.
name|setPlanName
argument_list|(
literal|"testIndexPlan1"
argument_list|)
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|IndexPlan
name|plan2
init|=
name|b
operator|.
name|setEstimatedEntryCount
argument_list|(
literal|10
argument_list|)
operator|.
name|setPlanName
argument_list|(
literal|"testIndexPlan2"
argument_list|)
operator|.
name|setFilter
argument_list|(
name|f
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
name|indexList
init|=
operator|new
name|ArrayList
argument_list|<
name|QueryIndex
operator|.
name|IndexPlan
argument_list|>
argument_list|()
decl_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|plan1
argument_list|)
expr_stmt|;
name|indexList
operator|.
name|add
argument_list|(
name|plan2
argument_list|)
expr_stmt|;
return|return
name|indexList
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPlanDescription
parameter_list|(
name|QueryIndex
operator|.
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|root
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cursor
name|query
parameter_list|(
name|QueryIndex
operator|.
name|IndexPlan
name|plan
parameter_list|,
name|NodeState
name|rootState
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

