begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|search
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|FieldNamesTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|checkPropertyFieldNames
parameter_list|()
block|{
name|assertPropertyFieldName
argument_list|(
literal|"abc"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a:b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a/b"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a/b:c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a:b/c"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT_RELATIVE_NODE
operator|+
literal|"a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
name|FieldNames
operator|.
name|ANALYZED_FIELD_PREFIX
operator|+
literal|"a"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
name|FieldNames
operator|.
name|FULLTEXT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|":abc"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"abc_facet"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a:b_facet"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a/b_facet"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a/b:c_facet"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertPropertyFieldName
argument_list|(
literal|"a:b/c_facet"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertPropertyFieldName
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|expected
parameter_list|)
block|{
name|Assert
operator|.
name|assertEquals
argument_list|(
literal|"Check for field name "
operator|+
name|name
operator|+
literal|" doesn't meet expectation - "
operator|+
name|expected
argument_list|,
name|FieldNames
operator|.
name|isPropertyField
argument_list|(
name|name
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

