begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|progress
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|counter
operator|.
name|jmx
operator|.
name|NodeCounter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStateUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|PathFilter
operator|.
name|PROP_EXCLUDED_PATHS
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|PathFilter
operator|.
name|PROP_INCLUDED_PATHS
import|;
end_import

begin_class
specifier|public
class|class
name|NodeCounterMBeanEstimator
implements|implements
name|NodeCountEstimator
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|NodeCounter
name|counter
decl_stmt|;
specifier|private
specifier|final
name|NodeStore
name|nodeStore
decl_stmt|;
specifier|public
name|NodeCounterMBeanEstimator
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|)
block|{
name|this
argument_list|(
name|nodeStore
argument_list|,
operator|new
name|NodeCounter
argument_list|(
name|nodeStore
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|NodeCounterMBeanEstimator
parameter_list|(
name|NodeStore
name|nodeStore
parameter_list|,
name|NodeCounter
name|nodeCounter
parameter_list|)
block|{
name|this
operator|.
name|nodeStore
operator|=
name|nodeStore
expr_stmt|;
name|this
operator|.
name|counter
operator|=
name|nodeCounter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getEstimatedNodeCount
parameter_list|(
name|String
name|basePath
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|indexPaths
parameter_list|)
block|{
name|PathPerimeter
name|pp
init|=
operator|new
name|PathPerimeter
argument_list|()
decl_stmt|;
name|pp
operator|.
name|compute
argument_list|(
name|basePath
argument_list|,
name|indexPaths
argument_list|)
expr_stmt|;
if|if
condition|(
name|pp
operator|.
name|includeAll
condition|)
block|{
return|return
name|counter
operator|.
name|getEstimatedNodeCount
argument_list|(
name|basePath
argument_list|)
return|;
block|}
else|else
block|{
name|long
name|totalCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|String
name|path
range|:
name|pp
operator|.
name|includes
control|)
block|{
name|long
name|estimate
init|=
name|counter
operator|.
name|getEstimatedNodeCount
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|estimate
operator|>
literal|0
condition|)
block|{
name|totalCount
operator|+=
name|estimate
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|path
range|:
name|pp
operator|.
name|excludes
control|)
block|{
name|long
name|estimate
init|=
name|counter
operator|.
name|getEstimatedNodeCount
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|estimate
operator|>
literal|0
condition|)
block|{
name|totalCount
operator|-=
name|estimate
expr_stmt|;
block|}
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Paths to be traversed {}"
argument_list|,
name|pp
argument_list|)
expr_stmt|;
return|return
name|totalCount
return|;
block|}
block|}
specifier|private
class|class
name|PathPerimeter
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|includes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|excludes
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
name|boolean
name|includeAll
decl_stmt|;
specifier|public
name|void
name|compute
parameter_list|(
name|String
name|basePath
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|indexPaths
parameter_list|)
block|{
name|NodeState
name|root
init|=
name|nodeStore
operator|.
name|getRoot
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|indexPaths
control|)
block|{
name|NodeState
name|idxState
init|=
name|NodeStateUtils
operator|.
name|getNode
argument_list|(
name|root
argument_list|,
name|indexPath
argument_list|)
decl_stmt|;
comment|//No include exclude specified so include all
if|if
condition|(
operator|!
name|idxState
operator|.
name|hasProperty
argument_list|(
name|PROP_INCLUDED_PATHS
argument_list|)
operator|&&
operator|!
name|idxState
operator|.
name|hasProperty
argument_list|(
name|PROP_EXCLUDED_PATHS
argument_list|)
condition|)
block|{
name|includeAll
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|Iterables
operator|.
name|addAll
argument_list|(
name|includes
argument_list|,
name|idxState
operator|.
name|getStrings
argument_list|(
name|PROP_INCLUDED_PATHS
argument_list|)
argument_list|)
expr_stmt|;
name|Iterables
operator|.
name|addAll
argument_list|(
name|excludes
argument_list|,
name|idxState
operator|.
name|getStrings
argument_list|(
name|PROP_EXCLUDED_PATHS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|includes
operator|.
name|add
argument_list|(
name|basePath
argument_list|)
expr_stmt|;
block|}
name|PathUtils
operator|.
name|unifyInExcludes
argument_list|(
name|includes
argument_list|,
name|excludes
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"includedPath : %s, excludedPaths : %s"
argument_list|,
name|includes
argument_list|,
name|excludes
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

