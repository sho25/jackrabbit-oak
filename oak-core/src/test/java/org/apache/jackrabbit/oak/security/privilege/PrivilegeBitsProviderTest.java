begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|privilege
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|AbstractSecurityTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * PrivilegeDefinitionStoreTest... TODO  */
end_comment

begin_class
specifier|public
class|class
name|PrivilegeBitsProviderTest
extends|extends
name|AbstractSecurityTest
implements|implements
name|PrivilegeConstants
block|{
specifier|private
name|PrivilegeBitsProvider
name|bitsProvider
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
name|bitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegesTree
parameter_list|()
block|{
name|assertNotNull
argument_list|(
name|bitsProvider
operator|.
name|getPrivilegesTree
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PRIVILEGES_PATH
argument_list|,
name|bitsProvider
operator|.
name|getPrivilegesTree
argument_list|()
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBits
parameter_list|()
block|{
name|PrivilegeBits
name|bits
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|bits
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|mod
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_REMOVE_CHILD_NODES
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bits
argument_list|,
name|mod
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBitsFromInvalidPrivilege
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
literal|"invalid1"
argument_list|,
literal|"invalid2"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetBitsFromEmpty
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|PrivilegeBits
operator|.
name|EMPTY
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetPrivilegeNames
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PrivilegeBits
name|bits
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|bits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JCR_READ_ACCESS_CONTROL
argument_list|,
name|names
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAggregation
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PrivilegeBits
name|writeBits
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ADD_CHILD_NODES
argument_list|,
name|JCR_REMOVE_CHILD_NODES
argument_list|,
name|JCR_REMOVE_NODE
argument_list|,
name|JCR_MODIFY_PROPERTIES
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|writeBits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|JCR_WRITE
argument_list|,
name|names
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnknownAggregation
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PrivilegeBits
name|bits
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|REP_WRITE
argument_list|,
name|JCR_LIFECYCLE_MANAGEMENT
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|bits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRedundantAggregation
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|PrivilegeBits
name|writeBits
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|REP_WRITE
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|names
init|=
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|writeBits
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REP_WRITE
argument_list|,
name|names
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
name|writeBits
operator|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|REP_WRITE
argument_list|,
name|JCR_WRITE
argument_list|)
expr_stmt|;
name|names
operator|=
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|writeBits
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|names
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|REP_WRITE
argument_list|,
name|names
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAll
parameter_list|()
block|{
name|PrivilegeBits
name|all
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ALL
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|all
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|all
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAllAggregation
parameter_list|()
block|{
name|PrivilegeBits
name|all
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|JCR_ALL
argument_list|)
decl_stmt|;
name|PrivilegeDefinitionReader
name|reader
init|=
operator|new
name|PrivilegeDefinitionReader
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|allAggregates
init|=
name|reader
operator|.
name|readDefinition
argument_list|(
name|JCR_ALL
argument_list|)
operator|.
name|getDeclaredAggregateNames
argument_list|()
decl_stmt|;
name|PrivilegeBits
name|all2
init|=
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|allAggregates
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|allAggregates
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|all
argument_list|,
name|all2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|JCR_ALL
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|all2
argument_list|)
argument_list|)
expr_stmt|;
name|PrivilegeBits
name|bits
init|=
name|PrivilegeBits
operator|.
name|getInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|allAggregates
control|)
block|{
name|bits
operator|.
name|add
argument_list|(
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|assertEquals
argument_list|(
name|all
argument_list|,
name|bits
operator|.
name|unmodifiable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

