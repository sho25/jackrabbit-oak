begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|MicroKernelIT
extends|extends
name|AbstractMicroKernelIT
block|{
specifier|public
name|MicroKernelIT
parameter_list|(
name|MicroKernelFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|addInitialTestContent
parameter_list|()
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test\" : {"
operator|+
literal|"\"stringProp\":\"stringVal\","
operator|+
literal|"\"intProp\":42,"
operator|+
literal|"\"floatProp\":42.2,"
operator|+
literal|"\"booleanProp\": true,"
operator|+
literal|"\"multiIntProp\":[1,2,3]}"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|revisionOps
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|head
argument_list|)
expr_stmt|;
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{         }
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// get history since 'now'
name|JSONArray
name|array
init|=
name|parseJSONArray
argument_list|(
name|mk
operator|.
name|getRevisionHistory
argument_list|(
name|now
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
comment|// history should be empty since there was no commit since 'now'
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// get oldest available revision
name|array
operator|=
name|parseJSONArray
argument_list|(
name|mk
operator|.
name|getRevisionHistory
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// there should be exactly 1 revision
name|assertEquals
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|long
name|ts0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|int
name|NUM_COMMITS
init|=
literal|100
decl_stmt|;
comment|// perform NUM_COMMITS commits
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COMMITS
condition|;
name|i
operator|++
control|)
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"child"
operator|+
name|i
operator|+
literal|"\":{}"
argument_list|,
literal|null
argument_list|,
literal|"commit#"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
comment|// get oldest available revision
name|array
operator|=
name|parseJSONArray
argument_list|(
name|mk
operator|.
name|getRevisionHistory
argument_list|(
name|ts0
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// there should be exactly NUM_COMMITS revisions
name|assertEquals
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
name|NUM_COMMITS
argument_list|)
expr_stmt|;
name|long
name|previousTS
init|=
name|ts0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COMMITS
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|rev
init|=
name|getObjectArrayEntry
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertPropertyExists
argument_list|(
name|rev
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPropertyExists
argument_list|(
name|rev
argument_list|,
literal|"ts"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// verify commit msg
name|assertPropertyValue
argument_list|(
name|rev
argument_list|,
literal|"msg"
argument_list|,
literal|"commit#"
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// verify chronological order
name|long
name|ts
init|=
operator|(
name|Long
operator|)
name|resolveValue
argument_list|(
name|rev
argument_list|,
literal|"ts"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|previousTS
operator|<=
name|ts
argument_list|)
expr_stmt|;
name|previousTS
operator|=
name|ts
expr_stmt|;
block|}
comment|// last revision should be the current head revision
name|assertPropertyValue
argument_list|(
name|getObjectArrayEntry
argument_list|(
name|array
argument_list|,
name|array
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|"id"
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|fromRev
init|=
operator|(
name|String
operator|)
name|resolveValue
argument_list|(
name|getObjectArrayEntry
argument_list|(
name|array
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
name|String
name|toRev
init|=
operator|(
name|String
operator|)
name|resolveValue
argument_list|(
name|getObjectArrayEntry
argument_list|(
name|array
argument_list|,
name|array
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|"id"
argument_list|)
decl_stmt|;
comment|// verify journal
name|array
operator|=
name|parseJSONArray
argument_list|(
name|mk
operator|.
name|getJournal
argument_list|(
name|fromRev
argument_list|,
name|toRev
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// there should be exactly NUM_COMMITS entries
name|assertEquals
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
name|NUM_COMMITS
argument_list|)
expr_stmt|;
comment|// verify that 1st and last rev match fromRev and toRev
name|assertPropertyValue
argument_list|(
name|getObjectArrayEntry
argument_list|(
name|array
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"id"
argument_list|,
name|fromRev
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|getObjectArrayEntry
argument_list|(
name|array
argument_list|,
name|array
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|,
literal|"id"
argument_list|,
name|toRev
argument_list|)
expr_stmt|;
name|previousTS
operator|=
name|ts0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COMMITS
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|rev
init|=
name|getObjectArrayEntry
argument_list|(
name|array
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|assertPropertyExists
argument_list|(
name|rev
argument_list|,
literal|"id"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPropertyExists
argument_list|(
name|rev
argument_list|,
literal|"ts"
argument_list|,
name|Long
operator|.
name|class
argument_list|)
expr_stmt|;
name|assertPropertyExists
argument_list|(
name|rev
argument_list|,
literal|"changes"
argument_list|,
name|String
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// TODO verify json diff
comment|// verify commit msg
name|assertPropertyValue
argument_list|(
name|rev
argument_list|,
literal|"msg"
argument_list|,
literal|"commit#"
operator|+
name|i
argument_list|)
expr_stmt|;
comment|// verify chronological order
name|long
name|ts
init|=
operator|(
name|Long
operator|)
name|resolveValue
argument_list|(
name|rev
argument_list|,
literal|"ts"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|previousTS
operator|<=
name|ts
argument_list|)
expr_stmt|;
name|previousTS
operator|=
name|ts
expr_stmt|;
block|}
comment|// test with 'negative' range (from and to swapped)
name|array
operator|=
name|parseJSONArray
argument_list|(
name|mk
operator|.
name|getJournal
argument_list|(
name|toRev
argument_list|,
name|fromRev
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// there should be exactly 0 entries
name|assertEquals
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|diff
parameter_list|()
block|{
name|String
name|rev0
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|rev1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"+\"enemenemuh\":{}"
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// get reverse diff
name|String
name|reverseDiff
init|=
name|mk
operator|.
name|diff
argument_list|(
name|rev1
argument_list|,
name|rev0
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|reverseDiff
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|reverseDiff
operator|.
name|length
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// commit reverse diff
name|String
name|rev2
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
name|reverseDiff
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|// diff of rev0->rev2 should be empty
name|assertEquals
argument_list|(
name|mk
operator|.
name|diff
argument_list|(
name|rev0
argument_list|,
name|rev2
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|snapshotIsolation
parameter_list|()
block|{
specifier|final
name|int
name|NUM_COMMITS
init|=
literal|1000
decl_stmt|;
name|String
index|[]
name|revs
init|=
operator|new
name|String
index|[
name|NUM_COMMITS
index|]
decl_stmt|;
comment|// perform NUM_COMMITS commits
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COMMITS
condition|;
name|i
operator|++
control|)
block|{
name|revs
index|[
name|i
index|]
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/test"
argument_list|,
literal|"^\"cnt\":"
operator|+
name|i
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_COMMITS
condition|;
name|i
operator|++
control|)
block|{
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|revs
index|[
name|i
index|]
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"cnt"
argument_list|,
operator|(
name|long
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|waitForCommit
parameter_list|()
block|{
specifier|final
name|long
name|TIMEOUT
init|=
literal|100
decl_stmt|;
comment|// concurrent commit
name|String
name|oldHead
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|Thread
name|t
init|=
operator|new
name|Thread
argument_list|(
literal|""
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|sleep
argument_list|(
name|TIMEOUT
operator|/
literal|2
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{                 }
name|String
name|newHead
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\":{}"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|setName
argument_list|(
name|newHead
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|String
name|newHead
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newHead
operator|=
name|mk
operator|.
name|waitForCommit
argument_list|(
name|oldHead
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|t
operator|.
name|join
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{         }
name|assertFalse
argument_list|(
name|oldHead
operator|.
name|equals
argument_list|(
name|newHead
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHead
argument_list|,
name|t
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|newHead
argument_list|,
name|mk
operator|.
name|getHeadRevision
argument_list|()
argument_list|)
expr_stmt|;
comment|// the current head is already more recent than oldRevision;
comment|// the method should return immediately (TIMEOUT not applied)
name|String
name|currentHead
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|newHead
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|newHead
operator|=
name|mk
operator|.
name|waitForCommit
argument_list|(
name|oldHead
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|<
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{         }
name|assertEquals
argument_list|(
name|currentHead
argument_list|,
name|newHead
argument_list|)
expr_stmt|;
comment|// there's no more recent head available;
comment|// the method should wait TIMEOUT ms
name|currentHead
operator|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
expr_stmt|;
name|newHead
operator|=
literal|null
expr_stmt|;
try|try
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|newHead
operator|=
name|mk
operator|.
name|waitForCommit
argument_list|(
name|currentHead
argument_list|,
name|TIMEOUT
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
operator|(
name|t1
operator|-
name|t0
operator|)
operator|>=
name|TIMEOUT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|ignore
parameter_list|)
block|{         }
name|assertEquals
argument_list|(
name|currentHead
argument_list|,
name|newHead
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addAndMove
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/root\":{}\n"
operator|+
literal|"+\"/root/a\":{}\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/root/a/b\":{}\n"
operator|+
literal|">\"/root/a\":\"/root/c\"\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/root/a"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/root/c/b"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addAndCopy
parameter_list|()
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"x\":{}\n"
operator|+
literal|"+\"y\":{}\n"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"x/a\":{}\n"
operator|+
literal|"*\"x\":\"y/x1\"\n"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/x/a"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/y/x1/a"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|copyToDescendant
parameter_list|()
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"test/child\":{}\n"
operator|+
literal|"*\"test\":\"test/copy\"\n"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/test/child"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/test/copy/child"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|":childNodeCount"
argument_list|,
literal|2l
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"copy/:childNodeCount"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"copy/child/:childNodeCount"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/root\":{} +\"/root/N4\":{} *\"/root/N4\":\"/root/N4/N5\""
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/root"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/root/N4"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/root/N4/N5"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|obj
operator|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/root"
argument_list|,
literal|null
argument_list|,
literal|99
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|":childNodeCount"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"N4/:childNodeCount"
argument_list|,
literal|1l
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"N4/N5/:childNodeCount"
argument_list|,
literal|0l
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodes
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
comment|// verify initial content
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/"
argument_list|,
name|head
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"test/stringProp"
argument_list|,
literal|"stringVal"
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"test/intProp"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"test/floatProp"
argument_list|,
literal|42.2
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"test/booleanProp"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"test/multiIntProp"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodesNonExistingPath
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|nonExistingPath
init|=
literal|"/test/"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
name|nonExistingPath
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
name|nonExistingPath
argument_list|,
name|head
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getNodesNonExistingRevision
parameter_list|()
block|{
name|String
name|nonExistingRev
init|=
literal|"12345678"
decl_stmt|;
try|try
block|{
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/test"
argument_list|,
name|nonExistingRev
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Success with non-existing revision: "
operator|+
name|nonExistingRev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
try|try
block|{
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/test"
argument_list|,
name|nonExistingRev
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Success with non-existing revision: "
operator|+
name|nonExistingRev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|missingName
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/test"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|String
name|path
init|=
literal|"/test/"
decl_stmt|;
name|mk
operator|.
name|getNodes
argument_list|(
name|path
argument_list|,
name|head
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Success with invalid path: "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
comment|// expected
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|addNodeWithRelativePath
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"foo\" : {} \n+\"foo/bar\" : {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/foo"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/foo/bar"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|commitWithEmptyPath
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/ene\" : {}\n+\"/ene/mene\" : {}\n+\"/ene/mene/muh\" : {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/ene/mene/muh"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addPropertyWithRelativePath
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"fuu\" : {} \n"
operator|+
literal|"^\"fuu/bar\" : 42"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|"/fuu"
argument_list|,
name|head
argument_list|)
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"bar"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addMultipleNodes
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|long
name|millis
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|node1
init|=
literal|"n1_"
operator|+
name|millis
decl_stmt|;
name|String
name|node2
init|=
literal|"n2_"
operator|+
name|millis
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|node1
operator|+
literal|"\" : {} \n+\""
operator|+
name|node2
operator|+
literal|"\" : {}\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|'/'
operator|+
name|node1
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|'/'
operator|+
name|node2
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addDeepNodes
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : {} \n"
operator|+
literal|"+\"a/b\" : {} \n"
operator|+
literal|"+\"a/b/c\" : {} \n"
operator|+
literal|"+\"a/b/c/d\" : {} \n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/a"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/a/b"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/a/b/c"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/a/b/c/d"
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|addItemsIncrementally
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|node
init|=
literal|"n_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|node
operator|+
literal|"\" : {} \n"
operator|+
literal|"+\""
operator|+
name|node
operator|+
literal|"/child1\" : {} \n"
operator|+
literal|"+\""
operator|+
name|node
operator|+
literal|"/child2\" : {} \n"
operator|+
literal|"+\""
operator|+
name|node
operator|+
literal|"/child1/grandchild11\" : {} \n"
operator|+
literal|"^\""
operator|+
name|node
operator|+
literal|"/prop1\" : 41\n"
operator|+
literal|"^\""
operator|+
name|node
operator|+
literal|"/child1/prop2\" : 42\n"
operator|+
literal|"^\""
operator|+
name|node
operator|+
literal|"/child1/grandchild11/prop3\" : 43"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|'/'
operator|+
name|node
argument_list|,
name|head
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"prop1"
argument_list|,
literal|41L
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|":childNodeCount"
argument_list|,
literal|2L
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"child1/prop2"
argument_list|,
literal|42L
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"child1/:childNodeCount"
argument_list|,
literal|1L
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"child1/grandchild11/prop3"
argument_list|,
literal|43L
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"child1/grandchild11/:childNodeCount"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|"child2/:childNodeCount"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeNode
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|node
init|=
literal|"removeNode_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|node
operator|+
literal|"\" : {\"child\":{}}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|'/'
operator|+
name|node
argument_list|,
literal|"-\"child\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|'/'
operator|+
name|node
argument_list|,
name|head
argument_list|)
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|":childNodeCount"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|moveNode
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|String
name|node
init|=
literal|"moveNode_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|movedNode
init|=
literal|"movedNode_"
operator|+
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|node
operator|+
literal|"\" : {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|">\""
operator|+
name|node
operator|+
literal|"\" : \""
operator|+
name|movedNode
operator|+
literal|'\"'
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|'/'
operator|+
name|node
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|'/'
operator|+
name|movedNode
argument_list|,
name|head
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|overwritingMove
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : {} \n+\"b\" : {} \n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|">\"a\" : \"b\"  "
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|conflictingMove
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : {} \n+\"b\" : {}\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|r1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|">\"a\" : \"b/a\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/a"
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/b"
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/b/a"
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|">\"b\" : \"a/b\""
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|conflictingAddDelete
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\"a\" : {} \n+\"b\" : {}\n"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|String
name|r1
init|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"b\" \n +\"a/x\" : {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/b"
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/a"
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/a/x"
argument_list|,
name|r1
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"-\"a\" \n +\"b/x\" : {}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|fail
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// expected
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|removeProperty
parameter_list|()
block|{
name|String
name|head
init|=
name|mk
operator|.
name|getHeadRevision
argument_list|()
decl_stmt|;
name|long
name|t
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|node
init|=
literal|"removeProperty_"
operator|+
name|t
decl_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"+\""
operator|+
name|node
operator|+
literal|"\" : {\"prop\":\"value\"}"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|head
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|"/"
argument_list|,
literal|"^\""
operator|+
name|node
operator|+
literal|"/prop\" : null"
argument_list|,
name|head
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|JSONObject
name|obj
init|=
name|parseJSONObject
argument_list|(
name|mk
operator|.
name|getNodes
argument_list|(
literal|'/'
operator|+
name|node
argument_list|,
name|head
argument_list|)
argument_list|)
decl_stmt|;
name|assertPropertyValue
argument_list|(
name|obj
argument_list|,
literal|":childNodeCount"
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|branchAndMerge
parameter_list|()
block|{
comment|// make sure /branch doesn't exist in head
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/branch"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// create a branch on head
name|String
name|branchRev
init|=
name|mk
operator|.
name|branch
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|// add a node /branch in branchRev
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/branch\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// make sure /branch doesn't exist in head
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/branch"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure /branch does exist in branchRev
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/branch"
argument_list|,
name|branchRev
argument_list|)
argument_list|)
expr_stmt|;
comment|// add a node /branch/foo in branchRev
name|branchRev
operator|=
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/branch/foo\":{}"
argument_list|,
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// make sure branchRev doesn't show up in revision history
name|String
name|hist
init|=
name|mk
operator|.
name|getRevisionHistory
argument_list|(
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|JSONArray
name|ar
init|=
name|parseJSONArray
argument_list|(
name|hist
argument_list|)
decl_stmt|;
for|for
control|(
name|Object
name|entry
range|:
name|ar
control|)
block|{
name|assertTrue
argument_list|(
name|entry
operator|instanceof
name|JSONObject
argument_list|)
expr_stmt|;
name|JSONObject
name|rev
init|=
operator|(
name|JSONObject
operator|)
name|entry
decl_stmt|;
name|assertFalse
argument_list|(
name|branchRev
operator|.
name|equals
argument_list|(
name|rev
operator|.
name|get
argument_list|(
literal|"id"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// add a node /test123 in head
name|mk
operator|.
name|commit
argument_list|(
literal|""
argument_list|,
literal|"+\"/test123\":{}"
argument_list|,
literal|null
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// make sure /test123 doesn't exist in branchRev
name|assertFalse
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/test123"
argument_list|,
name|branchRev
argument_list|)
argument_list|)
expr_stmt|;
comment|// merge branchRev with head
name|mk
operator|.
name|merge
argument_list|(
name|branchRev
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// make sure /test123 still exists in head
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/test123"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
comment|// make sure /branch/foo does now exist in head
name|assertTrue
argument_list|(
name|mk
operator|.
name|nodeExists
argument_list|(
literal|"/branch/foo"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

