begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|evaluation
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|jackrabbit
operator|.
name|authorization
operator|.
name|AccessControlUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|ReadOnlyVersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|version
operator|.
name|VersionEditorProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|util
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|NodeTypeConstants
operator|.
name|NODE_TYPES_PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_comment
comment|/**  * Tests related to permission evaluation within the version storage.  */
end_comment

begin_class
specifier|public
class|class
name|VersionStorageTest
extends|extends
name|AbstractOakCoreTest
block|{
specifier|private
name|String
name|vhPath
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
comment|// make sure the version storage has been setup
name|Tree
name|a
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/a"
argument_list|)
decl_stmt|;
name|TreeUtil
operator|.
name|addMixin
argument_list|(
name|a
argument_list|,
name|JcrConstants
operator|.
name|MIX_VERSIONABLE
argument_list|,
name|root
operator|.
name|getTree
argument_list|(
name|NODE_TYPES_PATH
argument_list|)
argument_list|,
name|adminSession
operator|.
name|getAuthInfo
argument_list|()
operator|.
name|getUserID
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|Tree
name|vs
init|=
name|root
operator|.
name|getTree
argument_list|(
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vs
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|vhUUID
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|a
argument_list|,
name|VersionConstants
operator|.
name|JCR_VERSIONHISTORY
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|vhUUID
argument_list|)
expr_stmt|;
name|String
name|versionableUuid
init|=
name|TreeUtil
operator|.
name|getString
argument_list|(
name|a
argument_list|,
name|JcrConstants
operator|.
name|JCR_UUID
argument_list|)
decl_stmt|;
name|vhPath
operator|=
name|getVersionHistoryPath
argument_list|(
name|versionableUuid
argument_list|,
name|vs
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|getVersionHistoryPath
parameter_list|(
name|String
name|vUUID
parameter_list|,
specifier|final
name|Tree
name|vs
parameter_list|)
block|{
name|ReadOnlyVersionManager
name|vMgr
init|=
operator|new
name|ReadOnlyVersionManager
argument_list|()
block|{
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Tree
name|getVersionStorage
parameter_list|()
block|{
return|return
name|vs
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|Root
name|getWorkspaceRoot
parameter_list|()
block|{
return|return
name|root
return|;
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|protected
name|ReadOnlyNodeTypeManager
name|getNodeTypeManager
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
decl_stmt|;
return|return
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
operator|+
literal|'/'
operator|+
name|vMgr
operator|.
name|getVersionHistoryPath
argument_list|(
name|vUUID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
name|AccessControlManager
name|acMgr
init|=
name|getAccessControlManager
argument_list|(
name|root
argument_list|)
decl_stmt|;
name|JackrabbitAccessControlList
name|acl
init|=
name|AccessControlUtils
operator|.
name|getAccessControlList
argument_list|(
name|acMgr
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
for|for
control|(
name|AccessControlEntry
name|ace
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|testPrincipal
operator|.
name|equals
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
literal|"/"
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Oak
name|withEditors
parameter_list|(
name|Oak
name|oak
parameter_list|)
block|{
return|return
name|oak
operator|.
name|with
argument_list|(
operator|new
name|VersionEditorProvider
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|vs
init|=
name|getTestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|vs
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionStorage2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Tree
name|vs
init|=
name|getTestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vs
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|vs
init|=
name|getTestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|vhPath
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|vs
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetVersionHistory2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Tree
name|vs
init|=
name|getTestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|vhPath
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|vs
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenCountOnVersionStorage
parameter_list|()
throws|throws
name|Exception
block|{
name|Tree
name|vs
init|=
name|getTestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
argument_list|)
decl_stmt|;
name|vs
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetChildrenCountOnVersionStorage2
parameter_list|()
throws|throws
name|Exception
block|{
name|setupPermission
argument_list|(
literal|"/"
argument_list|,
name|testPrincipal
argument_list|,
literal|true
argument_list|,
name|PrivilegeConstants
operator|.
name|JCR_READ
argument_list|)
expr_stmt|;
name|Tree
name|vs
init|=
name|getTestRoot
argument_list|()
operator|.
name|getTree
argument_list|(
name|VersionConstants
operator|.
name|VERSION_STORE_PATH
argument_list|)
decl_stmt|;
name|vs
operator|.
name|getChildrenCount
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

