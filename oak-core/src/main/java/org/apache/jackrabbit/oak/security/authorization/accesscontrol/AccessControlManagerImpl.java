begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|UnsupportedRepositoryOperationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Value
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|query
operator|.
name|Query
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlPolicyIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Strings
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableSet
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|JackrabbitAccessControlPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|authorization
operator|.
name|PrivilegeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|ItemBasedPrincipal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|commons
operator|.
name|iterator
operator|.
name|AccessControlPolicyIteratorAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|namepath
operator|.
name|NamePathMapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|ReadOnlyNodeTypeManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tree
operator|.
name|TreeUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|PrincipalRestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|QueryConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|ConfigurationParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ACE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|AbstractAccessControlManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ImmutableACL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|PolicyOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|accesscontrol
operator|.
name|ReadPolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|PermissionConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|permission
operator|.
name|Permissions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|Restriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authorization
operator|.
name|restriction
operator|.
name|RestrictionProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBits
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|privilege
operator|.
name|PrivilegeBitsProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|xml
operator|.
name|ImportBehavior
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|ISO9075
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|util
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_comment
comment|/**  * Default implementation of the {@code JackrabbitAccessControlManager} interface.  * This implementation covers both editing access control content by path and  * by {@code Principal} resulting both in the same content structure.  */
end_comment

begin_class
specifier|public
class|class
name|AccessControlManagerImpl
extends|extends
name|AbstractAccessControlManager
implements|implements
name|PolicyOwner
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|AccessControlManagerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|PrivilegeBitsProvider
name|bitsProvider
decl_stmt|;
specifier|private
specifier|final
name|ReadOnlyNodeTypeManager
name|ntMgr
decl_stmt|;
specifier|private
specifier|final
name|PrincipalManager
name|principalManager
decl_stmt|;
specifier|private
specifier|final
name|RestrictionProvider
name|restrictionProvider
decl_stmt|;
specifier|private
specifier|final
name|ConfigurationParameters
name|configParams
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|readPaths
decl_stmt|;
specifier|public
name|AccessControlManagerImpl
parameter_list|(
annotation|@
name|NotNull
name|Root
name|root
parameter_list|,
annotation|@
name|NotNull
name|NamePathMapper
name|namePathMapper
parameter_list|,
annotation|@
name|NotNull
name|SecurityProvider
name|securityProvider
parameter_list|)
block|{
name|super
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|,
name|securityProvider
argument_list|)
expr_stmt|;
name|bitsProvider
operator|=
operator|new
name|PrivilegeBitsProvider
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|ntMgr
operator|=
name|ReadOnlyNodeTypeManager
operator|.
name|getInstance
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|principalManager
operator|=
name|securityProvider
operator|.
name|getConfiguration
argument_list|(
name|PrincipalConfiguration
operator|.
name|class
argument_list|)
operator|.
name|getPrincipalManager
argument_list|(
name|root
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
name|restrictionProvider
operator|=
name|getConfig
argument_list|()
operator|.
name|getRestrictionProvider
argument_list|()
expr_stmt|;
name|configParams
operator|=
name|getConfig
argument_list|()
operator|.
name|getParameters
argument_list|()
expr_stmt|;
name|readPaths
operator|=
name|configParams
operator|.
name|getConfigValue
argument_list|(
name|PermissionConstants
operator|.
name|PARAM_READ_PATHS
argument_list|,
name|PermissionConstants
operator|.
name|DEFAULT_READ_PATHS
argument_list|)
expr_stmt|;
block|}
comment|//-----------------------------------------------< AccessControlManager>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPath
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|createACL
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|,
literal|false
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|AccessControlPolicy
argument_list|>
name|policies
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|policies
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readPaths
operator|.
name|contains
argument_list|(
name|oakPath
argument_list|)
condition|)
block|{
name|policies
operator|.
name|add
argument_list|(
name|ReadPolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
return|return
name|policies
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPath
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Root
name|r
init|=
name|getRoot
argument_list|()
operator|.
name|getContentSession
argument_list|()
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|tree
operator|=
name|r
operator|.
name|getTree
argument_list|(
name|tree
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|AccessControlPolicy
argument_list|>
name|effective
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|AccessControlPolicy
name|policy
init|=
name|createACL
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|,
literal|true
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oakPath
operator|!=
literal|null
condition|)
block|{
name|String
name|parentPath
init|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|oakPath
argument_list|,
literal|1
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|parentPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Tree
name|t
init|=
name|r
operator|.
name|getTree
argument_list|(
name|parentPath
argument_list|)
decl_stmt|;
name|AccessControlPolicy
name|plc
init|=
name|createACL
argument_list|(
name|parentPath
argument_list|,
name|t
argument_list|,
literal|true
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|plc
operator|!=
literal|null
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|plc
argument_list|)
expr_stmt|;
block|}
name|parentPath
operator|=
operator|(
name|PathUtils
operator|.
name|denotesRoot
argument_list|(
name|parentPath
argument_list|)
operator|)
condition|?
literal|""
else|:
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|parentPath
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|readPaths
operator|.
name|contains
argument_list|(
name|oakPath
argument_list|)
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|ReadPolicy
operator|.
name|INSTANCE
argument_list|)
expr_stmt|;
block|}
return|return
name|effective
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|AccessControlPolicyIterator
name|getApplicablePolicies
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPath
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|READ_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|AccessControlPolicy
name|policy
init|=
literal|null
decl_stmt|;
name|Tree
name|aclTree
init|=
name|getAclTree
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclTree
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|tree
operator|.
name|hasChild
argument_list|(
name|Util
operator|.
name|getAclName
argument_list|(
name|oakPath
argument_list|)
argument_list|)
condition|)
block|{
comment|// policy child node without tree being access controlled
name|log
operator|.
name|warn
argument_list|(
literal|"Colliding policy child without node being access controllable ({})."
argument_list|,
name|absPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// create an empty acl unless the node is protected or cannot have
comment|// mixin set (e.g. due to a lock)
name|String
name|mixinName
init|=
name|Util
operator|.
name|getMixinName
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|ntMgr
operator|.
name|isNodeType
argument_list|(
name|tree
argument_list|,
name|mixinName
argument_list|)
operator|||
name|ntMgr
operator|.
name|getEffectiveNodeType
argument_list|(
name|tree
argument_list|)
operator|.
name|supportsMixin
argument_list|(
name|mixinName
argument_list|)
condition|)
block|{
name|policy
operator|=
operator|new
name|NodeACL
argument_list|(
name|oakPath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Node {} cannot be made access controllable."
argument_list|,
name|absPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// else: acl already present -> getPolicies must be used.
if|if
condition|(
name|policy
operator|==
literal|null
condition|)
block|{
return|return
name|AccessControlPolicyIteratorAdapter
operator|.
name|EMPTY
return|;
block|}
else|else
block|{
return|return
operator|new
name|AccessControlPolicyIteratorAdapter
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|policy
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPath
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|Util
operator|.
name|checkValidPolicy
argument_list|(
name|oakPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|PrincipalACL
condition|)
block|{
name|setPrincipalBasedAcl
argument_list|(
operator|(
name|PrincipalACL
operator|)
name|policy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|setNodeBasedAcl
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|,
operator|(
name|ACL
operator|)
name|policy
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|setPrincipalBasedAcl
parameter_list|(
name|PrincipalACL
name|principalAcl
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|AccessControlPolicy
index|[]
name|plcs
init|=
name|getPolicies
argument_list|(
name|principalAcl
operator|.
name|principal
argument_list|)
decl_stmt|;
name|PrincipalACL
name|existing
init|=
operator|(
name|plcs
operator|.
name|length
operator|==
literal|0
operator|)
condition|?
literal|null
else|:
operator|(
name|PrincipalACL
operator|)
name|plcs
index|[
literal|0
index|]
decl_stmt|;
name|List
argument_list|<
name|ACE
argument_list|>
name|toAdd
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|principalAcl
operator|.
name|getEntries
argument_list|()
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACE
argument_list|>
name|toRemove
init|=
name|Collections
operator|.
name|emptyList
argument_list|()
decl_stmt|;
if|if
condition|(
name|existing
operator|!=
literal|null
condition|)
block|{
name|toAdd
operator|.
name|removeAll
argument_list|(
name|existing
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
name|toRemove
operator|=
name|existing
operator|.
name|getEntries
argument_list|()
expr_stmt|;
name|toRemove
operator|.
name|removeAll
argument_list|(
name|principalAcl
operator|.
name|getEntries
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add new entries
for|for
control|(
name|ACE
name|ace
range|:
name|toAdd
control|)
block|{
name|String
name|path
init|=
name|getNodePath
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|createACL
argument_list|(
name|path
argument_list|,
name|tree
argument_list|,
literal|false
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|==
literal|null
condition|)
block|{
name|acl
operator|=
operator|new
name|NodeACL
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// calculate single and mv restriction and drop the rep:nodePath restriction
comment|// present with the principal-based-entries.
name|Map
argument_list|<
name|String
argument_list|,
name|Value
argument_list|>
name|restrictions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Value
index|[]
argument_list|>
name|mvRestrictions
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Restriction
name|r
range|:
name|ace
operator|.
name|getRestrictions
argument_list|()
control|)
block|{
name|String
name|name
init|=
name|r
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|REP_NODE_PATH
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|r
operator|.
name|getDefinition
argument_list|()
operator|.
name|getRequiredType
argument_list|()
operator|.
name|isArray
argument_list|()
condition|)
block|{
name|mvRestrictions
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ace
operator|.
name|getRestrictions
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|restrictions
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|ace
operator|.
name|getRestriction
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|acl
operator|.
name|addEntry
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|ace
operator|.
name|getPrivileges
argument_list|()
argument_list|,
name|ace
operator|.
name|isAllow
argument_list|()
argument_list|,
name|restrictions
argument_list|,
name|mvRestrictions
argument_list|)
expr_stmt|;
name|setNodeBasedAcl
argument_list|(
name|path
argument_list|,
name|tree
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|// remove entries that are not longer present in the acl to write
for|for
control|(
name|ACE
name|ace
range|:
name|toRemove
control|)
block|{
name|String
name|path
init|=
name|getNodePath
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ACL
name|acl
init|=
operator|(
name|ACL
operator|)
name|createACL
argument_list|(
name|path
argument_list|,
name|tree
argument_list|,
literal|false
argument_list|,
name|Predicates
operator|.
name|alwaysTrue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
block|{
comment|// remove rep:nodePath restriction before removing the entry from
comment|// the node-based policy (see above for adding entries without
comment|// this special restriction).
name|Set
argument_list|<
name|Restriction
argument_list|>
name|rstr
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|ace
operator|.
name|getRestrictions
argument_list|()
argument_list|)
decl_stmt|;
name|rstr
operator|.
name|removeIf
argument_list|(
name|r
lambda|->
name|REP_NODE_PATH
operator|.
name|equals
argument_list|(
name|r
operator|.
name|getDefinition
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
operator|new
name|Entry
argument_list|(
name|ace
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|ace
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|,
name|ace
operator|.
name|isAllow
argument_list|()
argument_list|,
name|rstr
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setNodeBasedAcl
argument_list|(
name|path
argument_list|,
name|tree
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Missing ACL at {}; cannot remove entry {}"
argument_list|,
name|path
argument_list|,
name|ace
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setNodeBasedAcl
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|,
annotation|@
name|NotNull
name|ACL
name|acl
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Tree
name|aclTree
init|=
name|getAclTree
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclTree
operator|!=
literal|null
condition|)
block|{
comment|// remove all existing aces
for|for
control|(
name|Tree
name|aceTree
range|:
name|aclTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
name|aceTree
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|aclTree
operator|=
name|createAclTree
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|)
expr_stmt|;
block|}
name|aclTree
operator|.
name|setOrderableChildren
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|ACE
argument_list|>
name|entries
init|=
name|acl
operator|.
name|getEntries
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ACE
name|ace
init|=
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|Util
operator|.
name|generateAceName
argument_list|(
name|ace
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|String
name|ntName
init|=
operator|(
name|ace
operator|.
name|isAllow
argument_list|()
operator|)
condition|?
name|NT_REP_GRANT_ACE
else|:
name|NT_REP_DENY_ACE
decl_stmt|;
name|Tree
name|aceNode
init|=
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|aclTree
argument_list|,
name|nodeName
argument_list|,
name|ntName
argument_list|)
decl_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|,
name|ace
operator|.
name|getPrincipal
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|aceNode
operator|.
name|setProperty
argument_list|(
name|REP_PRIVILEGES
argument_list|,
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|ace
operator|.
name|getPrivilegeBits
argument_list|()
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|ace
operator|.
name|getRestrictions
argument_list|()
decl_stmt|;
name|restrictionProvider
operator|.
name|writeRestrictions
argument_list|(
name|oakPath
argument_list|,
name|aceNode
argument_list|,
name|restrictions
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removePolicy
parameter_list|(
annotation|@
name|Nullable
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|AccessControlPolicy
name|policy
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|String
name|oakPath
init|=
name|getOakPath
argument_list|(
name|absPath
argument_list|)
decl_stmt|;
name|Util
operator|.
name|checkValidPolicy
argument_list|(
name|oakPath
argument_list|,
name|policy
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|principalMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|policy
operator|instanceof
name|PrincipalACL
condition|)
block|{
name|PrincipalACL
name|principalAcl
init|=
operator|(
name|PrincipalACL
operator|)
name|policy
decl_stmt|;
for|for
control|(
name|ACE
name|ace
range|:
name|principalAcl
operator|.
name|getEntries
argument_list|()
control|)
block|{
name|String
name|path
init|=
name|getNodePath
argument_list|(
name|ace
argument_list|)
decl_stmt|;
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|path
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Tree
name|aclTree
init|=
name|getAclTree
argument_list|(
name|path
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclTree
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Unable to retrieve policy node at "
operator|+
name|path
argument_list|)
throw|;
block|}
name|Iterator
argument_list|<
name|Tree
argument_list|>
name|children
init|=
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Tree
name|child
init|=
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|ace
operator|.
name|equals
argument_list|(
name|createACE
argument_list|(
name|path
argument_list|,
name|child
argument_list|,
name|principalAcl
operator|.
name|rProvider
argument_list|,
name|principalMap
argument_list|)
argument_list|)
condition|)
block|{
name|child
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|aclTree
operator|.
name|getChildren
argument_list|()
operator|.
name|iterator
argument_list|()
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|aclTree
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|Tree
name|tree
init|=
name|getTree
argument_list|(
name|oakPath
argument_list|,
name|Permissions
operator|.
name|MODIFY_ACCESS_CONTROL
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Tree
name|aclTree
init|=
name|getAclTree
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclTree
operator|!=
literal|null
condition|)
block|{
name|aclTree
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"No policy to remove at "
operator|+
name|absPath
argument_list|)
throw|;
block|}
block|}
block|}
comment|//-------------------------------------< JackrabbitAccessControlManager>---
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getApplicablePolicies
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Util
operator|.
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
name|principalManager
argument_list|)
expr_stmt|;
name|String
name|oakPath
init|=
operator|(
name|principal
operator|instanceof
name|ItemBasedPrincipal
operator|)
condition|?
operator|(
operator|(
name|ItemBasedPrincipal
operator|)
name|principal
operator|)
operator|.
name|getPath
argument_list|()
else|:
literal|null
decl_stmt|;
name|JackrabbitAccessControlPolicy
name|policy
init|=
name|createPrincipalACL
argument_list|(
name|oakPath
argument_list|,
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
else|else
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[]
block|{
operator|new
name|PrincipalACL
argument_list|(
name|oakPath
argument_list|,
name|principal
argument_list|)
block|}
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|JackrabbitAccessControlPolicy
index|[]
name|getPolicies
parameter_list|(
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Util
operator|.
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
name|principalManager
argument_list|)
expr_stmt|;
name|String
name|oakPath
init|=
operator|(
name|principal
operator|instanceof
name|ItemBasedPrincipal
operator|)
condition|?
operator|(
operator|(
name|ItemBasedPrincipal
operator|)
name|principal
operator|)
operator|.
name|getPath
argument_list|()
else|:
literal|null
decl_stmt|;
name|JackrabbitAccessControlPolicy
name|policy
init|=
name|createPrincipalACL
argument_list|(
name|oakPath
argument_list|,
name|principal
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[]
block|{
name|policy
block|}
return|;
block|}
else|else
block|{
return|return
operator|new
name|JackrabbitAccessControlPolicy
index|[
literal|0
index|]
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|AccessControlPolicy
index|[]
name|getEffectivePolicies
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Util
operator|.
name|checkValidPrincipals
argument_list|(
name|principals
argument_list|,
name|principalManager
argument_list|)
expr_stmt|;
name|Root
name|r
init|=
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Result
name|aceResult
init|=
name|searchAces
argument_list|(
name|principals
argument_list|,
name|r
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|JackrabbitAccessControlList
argument_list|>
name|effective
init|=
name|Sets
operator|.
name|newTreeSet
argument_list|(
operator|new
name|PolicyComparator
argument_list|()
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|paths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|Predicate
argument_list|<
name|Tree
argument_list|>
name|predicate
init|=
operator|new
name|PrincipalPredicate
argument_list|(
name|principals
argument_list|)
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|aceResult
operator|.
name|getRows
argument_list|()
control|)
block|{
name|String
name|acePath
init|=
name|row
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|aclName
init|=
name|Text
operator|.
name|getName
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|acePath
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|Tree
name|accessControlledTree
init|=
name|r
operator|.
name|getTree
argument_list|(
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|acePath
argument_list|,
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|POLICY_NODE_NAMES
operator|.
name|contains
argument_list|(
name|aclName
argument_list|)
operator|||
operator|!
name|accessControlledTree
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Isolated access control entry -> ignore query result at {}"
argument_list|,
name|acePath
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|String
name|path
init|=
operator|(
name|REP_REPO_POLICY
operator|.
name|equals
argument_list|(
name|aclName
argument_list|)
operator|)
condition|?
literal|null
else|:
name|accessControlledTree
operator|.
name|getPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|JackrabbitAccessControlList
name|policy
init|=
name|createACL
argument_list|(
name|path
argument_list|,
name|accessControlledTree
argument_list|,
literal|true
argument_list|,
name|predicate
argument_list|)
decl_stmt|;
if|if
condition|(
name|policy
operator|!=
literal|null
condition|)
block|{
name|effective
operator|.
name|add
argument_list|(
name|policy
argument_list|)
expr_stmt|;
name|paths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|effective
operator|.
name|toArray
argument_list|(
operator|new
name|AccessControlPolicy
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|//--------------------------------------------------------< PolicyOwner>---
annotation|@
name|Override
specifier|public
name|boolean
name|defines
parameter_list|(
name|String
name|absPath
parameter_list|,
annotation|@
name|NotNull
name|AccessControlPolicy
name|accessControlPolicy
parameter_list|)
block|{
try|try
block|{
return|return
name|Util
operator|.
name|isValidPolicy
argument_list|(
name|getOakPath
argument_list|(
name|absPath
argument_list|)
argument_list|,
name|accessControlPolicy
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid absolute path '{}': {}"
argument_list|,
name|absPath
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
comment|//------------------------------------------------------------< private>---
annotation|@
name|Nullable
specifier|private
name|Tree
name|getAclTree
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|accessControlledTree
parameter_list|)
block|{
if|if
condition|(
name|Util
operator|.
name|isAccessControlled
argument_list|(
name|oakPath
argument_list|,
name|accessControlledTree
argument_list|,
name|ntMgr
argument_list|)
condition|)
block|{
name|String
name|aclName
init|=
name|Util
operator|.
name|getAclName
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
name|Tree
name|policyTree
init|=
name|accessControlledTree
operator|.
name|getChild
argument_list|(
name|aclName
argument_list|)
decl_stmt|;
if|if
condition|(
name|policyTree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|policyTree
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param oakPath the Oak path as specified with the ac mgr call.      * @param tree    the access controlled node.      * @return the new acl tree.      * @throws AccessDeniedException In case the new acl tree is not accessible.      */
annotation|@
name|NotNull
specifier|private
name|Tree
name|createAclTree
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|tree
parameter_list|)
throws|throws
name|AccessDeniedException
block|{
if|if
condition|(
operator|!
name|Util
operator|.
name|isAccessControlled
argument_list|(
name|oakPath
argument_list|,
name|tree
argument_list|,
name|ntMgr
argument_list|)
condition|)
block|{
name|PropertyState
name|mixins
init|=
name|tree
operator|.
name|getProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
decl_stmt|;
name|String
name|mixinName
init|=
name|Util
operator|.
name|getMixinName
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|mixins
operator|==
literal|null
condition|)
block|{
name|tree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|Collections
operator|.
name|singleton
argument_list|(
name|mixinName
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|pb
init|=
name|PropertyBuilder
operator|.
name|copy
argument_list|(
name|Type
operator|.
name|NAME
argument_list|,
name|mixins
argument_list|)
decl_stmt|;
name|pb
operator|.
name|addValue
argument_list|(
name|mixinName
argument_list|)
expr_stmt|;
name|tree
operator|.
name|setProperty
argument_list|(
name|pb
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|aclName
init|=
name|Util
operator|.
name|getAclName
argument_list|(
name|oakPath
argument_list|)
decl_stmt|;
return|return
name|TreeUtil
operator|.
name|addChild
argument_list|(
name|tree
argument_list|,
name|aclName
argument_list|,
name|NT_REP_ACL
argument_list|)
return|;
block|}
annotation|@
name|Nullable
specifier|private
name|JackrabbitAccessControlList
name|createACL
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|accessControlledTree
parameter_list|,
name|boolean
name|isEffectivePolicy
parameter_list|,
annotation|@
name|NotNull
name|Predicate
argument_list|<
name|Tree
argument_list|>
name|predicate
parameter_list|)
throws|throws
name|RepositoryException
block|{
if|if
condition|(
operator|!
name|accessControlledTree
operator|.
name|exists
argument_list|()
operator|||
operator|!
name|Util
operator|.
name|isAccessControlled
argument_list|(
name|oakPath
argument_list|,
name|accessControlledTree
argument_list|,
name|ntMgr
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Tree
name|aclTree
init|=
name|accessControlledTree
operator|.
name|getChild
argument_list|(
name|Util
operator|.
name|getAclName
argument_list|(
name|oakPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|aclTree
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
argument_list|<
name|ACE
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|principalMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|Tree
name|child
range|:
name|aclTree
operator|.
name|getChildren
argument_list|()
control|)
block|{
if|if
condition|(
name|Util
operator|.
name|isACE
argument_list|(
name|child
argument_list|,
name|ntMgr
argument_list|)
operator|&&
name|predicate
operator|.
name|apply
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|ACE
name|ace
init|=
name|createACE
argument_list|(
name|oakPath
argument_list|,
name|child
argument_list|,
name|restrictionProvider
argument_list|,
name|principalMap
argument_list|)
decl_stmt|;
name|entries
operator|.
name|add
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|isEffectivePolicy
condition|)
block|{
return|return
operator|new
name|NodeACL
argument_list|(
name|oakPath
argument_list|,
name|entries
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|entries
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
literal|null
else|:
operator|new
name|ImmutableACL
argument_list|(
name|oakPath
argument_list|,
name|entries
argument_list|,
name|restrictionProvider
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Nullable
specifier|private
name|JackrabbitAccessControlList
name|createPrincipalACL
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Root
name|root
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|Result
name|aceResult
init|=
name|searchAces
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|principal
argument_list|)
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|RestrictionProvider
name|restrProvider
init|=
operator|new
name|PrincipalRestrictionProvider
argument_list|(
name|restrictionProvider
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ACE
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|principalMap
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|ResultRow
name|row
range|:
name|aceResult
operator|.
name|getRows
argument_list|()
control|)
block|{
name|Tree
name|aceTree
init|=
name|root
operator|.
name|getTree
argument_list|(
name|row
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Util
operator|.
name|isACE
argument_list|(
name|aceTree
argument_list|,
name|ntMgr
argument_list|)
condition|)
block|{
name|String
name|aclPath
init|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|aceTree
operator|.
name|getPath
argument_list|()
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|String
name|path
decl_stmt|;
if|if
condition|(
name|aclPath
operator|.
name|endsWith
argument_list|(
name|REP_REPO_POLICY
argument_list|)
condition|)
block|{
name|path
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|path
operator|=
name|Text
operator|.
name|getRelativeParent
argument_list|(
name|aclPath
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|entries
operator|.
name|add
argument_list|(
name|createACE
argument_list|(
name|path
argument_list|,
name|aceTree
argument_list|,
name|restrProvider
argument_list|,
name|principalMap
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// nothing found
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|PrincipalACL
argument_list|(
name|oakPath
argument_list|,
name|principal
argument_list|,
name|entries
argument_list|,
name|restrProvider
argument_list|)
return|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|ACE
name|createACE
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Tree
name|aceTree
parameter_list|,
annotation|@
name|NotNull
name|RestrictionProvider
name|restrictionProvider
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|principalMap
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|boolean
name|isAllow
init|=
name|NT_REP_GRANT_ACE
operator|.
name|equals
argument_list|(
name|TreeUtil
operator|.
name|getPrimaryTypeName
argument_list|(
name|aceTree
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
init|=
name|restrictionProvider
operator|.
name|readRestrictions
argument_list|(
name|oakPath
argument_list|,
name|aceTree
argument_list|)
decl_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|privNames
init|=
name|checkNotNull
argument_list|(
name|TreeUtil
operator|.
name|getStrings
argument_list|(
name|aceTree
argument_list|,
name|REP_PRIVILEGES
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Entry
argument_list|(
name|getPrincipal
argument_list|(
name|aceTree
argument_list|,
name|principalMap
argument_list|)
argument_list|,
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|privNames
argument_list|)
argument_list|,
name|isAllow
argument_list|,
name|restrictions
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|NotNull
specifier|private
specifier|static
name|Result
name|searchAces
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|,
annotation|@
name|NotNull
name|Root
name|root
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|StringBuilder
name|stmt
init|=
operator|new
name|StringBuilder
argument_list|(
name|QueryConstants
operator|.
name|SEARCH_ROOT_PATH
argument_list|)
decl_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"//element(*,"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|NT_REP_ACE
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|")["
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Principal
name|principal
range|:
name|principals
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|stmt
operator|.
name|append
argument_list|(
literal|" or "
argument_list|)
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|ISO9075
operator|.
name|encode
argument_list|(
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|"='"
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
name|principal
operator|.
name|getName
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"'"
argument_list|,
literal|"''"
argument_list|)
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|stmt
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|stmt
operator|.
name|append
argument_list|(
literal|" order by jcr:path"
argument_list|)
expr_stmt|;
try|try
block|{
name|QueryEngine
name|queryEngine
init|=
name|root
operator|.
name|getQueryEngine
argument_list|()
decl_stmt|;
return|return
name|queryEngine
operator|.
name|executeQuery
argument_list|(
name|stmt
operator|.
name|toString
argument_list|()
argument_list|,
name|Query
operator|.
name|XPATH
argument_list|,
name|QueryEngine
operator|.
name|NO_BINDINGS
argument_list|,
name|QueryEngine
operator|.
name|NO_MAPPINGS
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Error while collecting effective policies."
decl_stmt|;
name|log
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RepositoryException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
specifier|private
name|Principal
name|getPrincipal
parameter_list|(
annotation|@
name|NotNull
name|Tree
name|aceTree
parameter_list|,
annotation|@
name|NotNull
name|Map
argument_list|<
name|String
argument_list|,
name|Principal
argument_list|>
name|principalMap
parameter_list|)
block|{
name|String
name|principalName
init|=
name|checkNotNull
argument_list|(
name|TreeUtil
operator|.
name|getString
argument_list|(
name|aceTree
argument_list|,
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|principalMap
operator|.
name|computeIfAbsent
argument_list|(
name|principalName
argument_list|,
name|pn
lambda|->
block|{
name|Principal
name|principal
init|=
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|pn
argument_list|)
decl_stmt|;
if|if
condition|(
name|principal
operator|==
literal|null
condition|)
block|{
name|principal
operator|=
operator|new
name|PrincipalImpl
argument_list|(
name|pn
argument_list|)
expr_stmt|;
block|}
return|return
name|principal
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
name|String
name|getNodePath
parameter_list|(
name|ACE
name|principalBasedAce
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Value
name|v
init|=
name|principalBasedAce
operator|.
name|getRestriction
argument_list|(
name|REP_NODE_PATH
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Missing mandatory restriction rep:nodePath"
argument_list|)
throw|;
block|}
else|else
block|{
return|return
name|getOakPath
argument_list|(
name|Strings
operator|.
name|emptyToNull
argument_list|(
name|v
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|//--------------------------------------------------------------------------
specifier|private
class|class
name|NodeACL
extends|extends
name|ACL
block|{
name|NodeACL
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|)
block|{
name|this
argument_list|(
name|oakPath
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|NodeACL
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|ACE
argument_list|>
name|entries
parameter_list|)
block|{
name|super
argument_list|(
name|oakPath
argument_list|,
name|entries
argument_list|,
name|AccessControlManagerImpl
operator|.
name|this
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|restrictionProvider
return|;
block|}
annotation|@
name|Override
name|ACE
name|createACE
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|PrivilegeBits
name|privilegeBits
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|Entry
argument_list|(
name|principal
argument_list|,
name|privilegeBits
argument_list|,
name|isAllow
argument_list|,
name|restrictions
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|checkValidPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|int
name|importBehavior
init|=
name|Util
operator|.
name|getImportBehavior
argument_list|(
name|getConfig
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Util
operator|.
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
name|principalManager
argument_list|,
name|importBehavior
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|PermissionUtil
operator|.
name|isAdminOrSystem
argument_list|(
name|ImmutableSet
operator|.
name|of
argument_list|(
name|principal
argument_list|)
argument_list|,
name|configParams
argument_list|)
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Attempt to create an ACE for an administrative principal which always has full access: {}"
argument_list|,
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|Util
operator|.
name|getImportBehavior
argument_list|(
name|getConfig
argument_list|()
argument_list|)
condition|)
block|{
case|case
name|ImportBehavior
operator|.
name|ABORT
case|:
throw|throw
operator|new
name|AccessControlException
argument_list|(
literal|"Attempt to create an ACE for an administrative principal which always has full access."
argument_list|)
throw|;
case|case
name|ImportBehavior
operator|.
name|IGNORE
case|:
return|return
literal|false
return|;
case|case
name|ImportBehavior
operator|.
name|BESTEFFORT
case|:
comment|// just log warning, no other action required.
break|break;
default|default :
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid import behavior"
operator|+
name|importBehavior
argument_list|)
throw|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|PrivilegeManager
name|getPrivilegeManager
parameter_list|()
block|{
return|return
name|AccessControlManagerImpl
operator|.
name|this
operator|.
name|getPrivilegeManager
argument_list|()
return|;
block|}
annotation|@
name|Override
name|PrivilegeBits
name|getPrivilegeBits
parameter_list|(
name|Privilege
index|[]
name|privileges
parameter_list|)
block|{
return|return
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|privileges
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|NodeACL
condition|)
block|{
name|NodeACL
name|other
init|=
operator|(
name|NodeACL
operator|)
name|obj
decl_stmt|;
return|return
name|Objects
operator|.
name|equal
argument_list|(
name|getOakPath
argument_list|()
argument_list|,
name|other
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|&&
name|getEntries
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getEntries
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|PrincipalACL
extends|extends
name|ACL
block|{
specifier|private
specifier|final
name|Principal
name|principal
decl_stmt|;
specifier|private
specifier|final
name|RestrictionProvider
name|rProvider
decl_stmt|;
specifier|private
name|PrincipalACL
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|)
block|{
name|this
argument_list|(
name|oakPath
argument_list|,
name|principal
argument_list|,
literal|null
argument_list|,
operator|new
name|PrincipalRestrictionProvider
argument_list|(
name|restrictionProvider
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|PrincipalACL
parameter_list|(
annotation|@
name|Nullable
name|String
name|oakPath
parameter_list|,
annotation|@
name|NotNull
name|Principal
name|principal
parameter_list|,
annotation|@
name|Nullable
name|List
argument_list|<
name|ACE
argument_list|>
name|entries
parameter_list|,
annotation|@
name|NotNull
name|RestrictionProvider
name|restrictionProvider
parameter_list|)
block|{
name|super
argument_list|(
name|oakPath
argument_list|,
name|entries
argument_list|,
name|AccessControlManagerImpl
operator|.
name|this
operator|.
name|getNamePathMapper
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|principal
operator|=
name|principal
expr_stmt|;
name|rProvider
operator|=
name|restrictionProvider
expr_stmt|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|RestrictionProvider
name|getRestrictionProvider
parameter_list|()
block|{
return|return
name|rProvider
return|;
block|}
annotation|@
name|Override
name|ACE
name|createACE
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|PrivilegeBits
name|privilegeBits
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|)
throws|throws
name|RepositoryException
block|{
return|return
operator|new
name|Entry
argument_list|(
name|principal
argument_list|,
name|privilegeBits
argument_list|,
name|isAllow
argument_list|,
name|restrictions
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
name|boolean
name|checkValidPrincipal
parameter_list|(
name|Principal
name|principal
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|Util
operator|.
name|checkValidPrincipal
argument_list|(
name|principal
argument_list|,
name|principalManager
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
annotation|@
name|Override
name|PrivilegeManager
name|getPrivilegeManager
parameter_list|()
block|{
return|return
name|AccessControlManagerImpl
operator|.
name|this
operator|.
name|getPrivilegeManager
argument_list|()
return|;
block|}
annotation|@
name|Override
name|PrivilegeBits
name|getPrivilegeBits
parameter_list|(
name|Privilege
index|[]
name|privileges
parameter_list|)
block|{
return|return
name|bitsProvider
operator|.
name|getBits
argument_list|(
name|privileges
argument_list|,
name|getNamePathMapper
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|orderBefore
parameter_list|(
annotation|@
name|NotNull
name|AccessControlEntry
name|srcEntry
parameter_list|,
annotation|@
name|Nullable
name|AccessControlEntry
name|destEntry
parameter_list|)
throws|throws
name|RepositoryException
block|{
throw|throw
operator|new
name|UnsupportedRepositoryOperationException
argument_list|(
literal|"reordering is not supported"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|PrincipalACL
condition|)
block|{
name|PrincipalACL
name|other
init|=
operator|(
name|PrincipalACL
operator|)
name|obj
decl_stmt|;
return|return
name|principal
operator|.
name|equals
argument_list|(
name|other
operator|.
name|principal
argument_list|)
operator|&&
name|Objects
operator|.
name|equal
argument_list|(
name|getOakPath
argument_list|()
argument_list|,
name|other
operator|.
name|getOakPath
argument_list|()
argument_list|)
operator|&&
name|getEntries
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getEntries
argument_list|()
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
specifier|private
specifier|final
class|class
name|Entry
extends|extends
name|ACE
block|{
specifier|private
name|Entry
parameter_list|(
name|Principal
name|principal
parameter_list|,
name|PrivilegeBits
name|privilegeBits
parameter_list|,
name|boolean
name|isAllow
parameter_list|,
name|Set
argument_list|<
name|Restriction
argument_list|>
name|restrictions
parameter_list|,
name|NamePathMapper
name|namePathMapper
parameter_list|)
throws|throws
name|AccessControlException
block|{
name|super
argument_list|(
name|principal
argument_list|,
name|privilegeBits
argument_list|,
name|isAllow
argument_list|,
name|restrictions
argument_list|,
name|namePathMapper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Privilege
index|[]
name|getPrivileges
parameter_list|()
block|{
name|Set
argument_list|<
name|Privilege
argument_list|>
name|privileges
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|bitsProvider
operator|.
name|getPrivilegeNames
argument_list|(
name|getPrivilegeBits
argument_list|()
argument_list|)
control|)
block|{
try|try
block|{
name|privileges
operator|.
name|add
argument_list|(
name|getPrivilegeManager
argument_list|()
operator|.
name|getPrivilege
argument_list|(
name|getNamePathMapper
argument_list|()
operator|.
name|getJcrName
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Unable to get privilege with name : "
operator|+
name|name
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|privileges
operator|.
name|toArray
argument_list|(
operator|new
name|Privilege
index|[
literal|0
index|]
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|PrincipalPredicate
implements|implements
name|Predicate
argument_list|<
name|Tree
argument_list|>
block|{
specifier|private
specifier|final
name|Iterable
argument_list|<
name|String
argument_list|>
name|principalNames
decl_stmt|;
specifier|private
name|PrincipalPredicate
parameter_list|(
annotation|@
name|NotNull
name|Set
argument_list|<
name|Principal
argument_list|>
name|principals
parameter_list|)
block|{
name|principalNames
operator|=
name|Iterables
operator|.
name|transform
argument_list|(
name|principals
argument_list|,
name|Principal
operator|::
name|getName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|apply
parameter_list|(
annotation|@
name|Nullable
name|Tree
name|aceTree
parameter_list|)
block|{
return|return
name|aceTree
operator|!=
literal|null
operator|&&
name|Iterables
operator|.
name|contains
argument_list|(
name|principalNames
argument_list|,
name|TreeUtil
operator|.
name|getString
argument_list|(
name|aceTree
argument_list|,
name|REP_PRINCIPAL_NAME
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

