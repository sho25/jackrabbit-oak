begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PropertyType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|IndexDefinition
operator|.
name|IndexingRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|LuceneIndexHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|FIELD_BOOST
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|LuceneIndexConstants
operator|.
name|PROP_IS_REGEX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|lucene
operator|.
name|util
operator|.
name|ConfigUtil
operator|.
name|getOptionalValue
import|;
end_import

begin_class
class|class
name|PropertyDefinition
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|PropertyDefinition
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * The default boost: 1.0f.      */
specifier|static
specifier|final
name|float
name|DEFAULT_BOOST
init|=
literal|1.0f
decl_stmt|;
comment|/**      * Property name. By default derived from the NodeState name which has the      * property definition. However in case property name is a pattern, relative      * property etc then it should be defined via 'name' property in NodeState.      * In such case NodeState name can be set to anything      */
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|int
name|propertyType
decl_stmt|;
comment|/**      * The boost value for a property.      */
specifier|final
name|float
name|boost
decl_stmt|;
specifier|final
name|boolean
name|isRegexp
decl_stmt|;
specifier|final
name|boolean
name|index
decl_stmt|;
specifier|final
name|boolean
name|stored
decl_stmt|;
specifier|final
name|boolean
name|nodeScopeIndex
decl_stmt|;
specifier|final
name|boolean
name|propertyIndex
decl_stmt|;
specifier|final
name|boolean
name|analyzed
decl_stmt|;
specifier|final
name|boolean
name|ordered
decl_stmt|;
specifier|final
name|int
name|includedPropertyTypes
decl_stmt|;
name|boolean
name|useInSuggest
decl_stmt|;
name|boolean
name|useInSpellcheck
decl_stmt|;
specifier|public
name|PropertyDefinition
parameter_list|(
name|IndexingRule
name|idxDefn
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|defn
parameter_list|)
block|{
name|this
operator|.
name|isRegexp
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|PROP_IS_REGEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|getName
argument_list|(
name|defn
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|boost
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|FIELD_BOOST
argument_list|,
name|DEFAULT_BOOST
argument_list|)
expr_stmt|;
comment|//By default if a property is defined it is indexed
name|this
operator|.
name|index
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_INDEX
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|stored
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_EXCERPT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|nodeScopeIndex
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_NODE_SCOPE_INDEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|analyzed
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_ANALYZED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|//If node is not set for full text then a property definition indicates that definition is for property index
name|this
operator|.
name|propertyIndex
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_PROPERTY_INDEX
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|ordered
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_ORDERED
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|includedPropertyTypes
operator|=
name|IndexDefinition
operator|.
name|getSupportedTypes
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_INCLUDED_TYPE
argument_list|,
name|IndexDefinition
operator|.
name|TYPES_ALLOW_ALL
argument_list|)
expr_stmt|;
comment|//TODO Add test case for above cases
name|this
operator|.
name|propertyType
operator|=
name|getPropertyType
argument_list|(
name|idxDefn
argument_list|,
name|name
argument_list|,
name|defn
argument_list|)
expr_stmt|;
name|this
operator|.
name|useInSuggest
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SUGGEST
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|useInSpellcheck
operator|=
name|getOptionalValue
argument_list|(
name|defn
argument_list|,
name|LuceneIndexConstants
operator|.
name|PROP_USE_IN_SPELLCHECK
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * If 'analyzed' is enabled then property value would be used to evaluate the      * contains clause related to those properties. In such mode also some properties      * would be skipped from analysis      *      * @param propertyName name of the property to check. As property definition might      *                     be regEx based this is required to be passed explicitly      * @return true if the property value should be tokenized/analyzed      */
specifier|public
name|boolean
name|skipTokenization
parameter_list|(
name|String
name|propertyName
parameter_list|)
block|{
comment|//For regEx case check against a whitelist
if|if
condition|(
name|isRegexp
operator|&&
name|LuceneIndexHelper
operator|.
name|skipTokenization
argument_list|(
name|propertyName
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
return|return
operator|!
name|analyzed
return|;
block|}
specifier|public
name|boolean
name|fulltextEnabled
parameter_list|()
block|{
return|return
name|index
operator|&&
operator|(
name|analyzed
operator|||
name|nodeScopeIndex
operator|)
return|;
block|}
specifier|public
name|boolean
name|propertyIndexEnabled
parameter_list|()
block|{
return|return
name|index
operator|&&
name|propertyIndex
return|;
block|}
specifier|public
name|boolean
name|isTypeDefined
parameter_list|()
block|{
return|return
name|propertyType
operator|!=
name|PropertyType
operator|.
name|UNDEFINED
return|;
block|}
comment|/**      * Returns the property type. If no explicit type is defined the default is assumed      * to be {@link javax.jcr.PropertyType#STRING}      *      * @return propertyType as per javax.jcr.PropertyType      */
specifier|public
name|int
name|getType
parameter_list|()
block|{
comment|//If no explicit type is defined we assume it to be string
return|return
name|isTypeDefined
argument_list|()
condition|?
name|propertyType
else|:
name|PropertyType
operator|.
name|STRING
return|;
block|}
specifier|public
name|boolean
name|includePropertyType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
return|return
name|IndexDefinition
operator|.
name|includePropertyType
argument_list|(
name|includedPropertyTypes
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"PropertyDefinition{"
operator|+
literal|"name='"
operator|+
name|name
operator|+
literal|'\''
operator|+
literal|", propertyType="
operator|+
name|propertyType
operator|+
literal|", boost="
operator|+
name|boost
operator|+
literal|", isRegexp="
operator|+
name|isRegexp
operator|+
literal|", index="
operator|+
name|index
operator|+
literal|", stored="
operator|+
name|stored
operator|+
literal|", nodeScopeIndex="
operator|+
name|nodeScopeIndex
operator|+
literal|", propertyIndex="
operator|+
name|propertyIndex
operator|+
literal|", analyzed="
operator|+
name|analyzed
operator|+
literal|", ordered="
operator|+
name|ordered
operator|+
literal|", useInSuggest="
operator|+
name|useInSuggest
operator|+
literal|", useInSpellcheck="
operator|+
name|useInSpellcheck
operator|+
literal|'}'
return|;
block|}
comment|//~---------------------------------------------< internal>
specifier|private
specifier|static
name|String
name|getName
parameter_list|(
name|NodeState
name|definition
parameter_list|,
name|String
name|defaultName
parameter_list|)
block|{
name|PropertyState
name|ps
init|=
name|definition
operator|.
name|getProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_NAME
argument_list|)
decl_stmt|;
return|return
name|ps
operator|==
literal|null
condition|?
name|defaultName
else|:
name|ps
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|getPropertyType
parameter_list|(
name|IndexingRule
name|idxDefn
parameter_list|,
name|String
name|name
parameter_list|,
name|NodeState
name|defn
parameter_list|)
block|{
name|int
name|type
init|=
name|PropertyType
operator|.
name|UNDEFINED
decl_stmt|;
if|if
condition|(
name|defn
operator|.
name|hasProperty
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|)
condition|)
block|{
name|String
name|typeName
init|=
name|defn
operator|.
name|getString
argument_list|(
name|LuceneIndexConstants
operator|.
name|PROP_TYPE
argument_list|)
decl_stmt|;
try|try
block|{
name|type
operator|=
name|PropertyType
operator|.
name|valueFromName
argument_list|(
name|typeName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Invalid property type {} for property {} in Index {}"
argument_list|,
name|typeName
argument_list|,
name|name
argument_list|,
name|idxDefn
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

