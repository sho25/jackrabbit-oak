begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Throwables
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_class
specifier|public
class|class
name|TrackingCorruptIndexHandler
implements|implements
name|CorruptIndexHandler
block|{
specifier|private
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|Clock
name|clock
init|=
name|Clock
operator|.
name|SIMPLE
decl_stmt|;
specifier|private
name|int
name|indexerCycleCount
decl_stmt|;
specifier|private
name|long
name|corruptIntervalMillis
init|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|30
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|indexes
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|getCorruptIndexData
parameter_list|(
name|String
name|asyncName
parameter_list|)
block|{
if|if
condition|(
name|corruptIntervalMillis
operator|<=
literal|0
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyMap
argument_list|()
return|;
block|}
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|CorruptIndexInfo
name|info
range|:
name|indexes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|asyncName
operator|.
name|equals
argument_list|(
name|info
operator|.
name|asyncName
argument_list|)
operator|&&
name|info
operator|.
name|isFailingSinceLongTime
argument_list|()
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|info
operator|.
name|path
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|getFailingIndexData
parameter_list|(
name|String
name|asyncName
parameter_list|)
block|{
name|Map
argument_list|<
name|String
argument_list|,
name|CorruptIndexInfo
argument_list|>
name|result
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
for|for
control|(
name|CorruptIndexInfo
name|info
range|:
name|indexes
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|asyncName
operator|.
name|equals
argument_list|(
name|info
operator|.
name|asyncName
argument_list|)
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|info
operator|.
name|path
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|void
name|markWorkingIndexes
parameter_list|(
name|Set
argument_list|<
name|String
argument_list|>
name|updatedIndexPaths
parameter_list|)
block|{
name|indexerCycleCount
operator|++
expr_stmt|;
for|for
control|(
name|String
name|indexPath
range|:
name|updatedIndexPaths
control|)
block|{
name|CorruptIndexInfo
name|info
init|=
name|indexes
operator|.
name|remove
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Index at [{}] which was so far failing {} is now working again."
argument_list|,
name|info
operator|.
name|path
argument_list|,
name|info
operator|.
name|getStats
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//~--------------------------------< CorruptIndexHandler>
annotation|@
name|Override
specifier|public
name|void
name|skippingCorruptIndex
parameter_list|(
name|String
name|async
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|Calendar
name|corruptSince
parameter_list|)
block|{
name|getOrCreateInfo
argument_list|(
name|async
argument_list|,
name|indexPath
argument_list|)
operator|.
name|skippedIndexing
argument_list|(
name|checkNotNull
argument_list|(
name|corruptSince
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|indexUpdateFailed
parameter_list|(
name|String
name|async
parameter_list|,
name|String
name|indexPath
parameter_list|,
name|Exception
name|e
parameter_list|)
block|{
name|getOrCreateInfo
argument_list|(
name|async
argument_list|,
name|indexPath
argument_list|)
operator|.
name|addFailure
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//~---------------------------------< Setters>
specifier|public
name|void
name|setCorruptInterval
parameter_list|(
name|long
name|interval
parameter_list|,
name|TimeUnit
name|unit
parameter_list|)
block|{
name|this
operator|.
name|corruptIntervalMillis
operator|=
name|unit
operator|.
name|toMillis
argument_list|(
name|interval
argument_list|)
expr_stmt|;
block|}
name|void
name|setClock
parameter_list|(
name|Clock
name|clock
parameter_list|)
block|{
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
name|long
name|getCorruptIntervalMillis
parameter_list|()
block|{
return|return
name|corruptIntervalMillis
return|;
block|}
specifier|private
name|long
name|getTime
parameter_list|()
block|{
return|return
name|clock
operator|.
name|getTime
argument_list|()
return|;
block|}
specifier|private
specifier|synchronized
name|CorruptIndexInfo
name|getOrCreateInfo
parameter_list|(
name|String
name|asyncName
parameter_list|,
name|String
name|indexPath
parameter_list|)
block|{
name|CorruptIndexInfo
name|info
init|=
name|indexes
operator|.
name|get
argument_list|(
name|indexPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|==
literal|null
condition|)
block|{
name|info
operator|=
operator|new
name|CorruptIndexInfo
argument_list|(
name|asyncName
argument_list|,
name|indexPath
argument_list|)
expr_stmt|;
name|indexes
operator|.
name|put
argument_list|(
name|indexPath
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|public
class|class
name|CorruptIndexInfo
block|{
specifier|private
specifier|final
name|String
name|asyncName
decl_stmt|;
specifier|private
specifier|final
name|String
name|path
decl_stmt|;
specifier|private
specifier|final
name|int
name|lastIndexerCycleCount
init|=
name|indexerCycleCount
decl_stmt|;
specifier|private
name|String
name|exception
init|=
literal|""
decl_stmt|;
specifier|private
name|int
name|failureCount
decl_stmt|;
specifier|private
name|int
name|skippedCount
decl_stmt|;
specifier|private
name|long
name|corruptSince
decl_stmt|;
name|CorruptIndexInfo
parameter_list|(
name|String
name|asyncName
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|asyncName
operator|=
name|asyncName
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|corruptSince
operator|=
name|getTime
argument_list|()
expr_stmt|;
block|}
name|void
name|addFailure
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|exception
operator|=
name|Throwables
operator|.
name|getStackTraceAsString
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|failureCount
operator|++
expr_stmt|;
block|}
name|void
name|skippedIndexing
parameter_list|(
name|Calendar
name|corruptSince
parameter_list|)
block|{
name|skippedCount
operator|++
expr_stmt|;
name|this
operator|.
name|corruptSince
operator|=
name|corruptSince
operator|.
name|getTimeInMillis
argument_list|()
expr_stmt|;
block|}
specifier|public
name|boolean
name|isFailingSinceLongTime
parameter_list|()
block|{
return|return
name|getTime
argument_list|()
operator|-
name|corruptSince
operator|>
name|corruptIntervalMillis
return|;
block|}
specifier|public
name|String
name|getStats
parameter_list|()
block|{
return|return
name|String
operator|.
name|format
argument_list|(
literal|"since %tc ,%d indexing cycles, failed %d times, skipped %d time"
argument_list|,
name|corruptSince
argument_list|,
name|getCycleCount
argument_list|()
argument_list|,
name|failureCount
argument_list|,
name|skippedCount
argument_list|)
return|;
block|}
specifier|public
name|Calendar
name|getCorruptSinceAsCal
parameter_list|()
block|{
name|Calendar
name|cal
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|cal
operator|.
name|setTimeInMillis
argument_list|(
name|corruptSince
argument_list|)
expr_stmt|;
return|return
name|cal
return|;
block|}
specifier|public
name|String
name|getLastException
parameter_list|()
block|{
return|return
name|exception
return|;
block|}
specifier|public
name|int
name|getSkippedCount
parameter_list|()
block|{
return|return
name|skippedCount
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
specifier|private
name|int
name|getCycleCount
parameter_list|()
block|{
return|return
name|indexerCycleCount
operator|-
name|lastIndexerCycleCount
return|;
block|}
block|}
block|}
end_class

end_unit

