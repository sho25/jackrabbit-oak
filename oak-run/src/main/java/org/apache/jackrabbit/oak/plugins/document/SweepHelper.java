begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|TimeDurationFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
operator|.
name|newArrayList
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|JOURNAL
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Collection
operator|.
name|NODES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
operator|.
name|Type
operator|.
name|REMOVE_MAP_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|UpdateOp
operator|.
name|Operation
operator|.
name|Type
operator|.
name|SET_MAP_ENTRY
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|util
operator|.
name|Utils
operator|.
name|getRootDocument
import|;
end_import

begin_comment
comment|/**  * Helper class to perform a revision sweep for a given clusterId.  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|SweepHelper
block|{
specifier|private
specifier|static
specifier|final
name|TimeDurationFormatter
name|TDF
init|=
name|TimeDurationFormatter
operator|.
name|forLogging
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|sweep
parameter_list|(
specifier|final
name|DocumentStore
name|store
parameter_list|,
specifier|final
name|RevisionContext
name|context
parameter_list|,
specifier|final
name|MissingLastRevSeeker
name|seeker
parameter_list|)
block|{
name|int
name|clusterId
init|=
name|context
operator|.
name|getClusterId
argument_list|()
decl_stmt|;
name|NodeDocument
name|rootDoc
init|=
name|getRootDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|Revision
name|lastRev
init|=
name|rootDoc
operator|.
name|getLastRev
argument_list|()
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastRev
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"root document does not"
operator|+
literal|" have a lastRev entry for clusterId "
operator|+
name|clusterId
argument_list|)
throw|;
block|}
specifier|final
name|AtomicReference
argument_list|<
name|Revision
argument_list|>
name|sweepRev
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
name|rootDoc
operator|.
name|getSweepRevisions
argument_list|()
operator|.
name|getRevision
argument_list|(
name|clusterId
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|sweepRev
operator|.
name|get
argument_list|()
operator|==
literal|null
condition|)
block|{
name|sweepRev
operator|.
name|set
argument_list|(
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|clusterId
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|AtomicLong
name|sweepUpdates
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|bcUpdates
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|final
name|AtomicLong
name|revertUpdates
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
name|long
name|time
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|NodeDocumentSweeper
name|sweeper
init|=
operator|new
name|NodeDocumentSweeper
argument_list|(
name|context
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|sweeper
operator|.
name|sweep
argument_list|(
name|seeker
operator|.
name|getCandidates
argument_list|(
name|sweepRev
operator|.
name|get
argument_list|()
operator|.
name|getTimestamp
argument_list|()
argument_list|)
argument_list|,
operator|new
name|NodeDocumentSweepListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|sweepUpdate
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|UpdateOp
argument_list|>
name|updates
parameter_list|)
throws|throws
name|DocumentStoreException
block|{
comment|// create an invalidate entry
name|JournalEntry
name|inv
init|=
name|JOURNAL
operator|.
name|newDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|inv
operator|.
name|modified
argument_list|(
name|updates
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
name|Revision
name|r
init|=
name|context
operator|.
name|newRevision
argument_list|()
operator|.
name|asBranchRevision
argument_list|()
decl_stmt|;
name|UpdateOp
name|invOp
init|=
name|inv
operator|.
name|asUpdateOp
argument_list|(
name|r
argument_list|)
decl_stmt|;
comment|// and reference it from a regular entry
name|JournalEntry
name|entry
init|=
name|JOURNAL
operator|.
name|newDocument
argument_list|(
name|store
argument_list|)
decl_stmt|;
name|entry
operator|.
name|invalidate
argument_list|(
name|Collections
operator|.
name|singleton
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
name|Revision
name|jRev
init|=
name|context
operator|.
name|newRevision
argument_list|()
decl_stmt|;
name|UpdateOp
name|jOp
init|=
name|entry
operator|.
name|asUpdateOp
argument_list|(
name|jRev
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|store
operator|.
name|create
argument_list|(
name|JOURNAL
argument_list|,
name|newArrayList
argument_list|(
name|invOp
argument_list|,
name|jOp
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|msg
init|=
literal|"Unable to create journal entries for "
operator|+
literal|"document invalidation."
decl_stmt|;
throw|throw
operator|new
name|DocumentStoreException
argument_list|(
name|msg
argument_list|)
throw|;
block|}
name|sweepRev
operator|.
name|set
argument_list|(
name|Utils
operator|.
name|max
argument_list|(
name|sweepRev
operator|.
name|get
argument_list|()
argument_list|,
name|jRev
argument_list|)
argument_list|)
expr_stmt|;
comment|// now that journal entry is in place, perform the actual
comment|// updates on the documents
name|store
operator|.
name|createOrUpdate
argument_list|(
name|NODES
argument_list|,
name|newArrayList
argument_list|(
name|updates
operator|.
name|values
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|sweepUpdates
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|trackStats
argument_list|(
name|updates
operator|.
name|values
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sweeper updated "
operator|+
name|updates
operator|.
name|keySet
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|trackStats
parameter_list|(
name|Iterable
argument_list|<
name|UpdateOp
argument_list|>
name|ops
parameter_list|)
block|{
name|boolean
name|bcUpdate
init|=
literal|false
decl_stmt|;
name|boolean
name|revertUpdate
init|=
literal|false
decl_stmt|;
for|for
control|(
name|UpdateOp
name|op
range|:
name|ops
control|)
block|{
for|for
control|(
name|UpdateOp
operator|.
name|Operation
name|o
range|:
name|op
operator|.
name|getChanges
argument_list|()
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|o
operator|.
name|type
operator|==
name|SET_MAP_ENTRY
condition|)
block|{
name|bcUpdate
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|o
operator|.
name|type
operator|==
name|REMOVE_MAP_ENTRY
condition|)
block|{
name|revertUpdate
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|bcUpdate
condition|)
block|{
name|bcUpdates
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|revertUpdate
condition|)
block|{
name|revertUpdates
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
name|time
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|time
expr_stmt|;
comment|// write back sweep revision if none was there or revisions were swept
if|if
condition|(
name|rootDoc
operator|.
name|getSweepRevisions
argument_list|()
operator|.
name|getRevision
argument_list|(
name|clusterId
argument_list|)
operator|==
literal|null
operator|||
name|sweepUpdates
operator|.
name|get
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// sweepRev must be at least the current lastRev
name|sweepRev
operator|.
name|set
argument_list|(
name|Utils
operator|.
name|max
argument_list|(
name|sweepRev
operator|.
name|get
argument_list|()
argument_list|,
name|lastRev
argument_list|)
argument_list|)
expr_stmt|;
comment|// perform a conditional update on the last seen lastRev
comment|// to ensure the cluster node is still inactive
name|UpdateOp
name|op
init|=
operator|new
name|UpdateOp
argument_list|(
name|rootDoc
operator|.
name|getId
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|op
operator|.
name|equals
argument_list|(
literal|"_lastRev"
argument_list|,
operator|new
name|Revision
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|clusterId
argument_list|)
argument_list|,
name|lastRev
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setSweepRevision
argument_list|(
name|op
argument_list|,
name|sweepRev
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|NodeDocument
operator|.
name|setLastRev
argument_list|(
name|op
argument_list|,
name|sweepRev
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|store
operator|.
name|findAndUpdate
argument_list|(
name|NODES
argument_list|,
name|op
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Updated sweep revision to "
operator|+
name|sweepRev
operator|.
name|get
argument_list|()
operator|+
literal|". Branch commit markers added to "
operator|+
name|bcUpdates
operator|.
name|get
argument_list|()
operator|+
literal|" documents. Reverted uncommitted "
operator|+
literal|"changes on "
operator|+
name|revertUpdates
operator|.
name|get
argument_list|()
operator|+
literal|" documents. "
operator|+
literal|"("
operator|+
name|formatMillis
argument_list|(
name|time
argument_list|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sweep revision updated failed. "
operator|+
literal|"Is clusterId "
operator|+
name|clusterId
operator|+
literal|" active again?"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Revision sweep not needed for "
operator|+
literal|"clusterId "
operator|+
name|clusterId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|formatMillis
parameter_list|(
name|long
name|millis
parameter_list|)
block|{
return|return
name|TDF
operator|.
name|format
argument_list|(
name|millis
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
return|;
block|}
block|}
end_class

end_unit

