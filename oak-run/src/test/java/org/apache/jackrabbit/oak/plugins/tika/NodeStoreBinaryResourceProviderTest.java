begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Blob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|BlobStoreBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|MemoryNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|MemoryBlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
operator|.
name|JCR_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|nodetype
operator|.
name|write
operator|.
name|InitialContent
operator|.
name|INITIAL_CONTENT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStoreBinaryResourceProviderTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
name|NodeState
name|root
init|=
name|INITIAL_CONTENT
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|countBinaries
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createFileNode
argument_list|(
name|builder
argument_list|,
literal|"a"
argument_list|,
operator|new
name|IdBlob
argument_list|(
literal|"hello"
argument_list|,
literal|null
argument_list|)
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|builder
argument_list|,
literal|"b"
argument_list|,
operator|new
name|IdBlob
argument_list|(
literal|"hello"
argument_list|,
literal|"id1"
argument_list|)
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|builder
operator|.
name|child
argument_list|(
literal|"a2"
argument_list|)
argument_list|,
literal|"c"
argument_list|,
operator|new
name|IdBlob
argument_list|(
literal|"hello"
argument_list|,
literal|"id2"
argument_list|)
argument_list|,
literal|"text/foo"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_ENCODING
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|BlobStore
name|blobStore
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|NodeStoreBinaryResourceProvider
name|extractor
init|=
operator|new
name|NodeStoreBinaryResourceProvider
argument_list|(
name|store
argument_list|,
name|blobStore
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|extractor
operator|.
name|getBinaries
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|extractor
operator|.
name|getBinaries
argument_list|(
literal|"/a2"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|BinaryResource
name|bs
init|=
name|extractor
operator|.
name|getBinaries
argument_list|(
literal|"/a2"
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"text/foo"
argument_list|,
name|bs
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"bar"
argument_list|,
name|bs
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id2"
argument_list|,
name|bs
operator|.
name|getBlobId
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|csvGenerator
parameter_list|()
throws|throws
name|Exception
block|{
name|File
name|csv
init|=
operator|new
name|File
argument_list|(
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|"test.csv"
argument_list|)
decl_stmt|;
name|BlobStore
name|blobStore
init|=
operator|new
name|MemoryBlobStore
argument_list|()
decl_stmt|;
name|NodeBuilder
name|builder
init|=
name|root
operator|.
name|builder
argument_list|()
decl_stmt|;
name|createFileNode
argument_list|(
name|builder
argument_list|,
literal|"a"
argument_list|,
name|blobOf
argument_list|(
literal|"foo"
argument_list|,
name|blobStore
argument_list|)
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|createFileNode
argument_list|(
name|builder
argument_list|,
literal|"b"
argument_list|,
name|blobOf
argument_list|(
literal|"hello"
argument_list|,
name|blobStore
argument_list|)
argument_list|,
literal|"text/plain"
argument_list|)
expr_stmt|;
name|NodeStore
name|store
init|=
operator|new
name|MemoryNodeStore
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|)
decl_stmt|;
name|NodeStoreBinaryResourceProvider
name|extractor
init|=
operator|new
name|NodeStoreBinaryResourceProvider
argument_list|(
name|store
argument_list|,
name|blobStore
argument_list|)
decl_stmt|;
name|CSVFileGenerator
name|generator
init|=
operator|new
name|CSVFileGenerator
argument_list|(
name|csv
argument_list|)
decl_stmt|;
name|generator
operator|.
name|generate
argument_list|(
name|extractor
operator|.
name|getBinaries
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
name|CSVFileBinaryResourceProvider
name|csvbrp
init|=
operator|new
name|CSVFileBinaryResourceProvider
argument_list|(
name|csv
argument_list|,
name|blobStore
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|csvbrp
operator|.
name|getBinaries
argument_list|(
literal|"/"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|NodeBuilder
name|createFileNode
parameter_list|(
name|NodeBuilder
name|base
parameter_list|,
name|String
name|name
parameter_list|,
name|Blob
name|content
parameter_list|,
name|String
name|mimeType
parameter_list|)
block|{
name|NodeBuilder
name|jcrContent
init|=
name|base
operator|.
name|child
argument_list|(
name|name
argument_list|)
operator|.
name|child
argument_list|(
name|JCR_CONTENT
argument_list|)
decl_stmt|;
name|jcrContent
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_DATA
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|jcrContent
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIMETYPE
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
return|return
name|jcrContent
return|;
block|}
specifier|private
name|Blob
name|blobOf
parameter_list|(
name|String
name|content
parameter_list|,
name|BlobStore
name|bs
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|id
init|=
name|bs
operator|.
name|writeBlob
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|content
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|BlobStoreBlob
argument_list|(
name|bs
argument_list|,
name|id
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|IdBlob
extends|extends
name|ArrayBasedBlob
block|{
specifier|final
name|String
name|id
decl_stmt|;
specifier|public
name|IdBlob
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|id
parameter_list|)
block|{
name|super
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReference
parameter_list|()
block|{
return|return
name|id
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentIdentity
parameter_list|()
block|{
return|return
name|id
return|;
block|}
block|}
block|}
end_class

end_unit

