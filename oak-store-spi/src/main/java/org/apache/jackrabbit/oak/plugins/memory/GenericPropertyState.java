begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|Conversions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|value
operator|.
name|Conversions
operator|.
name|Converter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkArgument
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|DATE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|PATH
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|REFERENCE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
operator|.
name|WEAKREFERENCE
import|;
end_import

begin_class
specifier|public
class|class
name|GenericPropertyState
extends|extends
name|SinglePropertyState
argument_list|<
name|String
argument_list|>
block|{
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|Type
argument_list|<
name|?
argument_list|>
name|type
decl_stmt|;
comment|/**      * @throws IllegalArgumentException if {@code type.isArray()} is {@code true}      */
specifier|public
name|GenericPropertyState
parameter_list|(
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|String
name|value
parameter_list|,
annotation|@
name|NotNull
name|Type
argument_list|<
name|?
argument_list|>
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|checkNotNull
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|checkNotNull
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|checkArgument
argument_list|(
operator|!
name|type
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a {@code PropertyState} from a date. No validation is performed      * on the string passed for {@code value}.      *      * @param name  The name of the property state      * @param value  The value of the property state      * @return  The new property state of type {@link Type#DATE}      */
specifier|public
specifier|static
name|PropertyState
name|dateProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|GenericPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|DATE
argument_list|)
return|;
block|}
comment|/**      * Create a {@code PropertyState} from a name. No validation is performed      * on the string passed for {@code value}.      * @param name  The name of the property state      * @param value  The value of the property state      * @return  The new property state of type {@link Type#NAME}      */
specifier|public
specifier|static
name|PropertyState
name|nameProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|GenericPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|NAME
argument_list|)
return|;
block|}
comment|/**      * Create a {@code PropertyState} from a path. No validation is performed      * on the string passed for {@code value}.      * @param name  The name of the property state      * @param value  The value of the property state      * @return  The new property state of type {@link Type#PATH}      */
specifier|public
specifier|static
name|PropertyState
name|pathProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|GenericPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|PATH
argument_list|)
return|;
block|}
comment|/**      * Create a {@code PropertyState} from a reference. No validation is performed      * on the string passed for {@code value}.      * @param name  The name of the property state      * @param value  The value of the property state      * @return  The new property state of type {@link Type#REFERENCE}      */
specifier|public
specifier|static
name|PropertyState
name|referenceProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|GenericPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|REFERENCE
argument_list|)
return|;
block|}
comment|/**      * Create a {@code PropertyState} from a weak reference. No validation is performed      * on the string passed for {@code value}.      * @param name  The name of the property state      * @param value  The value of the property state      * @return  The new property state of type {@link Type#WEAKREFERENCE}      */
specifier|public
specifier|static
name|PropertyState
name|weakreferenceProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|GenericPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|WEAKREFERENCE
argument_list|)
return|;
block|}
comment|/**      * Create a {@code PropertyState} from a URI. No validation is performed      * on the string passed for {@code value}.      * @param name  The name of the property state      * @param value  The value of the property state      * @return  The new property state of type {@link Type#URI}      */
specifier|public
specifier|static
name|PropertyState
name|uriProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|GenericPropertyState
argument_list|(
name|name
argument_list|,
name|value
argument_list|,
name|URI
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|Converter
name|getConverter
parameter_list|()
block|{
return|return
name|Conversions
operator|.
name|convert
argument_list|(
name|value
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Type
argument_list|<
name|?
argument_list|>
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

