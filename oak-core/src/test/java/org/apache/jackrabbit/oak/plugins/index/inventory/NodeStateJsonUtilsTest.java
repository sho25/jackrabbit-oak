begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|inventory
operator|.
name|NodeStateJsonUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|ArrayBasedBlob
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|json
operator|.
name|simple
operator|.
name|JSONValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertThat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|NodeStateJsonUtilsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|toJson
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo3"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo4"
argument_list|,
operator|new
name|ArrayBasedBlob
argument_list|(
literal|"foo"
operator|.
name|getBytes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|,
name|Type
operator|.
name|LONGS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo2"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|,
name|Type
operator|.
name|STRINGS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|"b"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo3"
argument_list|,
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
name|Type
operator|.
name|BOOLEANS
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|child
argument_list|(
literal|":c"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|String
name|jsop
init|=
name|NodeStateJsonUtils
operator|.
name|toJson
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|JSONValue
operator|.
name|parseWithException
argument_list|(
name|jsop
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|json
operator|.
name|containsKey
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|a
init|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|JSONObject
name|b
init|=
operator|(
name|JSONObject
operator|)
name|a
operator|.
name|get
argument_list|(
literal|"b"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|1L
argument_list|,
literal|2L
argument_list|,
literal|3L
argument_list|)
argument_list|,
name|b
operator|.
name|get
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|"x"
argument_list|,
literal|"y"
argument_list|,
literal|"z"
argument_list|)
argument_list|,
name|b
operator|.
name|get
argument_list|(
literal|"foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Lists
operator|.
name|newArrayList
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
name|b
operator|.
name|get
argument_list|(
literal|"foo3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|hiddenContent
parameter_list|()
throws|throws
name|Exception
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|":foo"
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|child
argument_list|(
literal|":b"
argument_list|)
expr_stmt|;
name|NodeState
name|state
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|String
name|jsop
init|=
name|NodeStateJsonUtils
operator|.
name|toJson
argument_list|(
name|state
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|JSONObject
name|json
init|=
operator|(
name|JSONObject
operator|)
name|JSONValue
operator|.
name|parseWithException
argument_list|(
name|jsop
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|json
operator|.
name|containsKey
argument_list|(
literal|":b"
argument_list|)
argument_list|)
expr_stmt|;
comment|//Hidden content should not be found
name|JSONObject
name|a
init|=
operator|(
name|JSONObject
operator|)
name|json
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|a
operator|.
name|containsKey
argument_list|(
literal|":foo"
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|jsop2
init|=
name|NodeStateJsonUtils
operator|.
name|toJson
argument_list|(
name|builder
operator|.
name|getNodeState
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|JSONObject
name|json2
init|=
operator|(
name|JSONObject
operator|)
name|JSONValue
operator|.
name|parseWithException
argument_list|(
name|jsop2
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|json2
operator|.
name|containsKey
argument_list|(
literal|":b"
argument_list|)
argument_list|)
expr_stmt|;
name|JSONObject
name|a2
init|=
operator|(
name|JSONObject
operator|)
name|json2
operator|.
name|get
argument_list|(
literal|"a"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|a2
operator|.
name|containsKey
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|a2
operator|.
name|containsKey
argument_list|(
literal|":foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

