begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newHashSet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|FileUtils
operator|.
name|byteCountToDisplaySize
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|FileStoreHelper
operator|.
name|newBasicReadOnlyBlobStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|FileStoreHelper
operator|.
name|openReadOnlyFileStore
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordType
operator|.
name|NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|writeGCGraph
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentGraph
operator|.
name|writeSegmentGraph
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|run
operator|.
name|Utils
operator|.
name|asCloseable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
operator|.
name|getLogger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Queues
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|Closer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|explorer
operator|.
name|NodeStoreTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|json
operator|.
name|JsopDiff
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|backup
operator|.
name|FileStoreBackup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|backup
operator|.
name|FileStoreRestore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|PCMAnalyser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|RecordUsageAnalyser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|Segment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentNodeStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|SegmentTracker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|segment
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeStore
import|;
end_import

begin_class
class|class
name|SegmentUtils
block|{
specifier|private
name|SegmentUtils
parameter_list|()
block|{
comment|// Prevent instantiation
block|}
specifier|static
name|void
name|backup
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|Closer
name|closer
init|=
name|Closer
operator|.
name|create
argument_list|()
decl_stmt|;
try|try
block|{
name|FileStore
name|fs
decl_stmt|;
if|if
condition|(
name|FileStoreBackup
operator|.
name|USE_FAKE_BLOBSTORE
condition|)
block|{
name|fs
operator|=
name|openReadOnlyFileStore
argument_list|(
name|source
argument_list|,
name|newBasicReadOnlyBlobStore
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fs
operator|=
name|openReadOnlyFileStore
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
name|closer
operator|.
name|register
argument_list|(
name|asCloseable
argument_list|(
name|fs
argument_list|)
argument_list|)
expr_stmt|;
name|NodeStore
name|store
init|=
name|SegmentNodeStore
operator|.
name|builder
argument_list|(
name|fs
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
name|FileStoreBackup
operator|.
name|backup
argument_list|(
name|store
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
throw|throw
name|closer
operator|.
name|rethrow
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|restore
parameter_list|(
name|File
name|source
parameter_list|,
name|File
name|target
parameter_list|)
throws|throws
name|IOException
block|{
name|FileStoreRestore
operator|.
name|restore
argument_list|(
name|source
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
specifier|static
name|void
name|debug
parameter_list|(
name|String
modifier|...
name|args
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Debug "
operator|+
name|file
argument_list|)
expr_stmt|;
name|FileStore
name|store
init|=
name|openReadOnlyFileStore
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|debugFileStore
argument_list|(
name|store
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|debugTarFile
argument_list|(
name|store
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugSegment
argument_list|(
name|store
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|store
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|static
name|void
name|graph
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|gcGraph
parameter_list|,
name|Date
name|epoch
parameter_list|,
name|String
name|regex
parameter_list|,
name|OutputStream
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Opening file store at "
operator|+
name|path
argument_list|)
expr_stmt|;
name|FileStore
operator|.
name|ReadOnlyStore
name|fileStore
init|=
name|openReadOnlyFileStore
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|gcGraph
condition|)
block|{
name|writeGCGraph
argument_list|(
name|fileStore
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writeSegmentGraph
argument_list|(
name|fileStore
argument_list|,
name|out
argument_list|,
name|epoch
argument_list|,
name|regex
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|debugFileStore
parameter_list|(
name|FileStore
name|store
parameter_list|)
block|{
name|Map
argument_list|<
name|SegmentId
argument_list|,
name|List
argument_list|<
name|SegmentId
argument_list|>
argument_list|>
name|idmap
init|=
name|Maps
operator|.
name|newHashMap
argument_list|()
decl_stmt|;
name|int
name|dataCount
init|=
literal|0
decl_stmt|;
name|long
name|dataSize
init|=
literal|0
decl_stmt|;
name|int
name|bulkCount
init|=
literal|0
decl_stmt|;
name|long
name|bulkSize
init|=
literal|0
decl_stmt|;
operator|(
operator|(
name|Logger
operator|)
name|getLogger
argument_list|(
name|SegmentTracker
operator|.
name|class
argument_list|)
operator|)
operator|.
name|setLevel
argument_list|(
name|Level
operator|.
name|OFF
argument_list|)
expr_stmt|;
name|RecordUsageAnalyser
name|analyser
init|=
operator|new
name|RecordUsageAnalyser
argument_list|()
decl_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|store
operator|.
name|getSegmentIds
argument_list|()
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|Segment
name|segment
init|=
name|id
operator|.
name|getSegment
argument_list|()
decl_stmt|;
name|dataCount
operator|++
expr_stmt|;
name|dataSize
operator|+=
name|segment
operator|.
name|size
argument_list|()
expr_stmt|;
name|idmap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|segment
operator|.
name|getReferencedIds
argument_list|()
argument_list|)
expr_stmt|;
name|analyseSegment
argument_list|(
name|segment
argument_list|,
name|analyser
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|bulkCount
operator|++
expr_stmt|;
name|bulkSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
name|idmap
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|Collections
operator|.
expr|<
name|SegmentId
operator|>
name|emptyList
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Total size:"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d data segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|dataSize
argument_list|)
argument_list|,
name|dataCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d bulk segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|bulkSize
argument_list|)
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|analyser
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|SegmentId
argument_list|>
name|garbage
init|=
name|newHashSet
argument_list|(
name|idmap
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Queue
argument_list|<
name|SegmentId
argument_list|>
name|queue
init|=
name|Queues
operator|.
name|newArrayDeque
argument_list|()
decl_stmt|;
name|queue
operator|.
name|add
argument_list|(
name|store
operator|.
name|getHead
argument_list|()
operator|.
name|getRecordId
argument_list|()
operator|.
name|getSegmentId
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|queue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SegmentId
name|id
init|=
name|queue
operator|.
name|remove
argument_list|()
decl_stmt|;
if|if
condition|(
name|garbage
operator|.
name|remove
argument_list|(
name|id
argument_list|)
condition|)
block|{
name|queue
operator|.
name|addAll
argument_list|(
name|idmap
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|dataCount
operator|=
literal|0
expr_stmt|;
name|dataSize
operator|=
literal|0
expr_stmt|;
name|bulkCount
operator|=
literal|0
expr_stmt|;
name|bulkSize
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|SegmentId
name|id
range|:
name|garbage
control|)
block|{
if|if
condition|(
name|id
operator|.
name|isDataSegmentId
argument_list|()
condition|)
block|{
name|dataCount
operator|++
expr_stmt|;
name|dataSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|id
operator|.
name|isBulkSegmentId
argument_list|()
condition|)
block|{
name|bulkCount
operator|++
expr_stmt|;
name|bulkSize
operator|+=
name|id
operator|.
name|getSegment
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%nAvailable for garbage collection:%n"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d data segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|dataSize
argument_list|)
argument_list|,
name|dataCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%s in %6d bulk segments%n"
argument_list|,
name|byteCountToDisplaySize
argument_list|(
name|bulkSize
argument_list|)
argument_list|,
name|bulkCount
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|format
argument_list|(
literal|"%n%s"
argument_list|,
operator|new
name|PCMAnalyser
argument_list|(
name|store
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|analyseSegment
parameter_list|(
name|Segment
name|segment
parameter_list|,
name|RecordUsageAnalyser
name|analyser
parameter_list|)
block|{
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|segment
operator|.
name|getRootCount
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
if|if
condition|(
name|segment
operator|.
name|getRootType
argument_list|(
name|k
argument_list|)
operator|==
name|NODE
condition|)
block|{
name|RecordId
name|nodeId
init|=
operator|new
name|RecordId
argument_list|(
name|segment
operator|.
name|getSegmentId
argument_list|()
argument_list|,
name|segment
operator|.
name|getRootOffset
argument_list|(
name|k
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|analyser
operator|.
name|analyseNode
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|format
argument_list|(
literal|"Error while processing node at %s"
argument_list|,
name|nodeId
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|debugTarFile
parameter_list|(
name|FileStore
name|store
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|File
name|root
init|=
operator|new
name|File
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|f
init|=
name|args
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|endsWith
argument_list|(
literal|".tar"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"skipping "
operator|+
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|File
name|tar
init|=
operator|new
name|File
argument_list|(
name|root
argument_list|,
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tar
operator|.
name|exists
argument_list|()
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"file doesn't exist, skipping "
operator|+
name|f
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Debug file "
operator|+
name|tar
operator|+
literal|"("
operator|+
name|tar
operator|.
name|length
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|UUID
argument_list|>
name|uuids
init|=
operator|new
name|HashSet
argument_list|<
name|UUID
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|hasrefs
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Set
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|e
range|:
name|store
operator|.
name|getTarReaderIndex
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|e
operator|.
name|getKey
argument_list|()
operator|.
name|endsWith
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|hasrefs
operator|=
literal|true
expr_stmt|;
name|uuids
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasrefs
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"SegmentNodeState references to "
operator|+
name|f
argument_list|)
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|paths
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|NodeStoreTree
operator|.
name|filterNodeStates
argument_list|(
name|uuids
argument_list|,
name|paths
argument_list|,
name|store
operator|.
name|getHead
argument_list|()
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|paths
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"No references to "
operator|+
name|f
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Map
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|graph
init|=
name|store
operator|.
name|getTarGraph
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Tar graph:"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|UUID
argument_list|,
name|List
argument_list|<
name|UUID
argument_list|>
argument_list|>
name|entry
range|:
name|graph
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|""
operator|+
name|entry
operator|.
name|getKey
argument_list|()
operator|+
literal|'='
operator|+
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Error getting tar graph:"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|debugSegment
parameter_list|(
name|FileStore
name|store
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
block|{
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"([0-9a-f-]+)|(([0-9a-f-]+:[0-9a-f]+)(-([0-9a-f-]+:[0-9a-f]+))?)?(/.*)?"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unknown argument: "
operator|+
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|UUID
name|uuid
init|=
name|UUID
operator|.
name|fromString
argument_list|(
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|SegmentId
name|id
init|=
name|store
operator|.
name|getTracker
argument_list|()
operator|.
name|getSegmentId
argument_list|(
name|uuid
operator|.
name|getMostSignificantBits
argument_list|()
argument_list|,
name|uuid
operator|.
name|getLeastSignificantBits
argument_list|()
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|id
operator|.
name|getSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|RecordId
name|id1
init|=
name|store
operator|.
name|getHead
argument_list|()
operator|.
name|getRecordId
argument_list|()
decl_stmt|;
name|RecordId
name|id2
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|id1
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|4
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|id2
operator|=
name|RecordId
operator|.
name|fromString
argument_list|(
name|store
operator|.
name|getTracker
argument_list|()
argument_list|,
name|matcher
operator|.
name|group
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|path
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|path
operator|=
name|matcher
operator|.
name|group
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|id2
operator|==
literal|null
condition|)
block|{
name|NodeState
name|node
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"/ ("
operator|+
name|id1
operator|+
literal|") -> "
operator|+
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node
operator|=
name|node
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|RecordId
name|nid
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|SegmentNodeState
condition|)
block|{
name|nid
operator|=
operator|(
operator|(
name|SegmentNodeState
operator|)
name|node
operator|)
operator|.
name|getRecordId
argument_list|()
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"  "
operator|+
name|name
operator|+
literal|" ("
operator|+
name|nid
operator|+
literal|") -> "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|NodeState
name|node1
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id1
argument_list|)
decl_stmt|;
name|NodeState
name|node2
init|=
operator|new
name|SegmentNodeState
argument_list|(
name|id2
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|PathUtils
operator|.
name|elements
argument_list|(
name|path
argument_list|)
control|)
block|{
name|node1
operator|=
name|node1
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|node2
operator|=
name|node2
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|JsopBuilder
operator|.
name|prettyPrint
argument_list|(
name|JsopDiff
operator|.
name|diffToJsop
argument_list|(
name|node1
argument_list|,
name|node2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

