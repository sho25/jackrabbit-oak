begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|delegate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|session
operator|.
name|operation
operator|.
name|SessionOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|principal
operator|.
name|PrincipalQueryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * This implementation of {@code PrincipalManager} delegates back to a  * delegatee wrapping each call into a {@link SessionOperation} closure.  *  * @see SessionDelegate#perform(SessionOperation)  */
end_comment

begin_class
specifier|public
class|class
name|PrincipalManagerDelegator
implements|implements
name|PrincipalManager
implements|,
name|PrincipalQueryManager
block|{
specifier|private
specifier|final
name|SessionDelegate
name|delegate
decl_stmt|;
specifier|private
specifier|final
name|PrincipalManager
name|principalManager
decl_stmt|;
specifier|public
name|PrincipalManagerDelegator
parameter_list|(
name|SessionDelegate
name|delegate
parameter_list|,
name|PrincipalManager
name|principalManager
parameter_list|)
block|{
name|this
operator|.
name|principalManager
operator|=
name|principalManager
expr_stmt|;
name|this
operator|.
name|delegate
operator|=
name|delegate
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasPrincipal
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|String
name|principalName
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|safePerform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Boolean
argument_list|>
argument_list|(
literal|"hasPrincipal"
argument_list|)
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Boolean
name|perform
parameter_list|()
block|{
return|return
name|principalManager
operator|.
name|hasPrincipal
argument_list|(
name|principalName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Nullable
annotation|@
name|Override
specifier|public
name|Principal
name|getPrincipal
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|String
name|principalName
parameter_list|)
block|{
try|try
block|{
return|return
name|delegate
operator|.
name|performNullable
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Principal
argument_list|>
argument_list|(
literal|"getPrincipal"
argument_list|)
block|{
annotation|@
name|Override
specifier|public
name|Principal
name|performNullable
parameter_list|()
block|{
return|return
name|principalManager
operator|.
name|getPrincipal
argument_list|(
name|principalName
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unexpected exception thrown by operation 'getPrincipal'"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|findPrincipals
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|String
name|simpleFilter
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|safePerform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|PrincipalIterator
argument_list|>
argument_list|(
literal|"findPrincipals"
argument_list|)
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|perform
parameter_list|()
block|{
return|return
name|principalManager
operator|.
name|findPrincipals
argument_list|(
name|simpleFilter
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|findPrincipals
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|String
name|simpleFilter
parameter_list|,
specifier|final
name|int
name|searchType
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|safePerform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|PrincipalIterator
argument_list|>
argument_list|(
literal|"findPrincipals"
argument_list|)
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|perform
parameter_list|()
block|{
return|return
name|principalManager
operator|.
name|findPrincipals
argument_list|(
name|simpleFilter
argument_list|,
name|searchType
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|getPrincipals
parameter_list|(
specifier|final
name|int
name|searchType
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|safePerform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|PrincipalIterator
argument_list|>
argument_list|(
literal|"getPrincipals"
argument_list|)
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|perform
parameter_list|()
block|{
return|return
name|principalManager
operator|.
name|getPrincipals
argument_list|(
name|searchType
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|getGroupMembership
parameter_list|(
annotation|@
name|NotNull
specifier|final
name|Principal
name|principal
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|safePerform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|PrincipalIterator
argument_list|>
argument_list|(
literal|"getGroupMembership"
argument_list|)
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|perform
parameter_list|()
block|{
return|return
name|principalManager
operator|.
name|getGroupMembership
argument_list|(
name|principal
argument_list|)
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Principal
name|getEveryone
parameter_list|()
block|{
return|return
name|delegate
operator|.
name|safePerform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|Principal
argument_list|>
argument_list|(
literal|"getEveryone"
argument_list|)
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Principal
name|perform
parameter_list|()
block|{
return|return
name|principalManager
operator|.
name|getEveryone
argument_list|()
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|findPrincipals
parameter_list|(
annotation|@
name|Nullable
name|String
name|simpleFilter
parameter_list|,
name|boolean
name|fullText
parameter_list|,
name|int
name|searchType
parameter_list|,
name|long
name|offset
parameter_list|,
name|long
name|limit
parameter_list|)
block|{
return|return
name|delegate
operator|.
name|safePerform
argument_list|(
operator|new
name|SessionOperation
argument_list|<
name|PrincipalIterator
argument_list|>
argument_list|(
literal|"findPrincipals"
argument_list|)
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|PrincipalIterator
name|perform
parameter_list|()
block|{
if|if
condition|(
name|principalManager
operator|instanceof
name|PrincipalQueryManager
condition|)
block|{
return|return
operator|(
operator|(
name|PrincipalQueryManager
operator|)
name|principalManager
operator|)
operator|.
name|findPrincipals
argument_list|(
name|simpleFilter
argument_list|,
name|fullText
argument_list|,
name|searchType
argument_list|,
name|offset
argument_list|,
name|limit
argument_list|)
return|;
block|}
else|else
block|{
name|PrincipalIterator
name|pi
init|=
name|principalManager
operator|.
name|findPrincipals
argument_list|(
name|simpleFilter
argument_list|,
name|searchType
argument_list|)
decl_stmt|;
name|pi
operator|.
name|skip
argument_list|(
name|offset
argument_list|)
expr_stmt|;
return|return
name|pi
return|;
block|}
block|}
block|}
argument_list|)
return|;
block|}
block|}
end_class

end_unit

