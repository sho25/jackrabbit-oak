begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|kernel
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|AbstractChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|AbstractNodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_class
specifier|public
class|class
name|TransientNodeState
extends|extends
name|AbstractNodeState
block|{
specifier|private
specifier|final
name|KernelNodeStateEditor
name|editor
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|persistentState
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|addedNodes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedNodes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|addedProperties
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removedProperties
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|TransientNodeState
name|parent
decl_stmt|;
name|TransientNodeState
parameter_list|(
name|NodeState
name|persistentState
parameter_list|,
name|KernelNodeStateEditor
name|editor
parameter_list|,
name|TransientNodeState
name|parent
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|editor
operator|=
name|editor
expr_stmt|;
name|this
operator|.
name|persistentState
operator|=
name|persistentState
expr_stmt|;
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
name|TransientNodeState
parameter_list|(
name|KernelNodeStateEditor
name|parentEditor
parameter_list|,
name|String
name|name
parameter_list|)
block|{
name|editor
operator|=
operator|new
name|KernelNodeStateEditor
argument_list|(
name|parentEditor
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|persistentState
operator|=
literal|null
expr_stmt|;
name|parent
operator|=
name|parentEditor
operator|.
name|getNodeState
argument_list|()
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|PropertyState
name|state
init|=
name|addedProperties
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|state
return|;
block|}
return|return
name|removedProperties
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|persistentState
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getPropertyCount
parameter_list|()
block|{
comment|// todo optimise getPropertyCount
comment|// persistentCount - removedCount + addedCount won't work however since
comment|// persisted properties might be overlaid
return|return
name|super
operator|.
name|getPropertyCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getChildNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|addedNodes
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|state
operator|!=
literal|null
condition|)
block|{
return|return
name|state
return|;
block|}
return|return
name|removedNodes
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|?
literal|null
else|:
name|persistentState
operator|.
name|getChildNode
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getChildNodeCount
parameter_list|()
block|{
comment|// todo optimise getChildNodeCount
comment|// persistentCount - removedCount + addedCount won't work however since
comment|// persisted nodes might be overlaid
return|return
name|super
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|getProperties
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|removedProperties
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
name|added
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|PropertyState
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|putAll
argument_list|(
name|addedProperties
argument_list|)
expr_stmt|;
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|persistedProperties
init|=
name|persistentState
operator|.
name|getProperties
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|PropertyState
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|PropertyState
argument_list|>
name|properties
init|=
name|persistedProperties
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|PropertyState
name|next
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|properties
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|PropertyState
name|prop
init|=
name|properties
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|added
operator|.
name|containsKey
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|added
operator|.
name|get
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|prop
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|prop
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|PropertyState
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|PropertyState
name|e
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|getChildNodeEntries
parameter_list|(
name|long
name|offset
parameter_list|,
name|int
name|count
parameter_list|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|removed
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|removed
operator|.
name|addAll
argument_list|(
name|removedNodes
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
name|added
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|NodeState
argument_list|>
argument_list|()
decl_stmt|;
name|added
operator|.
name|putAll
argument_list|(
name|addedNodes
argument_list|)
expr_stmt|;
specifier|final
name|Iterable
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|baseNodes
init|=
name|persistentState
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
decl_stmt|;
return|return
operator|new
name|Iterable
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
argument_list|()
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|?
extends|extends
name|ChildNodeEntry
argument_list|>
name|properties
init|=
name|baseNodes
operator|.
name|iterator
argument_list|()
decl_stmt|;
specifier|private
name|ChildNodeEntry
name|next
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
if|if
condition|(
name|next
operator|==
literal|null
condition|)
block|{
while|while
condition|(
name|properties
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|ChildNodeEntry
name|entry
init|=
name|properties
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|added
operator|.
name|containsKey
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
operator|new
name|AbstractChildNodeEntry
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|entry
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeState
name|getNode
parameter_list|()
block|{
return|return
name|added
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|removed
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|next
operator|=
name|entry
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|next
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ChildNodeEntry
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
name|ChildNodeEntry
name|e
init|=
name|next
decl_stmt|;
name|next
operator|=
literal|null
expr_stmt|;
return|return
name|e
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
comment|//------------------------------------------------------------< internal>---
name|KernelNodeStateEditor
name|getEditor
parameter_list|()
block|{
return|return
name|editor
return|;
block|}
name|String
name|getPath
parameter_list|()
block|{
if|if
condition|(
name|parent
operator|==
literal|null
condition|)
block|{
return|return
name|name
return|;
block|}
else|else
block|{
name|String
name|path
init|=
name|parent
operator|.
name|getPath
argument_list|()
decl_stmt|;
return|return
name|path
operator|.
name|isEmpty
argument_list|()
condition|?
name|name
else|:
name|path
operator|+
literal|'/'
operator|+
name|name
return|;
block|}
block|}
name|void
name|addNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|TransientNodeState
argument_list|(
name|editor
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|void
name|removeNode
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedNodes
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|removedNodes
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|void
name|setProperty
parameter_list|(
name|PropertyState
name|state
parameter_list|)
block|{
name|addedProperties
operator|.
name|put
argument_list|(
name|state
operator|.
name|getName
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|void
name|removeProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|addedProperties
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|removedProperties
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|void
name|move
parameter_list|(
name|String
name|name
parameter_list|,
name|TransientNodeState
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|removeNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|destParent
operator|.
name|addNode
argument_list|(
name|destName
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
name|void
name|copy
parameter_list|(
name|String
name|name
parameter_list|,
name|TransientNodeState
name|destParent
parameter_list|,
name|String
name|destName
parameter_list|)
block|{
name|NodeState
name|state
init|=
name|getChildNode
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|destParent
operator|.
name|addNode
argument_list|(
name|destName
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addNode
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|state
parameter_list|)
block|{
name|addedNodes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

