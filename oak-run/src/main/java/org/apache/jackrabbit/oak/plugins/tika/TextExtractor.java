begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|tika
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Closeable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ArrayBlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|BlockingQueue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|ByteSource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|io
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|IOUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|io
operator|.
name|LazyInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|blob
operator|.
name|datastore
operator|.
name|TextWriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|metadata
operator|.
name|Metadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|parser
operator|.
name|ParseContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tika
operator|.
name|sax
operator|.
name|WriteOutContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_class
class|class
name|TextExtractor
implements|implements
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|log
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|TextExtractor
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|parserError
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
literal|"org.apache.jackrabbit.oak.plugins.tika.ParserError"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PROGRESS_BATCH_SIZE
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_EXTRACT_LENGTH
init|=
literal|100000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ERROR_TEXT
init|=
literal|"TextExtractionError"
decl_stmt|;
specifier|private
specifier|final
name|TextWriter
name|textWriter
decl_stmt|;
specifier|private
specifier|final
name|WorkItem
name|SHUTDOWN_SIGNAL
init|=
operator|new
name|WorkItem
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|BlockingQueue
argument_list|<
name|WorkItem
argument_list|>
name|inputQueue
decl_stmt|;
specifier|private
name|ExecutorService
name|executorService
decl_stmt|;
specifier|private
name|int
name|threadPoolSize
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
decl_stmt|;
specifier|private
name|int
name|queueSize
init|=
literal|100
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|errorCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|timeTaken
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|extractionCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|textWrittenCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|parserErrorCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|processedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|emptyCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|notSupportedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|alreadyExtractedCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|extractedTextSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|nonEmptyExtractedTextSize
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|totalSizeRead
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
specifier|private
name|int
name|maxExtractedLength
init|=
name|MAX_EXTRACT_LENGTH
decl_stmt|;
specifier|private
name|File
name|tikaConfig
decl_stmt|;
specifier|private
name|TikaHelper
name|tika
decl_stmt|;
specifier|private
name|boolean
name|initialized
decl_stmt|;
specifier|private
name|BinaryStats
name|stats
decl_stmt|;
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|public
name|TextExtractor
parameter_list|(
name|TextWriter
name|textWriter
parameter_list|)
block|{
name|this
operator|.
name|textWriter
operator|=
name|textWriter
expr_stmt|;
block|}
specifier|public
name|void
name|extract
parameter_list|(
name|Iterable
argument_list|<
name|BinaryResource
argument_list|>
name|binaries
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
name|initialize
argument_list|()
expr_stmt|;
for|for
control|(
name|BinaryResource
name|binary
range|:
name|binaries
control|)
block|{
name|inputQueue
operator|.
name|put
argument_list|(
operator|new
name|WorkItem
argument_list|(
name|binary
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|inputQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|log
operator|.
name|info
argument_list|(
literal|"Shutting down the extractor. Pending task count {}"
argument_list|,
name|inputQueue
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executorService
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|inputQueue
operator|.
name|put
argument_list|(
name|SHUTDOWN_SIGNAL
argument_list|)
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//Wait long enough
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|10
argument_list|,
name|TimeUnit
operator|.
name|DAYS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
block|}
name|dumpStats
argument_list|()
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|void
name|setTikaConfig
parameter_list|(
name|File
name|tikaConfig
parameter_list|)
block|{
name|this
operator|.
name|tikaConfig
operator|=
name|tikaConfig
expr_stmt|;
block|}
specifier|public
name|void
name|setThreadPoolSize
parameter_list|(
name|int
name|threadPoolSize
parameter_list|)
block|{
name|this
operator|.
name|threadPoolSize
operator|=
name|threadPoolSize
expr_stmt|;
block|}
specifier|public
name|void
name|setStats
parameter_list|(
name|BinaryStats
name|stats
parameter_list|)
block|{
name|this
operator|.
name|stats
operator|=
name|stats
expr_stmt|;
block|}
specifier|private
name|void
name|dumpStats
parameter_list|()
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|PrintWriter
name|pw
init|=
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|pw
operator|.
name|println
argument_list|(
literal|"Text extraction stats"
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t Processed Count           : %d%n"
argument_list|,
name|processedCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t   Extraction Count        : %d%n"
argument_list|,
name|extractionCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t     Empty Count           : %d%n"
argument_list|,
name|emptyCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t     Text Written Count    : %d%n"
argument_list|,
name|textWrittenCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t   Parser Error Count      : %d%n"
argument_list|,
name|parserErrorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t   Error Count             : %d%n"
argument_list|,
name|errorCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t   Not Supported Count     : %d%n"
argument_list|,
name|notSupportedCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t   Already processed Count : %d%n"
argument_list|,
name|alreadyExtractedCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t Total bytes read          : %s%n"
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|totalSizeRead
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t Total text extracted      : %s%n"
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|extractedTextSize
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t   Non empty text          : %s%n"
argument_list|,
name|IOUtils
operator|.
name|humanReadableByteCount
argument_list|(
name|nonEmptyExtractedTextSize
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|pw
operator|.
name|printf
argument_list|(
literal|"\t Time taken                : %d sec%n"
argument_list|,
name|timeTaken
operator|.
name|get
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|pw
operator|.
name|close
argument_list|()
expr_stmt|;
name|log
operator|.
name|info
argument_list|(
name|sw
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|dumpProgress
parameter_list|(
name|int
name|count
parameter_list|)
block|{
if|if
condition|(
name|count
operator|%
name|PROGRESS_BATCH_SIZE
operator|==
literal|0
condition|)
block|{
name|String
name|progress
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|stats
operator|!=
literal|null
condition|)
block|{
name|double
name|processedPercent
init|=
name|count
operator|*
literal|1.0
operator|/
name|stats
operator|.
name|getTotalCount
argument_list|()
operator|*
literal|100
decl_stmt|;
name|double
name|indexedPercent
init|=
name|extractionCount
operator|.
name|get
argument_list|()
operator|*
literal|1.0
operator|/
name|stats
operator|.
name|getIndexedCount
argument_list|()
operator|*
literal|100
decl_stmt|;
name|progress
operator|=
name|String
operator|.
name|format
argument_list|(
literal|"(%1.2f%%) (Extraction stats %d/%d %1.2f%%, Ignored count %d)"
argument_list|,
name|processedPercent
argument_list|,
name|extractionCount
operator|.
name|get
argument_list|()
argument_list|,
name|stats
operator|.
name|getIndexedCount
argument_list|()
argument_list|,
name|indexedPercent
argument_list|,
name|notSupportedCount
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Processed {} {} binaries so far ..."
argument_list|,
name|count
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|initialize
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
return|return;
block|}
name|inputQueue
operator|=
operator|new
name|ArrayBlockingQueue
argument_list|<
name|WorkItem
argument_list|>
argument_list|(
name|queueSize
argument_list|)
expr_stmt|;
name|tika
operator|=
operator|new
name|TikaHelper
argument_list|(
name|tikaConfig
argument_list|)
expr_stmt|;
name|initializeExecutorService
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|extractText
parameter_list|(
name|BinaryResource
name|source
parameter_list|)
throws|throws
name|IOException
block|{
name|String
name|type
init|=
name|source
operator|.
name|getMimeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
operator|||
operator|!
name|tika
operator|.
name|isSupportedMediaType
argument_list|(
name|type
argument_list|)
condition|)
block|{
name|log
operator|.
name|trace
argument_list|(
literal|"Ignoring binary content for node {} due to unsupported "
operator|+
literal|"(or null) jcr:mimeType [{}]"
argument_list|,
name|source
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|notSupportedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
name|String
name|blobId
init|=
name|source
operator|.
name|getBlobId
argument_list|()
decl_stmt|;
if|if
condition|(
name|textWriter
operator|.
name|isProcessed
argument_list|(
name|blobId
argument_list|)
condition|)
block|{
name|alreadyExtractedCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return;
block|}
comment|//TODO Handle case where same blob is being concurrently processed
name|Metadata
name|metadata
init|=
operator|new
name|Metadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_TYPE
argument_list|,
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|getEncoding
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// not mandatory
name|metadata
operator|.
name|set
argument_list|(
name|Metadata
operator|.
name|CONTENT_ENCODING
argument_list|,
name|source
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|String
name|extractedContent
init|=
name|parseStringValue
argument_list|(
name|source
operator|.
name|getByteSource
argument_list|()
argument_list|,
name|metadata
argument_list|,
name|source
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ERROR_TEXT
operator|.
name|equals
argument_list|(
name|extractedContent
argument_list|)
condition|)
block|{
name|textWriter
operator|.
name|markError
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extractedContent
operator|!=
literal|null
condition|)
block|{
name|extractedContent
operator|=
name|extractedContent
operator|.
name|trim
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|extractedContent
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|nonEmptyExtractedTextSize
operator|.
name|addAndGet
argument_list|(
name|extractedContent
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|textWriter
operator|.
name|write
argument_list|(
name|blobId
argument_list|,
name|extractedContent
argument_list|)
expr_stmt|;
name|textWrittenCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|textWriter
operator|.
name|markEmpty
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
name|emptyCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|initializeExecutorService
parameter_list|()
block|{
name|executorService
operator|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|threadPoolSize
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadPoolSize
condition|;
name|i
operator|++
control|)
block|{
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|Extractor
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|info
argument_list|(
literal|"Initialized text extractor pool with {} threads"
argument_list|,
name|threadPoolSize
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|Extractor
implements|implements
name|Runnable
block|{
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|WorkItem
name|workItem
init|=
literal|null
decl_stmt|;
try|try
block|{
name|workItem
operator|=
name|inputQueue
operator|.
name|take
argument_list|()
expr_stmt|;
if|if
condition|(
name|workItem
operator|==
name|SHUTDOWN_SIGNAL
condition|)
block|{
name|inputQueue
operator|.
name|put
argument_list|(
name|SHUTDOWN_SIGNAL
argument_list|)
expr_stmt|;
comment|//put back for other workers
return|return;
block|}
name|extractText
argument_list|(
name|workItem
operator|.
name|source
argument_list|)
expr_stmt|;
name|dumpProgress
argument_list|(
name|processedCount
operator|.
name|incrementAndGet
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|errorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|log
operator|.
name|warn
argument_list|(
literal|"Error occurred while processing {}"
argument_list|,
name|workItem
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//~--------------------------------------< Tika>
specifier|private
name|String
name|parseStringValue
parameter_list|(
name|ByteSource
name|byteSource
parameter_list|,
name|Metadata
name|metadata
parameter_list|,
name|String
name|path
parameter_list|)
block|{
name|WriteOutContentHandler
name|handler
init|=
operator|new
name|WriteOutContentHandler
argument_list|(
name|maxExtractedLength
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|size
init|=
literal|0
decl_stmt|;
try|try
block|{
name|CountingInputStream
name|stream
init|=
operator|new
name|CountingInputStream
argument_list|(
operator|new
name|LazyInputStream
argument_list|(
name|byteSource
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|tika
operator|.
name|getParser
argument_list|()
operator|.
name|parse
argument_list|(
name|stream
argument_list|,
name|handler
argument_list|,
name|metadata
argument_list|,
operator|new
name|ParseContext
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|size
operator|=
name|stream
operator|.
name|getCount
argument_list|()
expr_stmt|;
name|stream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|LinkageError
name|e
parameter_list|)
block|{
comment|// Capture errors caused by extraction libraries
comment|// not being present. This is equivalent to disabling
comment|// selected media types in configuration, so we can simply
comment|// ignore these errors.
name|log
operator|.
name|debug
argument_list|(
literal|"Failed to extract text from a binary property: {}."
operator|+
literal|" This often happens when some media types are disabled by configuration."
operator|+
literal|" The stack trace is included to flag some 'unintended' failures"
argument_list|,
name|path
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|parserErrorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
return|return
name|ERROR_TEXT
return|;
block|}
catch|catch
parameter_list|(
name|Throwable
name|t
parameter_list|)
block|{
comment|// Capture and report any other full text extraction problems.
comment|// The special STOP exception is used for normal termination.
if|if
condition|(
operator|!
name|handler
operator|.
name|isWriteLimitReached
argument_list|(
name|t
argument_list|)
condition|)
block|{
name|parserErrorCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|parserError
operator|.
name|debug
argument_list|(
literal|"Failed to extract text from a binary property: "
operator|+
name|path
operator|+
literal|" This is a fairly common case, and nothing to"
operator|+
literal|" worry about. The stack trace is included to"
operator|+
literal|" help improve the text extraction feature."
argument_list|,
name|t
argument_list|)
expr_stmt|;
return|return
name|ERROR_TEXT
return|;
block|}
else|else
block|{
name|parserError
operator|.
name|debug
argument_list|(
literal|"Extracted text size exceeded configured limit({})"
argument_list|,
name|maxExtractedLength
argument_list|)
expr_stmt|;
block|}
block|}
name|String
name|result
init|=
name|handler
operator|.
name|toString
argument_list|()
decl_stmt|;
name|timeTaken
operator|.
name|addAndGet
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
if|if
condition|(
name|size
operator|>
literal|0
condition|)
block|{
name|extractedTextSize
operator|.
name|addAndGet
argument_list|(
name|result
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|extractionCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
name|totalSizeRead
operator|.
name|addAndGet
argument_list|(
name|size
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
return|return
literal|null
return|;
block|}
comment|//~--------------------------------------< WorkItem>
specifier|private
specifier|static
class|class
name|WorkItem
block|{
specifier|final
name|BinaryResource
name|source
decl_stmt|;
specifier|private
name|WorkItem
parameter_list|(
name|BinaryResource
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|source
operator|!=
literal|null
condition|?
name|source
operator|.
name|toString
argument_list|()
else|:
literal|"<EMPTY>"
return|;
block|}
block|}
block|}
end_class

end_unit

