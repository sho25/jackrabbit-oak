begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|file
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|defaultThreadFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
operator|.
name|newSingleThreadScheduledExecutor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_comment
comment|/**  * A background operation running on a different thread that is executed upon an  * external trigger. Only one instance of the same operation is guaranteed to  * run at any time.  */
end_comment

begin_class
class|class
name|TriggeredOperation
block|{
specifier|private
specifier|final
name|ExecutorService
name|scheduler
decl_stmt|;
specifier|private
specifier|final
name|Runnable
name|runnable
decl_stmt|;
specifier|private
name|Future
argument_list|<
name|?
argument_list|>
name|future
decl_stmt|;
comment|/**      * Create a new triggered operation.      *      * @param name     the name of the operation.      * @param runnable the code to run when the operation is triggered.      */
specifier|public
name|TriggeredOperation
parameter_list|(
name|String
name|name
parameter_list|,
name|Runnable
name|runnable
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|newSingleThreadScheduledExecutor
argument_list|(
operator|new
name|OperationThreadFactory
argument_list|(
name|defaultThreadFactory
argument_list|()
argument_list|,
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|runnable
operator|=
name|runnable
expr_stmt|;
block|}
comment|/**      * Trigger the execution of the operation. If the operation is still      * running, calling this method doesn't have any effect. Otherwise, a new      * execution of the operation is started.      */
specifier|public
name|void
name|trigger
parameter_list|()
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|future
operator|==
literal|null
operator|||
name|future
operator|.
name|isDone
argument_list|()
condition|)
block|{
name|future
operator|=
name|scheduler
operator|.
name|submit
argument_list|(
name|runnable
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Stop the operation and wait for its termination.      *      * @param timeout  the amount of time to wait.      * @param timeUnit the time unit of the wait time.      * @return {@code true} if the operation was stopped in time, {@code false}      * if stopping the operation timed out.      * @throws InterruptedException if interrupted while waiting.      */
specifier|public
name|boolean
name|stop
parameter_list|(
name|long
name|timeout
parameter_list|,
name|TimeUnit
name|timeUnit
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|scheduler
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
name|scheduler
operator|.
name|awaitTermination
argument_list|(
name|timeout
argument_list|,
name|timeUnit
argument_list|)
return|;
block|}
block|}
end_class

end_unit

