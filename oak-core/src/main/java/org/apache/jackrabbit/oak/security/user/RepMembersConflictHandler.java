begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|user
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|PropertyBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|ThreeWayConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|user
operator|.
name|UserConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_comment
comment|/**  * The {@code RepMembersConflictHandler} takes care of merging the {@code rep:members} property  * during parallel updates.  *<p>  * The conflict handler deals with the following conflicts:  *<ul>  *<li>{@code addExistingProperty}  : {@code Resolution.MERGED},</li>  *<li>{@code changeDeletedProperty}: {@code Resolution.THEIRS}, removing the members property takes precedence.  *<li>{@code changeChangedProperty}: {@code Resolution.MERGED}, merge of the 2 members sets into a single one  *<li>{@code deleteChangedProperty}: {@code Resolution.OURS} removing the members property takes precedence.  *</ul>  */
end_comment

begin_class
specifier|public
class|class
name|RepMembersConflictHandler
implements|implements
name|ThreeWayConflictHandler
block|{
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|addExistingProperty
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|ours
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|theirs
parameter_list|)
block|{
if|if
condition|(
name|isRepMembersProperty
argument_list|(
name|theirs
argument_list|)
condition|)
block|{
name|mergeChange
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|,
name|Sets
operator|.
name|newHashSet
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|MERGED
return|;
block|}
else|else
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|NotNull
specifier|public
name|Resolution
name|changeDeletedProperty
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|ours
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|base
parameter_list|)
block|{
if|if
condition|(
name|isRepMembersProperty
argument_list|(
name|ours
argument_list|)
condition|)
block|{
comment|// removing the members property takes precedence
return|return
name|Resolution
operator|.
name|THEIRS
return|;
block|}
else|else
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|changeChangedProperty
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|ours
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|theirs
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|base
parameter_list|)
block|{
if|if
condition|(
name|isRepMembersProperty
argument_list|(
name|theirs
argument_list|)
condition|)
block|{
name|Set
argument_list|<
name|String
argument_list|>
name|baseMembers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|base
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
decl_stmt|;
name|mergeChange
argument_list|(
name|parent
argument_list|,
name|ours
argument_list|,
name|theirs
argument_list|,
name|baseMembers
argument_list|)
expr_stmt|;
return|return
name|Resolution
operator|.
name|MERGED
return|;
block|}
else|else
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedProperty
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|base
parameter_list|)
block|{
comment|// both are removing the members property, ignoring
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedProperty
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|theirs
parameter_list|,
annotation|@
name|NotNull
name|PropertyState
name|base
parameter_list|)
block|{
if|if
condition|(
name|isRepMembersProperty
argument_list|(
name|theirs
argument_list|)
condition|)
block|{
comment|// removing the members property takes precedence
return|return
name|Resolution
operator|.
name|OURS
return|;
block|}
else|else
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|addExistingNode
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|ours
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|theirs
parameter_list|)
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|changeDeletedNode
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|ours
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|base
parameter_list|)
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteChangedNode
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|theirs
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|base
parameter_list|)
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
annotation|@
name|NotNull
annotation|@
name|Override
specifier|public
name|Resolution
name|deleteDeletedNode
parameter_list|(
annotation|@
name|NotNull
name|NodeBuilder
name|parent
parameter_list|,
annotation|@
name|NotNull
name|String
name|name
parameter_list|,
annotation|@
name|NotNull
name|NodeState
name|base
parameter_list|)
block|{
return|return
name|Resolution
operator|.
name|IGNORED
return|;
block|}
comment|//----------------------------< internal>----------------------------------
specifier|private
specifier|static
name|void
name|mergeChange
parameter_list|(
name|NodeBuilder
name|parent
parameter_list|,
name|PropertyState
name|ours
parameter_list|,
name|PropertyState
name|theirs
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|base
parameter_list|)
block|{
name|PropertyBuilder
argument_list|<
name|String
argument_list|>
name|merged
init|=
name|PropertyBuilder
operator|.
name|array
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
decl_stmt|;
name|merged
operator|.
name|setName
argument_list|(
name|UserConstants
operator|.
name|REP_MEMBERS
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|theirMembers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|theirs
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|ourMembers
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|ours
operator|.
name|getValue
argument_list|(
name|Type
operator|.
name|STRINGS
argument_list|)
argument_list|)
decl_stmt|;
comment|// merge ours and theirs to a de-duplicated set
name|Set
argument_list|<
name|String
argument_list|>
name|combined
init|=
name|Sets
operator|.
name|newHashSet
argument_list|(
name|Sets
operator|.
name|intersection
argument_list|(
name|ourMembers
argument_list|,
name|theirMembers
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|m
range|:
name|Sets
operator|.
name|difference
argument_list|(
name|ourMembers
argument_list|,
name|theirMembers
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|base
operator|.
name|contains
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|combined
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|String
name|m
range|:
name|Sets
operator|.
name|difference
argument_list|(
name|theirMembers
argument_list|,
name|ourMembers
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|base
operator|.
name|contains
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|combined
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
block|}
name|merged
operator|.
name|addValues
argument_list|(
name|combined
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setProperty
argument_list|(
name|merged
operator|.
name|getPropertyState
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|boolean
name|isRepMembersProperty
parameter_list|(
name|PropertyState
name|p
parameter_list|)
block|{
return|return
name|UserConstants
operator|.
name|REP_MEMBERS
operator|.
name|equals
argument_list|(
name|p
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

