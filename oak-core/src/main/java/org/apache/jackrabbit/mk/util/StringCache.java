begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_comment
comment|/**  * A simple string cache.  */
end_comment

begin_class
specifier|public
class|class
name|StringCache
block|{
specifier|public
specifier|static
specifier|final
name|boolean
name|OBJECT_CACHE
init|=
name|getBooleanSetting
argument_list|(
literal|"mk.objectCache"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|OBJECT_CACHE_SIZE
init|=
name|IOUtils
operator|.
name|nextPowerOf2
argument_list|(
name|getIntSetting
argument_list|(
literal|"mk.objectCacheSize"
argument_list|,
literal|1024
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|SoftReference
argument_list|<
name|String
index|[]
argument_list|>
name|softCache
init|=
operator|new
name|SoftReference
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|private
name|StringCache
parameter_list|()
block|{
comment|// utility class
block|}
specifier|private
specifier|static
name|boolean
name|getBooleanSetting
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|defaultValue
parameter_list|)
block|{
name|String
name|s
init|=
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|s
argument_list|)
operator|.
name|booleanValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|private
specifier|static
name|int
name|getIntSetting
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|defaultValue
parameter_list|)
block|{
name|String
name|s
init|=
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
literal|null
condition|)
block|{
try|try
block|{
return|return
name|Integer
operator|.
name|decode
argument_list|(
name|s
argument_list|)
operator|.
name|intValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
return|return
name|defaultValue
return|;
block|}
specifier|private
specifier|static
name|String
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
try|try
block|{
return|return
name|System
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|// SecurityException
comment|// applets may not do that - ignore
return|return
literal|null
return|;
block|}
block|}
specifier|private
specifier|static
name|String
index|[]
name|getCache
parameter_list|()
block|{
name|String
index|[]
name|cache
decl_stmt|;
comment|// softCache can be null due to a Tomcat problem
comment|// a workaround is disable the system property org.apache.
comment|// catalina.loader.WebappClassLoader.ENABLE_CLEAR_REFERENCES
if|if
condition|(
name|softCache
operator|!=
literal|null
condition|)
block|{
name|cache
operator|=
name|softCache
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
return|return
name|cache
return|;
block|}
block|}
try|try
block|{
name|cache
operator|=
operator|new
name|String
index|[
name|OBJECT_CACHE_SIZE
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|OutOfMemoryError
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|softCache
operator|=
operator|new
name|SoftReference
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
name|cache
argument_list|)
expr_stmt|;
return|return
name|cache
return|;
block|}
comment|/**      * Get the string from the cache if possible. If the string has not been      * found, it is added to the cache. If there is such a string in the cache,      * that one is returned.      *      * @param s the original string      * @return a string with the same content, if possible from the cache      */
specifier|public
specifier|static
name|String
name|cache
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|OBJECT_CACHE
condition|)
block|{
return|return
name|s
return|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|hash
init|=
name|s
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|String
index|[]
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|OBJECT_CACHE_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
name|String
name|cached
init|=
name|cache
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|cached
argument_list|)
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
name|cache
index|[
name|index
index|]
operator|=
name|s
expr_stmt|;
block|}
return|return
name|s
return|;
block|}
comment|/**      * Get a string from the cache, and if no such string has been found, create      * a new one with only this content. This solves out of memory problems if      * the string is a substring of another, large string. In Java, strings are      * shared, which could lead to memory problems. This avoid such problems.      *      * @param s the string      * @return a string that is guaranteed not be a substring of a large string      */
specifier|public
specifier|static
name|String
name|fromCacheOrNew
parameter_list|(
name|String
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|OBJECT_CACHE
condition|)
block|{
return|return
name|s
return|;
block|}
if|if
condition|(
name|s
operator|==
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
elseif|else
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|""
return|;
block|}
name|int
name|hash
init|=
name|s
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|String
index|[]
name|cache
init|=
name|getCache
argument_list|()
decl_stmt|;
name|int
name|index
init|=
name|hash
operator|&
operator|(
name|OBJECT_CACHE_SIZE
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|cache
operator|==
literal|null
condition|)
block|{
return|return
name|s
return|;
block|}
name|String
name|cached
init|=
name|cache
index|[
name|index
index|]
decl_stmt|;
if|if
condition|(
name|cached
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|s
operator|.
name|equals
argument_list|(
name|cached
argument_list|)
condition|)
block|{
return|return
name|cached
return|;
block|}
block|}
comment|// create a new object that is not shared
comment|// (to avoid out of memory if it is a substring of a big String)
comment|// NOPMD
name|s
operator|=
operator|new
name|String
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|cache
index|[
name|index
index|]
operator|=
name|s
expr_stmt|;
return|return
name|s
return|;
block|}
comment|/**      * Clear the cache. This method is used for testing.      */
specifier|public
specifier|static
name|void
name|clearCache
parameter_list|()
block|{
name|softCache
operator|=
operator|new
name|SoftReference
argument_list|<
name|String
index|[]
argument_list|>
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

