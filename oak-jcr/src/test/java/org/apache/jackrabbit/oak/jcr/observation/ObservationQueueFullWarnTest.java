begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|ch
operator|.
name|qos
operator|.
name|logback
operator|.
name|classic
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|JackrabbitRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|junit
operator|.
name|LogCustomizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|AbstractRepositoryTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|Jcr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|repository
operator|.
name|RepositoryImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|SimpleCredentials
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|EventListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|ObservationManager
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Semaphore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|jcr
operator|.
name|observation
operator|.
name|Event
operator|.
name|NODE_ADDED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|ObservationQueueFullWarnTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|OBS_QUEUE_LENGTH
init|=
literal|5
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OBS_QUEUE_FULL_WARN
init|=
literal|"Revision queue is full. Further revisions will be compacted."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE
init|=
literal|"test_node"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE_TYPE
init|=
literal|"oak:Unstructured"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|'/'
operator|+
name|TEST_NODE
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|OBS_TIMEOUT_PER_ITEM
init|=
literal|1000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|CONDITION_TIMEOUT
init|=
name|OBS_QUEUE_LENGTH
operator|*
name|OBS_TIMEOUT_PER_ITEM
decl_stmt|;
specifier|private
name|Session
name|observingSession
decl_stmt|;
specifier|private
name|ObservationManager
name|observationManager
decl_stmt|;
specifier|private
specifier|final
name|BlockableListener
name|listener
init|=
operator|new
name|BlockableListener
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|ObservationQueueFullWarnTest
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Semaphore
name|blockObservation
init|=
operator|new
name|Semaphore
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|numAddedNodes
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|AtomicInteger
name|numObservedNodes
init|=
operator|new
name|AtomicInteger
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|public
name|ObservationQueueFullWarnTest
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"fixture: {}"
argument_list|,
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Jcr
name|initJcr
parameter_list|(
name|Jcr
name|jcr
parameter_list|)
block|{
return|return
name|jcr
operator|.
name|withObservationQueueLength
argument_list|(
name|OBS_QUEUE_LENGTH
argument_list|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|session
operator|.
name|getRootNode
argument_list|()
operator|.
name|addNode
argument_list|(
name|TEST_NODE
argument_list|,
name|TEST_NODE_TYPE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attrs
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|attrs
operator|.
name|put
argument_list|(
name|RepositoryImpl
operator|.
name|REFRESH_INTERVAL
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|observingSession
operator|=
operator|(
operator|(
name|JackrabbitRepository
operator|)
name|getRepository
argument_list|()
operator|)
operator|.
name|login
argument_list|(
operator|new
name|SimpleCredentials
argument_list|(
literal|"admin"
argument_list|,
literal|"admin"
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
name|observationManager
operator|=
name|observingSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getObservationManager
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|observingSession
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|warnOnQueueFull
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|LogCustomizer
name|customLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|ChangeProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|contains
argument_list|(
name|OBS_QUEUE_FULL_WARN
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
argument_list|,
name|TEST_PATH
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|customLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|addNodeToFillObsQueue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Observation queue full warning must get logged"
argument_list|,
name|customLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|customLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|warnOnRepeatedQueueFull
parameter_list|()
throws|throws
name|RepositoryException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|LogCustomizer
name|warnLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|ChangeProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|WARN
argument_list|)
operator|.
name|contains
argument_list|(
name|OBS_QUEUE_FULL_WARN
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|LogCustomizer
name|debugLogs
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|ChangeProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
operator|.
name|contains
argument_list|(
name|OBS_QUEUE_FULL_WARN
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|LogCustomizer
name|logLevelSetting
init|=
name|LogCustomizer
operator|.
name|forLogger
argument_list|(
name|ChangeProcessor
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|enable
argument_list|(
name|Level
operator|.
name|DEBUG
argument_list|)
operator|.
name|create
argument_list|()
decl_stmt|;
name|logLevelSetting
operator|.
name|starting
argument_list|()
expr_stmt|;
name|long
name|oldWarnLogInterval
init|=
name|ChangeProcessor
operator|.
name|QUEUE_FULL_WARN_INTERVAL
decl_stmt|;
comment|//Assumption is that 10 (virtual) minutes won't pass by the time we move from one stage of queue fill to next.
name|ChangeProcessor
operator|.
name|QUEUE_FULL_WARN_INTERVAL
operator|=
name|TimeUnit
operator|.
name|MINUTES
operator|.
name|toMillis
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|Clock
name|oldClockInstance
init|=
name|ChangeProcessor
operator|.
name|clock
decl_stmt|;
name|Clock
name|virtualClock
init|=
operator|new
name|Clock
operator|.
name|Virtual
argument_list|()
decl_stmt|;
name|ChangeProcessor
operator|.
name|clock
operator|=
name|virtualClock
expr_stmt|;
name|virtualClock
operator|.
name|waitUntil
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|observationManager
operator|.
name|addEventListener
argument_list|(
name|listener
argument_list|,
name|NODE_ADDED
argument_list|,
name|TEST_PATH
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
comment|//Create first level WARN message
name|addNodeToFillObsQueue
argument_list|()
expr_stmt|;
name|emptyObsQueue
argument_list|()
expr_stmt|;
comment|//Don't wait, fill up the queue again
name|warnLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|debugLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|addNodeToFillObsQueue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Observation queue full warning must not logged until some time has past since last log"
argument_list|,
name|warnLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Observation queue full warning should get logged on debug though in the mean time"
argument_list|,
name|debugLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|warnLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
name|debugLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
name|emptyObsQueue
argument_list|()
expr_stmt|;
comment|//Wait some time so reach WARN level again
name|virtualClock
operator|.
name|waitUntil
argument_list|(
name|virtualClock
operator|.
name|getTime
argument_list|()
operator|+
name|ChangeProcessor
operator|.
name|QUEUE_FULL_WARN_INTERVAL
argument_list|)
expr_stmt|;
name|warnLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|debugLogs
operator|.
name|starting
argument_list|()
expr_stmt|;
name|addNodeToFillObsQueue
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
literal|"Observation queue full warning must get logged after some time has past since last log"
argument_list|,
name|warnLogs
operator|.
name|getLogs
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|warnLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
name|debugLogs
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|observationManager
operator|.
name|removeEventListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|ChangeProcessor
operator|.
name|clock
operator|=
name|oldClockInstance
expr_stmt|;
name|ChangeProcessor
operator|.
name|QUEUE_FULL_WARN_INTERVAL
operator|=
name|oldWarnLogInterval
expr_stmt|;
name|logLevelSetting
operator|.
name|finished
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addANode
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|parent
init|=
name|session
operator|.
name|getNode
argument_list|(
name|TEST_PATH
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|prefix
operator|+
name|numAddedNodes
operator|.
name|get
argument_list|()
decl_stmt|;
name|parent
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|numAddedNodes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addNodeToFillObsQueue
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|blockObservation
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|OBS_QUEUE_LENGTH
condition|;
name|i
operator|++
control|)
block|{
name|addANode
argument_list|(
literal|"n"
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|blockObservation
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
interface|interface
name|Condition
block|{
name|boolean
name|evaluate
parameter_list|()
function_decl|;
block|}
specifier|private
name|boolean
name|waitFor
parameter_list|(
name|long
name|timeout
parameter_list|,
name|Condition
name|c
parameter_list|)
throws|throws
name|InterruptedException
block|{
name|long
name|end
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|+
name|timeout
decl_stmt|;
name|long
name|remaining
init|=
name|end
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|c
operator|.
name|evaluate
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//Add another node only when num_pending_to_be_observed nodes is
comment|//less that observation queue. This is done to let all observation finish
comment|//up in case last few event were dropped due to full observation queue
comment|//(which is ok as the next event that comes in gets diff-ed with last
comment|//processed revision)
if|if
condition|(
name|numAddedNodes
operator|.
name|get
argument_list|()
operator|<
name|numObservedNodes
operator|.
name|get
argument_list|()
operator|+
name|OBS_QUEUE_LENGTH
condition|)
block|{
try|try
block|{
name|addANode
argument_list|(
literal|"addedWhileWaiting"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exception while adding during wait: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|Thread
operator|.
name|sleep
argument_list|(
name|OBS_TIMEOUT_PER_ITEM
operator|/
literal|10
argument_list|)
expr_stmt|;
comment|//The constant is exaggerated
name|remaining
operator|=
name|end
operator|-
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
return|return
name|c
operator|.
name|evaluate
argument_list|()
return|;
block|}
specifier|private
name|void
name|emptyObsQueue
parameter_list|()
throws|throws
name|InterruptedException
block|{
name|boolean
name|notTimedOut
init|=
name|waitFor
argument_list|(
name|CONDITION_TIMEOUT
argument_list|,
operator|new
name|Condition
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|evaluate
parameter_list|()
block|{
return|return
name|numObservedNodes
operator|.
name|get
argument_list|()
operator|==
name|numAddedNodes
operator|.
name|get
argument_list|()
return|;
block|}
block|}
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
literal|"Listener didn't process events within time-out"
argument_list|,
name|notTimedOut
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|BlockableListener
implements|implements
name|EventListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|onEvent
parameter_list|(
name|EventIterator
name|events
parameter_list|)
block|{
name|blockObservation
operator|.
name|acquireUninterruptibly
argument_list|()
expr_stmt|;
while|while
condition|(
name|events
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Event
name|event
init|=
name|events
operator|.
name|nextEvent
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|.
name|getType
argument_list|()
operator|==
name|Event
operator|.
name|NODE_ADDED
condition|)
block|{
name|numObservedNodes
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
block|}
name|blockObservation
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

