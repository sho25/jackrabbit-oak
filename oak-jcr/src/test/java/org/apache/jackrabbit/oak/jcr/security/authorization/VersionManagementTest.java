begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|security
operator|.
name|authorization
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|AccessDeniedException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Property
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlEntry
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|AccessControlList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|security
operator|.
name|Privilege
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|Version
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionHistory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|version
operator|.
name|VersionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|test
operator|.
name|NotExecutableException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_comment
comment|/**  * Test access control evaluation for version operations.  */
end_comment

begin_class
specifier|public
class|class
name|VersionManagementTest
extends|extends
name|AbstractEvaluationTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|SYSTEM
init|=
literal|"/jcr:system"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|VERSIONSTORE
init|=
name|SYSTEM
operator|+
literal|"/jcr:versionStorage"
decl_stmt|;
specifier|private
name|Privilege
index|[]
name|versionPrivileges
decl_stmt|;
annotation|@
name|Override
annotation|@
name|Before
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|versionPrivileges
operator|=
name|privilegesFromName
argument_list|(
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|)
expr_stmt|;
comment|// must not see version storage or must not have version privilege
name|assertTrue
argument_list|(
operator|!
name|testSession
operator|.
name|nodeExists
argument_list|(
name|VERSIONSTORE
argument_list|)
operator|||
operator|!
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|VERSIONSTORE
argument_list|,
name|versionPrivileges
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Node
name|createVersionableNode
parameter_list|(
name|Node
name|parent
parameter_list|)
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
operator|(
name|parent
operator|.
name|hasNode
argument_list|(
name|nodeName1
argument_list|)
operator|)
condition|?
name|parent
operator|.
name|getNode
argument_list|(
name|nodeName1
argument_list|)
else|:
name|parent
operator|.
name|addNode
argument_list|(
name|nodeName1
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
operator|.
name|canAddMixin
argument_list|(
name|mixVersionable
argument_list|)
condition|)
block|{
name|n
operator|.
name|addMixin
argument_list|(
name|mixVersionable
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NotExecutableException
argument_list|()
throw|;
block|}
name|n
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|n
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMixVersionable
parameter_list|()
throws|throws
name|Exception
block|{
name|modify
argument_list|(
name|path
argument_list|,
name|REP_WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
try|try
block|{
name|createVersionableNode
argument_list|(
name|testNode
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Test session does not have permission to add mixins -> no version content should be created."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
comment|// ... but autocreated versionable node properties must not be present
name|assertFalse
argument_list|(
name|testNode
operator|.
name|isNodeType
argument_list|(
name|mixVersionable
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testNode
operator|.
name|hasProperty
argument_list|(
literal|"jcr:isCheckedOut"
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testNode
operator|.
name|hasProperty
argument_list|(
name|jcrVersionHistory
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMixVersionable2
parameter_list|()
throws|throws
name|Exception
block|{
name|modify
argument_list|(
name|path
argument_list|,
name|REP_WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_NODE_TYPE_MANAGEMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|n
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|n
operator|.
name|checkout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCheckInCheckout
parameter_list|()
throws|throws
name|Exception
block|{
name|modify
argument_list|(
name|path
argument_list|,
name|REP_WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|fail
argument_list|(
literal|"Missing jcr:versionManagement privilege -> checkin/checkout must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
comment|// ... but the property must not be modified nor indicating
comment|// checkedIn status
name|Property
name|p
init|=
name|n
operator|.
name|getProperty
argument_list|(
literal|"jcr:isCheckedOut"
argument_list|)
decl_stmt|;
name|assertFalse
argument_list|(
name|p
operator|.
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|n
operator|.
name|getProperty
argument_list|(
literal|"jcr:isCheckedOut"
argument_list|)
operator|.
name|getValue
argument_list|()
operator|.
name|getBoolean
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @since oak (DIFF: jr required jcr:versionManagement privilege on the version store)      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveVersion
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|trn
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|modify
argument_list|(
name|trn
operator|.
name|getPath
argument_list|()
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|trn
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|testNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|checkin
argument_list|()
expr_stmt|;
comment|// removing a version must be allowed
name|testNode
operator|.
name|getVersionHistory
argument_list|()
operator|.
name|removeVersion
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since oak (DIFF: jr required jcr:versionManagement privilege on the version store)      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveVersion2
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Node
name|trn
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|modify
argument_list|(
name|trn
operator|.
name|getPath
argument_list|()
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|trn
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|testNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|checkin
argument_list|()
expr_stmt|;
comment|// remove ability to edit version information
comment|// -> VersionHistory.removeVersion must not be allowed.
name|modify
argument_list|(
name|trn
operator|.
name|getPath
argument_list|()
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
try|try
block|{
name|testNode
operator|.
name|getVersionHistory
argument_list|()
operator|.
name|removeVersion
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Missing jcr:versionManagement privilege -> remove a version must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|/**      * @since oak (DIFF: jr required jcr:versionManagement privilege on the version store)      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveVersion3
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|n
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|n
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|n
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testAcMgr
operator|.
name|hasPrivileges
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionPrivileges
argument_list|)
argument_list|)
expr_stmt|;
name|AccessControlList
name|acl
init|=
name|allow
argument_list|(
name|SYSTEM
argument_list|,
name|versionPrivileges
argument_list|)
decl_stmt|;
try|try
block|{
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|getVersionHistory
argument_list|()
operator|.
name|removeVersion
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"Missing jcr:versionManagement privilege -> remove a version must fail."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AccessDeniedException
name|e
parameter_list|)
block|{
comment|// success
block|}
finally|finally
block|{
comment|// revert privilege modification (manually remove the ACE added)
for|for
control|(
name|AccessControlEntry
name|entry
range|:
name|acl
operator|.
name|getAccessControlEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|getPrincipal
argument_list|()
operator|.
name|equals
argument_list|(
name|testUser
operator|.
name|getPrincipal
argument_list|()
argument_list|)
condition|)
block|{
name|acl
operator|.
name|removeAccessControlEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
name|acMgr
operator|.
name|setPolicy
argument_list|(
name|SYSTEM
argument_list|,
name|acl
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * @since oak (DIFF: jr required jcr:versionManagement privilege on the version store)      */
annotation|@
name|Test
specifier|public
name|void
name|testAccessVersionHistory
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionPrivileges
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
comment|// accessing the version history must be allowed if the versionable node
comment|// is readable to the editing test session.
name|VersionHistory
name|vh
init|=
name|testNode
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|String
name|vhPath
init|=
name|vh
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|vhUUID
init|=
name|vh
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|vh
operator|.
name|isSame
argument_list|(
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|vhPath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vh
operator|.
name|isSame
argument_list|(
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|getNodeByIdentifier
argument_list|(
name|vhUUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|vh
operator|.
name|isSame
argument_list|(
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|getNodeByUUID
argument_list|(
name|vhUUID
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since oak (DIFF: jr required jcr:versionManagement privilege on the version store)      */
annotation|@
name|Test
specifier|public
name|void
name|testAccessVersionHistoryVersionableNodeNotAccessible
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionPrivileges
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|VersionHistory
name|vh
init|=
name|testNode
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|String
name|vhPath
init|=
name|vh
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|vhUUID
init|=
name|vh
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
comment|// revert read permission on the versionable node
name|modify
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// versionable node is not readable any more for test session.
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// access version history directly => should fail
try|try
block|{
name|VersionHistory
name|history
init|=
operator|(
name|VersionHistory
operator|)
name|testSession
operator|.
name|getNode
argument_list|(
name|vhPath
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Access to version history should be denied if versionable node is not accessible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PathNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|VersionHistory
name|history
init|=
operator|(
name|VersionHistory
operator|)
name|testSession
operator|.
name|getNodeByIdentifier
argument_list|(
name|vhUUID
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Access to version history should be denied if versionable node is not accessible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
try|try
block|{
name|VersionHistory
name|history
init|=
operator|(
name|VersionHistory
operator|)
name|testSession
operator|.
name|getNodeByUUID
argument_list|(
name|vhUUID
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Access to version history should be denied if versionable node is not accessible"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ItemNotFoundException
name|e
parameter_list|)
block|{
comment|// success
block|}
block|}
comment|/**      * @since oak      */
annotation|@
name|Test
specifier|public
name|void
name|testAccessVersionHistoryVersionableNodeRemoved
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionPrivileges
argument_list|)
expr_stmt|;
name|n
operator|.
name|checkin
argument_list|()
expr_stmt|;
name|n
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|String
name|versionablePath
init|=
name|n
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|VersionHistory
name|vh
init|=
name|n
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|String
name|vhPath
init|=
name|vh
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|vhUUID
init|=
name|vh
operator|.
name|getIdentifier
argument_list|()
decl_stmt|;
comment|// remove the versionable node
name|n
operator|.
name|remove
argument_list|()
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|refresh
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|versionablePath
argument_list|)
argument_list|)
expr_stmt|;
comment|// accessing the version history directly should still succeed as
comment|// read permission is still granted on the tree defined by the parent.
name|VersionHistory
name|history
init|=
operator|(
name|VersionHistory
operator|)
name|testSession
operator|.
name|getNode
argument_list|(
name|vhPath
argument_list|)
decl_stmt|;
name|history
operator|=
operator|(
name|VersionHistory
operator|)
name|testSession
operator|.
name|getNodeByIdentifier
argument_list|(
name|vhUUID
argument_list|)
expr_stmt|;
name|history
operator|=
operator|(
name|VersionHistory
operator|)
name|testSession
operator|.
name|getNodeByUUID
argument_list|(
name|vhUUID
argument_list|)
expr_stmt|;
comment|// revoking read permission on the parent node -> version history
comment|// must no longer be accessible
name|modify
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_READ
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|testSession
operator|.
name|nodeExists
argument_list|(
name|vhPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since oak      */
annotation|@
name|Test
specifier|public
name|void
name|testAddVersionLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionPrivileges
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|testNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|Version
name|v2
init|=
name|testNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
comment|// -> VersionHistory.addVersionLabel must be allowed
name|VersionHistory
name|history
init|=
name|testNode
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|history
operator|.
name|addVersionLabel
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|,
literal|"testLabel"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|history
operator|.
name|addVersionLabel
argument_list|(
name|v2
operator|.
name|getName
argument_list|()
argument_list|,
literal|"testLabel"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|testSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|history
operator|=
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|testNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|.
name|addVersionLabel
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|,
literal|"testLabel"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since oak      */
annotation|@
name|Test
specifier|public
name|void
name|testRemoveVersionLabel
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|allow
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionPrivileges
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
name|Version
name|v
init|=
name|testNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
name|Version
name|v2
init|=
name|testNode
operator|.
name|checkin
argument_list|()
decl_stmt|;
name|testNode
operator|.
name|checkout
argument_list|()
expr_stmt|;
comment|// -> VersionHistory.addVersionLabel must be allowed
name|VersionHistory
name|history
init|=
name|testNode
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|history
operator|.
name|addVersionLabel
argument_list|(
name|v
operator|.
name|getName
argument_list|()
argument_list|,
literal|"testLabel"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|history
operator|.
name|addVersionLabel
argument_list|(
name|v2
operator|.
name|getName
argument_list|()
argument_list|,
literal|"testLabel"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|VersionManager
name|vMgr
init|=
name|testSession
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getVersionManager
argument_list|()
decl_stmt|;
name|history
operator|=
name|vMgr
operator|.
name|getVersionHistory
argument_list|(
name|testNode
operator|.
name|getPath
argument_list|()
argument_list|)
expr_stmt|;
name|history
operator|.
name|removeVersionLabel
argument_list|(
literal|"testLabel"
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since oak      */
annotation|@
name|Test
specifier|public
name|void
name|testVersionablePath
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|n
init|=
name|createVersionableNode
argument_list|(
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
argument_list|)
decl_stmt|;
name|VersionHistory
name|vh
init|=
name|n
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|Property
name|versionablePath
init|=
name|vh
operator|.
name|getProperty
argument_list|(
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionablePath
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNewVersionableNode
parameter_list|()
throws|throws
name|Exception
block|{
name|modify
argument_list|(
name|path
argument_list|,
name|REP_WRITE
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|modify
argument_list|(
name|path
argument_list|,
name|Privilege
operator|.
name|JCR_VERSION_MANAGEMENT
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|Node
name|testNode
init|=
name|testSession
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Node
name|newNode
init|=
name|testNode
operator|.
name|addNode
argument_list|(
literal|"versionable"
argument_list|)
decl_stmt|;
name|newNode
operator|.
name|addMixin
argument_list|(
literal|"mix:versionable"
argument_list|)
expr_stmt|;
name|testSession
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
comment|/**      * @since oak      */
annotation|@
name|Test
specifier|public
name|void
name|testVersionableChildNode
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|testNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"n3"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|addMixin
argument_list|(
literal|"mix:versionable"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testNode
operator|.
name|isNodeType
argument_list|(
literal|"mix:versionable"
argument_list|)
argument_list|)
expr_stmt|;
name|VersionHistory
name|vh
init|=
name|testNode
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|Property
name|versionablePath
init|=
name|vh
operator|.
name|getProperty
argument_list|(
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionablePath
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @since oak      */
annotation|@
name|Test
specifier|public
name|void
name|testVersionableChildNode2
parameter_list|()
throws|throws
name|Exception
block|{
name|Node
name|testNode
init|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"n1"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"n2"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"n3"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"jcr:content"
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|addMixin
argument_list|(
literal|"mix:versionable"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|testNode
operator|.
name|remove
argument_list|()
expr_stmt|;
name|testNode
operator|=
name|superuser
operator|.
name|getNode
argument_list|(
name|path
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"n1"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"n2"
argument_list|)
operator|.
name|getNode
argument_list|(
literal|"n3"
argument_list|)
operator|.
name|addNode
argument_list|(
literal|"jcr:content"
argument_list|)
expr_stmt|;
name|testNode
operator|.
name|addMixin
argument_list|(
literal|"mix:versionable"
argument_list|)
expr_stmt|;
name|superuser
operator|.
name|save
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|testNode
operator|.
name|isNodeType
argument_list|(
literal|"mix:versionable"
argument_list|)
argument_list|)
expr_stmt|;
name|VersionHistory
name|vh
init|=
name|testNode
operator|.
name|getVersionHistory
argument_list|()
decl_stmt|;
name|Property
name|versionablePath
init|=
name|vh
operator|.
name|getProperty
argument_list|(
name|superuser
operator|.
name|getWorkspace
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testNode
operator|.
name|getPath
argument_list|()
argument_list|,
name|versionablePath
operator|.
name|getString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

