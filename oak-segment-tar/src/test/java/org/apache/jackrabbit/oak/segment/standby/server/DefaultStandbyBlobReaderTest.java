begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|segment
operator|.
name|standby
operator|.
name|server
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertArrayEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|mock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|mockito
operator|.
name|Mockito
operator|.
name|when
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|blob
operator|.
name|BlobStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|DefaultStandbyBlobReaderTest
block|{
specifier|private
specifier|static
name|InputStream
name|newFailingInputStream
parameter_list|()
block|{
return|return
operator|new
name|InputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"generic error"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldAlwaysReturnNullWithoutBlobStore
parameter_list|()
throws|throws
name|Exception
block|{
name|DefaultStandbyBlobReader
name|r
init|=
operator|new
name|DefaultStandbyBlobReader
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|readBlob
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldReturnNullIfBlobDoesNotExist
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobStore
name|s
init|=
name|mock
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getInputStream
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|thenThrow
argument_list|(
operator|new
name|IOException
argument_list|(
literal|"blob not found"
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultStandbyBlobReader
name|r
init|=
operator|new
name|DefaultStandbyBlobReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|readBlob
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldReturnNullIfBlobIsUnreadable
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobStore
name|s
init|=
name|mock
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getInputStream
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
name|newFailingInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|DefaultStandbyBlobReader
name|r
init|=
operator|new
name|DefaultStandbyBlobReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|r
operator|.
name|readBlob
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|shouldReturnBlobContent
parameter_list|()
throws|throws
name|Exception
block|{
name|BlobStore
name|s
init|=
name|mock
argument_list|(
name|BlobStore
operator|.
name|class
argument_list|)
decl_stmt|;
name|when
argument_list|(
name|s
operator|.
name|getInputStream
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|thenReturn
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|)
argument_list|)
expr_stmt|;
name|DefaultStandbyBlobReader
name|r
init|=
operator|new
name|DefaultStandbyBlobReader
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|assertArrayEquals
argument_list|(
operator|new
name|byte
index|[]
block|{
literal|1
block|,
literal|2
block|,
literal|3
block|}
argument_list|,
name|r
operator|.
name|readBlob
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

