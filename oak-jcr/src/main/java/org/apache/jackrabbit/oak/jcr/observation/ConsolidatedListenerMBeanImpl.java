begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicInteger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|ObjectName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Activate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Deactivate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|Reference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferenceCardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|ReferencePolicy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|felix
operator|.
name|scr
operator|.
name|annotations
operator|.
name|References
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|api
operator|.
name|jmx
operator|.
name|EventListenerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
operator|.
name|observation
operator|.
name|jmx
operator|.
name|ConsolidatedListenerMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|osgi
operator|.
name|OsgiWhiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
operator|.
name|filter
operator|.
name|FilterConfigMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|BackgroundObserverMBean
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Registration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|Whiteboard
import|;
end_import

begin_import
import|import
name|org
operator|.
name|osgi
operator|.
name|framework
operator|.
name|BundleContext
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Preconditions
operator|.
name|checkNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|whiteboard
operator|.
name|WhiteboardUtils
operator|.
name|registerMBean
import|;
end_import

begin_class
annotation|@
name|Component
annotation|@
name|References
argument_list|(
block|{
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"observer"
argument_list|,
name|bind
operator|=
literal|"bindObserver"
argument_list|,
name|unbind
operator|=
literal|"unbindObserver"
argument_list|,
name|referenceInterface
operator|=
name|Observer
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|)
block|,
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"listenerMBean"
argument_list|,
name|bind
operator|=
literal|"bindListenerMBean"
argument_list|,
name|unbind
operator|=
literal|"unbindListenerMBean"
argument_list|,
name|referenceInterface
operator|=
name|EventListenerMBean
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|)
block|,
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"backgroundObserverMBean"
argument_list|,
name|bind
operator|=
literal|"bindBackgroundObserverMBean"
argument_list|,
name|unbind
operator|=
literal|"unbindBackgroundObserverMBean"
argument_list|,
name|referenceInterface
operator|=
name|BackgroundObserverMBean
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|)
block|,
annotation|@
name|Reference
argument_list|(
name|name
operator|=
literal|"filterConfigMBean"
argument_list|,
name|bind
operator|=
literal|"bindFilterConfigMBean"
argument_list|,
name|unbind
operator|=
literal|"unbindFilterConfigMBean"
argument_list|,
name|referenceInterface
operator|=
name|FilterConfigMBean
operator|.
name|class
argument_list|,
name|policy
operator|=
name|ReferencePolicy
operator|.
name|DYNAMIC
argument_list|,
name|cardinality
operator|=
name|ReferenceCardinality
operator|.
name|OPTIONAL_MULTIPLE
argument_list|)
block|}
argument_list|)
specifier|public
class|class
name|ConsolidatedListenerMBeanImpl
implements|implements
name|ConsolidatedListenerMBean
block|{
specifier|private
specifier|final
name|AtomicInteger
name|observerCount
init|=
operator|new
name|AtomicInteger
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|EventListenerMBean
argument_list|>
name|eventListeners
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|BackgroundObserverMBean
argument_list|>
name|bgObservers
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|ObjectName
argument_list|,
name|FilterConfigMBean
argument_list|>
name|filterConfigs
init|=
name|Maps
operator|.
name|newConcurrentMap
argument_list|()
decl_stmt|;
specifier|private
name|Registration
name|mbeanReg
decl_stmt|;
annotation|@
name|Override
specifier|public
name|TabularData
name|getListenerStats
parameter_list|()
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|int
name|id
init|=
literal|0
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|ListenerStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Consolidated Listener Stats"
argument_list|,
name|ListenerStatsData
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"index"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
for|for
control|(
name|ListenerMBeans
name|beans
range|:
name|getListenerMBeans
argument_list|()
control|)
block|{
name|tds
operator|.
name|put
argument_list|(
operator|new
name|ListenerStatsData
argument_list|(
operator|++
name|id
argument_list|,
name|beans
argument_list|)
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Override
specifier|public
name|TabularData
name|getObserversStats
parameter_list|()
block|{
name|TabularDataSupport
name|tds
decl_stmt|;
try|try
block|{
name|int
name|id
init|=
literal|0
decl_stmt|;
name|TabularType
name|tt
init|=
operator|new
name|TabularType
argument_list|(
name|ObserverStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Consolidated Observer Stats"
argument_list|,
name|ObserverStatsData
operator|.
name|TYPE
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"index"
block|}
argument_list|)
decl_stmt|;
name|tds
operator|=
operator|new
name|TabularDataSupport
argument_list|(
name|tt
argument_list|)
expr_stmt|;
for|for
control|(
name|BackgroundObserverMBean
name|o
range|:
name|collectNonJcrObservers
argument_list|()
control|)
block|{
name|tds
operator|.
name|put
argument_list|(
operator|new
name|ObserverStatsData
argument_list|(
operator|++
name|id
argument_list|,
name|o
argument_list|)
operator|.
name|toCompositeData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
return|return
name|tds
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getObserversCount
parameter_list|()
block|{
return|return
name|observerCount
operator|.
name|get
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getListenersCount
parameter_list|()
block|{
return|return
name|eventListeners
operator|.
name|size
argument_list|()
return|;
block|}
specifier|private
name|Collection
argument_list|<
name|BackgroundObserverMBean
argument_list|>
name|collectNonJcrObservers
parameter_list|()
block|{
name|List
argument_list|<
name|BackgroundObserverMBean
argument_list|>
name|observers
init|=
name|Lists
operator|.
name|newArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|BackgroundObserverMBean
argument_list|>
name|o
range|:
name|bgObservers
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|listenerId
init|=
name|getListenerId
argument_list|(
name|o
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|listenerId
operator|==
literal|null
condition|)
block|{
name|observers
operator|.
name|add
argument_list|(
name|o
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|observers
return|;
block|}
comment|/**      * Performs the mapping between EventListenerMBean and the Observer      * based on the JMX ObjectName service property of the MBean      *      * @return map of EventListenerMBean and corresponding Observer      */
specifier|private
name|List
argument_list|<
name|ListenerMBeans
argument_list|>
name|getListenerMBeans
parameter_list|()
block|{
name|List
argument_list|<
name|ListenerMBeans
argument_list|>
name|mbeans
init|=
name|Lists
operator|.
name|newArrayListWithCapacity
argument_list|(
name|eventListeners
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|EventListenerMBean
argument_list|>
name|e
range|:
name|eventListeners
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|listenerId
init|=
name|getListenerId
argument_list|(
name|e
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|ListenerMBeans
name|m
init|=
operator|new
name|ListenerMBeans
argument_list|()
decl_stmt|;
name|m
operator|.
name|eventListenerMBean
operator|=
name|e
operator|.
name|getValue
argument_list|()
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|FilterConfigMBean
argument_list|>
name|ef
range|:
name|filterConfigs
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|getListenerId
argument_list|(
name|ef
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|listenerId
argument_list|)
condition|)
block|{
name|m
operator|.
name|filterConfigMBean
operator|=
name|ef
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|ObjectName
argument_list|,
name|BackgroundObserverMBean
argument_list|>
name|ef
range|:
name|bgObservers
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|Objects
operator|.
name|equals
argument_list|(
name|getListenerId
argument_list|(
name|ef
operator|.
name|getKey
argument_list|()
argument_list|)
argument_list|,
name|listenerId
argument_list|)
condition|)
block|{
name|m
operator|.
name|observerMBean
operator|=
name|ef
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
block|}
name|mbeans
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|mbeans
return|;
block|}
comment|//~---------------------------------------< OSGi>
annotation|@
name|Activate
specifier|private
name|void
name|activate
parameter_list|(
name|BundleContext
name|context
parameter_list|)
block|{
name|Whiteboard
name|wb
init|=
operator|new
name|OsgiWhiteboard
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|mbeanReg
operator|=
name|registerMBean
argument_list|(
name|wb
argument_list|,
name|ConsolidatedListenerMBean
operator|.
name|class
argument_list|,
name|this
argument_list|,
name|ConsolidatedListenerMBean
operator|.
name|TYPE
argument_list|,
literal|"Consolidated Event Listener statistics"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Deactivate
specifier|private
name|void
name|deactivate
parameter_list|()
block|{
if|if
condition|(
name|mbeanReg
operator|!=
literal|null
condition|)
block|{
name|mbeanReg
operator|.
name|unregister
argument_list|()
expr_stmt|;
block|}
name|eventListeners
operator|.
name|clear
argument_list|()
expr_stmt|;
name|bgObservers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filterConfigs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|bindObserver
parameter_list|(
name|Observer
name|observer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|observerCount
operator|.
name|incrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
specifier|synchronized
name|void
name|unbindObserver
parameter_list|(
name|Observer
name|observer
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|observerCount
operator|.
name|decrementAndGet
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|bindBackgroundObserverMBean
parameter_list|(
name|BackgroundObserverMBean
name|mbean
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|bgObservers
operator|.
name|put
argument_list|(
name|getObjectName
argument_list|(
name|config
argument_list|)
argument_list|,
name|mbean
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|unbindBackgroundObserverMBean
parameter_list|(
name|BackgroundObserverMBean
name|mbean
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|bgObservers
operator|.
name|remove
argument_list|(
name|getObjectName
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|bindListenerMBean
parameter_list|(
name|EventListenerMBean
name|mbean
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|eventListeners
operator|.
name|put
argument_list|(
name|getObjectName
argument_list|(
name|config
argument_list|)
argument_list|,
name|mbean
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|unbindListenerMBean
parameter_list|(
name|EventListenerMBean
name|mbean
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|eventListeners
operator|.
name|remove
argument_list|(
name|getObjectName
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|bindFilterConfigMBean
parameter_list|(
name|FilterConfigMBean
name|mbean
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|filterConfigs
operator|.
name|put
argument_list|(
name|getObjectName
argument_list|(
name|config
argument_list|)
argument_list|,
name|mbean
argument_list|)
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|protected
name|void
name|unbindFilterConfigMBean
parameter_list|(
name|FilterConfigMBean
name|mbean
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
name|filterConfigs
operator|.
name|remove
argument_list|(
name|getObjectName
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|ObjectName
name|getObjectName
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|config
parameter_list|)
block|{
return|return
name|checkNotNull
argument_list|(
operator|(
name|ObjectName
operator|)
name|config
operator|.
name|get
argument_list|(
literal|"jmx.objectname"
argument_list|)
argument_list|,
literal|"No 'jmx.objectname' property defined for MBean %s"
argument_list|,
name|config
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|String
name|getListenerId
parameter_list|(
name|ObjectName
name|name
parameter_list|)
block|{
return|return
name|name
operator|.
name|getKeyProperty
argument_list|(
name|ChangeProcessor
operator|.
name|LISTENER_ID
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|ListenerMBeans
block|{
name|EventListenerMBean
name|eventListenerMBean
decl_stmt|;
name|BackgroundObserverMBean
name|observerMBean
decl_stmt|;
name|FilterConfigMBean
name|filterConfigMBean
decl_stmt|;
block|}
comment|//~------------------------------------------< JMX>
specifier|private
specifier|static
class|class
name|ListenerStatsData
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"index"
block|,
literal|"className"
block|,
literal|"isDeep"
block|,
literal|"nodeTypeNames"
block|,
literal|"deliveries"
block|,
literal|"deliveries/hr"
block|,
literal|"us/delivery"
block|,
literal|"delivered"
block|,
literal|"delivered/hr"
block|,
literal|"us/delivered"
block|,
literal|"ratioOfTimeSpentProcessingEvents"
block|,
literal|"queueSize"
block|,
literal|"localEventCount"
block|,
literal|"externalEventCount"
block|,
literal|"paths"
block|,
literal|"clusterExternal"
block|,
literal|"clusterLocal"
block|,
literal|"maxQueueSize"
block|}
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
name|FIELD_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|LONG
block|,
name|SimpleType
operator|.
name|DOUBLE
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|BOOLEAN
block|,
name|SimpleType
operator|.
name|INTEGER
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|ListenerStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Listener statistics"
argument_list|,
name|ListenerStatsData
operator|.
name|FIELD_NAMES
argument_list|,
name|ListenerStatsData
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|ListenerStatsData
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|ListenerMBeans
name|mbeans
decl_stmt|;
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|public
name|ListenerStatsData
parameter_list|(
name|int
name|i
parameter_list|,
name|ListenerMBeans
name|mbeans
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|mbeans
operator|=
name|mbeans
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|index
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getClassName
argument_list|()
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|isDeep
argument_list|()
block|,
name|Arrays
operator|.
name|toString
argument_list|(
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getNodeTypeName
argument_list|()
argument_list|)
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getEventDeliveries
argument_list|()
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getEventDeliveriesPerHour
argument_list|()
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getMicrosecondsPerEventDelivery
argument_list|()
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getEventsDelivered
argument_list|()
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getEventsDeliveredPerHour
argument_list|()
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getMicrosecondsPerEventDelivered
argument_list|()
block|,
name|mbeans
operator|.
name|eventListenerMBean
operator|.
name|getRatioOfTimeSpentProcessingEvents
argument_list|()
block|,
name|mbeans
operator|.
name|observerMBean
operator|.
name|getQueueSize
argument_list|()
block|,
name|mbeans
operator|.
name|observerMBean
operator|.
name|getLocalEventCount
argument_list|()
block|,
name|mbeans
operator|.
name|observerMBean
operator|.
name|getExternalEventCount
argument_list|()
block|,
name|Arrays
operator|.
name|toString
argument_list|(
name|mbeans
operator|.
name|filterConfigMBean
operator|.
name|getSubTrees
argument_list|()
argument_list|)
block|,
name|mbeans
operator|.
name|filterConfigMBean
operator|.
name|isIncludeClusterExternal
argument_list|()
block|,
name|mbeans
operator|.
name|filterConfigMBean
operator|.
name|isIncludeClusterLocal
argument_list|()
block|,
name|mbeans
operator|.
name|observerMBean
operator|.
name|getMaxQueueSize
argument_list|()
block|,             }
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|ObserverStatsData
block|{
specifier|static
specifier|final
name|String
index|[]
name|FIELD_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"index"
block|,
literal|"className"
block|,
literal|"maxQueueSize"
block|,
literal|"queueSize"
block|,
literal|"localEventCount"
block|,
literal|"externalEventCount"
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|String
index|[]
name|FIELD_DESCRIPTIONS
init|=
name|FIELD_NAMES
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"rawtypes"
argument_list|)
specifier|static
specifier|final
name|OpenType
index|[]
name|FIELD_TYPES
init|=
operator|new
name|OpenType
index|[]
block|{
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,
name|SimpleType
operator|.
name|INTEGER
block|,         }
decl_stmt|;
specifier|static
specifier|final
name|CompositeType
name|TYPE
init|=
name|createCompositeType
argument_list|()
decl_stmt|;
specifier|static
name|CompositeType
name|createCompositeType
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|CompositeType
argument_list|(
name|ObserverStatsData
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|"Composite data type for Observer statistics"
argument_list|,
name|ObserverStatsData
operator|.
name|FIELD_NAMES
argument_list|,
name|ObserverStatsData
operator|.
name|FIELD_DESCRIPTIONS
argument_list|,
name|ObserverStatsData
operator|.
name|FIELD_TYPES
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|final
name|int
name|index
decl_stmt|;
specifier|private
name|BackgroundObserverMBean
name|mbean
decl_stmt|;
specifier|public
name|ObserverStatsData
parameter_list|(
name|int
name|i
parameter_list|,
name|BackgroundObserverMBean
name|observer
parameter_list|)
block|{
name|this
operator|.
name|index
operator|=
name|i
expr_stmt|;
name|this
operator|.
name|mbean
operator|=
name|observer
expr_stmt|;
block|}
name|CompositeDataSupport
name|toCompositeData
parameter_list|()
block|{
name|Object
index|[]
name|values
init|=
operator|new
name|Object
index|[]
block|{
name|index
block|,
name|mbean
operator|.
name|getClassName
argument_list|()
block|,
name|mbean
operator|.
name|getMaxQueueSize
argument_list|()
block|,
name|mbean
operator|.
name|getQueueSize
argument_list|()
block|,
name|mbean
operator|.
name|getLocalEventCount
argument_list|()
block|,
name|mbean
operator|.
name|getExternalEventCount
argument_list|()
block|,              }
decl_stmt|;
try|try
block|{
return|return
operator|new
name|CompositeDataSupport
argument_list|(
name|TYPE
argument_list|,
name|FIELD_NAMES
argument_list|,
name|values
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

