begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|mongo
operator|.
name|replica
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|Revision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|document
operator|.
name|RevisionVector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|stats
operator|.
name|Clock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|slf4j
operator|.
name|LoggerFactory
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|BasicDBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_class
specifier|public
class|class
name|GetRootRevisionsCallable
implements|implements
name|Callable
argument_list|<
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|>
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LoggerFactory
operator|.
name|getLogger
argument_list|(
name|GetRootRevisionsCallable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|hostName
decl_stmt|;
specifier|private
specifier|final
name|NodeCollectionProvider
name|nodeCollections
decl_stmt|;
specifier|private
specifier|final
name|Clock
name|clock
decl_stmt|;
specifier|public
name|GetRootRevisionsCallable
parameter_list|(
name|Clock
name|clock
parameter_list|,
name|String
name|hostName
parameter_list|,
name|NodeCollectionProvider
name|nodeCollections
parameter_list|)
block|{
name|this
operator|.
name|hostName
operator|=
name|hostName
expr_stmt|;
name|this
operator|.
name|nodeCollections
operator|=
name|nodeCollections
expr_stmt|;
name|this
operator|.
name|clock
operator|=
name|clock
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|List
argument_list|<
name|Revision
argument_list|>
name|revisions
init|=
operator|new
name|ArrayList
argument_list|<
name|Revision
argument_list|>
argument_list|()
decl_stmt|;
name|DBCollection
name|collection
init|=
name|nodeCollections
operator|.
name|get
argument_list|(
name|hostName
argument_list|)
decl_stmt|;
name|long
name|start
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|DBObject
name|root
init|=
name|collection
operator|.
name|findOne
argument_list|(
operator|new
name|BasicDBObject
argument_list|(
name|Document
operator|.
name|ID
argument_list|,
literal|"0:/"
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|end
init|=
name|clock
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|long
name|mid
init|=
operator|(
name|start
operator|+
name|end
operator|)
operator|/
literal|2
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Can't get the root document on {}"
argument_list|,
name|hostName
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|DBObject
name|lastRev
init|=
operator|(
name|DBObject
operator|)
name|root
operator|.
name|get
argument_list|(
literal|"_lastRev"
argument_list|)
decl_stmt|;
for|for
control|(
name|String
name|clusterId
range|:
name|lastRev
operator|.
name|keySet
argument_list|()
control|)
block|{
name|String
name|rev
init|=
operator|(
name|String
operator|)
name|lastRev
operator|.
name|get
argument_list|(
name|clusterId
argument_list|)
decl_stmt|;
name|revisions
operator|.
name|add
argument_list|(
name|Revision
operator|.
name|fromString
argument_list|(
name|rev
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Got /_lastRev from {}: {}"
argument_list|,
name|hostName
argument_list|,
name|lastRev
argument_list|)
expr_stmt|;
return|return
operator|new
name|Timestamped
argument_list|<
name|RevisionVector
argument_list|>
argument_list|(
operator|new
name|RevisionVector
argument_list|(
name|revisions
argument_list|)
argument_list|,
name|mid
argument_list|)
return|;
block|}
block|}
end_class

end_unit

