begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|jcr
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|ItemExistsException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|PathNotFoundException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|RepositoryException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|fixture
operator|.
name|NodeStoreFixture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_class
specifier|public
class|class
name|ValidNamesTest
extends|extends
name|AbstractRepositoryTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_NODE
init|=
literal|"test_node"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PATH
init|=
literal|'/'
operator|+
name|TEST_NODE
decl_stmt|;
specifier|private
name|Node
name|testNode
decl_stmt|;
specifier|private
name|String
name|unmappedNsPrefix
decl_stmt|;
specifier|private
name|String
name|testPrefix
decl_stmt|;
specifier|private
name|String
name|testNsUri
decl_stmt|;
specifier|public
name|ValidNamesTest
parameter_list|(
name|NodeStoreFixture
name|fixture
parameter_list|)
block|{
name|super
argument_list|(
name|fixture
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|session
init|=
name|getAdminSession
argument_list|()
decl_stmt|;
name|Node
name|root
init|=
name|session
operator|.
name|getRootNode
argument_list|()
decl_stmt|;
name|testNode
operator|=
name|root
operator|.
name|addNode
argument_list|(
name|TEST_NODE
argument_list|)
expr_stmt|;
name|session
operator|.
name|save
argument_list|()
expr_stmt|;
name|StringBuilder
name|t
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|String
name|prefix
range|:
name|session
operator|.
name|getNamespacePrefixes
argument_list|()
control|)
block|{
name|int
name|l
init|=
name|t
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|>
name|l
condition|)
block|{
name|t
operator|.
name|append
argument_list|(
call|(
name|char
call|)
argument_list|(
name|prefix
operator|.
name|charAt
argument_list|(
name|l
argument_list|)
operator|^
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|append
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
block|}
block|}
name|unmappedNsPrefix
operator|=
name|t
operator|.
name|toString
argument_list|()
expr_stmt|;
for|for
control|(
name|String
name|p
range|:
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|getNamespacePrefixes
argument_list|()
control|)
block|{
if|if
condition|(
name|p
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|String
name|u
init|=
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|getNamespaceURI
argument_list|(
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|.
name|contains
argument_list|(
literal|":"
argument_list|)
condition|)
block|{
name|testPrefix
operator|=
name|p
expr_stmt|;
name|testNsUri
operator|=
name|u
expr_stmt|;
block|}
block|}
block|}
name|assertNotNull
argument_list|(
name|testPrefix
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testNsUri
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Session
name|s
init|=
name|testNode
operator|.
name|getSession
argument_list|()
decl_stmt|;
name|s
operator|.
name|removeItem
argument_list|(
name|TEST_PATH
argument_list|)
expr_stmt|;
name|s
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSimple
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ItemExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDot
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDotFoo
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|".foo"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|ItemExistsException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testDotDot
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testDotDotFoo
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"..foo"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testTrailingDot
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo."
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testLeadingBlank
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|" foo"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testTrailingBlank
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo "
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedSlash
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo/bar"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedPipe
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo|bar"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedStar
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo*bar"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedOpenBracket
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo[bar"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PathNotFoundException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedCloseBracket
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo]bar"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testLeadingColon
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|":foo"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedUnmappedNsColon
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
name|unmappedNsPrefix
operator|+
literal|":bar"
argument_list|)
expr_stmt|;
block|}
comment|// TODO seems to be a bug
annotation|@
name|Test
specifier|public
name|void
name|testEmptyNameInCurlys
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|nameTest
argument_list|(
literal|"{}foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"foo"
argument_list|,
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleEnclosedOpenCurly
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo{bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSingleEnclosedCloseCurly
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo}bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidLocalNameInCurlys
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|nameTest
argument_list|(
literal|"{foo}bar"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"{foo}bar"
argument_list|,
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testNonUriInCurlys
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"{/}bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testValidNamespaceUriInCurlys
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|nameTest
argument_list|(
literal|"{"
operator|+
name|testNsUri
operator|+
literal|"}foo"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|testPrefix
operator|+
literal|":foo"
argument_list|,
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testValidNamespaceUriInCurlysWrongPlace
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"x{"
operator|+
name|testNsUri
operator|+
literal|"}foo"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: questionable exception
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testValidNamespaceUriInCurlysNoLocalName
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"{"
operator|+
name|testNsUri
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
comment|// TODO better exception - or maybe this should pass?
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testQualifiedNameWithUnmappedNsUri
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|String
name|ns
init|=
literal|"urn:uuid:"
operator|+
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Node
name|n
init|=
name|nameTest
argument_list|(
literal|"{"
operator|+
name|ns
operator|+
literal|"}foo"
argument_list|)
decl_stmt|;
name|String
name|pref
init|=
name|n
operator|.
name|getSession
argument_list|()
operator|.
name|getNamespacePrefix
argument_list|(
name|ns
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|pref
operator|+
literal|":foo"
argument_list|,
name|n
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnclosedPercent
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo%bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnclosedBlank
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedTab
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo\tbar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedLf
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo\nbar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedCr
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo\rbar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testEnclosedNonBreakingSpace
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo\u00a0bar"
argument_list|)
expr_stmt|;
block|}
comment|// OAK-4587
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|RepositoryException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|testEnclosedIdeographicSpace
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo\u3000bar"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testUnpairedSurrogate
parameter_list|()
throws|throws
name|RepositoryException
block|{
comment|// see OAK-5506
name|org
operator|.
name|junit
operator|.
name|Assume
operator|.
name|assumeFalse
argument_list|(
name|super
operator|.
name|fixture
operator|.
name|toString
argument_list|()
operator|.
name|toLowerCase
argument_list|()
operator|.
name|contains
argument_list|(
literal|"segment"
argument_list|)
argument_list|)
expr_stmt|;
name|nameTest
argument_list|(
literal|"foo\ud800"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testSurrogate
parameter_list|()
throws|throws
name|RepositoryException
block|{
name|nameTest
argument_list|(
literal|"foo\uD83D\uDCA9"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Node
name|nameTest
parameter_list|(
name|String
name|nodeName
parameter_list|)
throws|throws
name|RepositoryException
block|{
name|Node
name|n
init|=
name|testNode
operator|.
name|addNode
argument_list|(
name|nodeName
argument_list|)
decl_stmt|;
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|testNode
operator|.
name|getSession
argument_list|()
operator|.
name|getNode
argument_list|(
name|n
operator|.
name|getPath
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|RepositoryException
name|ex
parameter_list|)
block|{
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

