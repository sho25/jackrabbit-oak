begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|com
operator|.
name|mongodb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|fakemongo
operator|.
name|Fongo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|CommandResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBEncoder
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|DBObject
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|FongoDB
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|FongoDBCollection
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|InsertOptions
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|MongoException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|ReadPreference
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteConcern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|WriteResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|mongodb
operator|.
name|connection
operator|.
name|ServerVersion
import|;
end_import

begin_class
specifier|public
class|class
name|OakFongo
extends|extends
name|Fongo
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDB
argument_list|>
name|dbMap
decl_stmt|;
specifier|public
name|OakFongo
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|dbMap
operator|=
name|getDBMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|FongoDB
name|getDB
parameter_list|(
name|String
name|dbname
parameter_list|)
block|{
synchronized|synchronized
init|(
name|dbMap
init|)
block|{
name|FongoDB
name|fongoDb
init|=
name|dbMap
operator|.
name|get
argument_list|(
name|dbname
argument_list|)
decl_stmt|;
if|if
condition|(
name|fongoDb
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|fongoDb
operator|=
operator|new
name|OakFongoDB
argument_list|(
name|this
argument_list|,
name|dbname
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MongoException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|dbMap
operator|.
name|put
argument_list|(
name|dbname
argument_list|,
name|fongoDb
argument_list|)
expr_stmt|;
block|}
return|return
name|fongoDb
return|;
block|}
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDB
argument_list|>
name|getDBMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|Fongo
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"dbMap"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDB
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|protected
name|void
name|beforeInsert
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|DBObject
argument_list|>
name|documents
parameter_list|,
name|InsertOptions
name|insertOptions
parameter_list|)
block|{}
specifier|protected
name|void
name|afterInsert
parameter_list|(
name|WriteResult
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeFindAndModify
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|DBObject
name|sort
parameter_list|,
name|boolean
name|remove
parameter_list|,
name|DBObject
name|update
parameter_list|,
name|boolean
name|returnNew
parameter_list|,
name|boolean
name|upsert
parameter_list|)
block|{}
specifier|protected
name|void
name|afterFindAndModify
parameter_list|(
name|DBObject
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeUpdate
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|multi
parameter_list|,
name|WriteConcern
name|concern
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
block|{}
specifier|protected
name|void
name|afterUpdate
parameter_list|(
name|WriteResult
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeRemove
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|WriteConcern
name|writeConcern
parameter_list|)
block|{}
specifier|protected
name|void
name|afterRemove
parameter_list|(
name|WriteResult
name|result
parameter_list|)
block|{}
specifier|protected
name|void
name|beforeExecuteBulkWriteOperation
parameter_list|(
name|boolean
name|ordered
parameter_list|,
name|Boolean
name|bypassDocumentValidation
parameter_list|,
name|List
argument_list|<
name|?
argument_list|>
name|writeRequests
parameter_list|,
name|WriteConcern
name|aWriteConcern
parameter_list|)
block|{}
specifier|protected
name|void
name|afterExecuteBulkWriteOperation
parameter_list|(
name|BulkWriteResult
name|result
parameter_list|)
block|{}
specifier|private
class|class
name|OakFongoDB
extends|extends
name|FongoDB
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDBCollection
argument_list|>
name|collMap
decl_stmt|;
specifier|public
name|OakFongoDB
parameter_list|(
name|Fongo
name|fongo
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|Exception
block|{
name|super
argument_list|(
name|fongo
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|this
operator|.
name|collMap
operator|=
name|getCollMap
argument_list|()
expr_stmt|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDBCollection
argument_list|>
name|getCollMap
parameter_list|()
throws|throws
name|Exception
block|{
name|Field
name|f
init|=
name|FongoDB
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"collMap"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|FongoDBCollection
argument_list|>
operator|)
name|f
operator|.
name|get
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|CommandResult
name|command
parameter_list|(
name|DBObject
name|cmd
parameter_list|,
name|ReadPreference
name|readPreference
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
block|{
if|if
condition|(
name|cmd
operator|.
name|containsField
argument_list|(
literal|"serverStatus"
argument_list|)
condition|)
block|{
name|CommandResult
name|commandResult
init|=
name|okResult
argument_list|()
decl_stmt|;
name|commandResult
operator|.
name|append
argument_list|(
literal|"version"
argument_list|,
name|asString
argument_list|(
name|getServerVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|commandResult
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|command
argument_list|(
name|cmd
argument_list|,
name|readPreference
argument_list|,
name|encoder
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|synchronized
name|FongoDBCollection
name|doGetCollection
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|idIsNotUniq
parameter_list|)
block|{
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"system."
argument_list|)
condition|)
block|{
return|return
name|super
operator|.
name|doGetCollection
argument_list|(
name|name
argument_list|,
name|idIsNotUniq
argument_list|)
return|;
block|}
name|FongoDBCollection
name|coll
init|=
name|collMap
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
name|coll
operator|=
operator|new
name|OakFongoDBCollection
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|idIsNotUniq
argument_list|)
expr_stmt|;
name|collMap
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|coll
argument_list|)
expr_stmt|;
block|}
return|return
name|coll
return|;
block|}
specifier|private
name|String
name|asString
parameter_list|(
name|ServerVersion
name|serverVersion
parameter_list|)
block|{
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
range|:
name|serverVersion
operator|.
name|getVersionList
argument_list|()
control|)
block|{
if|if
condition|(
name|sb
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|sb
operator|.
name|append
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|OakFongoDBCollection
extends|extends
name|FongoDBCollection
block|{
specifier|public
name|OakFongoDBCollection
parameter_list|(
name|FongoDB
name|db
parameter_list|,
name|String
name|name
parameter_list|,
name|boolean
name|idIsNotUniq
parameter_list|)
block|{
name|super
argument_list|(
name|db
argument_list|,
name|name
argument_list|,
name|idIsNotUniq
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|WriteResult
name|insert
parameter_list|(
name|List
argument_list|<
name|?
extends|extends
name|DBObject
argument_list|>
name|documents
parameter_list|,
name|InsertOptions
name|insertOptions
parameter_list|)
block|{
name|beforeInsert
argument_list|(
name|documents
argument_list|,
name|insertOptions
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|super
operator|.
name|insert
argument_list|(
name|documents
argument_list|,
name|insertOptions
argument_list|)
decl_stmt|;
name|afterInsert
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|WriteResult
name|remove
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|WriteConcern
name|writeConcern
parameter_list|)
block|{
name|beforeRemove
argument_list|(
name|query
argument_list|,
name|writeConcern
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|super
operator|.
name|remove
argument_list|(
name|query
argument_list|,
name|writeConcern
argument_list|)
decl_stmt|;
name|afterRemove
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|WriteResult
name|update
parameter_list|(
name|DBObject
name|q
parameter_list|,
name|DBObject
name|o
parameter_list|,
name|boolean
name|upsert
parameter_list|,
name|boolean
name|multi
parameter_list|,
name|WriteConcern
name|concern
parameter_list|,
name|DBEncoder
name|encoder
parameter_list|)
block|{
name|beforeUpdate
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
name|upsert
argument_list|,
name|multi
argument_list|,
name|concern
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
name|WriteResult
name|result
init|=
name|super
operator|.
name|update
argument_list|(
name|q
argument_list|,
name|o
argument_list|,
name|upsert
argument_list|,
name|multi
argument_list|,
name|concern
argument_list|,
name|encoder
argument_list|)
decl_stmt|;
name|afterUpdate
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|DBObject
name|findAndModify
parameter_list|(
name|DBObject
name|query
parameter_list|,
name|DBObject
name|fields
parameter_list|,
name|DBObject
name|sort
parameter_list|,
name|boolean
name|remove
parameter_list|,
name|DBObject
name|update
parameter_list|,
name|boolean
name|returnNew
parameter_list|,
name|boolean
name|upsert
parameter_list|)
block|{
name|beforeFindAndModify
argument_list|(
name|query
argument_list|,
name|fields
argument_list|,
name|sort
argument_list|,
name|remove
argument_list|,
name|update
argument_list|,
name|returnNew
argument_list|,
name|upsert
argument_list|)
expr_stmt|;
name|DBObject
name|result
init|=
name|super
operator|.
name|findAndModify
argument_list|(
name|query
argument_list|,
name|fields
argument_list|,
name|sort
argument_list|,
name|remove
argument_list|,
name|update
argument_list|,
name|returnNew
argument_list|,
name|upsert
argument_list|)
decl_stmt|;
name|afterFindAndModify
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
name|BulkWriteResult
name|executeBulkWriteOperation
parameter_list|(
name|boolean
name|ordered
parameter_list|,
name|Boolean
name|bypassDocumentValidation
parameter_list|,
name|List
argument_list|<
name|WriteRequest
argument_list|>
name|writeRequests
parameter_list|,
name|WriteConcern
name|aWriteConcern
parameter_list|)
block|{
name|beforeExecuteBulkWriteOperation
argument_list|(
name|ordered
argument_list|,
name|bypassDocumentValidation
argument_list|,
name|writeRequests
argument_list|,
name|aWriteConcern
argument_list|)
expr_stmt|;
name|BulkWriteResult
name|result
init|=
name|super
operator|.
name|executeBulkWriteOperation
argument_list|(
name|ordered
argument_list|,
name|bypassDocumentValidation
argument_list|,
name|writeRequests
argument_list|,
name|aWriteConcern
argument_list|)
decl_stmt|;
name|afterExecuteBulkWriteOperation
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
block|}
end_class

end_unit

