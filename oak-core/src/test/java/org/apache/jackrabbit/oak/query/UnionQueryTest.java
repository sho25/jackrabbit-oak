begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
package|;
end_package

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Lists
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|QueryEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Result
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ResultRow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|OpenSecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|UnionQueryTest
extends|extends
name|AbstractQueryTest
block|{
annotation|@
name|Override
specifier|protected
name|ContentRepository
name|createRepository
parameter_list|()
block|{
return|return
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|OpenSecurityProvider
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|createContentRepository
argument_list|()
return|;
block|}
annotation|@
name|Before
annotation|@
name|Override
specifier|public
name|void
name|before
parameter_list|()
throws|throws
name|Exception
block|{
name|super
operator|.
name|before
argument_list|()
expr_stmt|;
comment|// Create tree for this test
name|Tree
name|t
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"UnionQueryTest"
argument_list|)
decl_stmt|;
comment|// Create tree /a/b/c/d/e
name|t
operator|=
name|t
operator|.
name|addChild
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|t
operator|=
name|t
operator|.
name|addChild
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|t
operator|=
name|t
operator|.
name|addChild
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|t
operator|=
name|t
operator|.
name|addChild
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|t
operator|=
name|t
operator|.
name|addChild
argument_list|(
literal|"e"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|after
parameter_list|()
throws|throws
name|Exception
block|{
comment|// Remove test tree
name|root
operator|.
name|getTree
argument_list|(
literal|"/UnionQueryTest"
argument_list|)
operator|.
name|remove
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testOrderLimitOffset
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|left
init|=
literal|"SELECT [jcr:path] FROM [nt:base] AS a WHERE ISDESCENDANTNODE(a, '/UnionQueryTest')"
decl_stmt|;
name|String
name|right
init|=
literal|"SELECT [jcr:path] FROM [nt:base] AS a WHERE ISDESCENDANTNODE(a, '/UnionQueryTest')"
decl_stmt|;
name|String
name|order
init|=
literal|"ORDER BY [jcr:path]"
decl_stmt|;
name|String
name|union
init|=
name|String
operator|.
name|format
argument_list|(
literal|"%s UNION %s %s"
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|order
argument_list|)
decl_stmt|;
specifier|final
name|int
name|limit
init|=
literal|3
decl_stmt|;
specifier|final
name|int
name|offset
init|=
literal|2
decl_stmt|;
name|String
index|[]
name|expected
init|=
block|{
literal|"/UnionQueryTest/a/b/c"
block|,
literal|"/UnionQueryTest/a/b/c/d"
block|,
literal|"/UnionQueryTest/a/b/c/d/e"
block|}
decl_stmt|;
name|Result
name|result
init|=
name|qe
operator|.
name|executeQuery
argument_list|(
name|union
argument_list|,
name|QueryEngineImpl
operator|.
name|SQL2
argument_list|,
name|limit
argument_list|,
name|offset
argument_list|,
name|QueryEngine
operator|.
name|NO_BINDINGS
argument_list|,
name|QueryEngine
operator|.
name|NO_MAPPINGS
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|ResultRow
argument_list|>
name|rows
init|=
name|Lists
operator|.
name|newArrayList
argument_list|(
name|result
operator|.
name|getRows
argument_list|()
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|rows
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ResultRow
name|rr
range|:
name|result
operator|.
name|getRows
argument_list|()
control|)
block|{
name|assertEquals
argument_list|(
name|rr
operator|.
name|getPath
argument_list|()
argument_list|,
name|expected
index|[
name|i
operator|++
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

