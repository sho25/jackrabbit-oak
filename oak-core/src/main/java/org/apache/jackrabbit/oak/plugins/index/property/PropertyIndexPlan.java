begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
package|;
end_package

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|base
operator|.
name|Predicates
operator|.
name|in
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|any
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Iterables
operator|.
name|isEmpty
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
operator|.
name|newLinkedHashSet
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|emptySet
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|DECLARING_NODE_TYPES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|PROPERTY_NAMES
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|IndexConstants
operator|.
name|UNIQUE_PROPERTY_NAME
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|PropertyIndex
operator|.
name|encode
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|PropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|ContentMirrorStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|IndexStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|index
operator|.
name|property
operator|.
name|strategy
operator|.
name|UniqueEntryStoreStrategy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|query
operator|.
name|QueryEngineSettings
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Cursors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|query
operator|.
name|Filter
operator|.
name|PropertyRestriction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_comment
comment|/**  * Plan for querying a given property index using a given filter.  */
end_comment

begin_class
specifier|public
class|class
name|PropertyIndexPlan
block|{
comment|/**      * The cost overhead to use the index in number of read operations.      */
specifier|private
specifier|static
specifier|final
name|double
name|COST_OVERHEAD
init|=
literal|2
decl_stmt|;
comment|/**      * The maximum cost when the index can be used.      */
specifier|static
specifier|final
name|int
name|MAX_COST
init|=
literal|100
decl_stmt|;
comment|/** Index storage strategy */
specifier|private
specifier|static
specifier|final
name|IndexStoreStrategy
name|MIRROR
init|=
operator|new
name|ContentMirrorStoreStrategy
argument_list|()
decl_stmt|;
comment|/** Index storage strategy */
specifier|private
specifier|static
specifier|final
name|IndexStoreStrategy
name|UNIQUE
init|=
operator|new
name|UniqueEntryStoreStrategy
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|NodeState
name|definition
decl_stmt|;
specifier|private
specifier|final
name|String
name|name
decl_stmt|;
specifier|private
specifier|final
name|IndexStoreStrategy
name|strategy
decl_stmt|;
specifier|private
specifier|final
name|Filter
name|filter
decl_stmt|;
specifier|private
name|boolean
name|matchesAllTypes
decl_stmt|;
specifier|private
name|boolean
name|matchesNodeTypes
decl_stmt|;
specifier|private
specifier|final
name|double
name|cost
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|values
decl_stmt|;
specifier|private
specifier|final
name|int
name|depth
decl_stmt|;
name|PropertyIndexPlan
parameter_list|(
name|String
name|name
parameter_list|,
name|NodeState
name|definition
parameter_list|,
name|Filter
name|filter
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|definition
operator|=
name|definition
expr_stmt|;
if|if
condition|(
name|definition
operator|.
name|getBoolean
argument_list|(
name|UNIQUE_PROPERTY_NAME
argument_list|)
condition|)
block|{
name|this
operator|.
name|strategy
operator|=
name|UNIQUE
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|strategy
operator|=
name|MIRROR
expr_stmt|;
block|}
name|this
operator|.
name|filter
operator|=
name|filter
expr_stmt|;
name|Iterable
argument_list|<
name|String
argument_list|>
name|types
init|=
name|definition
operator|.
name|getNames
argument_list|(
name|DECLARING_NODE_TYPES
argument_list|)
decl_stmt|;
name|this
operator|.
name|matchesAllTypes
operator|=
name|isEmpty
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|this
operator|.
name|matchesNodeTypes
operator|=
name|matchesAllTypes
operator|||
name|any
argument_list|(
name|types
argument_list|,
name|in
argument_list|(
name|filter
operator|.
name|getSupertypes
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|double
name|bestCost
init|=
name|Double
operator|.
name|POSITIVE_INFINITY
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|bestValues
init|=
name|emptySet
argument_list|()
decl_stmt|;
name|int
name|bestDepth
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|matchesNodeTypes
condition|)
block|{
for|for
control|(
name|String
name|property
range|:
name|definition
operator|.
name|getNames
argument_list|(
name|PROPERTY_NAMES
argument_list|)
control|)
block|{
name|int
name|depth
init|=
literal|1
decl_stmt|;
name|PropertyRestriction
name|restriction
init|=
name|filter
operator|.
name|getPropertyRestriction
argument_list|(
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|restriction
operator|==
literal|null
condition|)
block|{
comment|// no direct restriction, try one with a relative path
name|String
name|suffix
init|=
literal|"/"
operator|+
name|property
decl_stmt|;
for|for
control|(
name|PropertyRestriction
name|relative
range|:
name|filter
operator|.
name|getPropertyRestrictions
argument_list|()
control|)
block|{
if|if
condition|(
name|relative
operator|.
name|propertyName
operator|.
name|endsWith
argument_list|(
name|suffix
argument_list|)
condition|)
block|{
name|restriction
operator|=
name|relative
expr_stmt|;
name|depth
operator|=
name|PathUtils
operator|.
name|getDepth
argument_list|(
name|relative
operator|.
name|propertyName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|restriction
operator|==
literal|null
condition|)
block|{
continue|continue;
comment|// no matching restrictions
block|}
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|getValues
argument_list|(
name|restriction
argument_list|)
decl_stmt|;
name|double
name|cost
init|=
name|strategy
operator|.
name|count
argument_list|(
name|definition
argument_list|,
name|values
argument_list|,
name|MAX_COST
argument_list|)
decl_stmt|;
if|if
condition|(
name|cost
operator|<
name|bestCost
condition|)
block|{
name|bestDepth
operator|=
name|depth
expr_stmt|;
name|bestValues
operator|=
name|values
expr_stmt|;
name|bestCost
operator|=
name|cost
expr_stmt|;
block|}
block|}
block|}
name|this
operator|.
name|depth
operator|=
name|bestDepth
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|bestValues
expr_stmt|;
name|this
operator|.
name|cost
operator|=
name|COST_OVERHEAD
operator|+
name|bestCost
expr_stmt|;
block|}
specifier|private
name|Set
argument_list|<
name|String
argument_list|>
name|getValues
parameter_list|(
name|PropertyRestriction
name|restriction
parameter_list|)
block|{
if|if
condition|(
name|restriction
operator|.
name|firstIncluding
operator|&&
name|restriction
operator|.
name|lastIncluding
operator|&&
name|restriction
operator|.
name|first
operator|!=
literal|null
operator|&&
name|restriction
operator|.
name|first
operator|.
name|equals
argument_list|(
name|restriction
operator|.
name|last
argument_list|)
condition|)
block|{
comment|// "[property] = $value"
return|return
name|encode
argument_list|(
name|restriction
operator|.
name|first
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|restriction
operator|.
name|list
operator|!=
literal|null
condition|)
block|{
comment|// "[property] IN (...)
name|Set
argument_list|<
name|String
argument_list|>
name|values
init|=
name|newLinkedHashSet
argument_list|()
decl_stmt|;
comment|// keep order for testing
for|for
control|(
name|PropertyValue
name|value
range|:
name|restriction
operator|.
name|list
control|)
block|{
name|values
operator|.
name|addAll
argument_list|(
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|values
return|;
block|}
else|else
block|{
comment|// processed as "[property] is not null"
return|return
literal|null
return|;
block|}
block|}
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
name|double
name|getCost
parameter_list|()
block|{
return|return
name|cost
return|;
block|}
name|Cursor
name|execute
parameter_list|()
block|{
name|QueryEngineSettings
name|settings
init|=
name|filter
operator|.
name|getQueryEngineSettings
argument_list|()
decl_stmt|;
name|Cursor
name|cursor
init|=
name|Cursors
operator|.
name|newPathCursor
argument_list|(
name|strategy
operator|.
name|query
argument_list|(
name|filter
argument_list|,
name|name
argument_list|,
name|definition
argument_list|,
name|values
argument_list|)
argument_list|,
name|settings
argument_list|)
decl_stmt|;
if|if
condition|(
name|depth
operator|>
literal|1
condition|)
block|{
name|cursor
operator|=
name|Cursors
operator|.
name|newAncestorCursor
argument_list|(
name|cursor
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
name|settings
argument_list|)
expr_stmt|;
block|}
return|return
name|cursor
return|;
block|}
comment|//------------------------------------------------------------< Object>--
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buffer
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"property "
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" IS NOT NULL"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" NOT APPLICABLE"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" = "
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|" IN ("
argument_list|)
expr_stmt|;
name|boolean
name|comma
init|=
literal|false
decl_stmt|;
for|for
control|(
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|comma
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|comma
operator|=
literal|true
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

