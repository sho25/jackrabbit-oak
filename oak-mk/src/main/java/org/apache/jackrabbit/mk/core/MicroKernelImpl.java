begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one or more  * contributor license agreements.  See the NOTICE file distributed with  * this work for additional information regarding copyright ownership.  * The ASF licenses this file to You under the Apache License, Version 2.0  * (the "License"); you may not use this file except in compliance with  * the License.  You may obtain a copy of the License at  *  *     http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nonnull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|api
operator|.
name|MicroKernelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsonObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|json
operator|.
name|JsopTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|ChildNodeEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Commit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|CommitBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|Id
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|StoredCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|model
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|store
operator|.
name|RevisionStore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|CommitGate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|NameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|mk
operator|.
name|util
operator|.
name|NodeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
import|;
end_import

begin_comment
comment|/**  *  */
end_comment

begin_class
specifier|public
class|class
name|MicroKernelImpl
implements|implements
name|MicroKernel
block|{
specifier|protected
name|Repository
name|rep
decl_stmt|;
specifier|private
specifier|final
name|CommitGate
name|gate
init|=
operator|new
name|CommitGate
argument_list|()
decl_stmt|;
specifier|public
name|MicroKernelImpl
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|init
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new in-memory kernel instance that doesn't need to be      * explicitly closed, i.e. standard Java garbage collection will take      * care of releasing any acquired resources when no longer needed.      * Useful especially for test cases and other similar scenarios.      */
specifier|public
name|MicroKernelImpl
parameter_list|()
block|{
name|this
argument_list|(
operator|new
name|Repository
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Alternate constructor, used for testing.      *      * @param rep repository, already initialized      */
specifier|public
name|MicroKernelImpl
parameter_list|(
name|Repository
name|rep
parameter_list|)
block|{
name|this
operator|.
name|rep
operator|=
name|rep
expr_stmt|;
try|try
block|{
comment|// initialize commit gate with current head
name|gate
operator|.
name|commit
argument_list|(
name|rep
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|init
parameter_list|(
name|String
name|homeDir
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
name|rep
operator|=
operator|new
name|Repository
argument_list|(
name|homeDir
argument_list|)
expr_stmt|;
name|rep
operator|.
name|init
argument_list|()
expr_stmt|;
comment|// initialize commit gate with current head
name|gate
operator|.
name|commit
argument_list|(
name|rep
operator|.
name|getHeadRevision
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|dispose
parameter_list|()
block|{
name|gate
operator|.
name|commit
argument_list|(
literal|"end"
argument_list|)
expr_stmt|;
if|if
condition|(
name|rep
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|rep
operator|.
name|shutDown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ignore
parameter_list|)
block|{
comment|// fail silently
block|}
name|rep
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getHeadRevision
parameter_list|()
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
return|return
name|getHeadRevisionId
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|checkpoint
parameter_list|(
name|long
name|lifetime
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// FIXME: need to signal to the garbage collector that this revision
comment|// should not be collected until the requested lifetime is over
return|return
name|getHeadRevision
argument_list|()
return|;
block|}
comment|/**      * Same as {@code getHeadRevisionId}, with typed {@code Id} return value instead of string.      *      * @see #getHeadRevision()      */
specifier|private
name|Id
name|getHeadRevisionId
parameter_list|()
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|rep
operator|.
name|getHeadRevision
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Id
name|getBaseRevisionId
parameter_list|(
name|Id
name|branchId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
try|try
block|{
return|return
name|rep
operator|.
name|getBaseRevision
argument_list|(
name|branchId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getRevisionHistory
parameter_list|(
name|long
name|since
parameter_list|,
name|int
name|maxEntries
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|path
operator|=
operator|(
name|path
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|)
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
name|boolean
name|filtered
init|=
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|maxEntries
operator|=
name|maxEntries
operator|<
literal|0
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxEntries
expr_stmt|;
name|List
argument_list|<
name|StoredCommit
argument_list|>
name|history
init|=
operator|new
name|ArrayList
argument_list|<
name|StoredCommit
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|StoredCommit
name|commit
init|=
name|rep
operator|.
name|getHeadCommit
argument_list|()
decl_stmt|;
while|while
condition|(
name|commit
operator|!=
literal|null
operator|&&
name|history
operator|.
name|size
argument_list|()
operator|<
name|maxEntries
operator|&&
name|commit
operator|.
name|getCommitTS
argument_list|()
operator|>=
name|since
condition|)
block|{
if|if
condition|(
name|filtered
condition|)
block|{
try|try
block|{
name|RevisionStore
name|rs
init|=
name|rep
operator|.
name|getRevisionStore
argument_list|()
decl_stmt|;
name|String
name|diff
init|=
operator|new
name|DiffBuilder
argument_list|(
name|rs
operator|.
name|getRootNode
argument_list|(
name|commit
operator|.
name|getParentId
argument_list|()
argument_list|)
argument_list|,
name|rs
operator|.
name|getNode
argument_list|(
name|commit
operator|.
name|getRootNodeId
argument_list|()
argument_list|)
argument_list|,
literal|"/"
argument_list|,
operator|-
literal|1
argument_list|,
name|rep
operator|.
name|getRevisionStore
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|history
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|history
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
block|}
name|Id
name|commitId
init|=
name|commit
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitId
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|commit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|JsopBuilder
name|buff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|history
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|StoredCommit
name|commit
init|=
name|history
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|buff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getCommitTS
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getMsg
argument_list|()
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|buff
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|waitForCommit
parameter_list|(
name|String
name|oldHeadRevisionId
parameter_list|,
name|long
name|maxWaitMillis
parameter_list|)
throws|throws
name|MicroKernelException
throws|,
name|InterruptedException
block|{
return|return
name|gate
operator|.
name|waitForCommit
argument_list|(
name|oldHeadRevisionId
argument_list|,
name|maxWaitMillis
argument_list|)
return|;
block|}
specifier|public
name|String
name|getJournal
parameter_list|(
name|String
name|fromRevision
parameter_list|,
name|String
name|toRevision
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|path
operator|=
operator|(
name|path
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|)
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
name|boolean
name|filtered
init|=
operator|!
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Id
name|fromRevisionId
init|=
name|Id
operator|.
name|fromString
argument_list|(
name|fromRevision
argument_list|)
decl_stmt|;
name|Id
name|toRevisionId
init|=
name|toRevision
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|toRevision
argument_list|)
decl_stmt|;
name|List
argument_list|<
name|StoredCommit
argument_list|>
name|commits
init|=
operator|new
name|ArrayList
argument_list|<
name|StoredCommit
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|StoredCommit
name|toCommit
init|=
name|rep
operator|.
name|getCommit
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
name|Commit
name|fromCommit
decl_stmt|;
if|if
condition|(
name|toRevisionId
operator|.
name|equals
argument_list|(
name|fromRevisionId
argument_list|)
condition|)
block|{
name|fromCommit
operator|=
name|toCommit
expr_stmt|;
block|}
else|else
block|{
name|fromCommit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|fromRevisionId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromCommit
operator|.
name|getBranchRootId
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|fromCommit
operator|.
name|getBranchRootId
argument_list|()
operator|.
name|equals
argument_list|(
name|toCommit
operator|.
name|getBranchRootId
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"inconsistent range specified: fromRevision denotes a private branch while toRevision denotes a head or another private branch"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|fromCommit
operator|.
name|getCommitTS
argument_list|()
operator|>
name|toCommit
operator|.
name|getCommitTS
argument_list|()
condition|)
block|{
comment|// negative range, return empty journal
return|return
literal|"[]"
return|;
block|}
comment|// collect commits, starting with toRevisionId
comment|// and traversing parent commit links until we've reached
comment|// fromRevisionId
name|StoredCommit
name|commit
init|=
name|toCommit
decl_stmt|;
while|while
condition|(
name|commit
operator|!=
literal|null
condition|)
block|{
name|commits
operator|.
name|add
argument_list|(
name|commit
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRevisionId
argument_list|)
condition|)
block|{
break|break;
block|}
name|Id
name|commitId
init|=
name|commit
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|commitId
operator|==
literal|null
condition|)
block|{
comment|// inconsistent revision history, ignore silently...
break|break;
block|}
name|commit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|commitId
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|getCommitTS
argument_list|()
operator|<
name|fromCommit
operator|.
name|getCommitTS
argument_list|()
condition|)
block|{
comment|// inconsistent revision history, ignore silently...
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|MicroKernelException
name|e
parameter_list|)
block|{
comment|// re-throw
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|JsopBuilder
name|commitBuff
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|array
argument_list|()
decl_stmt|;
comment|// iterate over commits in chronological order,
comment|// starting with oldest commit
for|for
control|(
name|int
name|i
init|=
name|commits
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|StoredCommit
name|commit
init|=
name|commits
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|commit
operator|.
name|getParentId
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|diff
init|=
name|commit
operator|.
name|getChanges
argument_list|()
decl_stmt|;
if|if
condition|(
name|filtered
condition|)
block|{
try|try
block|{
name|RevisionStore
name|rs
init|=
name|rep
operator|.
name|getRevisionStore
argument_list|()
decl_stmt|;
name|diff
operator|=
operator|new
name|DiffBuilder
argument_list|(
name|rs
operator|.
name|getRootNode
argument_list|(
name|commit
operator|.
name|getParentId
argument_list|()
argument_list|)
argument_list|,
name|rs
operator|.
name|getNode
argument_list|(
name|commit
operator|.
name|getRootNodeId
argument_list|()
argument_list|)
argument_list|,
literal|"/"
argument_list|,
operator|-
literal|1
argument_list|,
name|rep
operator|.
name|getRevisionStore
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
if|if
condition|(
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
name|commitBuff
operator|.
name|object
argument_list|()
operator|.
name|key
argument_list|(
literal|"id"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"ts"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getCommitTS
argument_list|()
argument_list|)
operator|.
name|key
argument_list|(
literal|"msg"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getMsg
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|commit
operator|.
name|getBranchRootId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|commitBuff
operator|.
name|key
argument_list|(
literal|"branchRootId"
argument_list|)
operator|.
name|value
argument_list|(
name|commit
operator|.
name|getBranchRootId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|commitBuff
operator|.
name|key
argument_list|(
literal|"changes"
argument_list|)
operator|.
name|value
argument_list|(
name|diff
argument_list|)
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
return|return
name|commitBuff
operator|.
name|endArray
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|String
name|diff
parameter_list|(
name|String
name|fromRevision
parameter_list|,
name|String
name|toRevision
parameter_list|,
name|String
name|path
parameter_list|,
name|int
name|depth
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|path
operator|=
operator|(
name|path
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|)
condition|?
literal|"/"
else|:
name|path
expr_stmt|;
if|if
condition|(
name|depth
operator|<
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"depth"
argument_list|)
throw|;
block|}
name|Id
name|fromRevisionId
decl_stmt|,
name|toRevisionId
decl_stmt|;
if|if
condition|(
name|fromRevision
operator|==
literal|null
operator|||
name|toRevision
operator|==
literal|null
condition|)
block|{
name|Id
name|head
init|=
name|getHeadRevisionId
argument_list|()
decl_stmt|;
name|fromRevisionId
operator|=
name|fromRevision
operator|==
literal|null
condition|?
name|head
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|fromRevision
argument_list|)
expr_stmt|;
name|toRevisionId
operator|=
name|toRevision
operator|==
literal|null
condition|?
name|head
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|toRevision
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fromRevisionId
operator|=
name|Id
operator|.
name|fromString
argument_list|(
name|fromRevision
argument_list|)
expr_stmt|;
name|toRevisionId
operator|=
name|Id
operator|.
name|fromString
argument_list|(
name|toRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fromRevisionId
operator|.
name|equals
argument_list|(
name|toRevisionId
argument_list|)
condition|)
block|{
return|return
literal|""
return|;
block|}
try|try
block|{
if|if
condition|(
literal|"/"
operator|.
name|equals
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|StoredCommit
name|toCommit
init|=
name|rep
operator|.
name|getCommit
argument_list|(
name|toRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|toCommit
operator|.
name|getParentId
argument_list|()
operator|.
name|equals
argument_list|(
name|fromRevisionId
argument_list|)
operator|&&
name|depth
operator|==
operator|-
literal|1
condition|)
block|{
comment|// specified range spans a single commit and depth is not limited:
comment|// use diff stored in commit instead of building it dynamically
return|return
name|toCommit
operator|.
name|getChanges
argument_list|()
return|;
block|}
block|}
name|StoredNode
name|from
init|=
literal|null
decl_stmt|,
name|to
init|=
literal|null
decl_stmt|;
try|try
block|{
name|from
operator|=
name|rep
operator|.
name|getNode
argument_list|(
name|fromRevisionId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ignore
parameter_list|)
block|{             }
try|try
block|{
name|to
operator|=
name|rep
operator|.
name|getNode
argument_list|(
name|toRevisionId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|ignore
parameter_list|)
block|{             }
return|return
operator|new
name|DiffBuilder
argument_list|(
name|from
argument_list|,
name|to
argument_list|,
name|path
argument_list|,
name|depth
argument_list|,
name|rep
operator|.
name|getRevisionStore
argument_list|()
argument_list|,
name|path
argument_list|)
operator|.
name|build
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|nodeExists
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|revId
init|=
name|revisionId
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|rep
operator|.
name|nodeExists
argument_list|(
name|revId
argument_list|,
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|long
name|getChildNodeCount
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|revId
init|=
name|revisionId
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|rep
operator|.
name|getNode
argument_list|(
name|revId
argument_list|,
name|path
argument_list|)
operator|.
name|getChildNodeCount
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Path "
operator|+
name|path
operator|+
literal|" not found in revision "
operator|+
name|revisionId
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|getNodes
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|int
name|depth
parameter_list|,
name|long
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|String
name|filter
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|id
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// OAK-468: Identifier- or hash-based access in the MicroKernel
name|id
operator|=
name|Id
operator|.
name|fromString
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|Id
name|revId
init|=
name|revisionId
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
name|NodeFilter
name|nodeFilter
init|=
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
name|NodeFilter
operator|.
name|parse
argument_list|(
name|filter
argument_list|)
decl_stmt|;
if|if
condition|(
name|offset
operator|>
literal|0
operator|&&
name|nodeFilter
operator|!=
literal|null
operator|&&
name|nodeFilter
operator|.
name|getChildNodeFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// both an offset> 0 and a filter on node names have been specified...
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"offset> 0 with child node filter"
argument_list|)
throw|;
block|}
try|try
block|{
name|StoredNode
name|node
decl_stmt|;
try|try
block|{
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|node
operator|=
name|rep
operator|.
name|getRevisionStore
argument_list|()
operator|.
name|getNode
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|rep
operator|.
name|getNode
argument_list|(
name|revId
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NotFoundException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
name|JsopBuilder
name|buf
init|=
operator|new
name|JsopBuilder
argument_list|()
operator|.
name|object
argument_list|()
decl_stmt|;
name|toJson
argument_list|(
name|buf
argument_list|,
name|node
argument_list|,
name|depth
argument_list|,
operator|(
name|int
operator|)
name|offset
argument_list|,
name|maxChildNodes
argument_list|,
literal|true
argument_list|,
name|nodeFilter
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|endObject
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|commit
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|jsonDiff
parameter_list|,
name|String
name|revisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"absolute path expected: "
operator|+
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|jsonDiff
operator|==
literal|null
operator|||
name|jsonDiff
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|revisionId
operator|!=
literal|null
condition|?
name|revisionId
else|:
name|getHeadRevision
argument_list|()
return|;
block|}
name|Id
name|revId
init|=
name|revisionId
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|revisionId
argument_list|)
decl_stmt|;
try|try
block|{
name|JsopTokenizer
name|t
init|=
operator|new
name|JsopTokenizer
argument_list|(
name|jsonDiff
argument_list|)
decl_stmt|;
name|CommitBuilder
name|cb
init|=
name|rep
operator|.
name|getCommitBuilder
argument_list|(
name|revId
argument_list|,
name|message
argument_list|)
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r
init|=
name|t
operator|.
name|read
argument_list|()
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|JsopReader
operator|.
name|END
condition|)
block|{
break|break;
block|}
name|int
name|pos
decl_stmt|;
comment|// used for error reporting
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
name|String
name|nodePath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|nodePath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|nodePath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
name|String
name|nodeName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|nodePath
argument_list|)
decl_stmt|;
name|cb
operator|.
name|addNode
argument_list|(
name|parentPath
argument_list|,
name|nodeName
argument_list|,
name|JsonObject
operator|.
name|create
argument_list|(
name|t
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|cb
operator|.
name|removeNode
argument_list|(
name|targetPath
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'^'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|String
name|value
decl_stmt|;
if|if
condition|(
name|t
operator|.
name|matches
argument_list|(
name|JsopReader
operator|.
name|NULL
argument_list|)
condition|)
block|{
name|value
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
name|t
operator|.
name|readRawValue
argument_list|()
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
name|String
name|targetPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|String
name|parentPath
init|=
name|PathUtils
operator|.
name|getParentPath
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|String
name|propName
init|=
name|PathUtils
operator|.
name|getName
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|cb
operator|.
name|setProperty
argument_list|(
name|parentPath
argument_list|,
name|propName
argument_list|,
name|value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'>'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|srcPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|srcPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
block|}
name|cb
operator|.
name|moveNode
argument_list|(
name|srcPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|subPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
name|String
name|srcPath
init|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|subPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|srcPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|srcPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
name|t
operator|.
name|read
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|pos
operator|=
name|t
operator|.
name|getLastPos
argument_list|()
expr_stmt|;
name|String
name|targetPath
init|=
name|t
operator|.
name|readString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|PathUtils
operator|.
name|concat
argument_list|(
name|path
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|PathUtils
operator|.
name|isAbsolute
argument_list|(
name|targetPath
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|Exception
argument_list|(
literal|"absolute path expected: "
operator|+
name|targetPath
operator|+
literal|", pos: "
operator|+
name|pos
argument_list|)
throw|;
block|}
block|}
name|cb
operator|.
name|copyNode
argument_list|(
name|srcPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"jsonDiff: illegal token '"
operator|+
name|t
operator|.
name|getToken
argument_list|()
operator|+
literal|"' at pos: "
operator|+
name|t
operator|.
name|getLastPos
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|Id
name|newHead
init|=
name|cb
operator|.
name|doCommit
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|newHead
operator|.
name|equals
argument_list|(
name|revId
argument_list|)
condition|)
block|{
comment|// non-empty commit
if|if
condition|(
name|rep
operator|.
name|getCommit
argument_list|(
name|newHead
argument_list|)
operator|.
name|getBranchRootId
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// OAK-265: only trigger commit gate for non-branch commits
name|gate
operator|.
name|commit
argument_list|(
name|newHead
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|newHead
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|branch
parameter_list|(
name|String
name|trunkRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// create a private branch
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|revId
init|=
name|trunkRevisionId
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|trunkRevisionId
argument_list|)
decl_stmt|;
try|try
block|{
name|CommitBuilder
name|cb
init|=
name|rep
operator|.
name|getCommitBuilder
argument_list|(
name|revId
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
name|cb
operator|.
name|doCommit
argument_list|(
literal|true
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|merge
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|MicroKernelException
block|{
comment|// merge a private branch with current head revision
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
name|Id
name|revId
init|=
name|Id
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|rep
operator|.
name|getCommitBuilder
argument_list|(
name|revId
argument_list|,
name|message
argument_list|)
operator|.
name|doMerge
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|rebase
parameter_list|(
name|String
name|branchRevisionId
parameter_list|,
name|String
name|newBaseRevisionId
parameter_list|)
block|{
name|Id
name|branchId
init|=
name|Id
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
name|Id
name|baseId
init|=
name|getBaseRevisionId
argument_list|(
name|branchId
argument_list|)
decl_stmt|;
name|Id
name|newBaseId
init|=
name|newBaseRevisionId
operator|==
literal|null
condition|?
name|getHeadRevisionId
argument_list|()
else|:
name|Id
operator|.
name|fromString
argument_list|(
name|newBaseRevisionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseId
operator|.
name|equals
argument_list|(
name|newBaseId
argument_list|)
condition|)
block|{
return|return
name|branchRevisionId
return|;
block|}
else|else
block|{
name|Id
name|newBranchId
init|=
name|Id
operator|.
name|fromString
argument_list|(
name|branch
argument_list|(
name|newBaseRevisionId
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|CommitBuilder
name|cb
init|=
name|rep
operator|.
name|getCommitBuilder
argument_list|(
name|newBranchId
argument_list|,
literal|"rebasing "
operator|+
name|branchRevisionId
operator|+
literal|" onto "
operator|+
name|newBaseRevisionId
argument_list|)
decl_stmt|;
return|return
name|cb
operator|.
name|rebase
argument_list|(
name|baseId
argument_list|,
name|branchId
argument_list|)
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Nonnull
annotation|@
name|Override
specifier|public
name|String
name|reset
parameter_list|(
annotation|@
name|Nonnull
name|String
name|branchRevisionId
parameter_list|,
annotation|@
name|Nonnull
name|String
name|ancestorRevisionId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
name|Id
name|branchId
init|=
name|Id
operator|.
name|fromString
argument_list|(
name|branchRevisionId
argument_list|)
decl_stmt|;
name|Id
name|ancestorId
init|=
name|Id
operator|.
name|fromString
argument_list|(
name|ancestorRevisionId
argument_list|)
decl_stmt|;
name|StoredCommit
name|commit
decl_stmt|;
try|try
block|{
name|commit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|Id
name|baseId
init|=
name|commit
operator|.
name|getBranchRootId
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
literal|"Not a private branch: "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
comment|// verify ancestorId is in fact an ancestor of branchId
while|while
condition|(
operator|!
name|ancestorId
operator|.
name|equals
argument_list|(
name|branchId
argument_list|)
condition|)
block|{
try|try
block|{
name|commit
operator|=
name|rep
operator|.
name|getCommit
argument_list|(
name|branchId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|commit
operator|.
name|getBranchRootId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|ancestorRevisionId
operator|+
literal|" is not "
operator|+
literal|"an ancestor revision of "
operator|+
name|branchRevisionId
argument_list|)
throw|;
block|}
name|branchId
operator|=
name|commit
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
return|return
name|ancestorRevisionId
return|;
block|}
specifier|public
name|long
name|getLength
parameter_list|(
name|String
name|blobId
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|rep
operator|.
name|getBlobStore
argument_list|()
operator|.
name|getBlobLength
argument_list|(
name|blobId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|read
parameter_list|(
name|String
name|blobId
parameter_list|,
name|long
name|pos
parameter_list|,
name|byte
index|[]
name|buff
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|length
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|rep
operator|.
name|getBlobStore
argument_list|()
operator|.
name|readBlob
argument_list|(
name|blobId
argument_list|,
name|pos
argument_list|,
name|buff
argument_list|,
name|off
argument_list|,
name|length
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|write
parameter_list|(
name|InputStream
name|in
parameter_list|)
throws|throws
name|MicroKernelException
block|{
if|if
condition|(
name|rep
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"this instance has already been disposed"
argument_list|)
throw|;
block|}
try|try
block|{
return|return
name|rep
operator|.
name|getBlobStore
argument_list|()
operator|.
name|writeBlob
argument_list|(
name|in
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|MicroKernelException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|//-------------------------------------------------------< implementation>
name|void
name|toJson
parameter_list|(
name|JsopBuilder
name|builder
parameter_list|,
name|StoredNode
name|node
parameter_list|,
name|int
name|depth
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|maxChildNodes
parameter_list|,
name|boolean
name|inclVirtualProps
parameter_list|,
name|NodeFilter
name|filter
parameter_list|)
throws|throws
name|Exception
block|{
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|prop
range|:
name|node
operator|.
name|getProperties
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|includeProperty
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|)
condition|)
block|{
name|builder
operator|.
name|key
argument_list|(
name|prop
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|encodedValue
argument_list|(
name|prop
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|long
name|childCount
init|=
name|node
operator|.
name|getChildNodeCount
argument_list|()
decl_stmt|;
if|if
condition|(
name|inclVirtualProps
condition|)
block|{
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|includeProperty
argument_list|(
literal|":childNodeCount"
argument_list|)
condition|)
block|{
comment|// :childNodeCount is by default always included
comment|// unless it is explicitly excluded in the filter
name|builder
operator|.
name|key
argument_list|(
literal|":childNodeCount"
argument_list|)
operator|.
name|value
argument_list|(
name|childCount
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|NameFilter
name|nf
init|=
name|filter
operator|.
name|getPropertyFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|nf
operator|!=
literal|null
condition|)
block|{
comment|// check whether :id has been explicitly included
if|if
condition|(
name|nf
operator|.
name|getInclusionPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|":hash"
argument_list|)
operator|&&
operator|!
name|nf
operator|.
name|getExclusionPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|":hash"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|key
argument_list|(
literal|":hash"
argument_list|)
operator|.
name|value
argument_list|(
name|node
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// check whether :id has been explicitly included
if|if
condition|(
name|nf
operator|.
name|getInclusionPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|":id"
argument_list|)
operator|&&
operator|!
name|nf
operator|.
name|getExclusionPatterns
argument_list|()
operator|.
name|contains
argument_list|(
literal|":id"
argument_list|)
condition|)
block|{
name|builder
operator|.
name|key
argument_list|(
literal|":id"
argument_list|)
operator|.
name|value
argument_list|(
name|node
operator|.
name|getId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|childCount
operator|>
literal|0
operator|&&
name|depth
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|filter
operator|!=
literal|null
condition|)
block|{
name|NameFilter
name|childFilter
init|=
name|filter
operator|.
name|getChildNodeFilter
argument_list|()
decl_stmt|;
if|if
condition|(
name|childFilter
operator|!=
literal|null
operator|&&
operator|!
name|childFilter
operator|.
name|containsWildcard
argument_list|()
condition|)
block|{
comment|// optimization for large child node lists:
comment|// no need to iterate over the entire child node list if the filter
comment|// does not include wildcards
name|int
name|count
init|=
name|maxChildNodes
operator|==
operator|-
literal|1
condition|?
name|Integer
operator|.
name|MAX_VALUE
else|:
name|maxChildNodes
decl_stmt|;
for|for
control|(
name|String
name|name
range|:
name|childFilter
operator|.
name|getInclusionPatterns
argument_list|()
control|)
block|{
name|ChildNodeEntry
name|cne
init|=
name|node
operator|.
name|getChildNodeEntry
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cne
operator|!=
literal|null
condition|)
block|{
name|boolean
name|incl
init|=
literal|true
decl_stmt|;
for|for
control|(
name|String
name|exclName
range|:
name|childFilter
operator|.
name|getExclusionPatterns
argument_list|()
control|)
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|exclName
argument_list|)
condition|)
block|{
name|incl
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|incl
condition|)
block|{
if|if
condition|(
name|count
operator|--
operator|<=
literal|0
condition|)
block|{
break|break;
block|}
name|builder
operator|.
name|key
argument_list|(
name|name
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|toJson
argument_list|(
name|builder
argument_list|,
name|rep
operator|.
name|getRevisionStore
argument_list|()
operator|.
name|getNode
argument_list|(
name|cne
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|maxChildNodes
argument_list|,
name|inclVirtualProps
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return;
block|}
block|}
name|int
name|count
init|=
name|maxChildNodes
decl_stmt|;
if|if
condition|(
name|count
operator|!=
operator|-
literal|1
operator|&&
name|filter
operator|!=
literal|null
operator|&&
name|filter
operator|.
name|getChildNodeFilter
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|// specific maxChildNodes limit and child node filter
name|count
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|int
name|numSiblings
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
argument_list|<
name|ChildNodeEntry
argument_list|>
name|it
init|=
name|node
operator|.
name|getChildNodeEntries
argument_list|(
name|offset
argument_list|,
name|count
argument_list|)
init|;
name|it
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|ChildNodeEntry
name|cne
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
operator|||
name|filter
operator|.
name|includeNode
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|maxChildNodes
operator|!=
operator|-
literal|1
operator|&&
operator|++
name|numSiblings
operator|>
name|maxChildNodes
condition|)
block|{
break|break;
block|}
name|builder
operator|.
name|key
argument_list|(
name|cne
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|object
argument_list|()
expr_stmt|;
if|if
condition|(
name|depth
operator|>
literal|0
condition|)
block|{
name|toJson
argument_list|(
name|builder
argument_list|,
name|rep
operator|.
name|getRevisionStore
argument_list|()
operator|.
name|getNode
argument_list|(
name|cne
operator|.
name|getId
argument_list|()
argument_list|)
argument_list|,
name|depth
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
name|maxChildNodes
argument_list|,
name|inclVirtualProps
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endObject
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

