begin_unit|revision:0.9.5;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Licensed to the Apache Software Foundation (ASF) under one  * or more contributor license agreements.  See the NOTICE file  * distributed with this work for additional information  * regarding copyright ownership.  The ASF licenses this file  * to you under the Apache License, Version 2.0 (the  * "License"); you may not use this file except in compliance  * with the License.  You may obtain a copy of the License at  *  *   http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing,  * software distributed under the License is distributed on an  * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY  * KIND, either express or implied.  See the License for the  * specific language governing permissions and limitations  * under the License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|observation
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|commons
operator|.
name|PathUtils
operator|.
name|concat
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|plugins
operator|.
name|memory
operator|.
name|EmptyNodeState
operator|.
name|EMPTY_NODE
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedActionException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|PrivilegedExceptionAction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|jcr
operator|.
name|NoSuchWorkspaceException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|JcrConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|Oak
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|CommitFailedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|ContentSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Root
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Tree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|api
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|InitialContent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|security
operator|.
name|internal
operator|.
name|SecurityProviderBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|CommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|Observer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|commit
operator|.
name|SimpleCommitContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|observation
operator|.
name|ChangeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|SecurityProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|security
operator|.
name|authentication
operator|.
name|SystemSubject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|jackrabbit
operator|.
name|oak
operator|.
name|spi
operator|.
name|state
operator|.
name|NodeState
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jetbrains
operator|.
name|annotations
operator|.
name|NotNull
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|ImmutableMap
import|;
end_import

begin_import
import|import
name|com
operator|.
name|google
operator|.
name|common
operator|.
name|collect
operator|.
name|Sets
import|;
end_import

begin_class
specifier|public
class|class
name|ChangeCollectorProviderTest
block|{
name|ChangeCollectorProvider
name|collectorProvider
decl_stmt|;
specifier|private
name|ContentRepository
name|contentRepository
decl_stmt|;
specifier|private
name|ContentSession
name|session
decl_stmt|;
specifier|private
name|Recorder
name|recorder
decl_stmt|;
specifier|private
name|SecurityProvider
name|securityProvider
decl_stmt|;
class|class
name|ContentChange
block|{
specifier|final
name|NodeState
name|root
decl_stmt|;
specifier|final
name|CommitInfo
name|info
decl_stmt|;
name|ContentChange
parameter_list|(
name|NodeState
name|root
parameter_list|,
name|CommitInfo
name|info
parameter_list|)
block|{
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|info
expr_stmt|;
block|}
block|}
class|class
name|Recorder
implements|implements
name|Observer
block|{
name|List
argument_list|<
name|ContentChange
argument_list|>
name|changes
init|=
operator|new
name|LinkedList
argument_list|<
name|ContentChange
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|contentChanged
parameter_list|(
annotation|@
name|NotNull
name|NodeState
name|root
parameter_list|,
annotation|@
name|NotNull
name|CommitInfo
name|info
parameter_list|)
block|{
name|changes
operator|.
name|add
argument_list|(
operator|new
name|ContentChange
argument_list|(
name|root
argument_list|,
name|info
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|SecurityProvider
name|getSecurityProvider
parameter_list|()
block|{
if|if
condition|(
name|securityProvider
operator|==
literal|null
condition|)
block|{
name|securityProvider
operator|=
name|SecurityProviderBuilder
operator|.
name|newBuilder
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
return|return
name|securityProvider
return|;
block|}
comment|/**      * Checks that the actual string set provided matches the expected one. A      * match is when all elements occur, irrespective of the order.      */
specifier|private
name|void
name|assertMatches
parameter_list|(
name|String
name|msg
parameter_list|,
name|Set
argument_list|<
name|String
argument_list|>
name|actuals
parameter_list|,
name|String
modifier|...
name|expected
parameter_list|)
block|{
if|if
condition|(
operator|(
name|actuals
operator|==
literal|null
operator|||
name|actuals
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
name|expected
operator|.
name|length
operator|!=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"assertion failed for '"
operator|+
name|msg
operator|+
literal|"': expected length "
operator|+
name|expected
operator|.
name|length
operator|+
literal|" != actual 0."
operator|+
literal|" Expected: '"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|"', got: '"
operator|+
name|actuals
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expected
operator|.
name|length
operator|==
literal|0
operator|&&
name|actuals
operator|!=
literal|null
operator|&&
name|actuals
operator|.
name|size
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|fail
argument_list|(
literal|"assertion failed for '"
operator|+
name|msg
operator|+
literal|"': expected length == 0, actual "
operator|+
name|actuals
operator|.
name|size
argument_list|()
operator|+
literal|"."
operator|+
literal|" Expected: '"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|"', got: '"
operator|+
name|actuals
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|expected
operator|.
name|length
operator|!=
name|actuals
operator|.
name|size
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"assertion failed for '"
operator|+
name|msg
operator|+
literal|"': expected length ("
operator|+
name|expected
operator|.
name|length
operator|+
literal|") != actual ("
operator|+
name|actuals
operator|.
name|size
argument_list|()
operator|+
literal|")."
operator|+
literal|" Expected: '"
operator|+
name|Arrays
operator|.
name|toString
argument_list|(
name|expected
argument_list|)
operator|+
literal|"', got: '"
operator|+
name|actuals
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|String
name|anExpected
range|:
name|expected
control|)
block|{
if|if
condition|(
operator|!
name|actuals
operator|.
name|contains
argument_list|(
name|anExpected
argument_list|)
condition|)
block|{
name|fail
argument_list|(
literal|"assertion failed for '"
operator|+
name|msg
operator|+
literal|"': expected '"
operator|+
name|anExpected
operator|+
literal|"' not found. Got: '"
operator|+
name|actuals
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Assumes that the recorder got 1 call, and extracts the ChangeSet from      * that call      */
specifier|private
name|ChangeSet
name|getSingleChangeSet
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|recorder
operator|.
name|changes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|CommitContext
name|commitContext
init|=
operator|(
name|CommitContext
operator|)
name|recorder
operator|.
name|changes
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|info
operator|.
name|getInfo
argument_list|()
operator|.
name|get
argument_list|(
name|CommitContext
operator|.
name|NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|commitContext
argument_list|)
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
operator|(
name|ChangeSet
operator|)
name|commitContext
operator|.
name|get
argument_list|(
name|ChangeSet
operator|.
name|COMMIT_CONTEXT_OBSERVATION_CHANGESET
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|changeSet
argument_list|)
expr_stmt|;
return|return
name|changeSet
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|PrivilegedActionException
throws|,
name|CommitFailedException
block|{
name|collectorProvider
operator|=
operator|new
name|ChangeCollectorProvider
argument_list|()
expr_stmt|;
name|recorder
operator|=
operator|new
name|Recorder
argument_list|()
expr_stmt|;
name|Oak
name|oak
init|=
operator|new
name|Oak
argument_list|()
operator|.
name|with
argument_list|(
operator|new
name|InitialContent
argument_list|()
argument_list|)
operator|.
name|with
argument_list|(
name|collectorProvider
argument_list|)
operator|.
name|with
argument_list|(
name|recorder
argument_list|)
operator|.
name|with
argument_list|(
name|getSecurityProvider
argument_list|()
argument_list|)
decl_stmt|;
name|contentRepository
operator|=
name|oak
operator|.
name|createContentRepository
argument_list|()
expr_stmt|;
name|session
operator|=
name|Subject
operator|.
name|doAs
argument_list|(
name|SystemSubject
operator|.
name|INSTANCE
argument_list|,
operator|new
name|PrivilegedExceptionAction
argument_list|<
name|ContentSession
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|ContentSession
name|run
parameter_list|()
throws|throws
name|LoginException
throws|,
name|NoSuchWorkspaceException
block|{
return|return
name|contentRepository
operator|.
name|login
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/"
argument_list|)
operator|.
name|addChild
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|rootTree
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"test:parentType"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|child1
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"child1"
argument_list|)
decl_stmt|;
name|child1
operator|.
name|setProperty
argument_list|(
literal|"child1Prop"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|child1
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"test:childType"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|grandChild1
init|=
name|child1
operator|.
name|addChild
argument_list|(
literal|"grandChild1"
argument_list|)
decl_stmt|;
name|grandChild1
operator|.
name|setProperty
argument_list|(
literal|"grandChild1Prop"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|grandChild1
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"test:grandChildType"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|greatGrandChild1
init|=
name|grandChild1
operator|.
name|addChild
argument_list|(
literal|"greatGrandChild1"
argument_list|)
decl_stmt|;
name|greatGrandChild1
operator|.
name|setProperty
argument_list|(
literal|"greatGrandChild1Prop"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|greatGrandChild1
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"test:greatGrandChildType"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|child2
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"child2"
argument_list|)
decl_stmt|;
name|child2
operator|.
name|setProperty
argument_list|(
literal|"child2Prop"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|child2
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"test:childType"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|Tree
name|grandChild2
init|=
name|child2
operator|.
name|addChild
argument_list|(
literal|"grandChild2"
argument_list|)
decl_stmt|;
name|grandChild2
operator|.
name|setProperty
argument_list|(
literal|"grandChild2Prop"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|grandChild2
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"test:grandChildType"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|recorder
operator|.
name|changes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test/child2"
argument_list|,
literal|"/test/child1"
argument_list|,
literal|"/test/child1/grandChild1/greatGrandChild1"
argument_list|,
literal|"/"
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/child1/grandChild1"
argument_list|,
literal|"/test/child2/grandChild2"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"child2"
argument_list|,
literal|"child1"
argument_list|,
literal|"greatGrandChild1"
argument_list|,
literal|"test"
argument_list|,
literal|"grandChild1"
argument_list|,
literal|"grandChild2"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"child1Prop"
argument_list|,
literal|"child2Prop"
argument_list|,
literal|"grandChild1Prop"
argument_list|,
literal|"grandChild2Prop"
argument_list|,
literal|"greatGrandChild1Prop"
argument_list|)
expr_stmt|;
comment|// clear the recorder so that we start off empty
name|recorder
operator|.
name|changes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|CommitInfo
name|newCommitInfoWithCommitContext
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|userId
parameter_list|)
block|{
return|return
operator|new
name|CommitInfo
argument_list|(
name|sessionId
argument_list|,
name|userId
argument_list|,
name|ImmutableMap
operator|.
expr|<
name|String
argument_list|,
name|Object
operator|>
name|builder
argument_list|()
operator|.
name|put
argument_list|(
name|CommitContext
operator|.
name|NAME
argument_list|,
operator|new
name|SimpleCommitContext
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testNull
parameter_list|()
block|{
name|NodeBuilder
name|builder
init|=
name|EMPTY_NODE
operator|.
name|builder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"a1"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p1"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|NodeState
name|before
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|builder
operator|=
name|before
operator|.
name|builder
argument_list|()
expr_stmt|;
name|builder
operator|.
name|setChildNode
argument_list|(
literal|"a2"
argument_list|)
operator|.
name|setChildNode
argument_list|(
literal|"b12"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"p12"
argument_list|,
literal|"12"
argument_list|)
expr_stmt|;
name|NodeState
name|after
init|=
name|builder
operator|.
name|getNodeState
argument_list|()
decl_stmt|;
name|assertNull
argument_list|(
name|collectorProvider
operator|.
name|getRootValidator
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|collectorProvider
operator|.
name|getRootValidator
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|CommitInfo
operator|.
name|EMPTY
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|collectorProvider
operator|.
name|getRootValidator
argument_list|(
name|before
argument_list|,
name|after
argument_list|,
name|newCommitInfoWithCommitContext
argument_list|(
name|CommitInfo
operator|.
name|OAK_UNKNOWN
argument_list|,
name|CommitInfo
operator|.
name|OAK_UNKNOWN
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveChild
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/child1"
argument_list|,
literal|"/test/child1/grandChild1"
argument_list|,
literal|"/test/child1/grandChild1/greatGrandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"child1"
argument_list|,
literal|"grandChild1"
argument_list|,
literal|"greatGrandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"child1Prop"
argument_list|,
literal|"grandChild1Prop"
argument_list|,
literal|"greatGrandChild1Prop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveGreatGrandChild
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"grandChild1"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"greatGrandChild1"
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test/child1/grandChild1/greatGrandChild1"
argument_list|,
literal|"/test/child1/grandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"grandChild1"
argument_list|,
literal|"greatGrandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:greatGrandChildType"
argument_list|,
literal|"test:grandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"greatGrandChild1Prop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeGreatGrandChild
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"grandChild1"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"greatGrandChild1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"greatGrandChild1Prop"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test/child1/grandChild1/greatGrandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"greatGrandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
literal|"greatGrandChild1Prop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeGreatAndGrandChild
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"grandChild1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"grandChild1Prop"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child1"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"grandChild1"
argument_list|)
operator|.
name|getChild
argument_list|(
literal|"greatGrandChild1"
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"greatGrandChild1Prop"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test/child1/grandChild1"
argument_list|,
literal|"/test/child1/grandChild1/greatGrandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"grandChild1"
argument_list|,
literal|"greatGrandChild1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|,
literal|"test:greatGrandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
literal|"grandChild1Prop"
argument_list|,
literal|"greatGrandChild1Prop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEmptyChild
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEmptyGrandChild
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|child
operator|.
name|addChild
argument_list|(
literal|"grandChild"
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/child"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"child"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNonEmptyGrandChild
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"childProperty"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|Tree
name|grandChild
init|=
name|child
operator|.
name|addChild
argument_list|(
literal|"grandChild"
argument_list|)
decl_stmt|;
name|grandChild
operator|.
name|setProperty
argument_list|(
literal|"grandChildProperty"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/child"
argument_list|,
literal|"/test/child/grandChild"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"child"
argument_list|,
literal|"grandChild"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
literal|"childProperty"
argument_list|,
literal|"grandChildProperty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddSomeChildren
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|child
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"x"
operator|+
name|i
argument_list|)
decl_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"test:type"
operator|+
name|i
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|child
operator|.
name|setProperty
argument_list|(
literal|"foo"
operator|+
name|i
argument_list|,
literal|"bar"
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/x0"
argument_list|,
literal|"/test/x1"
argument_list|,
literal|"/test/x2"
argument_list|,
literal|"/test/x3"
argument_list|,
literal|"/test/x4"
argument_list|,
literal|"/test/x5"
argument_list|,
literal|"/test/x6"
argument_list|,
literal|"/test/x7"
argument_list|,
literal|"/test/x8"
argument_list|,
literal|"/test/x9"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"x0"
argument_list|,
literal|"x1"
argument_list|,
literal|"x2"
argument_list|,
literal|"x3"
argument_list|,
literal|"x4"
argument_list|,
literal|"x5"
argument_list|,
literal|"x6"
argument_list|,
literal|"x7"
argument_list|,
literal|"x8"
argument_list|,
literal|"x9"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:type0"
argument_list|,
literal|"test:type1"
argument_list|,
literal|"test:type2"
argument_list|,
literal|"test:type3"
argument_list|,
literal|"test:type4"
argument_list|,
literal|"test:type5"
argument_list|,
literal|"test:type6"
argument_list|,
literal|"test:type7"
argument_list|,
literal|"test:type8"
argument_list|,
literal|"test:type9"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:type0"
argument_list|,
literal|"test:type1"
argument_list|,
literal|"test:type2"
argument_list|,
literal|"test:type3"
argument_list|,
literal|"test:type4"
argument_list|,
literal|"test:type5"
argument_list|,
literal|"test:type6"
argument_list|,
literal|"test:type7"
argument_list|,
literal|"test:type8"
argument_list|,
literal|"test:type9"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"foo0"
argument_list|,
literal|"foo1"
argument_list|,
literal|"foo2"
argument_list|,
literal|"foo3"
argument_list|,
literal|"foo4"
argument_list|,
literal|"foo5"
argument_list|,
literal|"foo6"
argument_list|,
literal|"foo7"
argument_list|,
literal|"foo8"
argument_list|,
literal|"foo9"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddEmptyRemoveChildren
parameter_list|()
throws|throws
name|CommitFailedException
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|child
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
decl_stmt|;
name|child
operator|.
name|addChild
argument_list|(
literal|"grandChild"
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child2"
argument_list|)
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/child"
argument_list|,
literal|"/test/child2"
argument_list|,
literal|"/test/child2/grandChild2"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"child"
argument_list|,
literal|"child2"
argument_list|,
literal|"grandChild2"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|,
literal|"test:grandChildType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"child2Prop"
argument_list|,
literal|"grandChild2Prop"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMaxPathDepthAll
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|PrivilegedActionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|setup
argument_list|()
expr_stmt|;
name|doAddMaxPathDepth
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doAddMaxPathDepth
parameter_list|(
name|int
name|maxPathDepth
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|collectorProvider
operator|.
name|setMaxPathDepth
argument_list|(
name|maxPathDepth
argument_list|)
expr_stmt|;
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|next
init|=
name|rootTree
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
name|next
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|!=
literal|0
condition|)
block|{
name|next
operator|.
name|setProperty
argument_list|(
literal|"nextProp"
operator|+
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|next
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"test:even"
else|:
literal|"test:odd"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedParentPaths
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxPathDepth
operator|==
literal|0
condition|)
block|{
name|expectedParentPaths
operator|.
name|add
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|expectedParentPaths
operator|.
name|add
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxPathDepth
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|StringBuffer
name|path
init|=
operator|new
name|StringBuffer
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|i
condition|;
name|j
operator|++
control|)
block|{
name|path
operator|.
name|append
argument_list|(
literal|"/n"
operator|+
name|j
argument_list|)
expr_stmt|;
block|}
name|expectedParentPaths
operator|.
name|add
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertMatches
argument_list|(
literal|"parentPaths-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|expectedParentPaths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"n0"
argument_list|,
literal|"n1"
argument_list|,
literal|"n2"
argument_list|,
literal|"n3"
argument_list|,
literal|"n4"
argument_list|,
literal|"n5"
argument_list|,
literal|"n6"
argument_list|,
literal|"n7"
argument_list|,
literal|"n8"
argument_list|,
literal|"n9"
argument_list|,
literal|"n10"
argument_list|,
literal|"n11"
argument_list|,
literal|"n12"
argument_list|,
literal|"n13"
argument_list|,
literal|"n14"
comment|/* , "n15" */
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:even"
argument_list|,
literal|"test:odd"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:even"
argument_list|,
literal|"test:odd"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
comment|/* "nextProp0", */
literal|"nextProp1"
argument_list|,
literal|"nextProp2"
argument_list|,
comment|/* "nextProp3", */
literal|"nextProp4"
argument_list|,
literal|"nextProp5"
comment|/* , "nextProp6" */
argument_list|,
literal|"nextProp7"
argument_list|,
literal|"nextProp8"
argument_list|,
comment|/* "nextProp9", */
literal|"nextProp10"
argument_list|,
literal|"nextProp11"
argument_list|,
comment|/* "nextProp12", */
literal|"nextProp13"
argument_list|,
literal|"nextProp14"
comment|/* , "nextProp15" */
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddMixin
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"child"
argument_list|)
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"aMixin1"
argument_list|,
literal|"aMixin2"
argument_list|)
argument_list|,
name|Type
operator|.
name|NAMES
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/child"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"child"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"aMixin1"
argument_list|,
literal|"aMixin2"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"aMixin1"
argument_list|,
literal|"aMixin2"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_MIXINTYPES
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testAddNodeWithProperties
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|aChild
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"newchild"
argument_list|)
decl_stmt|;
name|aChild
operator|.
name|setProperty
argument_list|(
literal|"aProp"
argument_list|,
literal|"aValue"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|aChild
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"aPrimaryType"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test"
argument_list|,
literal|"/test/newchild"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"test"
argument_list|,
literal|"newchild"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"aPrimaryType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"aPrimaryType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"aProp"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathNotOverflown
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedParentPaths
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|expectedParentPaths
operator|.
name|add
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedParentNodeNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|expectedParentNodeNames
operator|.
name|add
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedParentNodeTypes
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
name|expectedParentNodeTypes
operator|.
name|add
argument_list|(
literal|"test:parentType"
argument_list|)
expr_stmt|;
comment|// do maxItems-1 iterations only, as the above already adds 1 item - to
comment|// avoid overflowing
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectorProvider
operator|.
name|getMaxItems
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Tree
name|aChild
init|=
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"manychildren"
operator|+
name|i
argument_list|)
decl_stmt|;
name|aChild
operator|.
name|setProperty
argument_list|(
literal|"aProperty"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|aChild
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"aChildPrimaryType"
operator|+
name|i
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|expectedParentPaths
operator|.
name|add
argument_list|(
literal|"/test/manychildren"
operator|+
name|i
argument_list|)
expr_stmt|;
name|expectedParentNodeNames
operator|.
name|add
argument_list|(
literal|"manychildren"
operator|+
name|i
argument_list|)
expr_stmt|;
name|expectedParentNodeTypes
operator|.
name|add
argument_list|(
literal|"aChildPrimaryType"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|expectedParentPaths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
name|expectedParentNodeNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
name|expectedParentNodeTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|expectedParentNodeTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"aProperty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPathOverflown
parameter_list|()
throws|throws
name|Exception
block|{
name|doTestPathOverflown
argument_list|(
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|overflowCnt
init|=
literal|1
init|;
name|overflowCnt
operator|<=
literal|64
operator|*
literal|1024
condition|;
name|overflowCnt
operator|+=
name|overflowCnt
control|)
block|{
name|doTestPathOverflown
argument_list|(
name|overflowCnt
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestPathOverflown
parameter_list|(
name|int
name|overflowCnt
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|PrivilegedActionException
block|{
name|setup
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectorProvider
operator|.
name|getMaxItems
argument_list|()
operator|+
name|overflowCnt
condition|;
name|i
operator|++
control|)
block|{
name|rootTree
operator|.
name|addChild
argument_list|(
literal|"manychildren"
operator|+
name|i
argument_list|)
operator|.
name|setProperty
argument_list|(
literal|"aProperty"
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"parentPaths"
argument_list|,
literal|null
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"parentNodeNames"
argument_list|,
literal|null
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
literal|"aProperty"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyNotOverflown
parameter_list|()
throws|throws
name|Exception
block|{
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|child1
init|=
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPropertyNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectorProvider
operator|.
name|getMaxItems
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|child1
operator|.
name|setProperty
argument_list|(
literal|"aProperty"
operator|+
name|i
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|expectedPropertyNames
operator|.
name|add
argument_list|(
literal|"aProperty"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test/child1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"child1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:childType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames"
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|expectedPropertyNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPropertyOverflown
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|overflowCnt
init|=
literal|1
init|;
name|overflowCnt
operator|<=
literal|64
operator|*
literal|1024
condition|;
name|overflowCnt
operator|+=
name|overflowCnt
control|)
block|{
name|doTestPropertyOverflown
argument_list|(
name|overflowCnt
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doTestPropertyOverflown
parameter_list|(
name|int
name|overflowCnt
parameter_list|)
throws|throws
name|CommitFailedException
throws|,
name|PrivilegedActionException
block|{
name|setup
argument_list|()
expr_stmt|;
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|child1
init|=
name|rootTree
operator|.
name|getChild
argument_list|(
literal|"child1"
argument_list|)
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedPropertyNames
init|=
name|Sets
operator|.
name|newHashSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collectorProvider
operator|.
name|getMaxItems
argument_list|()
operator|+
name|overflowCnt
condition|;
name|i
operator|++
control|)
block|{
name|child1
operator|.
name|setProperty
argument_list|(
literal|"aProperty"
operator|+
name|i
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
name|expectedPropertyNames
operator|.
name|add
argument_list|(
literal|"aProperty"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths"
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
literal|"/test/child1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames"
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"child1"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:childType"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes"
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:childType"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"propertyNames"
argument_list|,
literal|null
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testRemoveMaxPathDepthAll
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|PrivilegedActionException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|setup
argument_list|()
expr_stmt|;
name|doRemoveMaxPathDepth
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|doRemoveMaxPathDepth
parameter_list|(
name|int
name|maxPathDepth
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|collectorProvider
operator|.
name|setMaxPathDepth
argument_list|(
name|maxPathDepth
argument_list|)
expr_stmt|;
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|next
init|=
name|rootTree
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
name|next
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|!=
literal|0
condition|)
block|{
name|next
operator|.
name|setProperty
argument_list|(
literal|"nextProp"
operator|+
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|next
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"test:even"
else|:
literal|"test:odd"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// now do the delete
name|recorder
operator|.
name|changes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|rootTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|next
operator|=
name|rootTree
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|15
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
name|next
operator|.
name|getChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|14
condition|)
block|{
name|next
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedParentPaths
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|String
name|path
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|maxPathDepth
operator|==
literal|1
condition|)
block|{
name|path
operator|=
literal|"/test"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|maxPathDepth
operator|>
literal|1
condition|)
block|{
name|path
operator|=
literal|"/test"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxPathDepth
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|path
operator|=
name|concat
argument_list|(
name|path
argument_list|,
literal|"n"
operator|+
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|expectedParentPaths
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|expectedParentPaths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
literal|"n13"
argument_list|,
literal|"n14"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
literal|"test:even"
argument_list|,
literal|"test:odd"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
literal|"test:parentType"
argument_list|,
literal|"test:even"
argument_list|,
literal|"test:odd"
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
literal|"nextProp14"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testChangeMaxPathDepthAll
parameter_list|()
throws|throws
name|CommitFailedException
throws|,
name|PrivilegedActionException
block|{
for|for
control|(
name|int
name|maxPathDepth
init|=
literal|0
init|;
name|maxPathDepth
operator|<
literal|16
condition|;
name|maxPathDepth
operator|++
control|)
block|{
for|for
control|(
name|int
name|changeAt
init|=
literal|0
init|;
name|changeAt
operator|<
literal|16
condition|;
name|changeAt
operator|++
control|)
block|{
name|setup
argument_list|()
expr_stmt|;
name|doChangeMaxPathDepth
argument_list|(
name|changeAt
argument_list|,
name|maxPathDepth
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|doChangeMaxPathDepth
parameter_list|(
name|int
name|changeAt
parameter_list|,
name|int
name|maxPathDepth
parameter_list|)
throws|throws
name|CommitFailedException
block|{
name|collectorProvider
operator|.
name|setMaxPathDepth
argument_list|(
name|maxPathDepth
argument_list|)
expr_stmt|;
name|Root
name|root
init|=
name|session
operator|.
name|getLatestRoot
argument_list|()
decl_stmt|;
name|Tree
name|rootTree
init|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
decl_stmt|;
name|Tree
name|next
init|=
name|rootTree
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
name|next
operator|.
name|addChild
argument_list|(
literal|"n"
operator|+
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|!=
literal|0
condition|)
block|{
name|next
operator|.
name|setProperty
argument_list|(
literal|"nextProp"
operator|+
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|next
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"test:even"
else|:
literal|"test:odd"
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|recorder
operator|.
name|changes
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// now do the change
name|root
operator|=
name|session
operator|.
name|getLatestRoot
argument_list|()
expr_stmt|;
name|rootTree
operator|=
name|root
operator|.
name|getTree
argument_list|(
literal|"/test"
argument_list|)
expr_stmt|;
name|next
operator|=
name|rootTree
expr_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedParentPaths
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedParentNodeNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|Set
argument_list|<
name|String
argument_list|>
name|expectedAllNodeTypes
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedParentNodeTypes
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|String
argument_list|>
name|expectedPropertyNames
init|=
operator|new
name|LinkedList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|expectedPropertyNames
operator|.
name|add
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|)
expr_stmt|;
name|String
name|parent
init|=
literal|"/"
decl_stmt|;
if|if
condition|(
name|maxPathDepth
operator|>
literal|0
condition|)
block|{
name|parent
operator|=
literal|"/test"
expr_stmt|;
block|}
name|expectedAllNodeTypes
operator|.
name|add
argument_list|(
literal|"test:parentType"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|changeAt
condition|;
name|i
operator|++
control|)
block|{
name|String
name|childName
init|=
literal|"n"
operator|+
name|i
decl_stmt|;
name|next
operator|=
name|next
operator|.
name|getChild
argument_list|(
name|childName
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|maxPathDepth
operator|-
literal|1
condition|)
block|{
name|parent
operator|=
name|concat
argument_list|(
name|parent
argument_list|,
name|childName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|originalNodeTypeName
init|=
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"test:even"
else|:
literal|"test:odd"
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|!=
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|changeAt
condition|)
block|{
name|expectedParentNodeTypes
operator|.
name|add
argument_list|(
name|originalNodeTypeName
argument_list|)
expr_stmt|;
block|}
name|expectedAllNodeTypes
operator|.
name|add
argument_list|(
name|originalNodeTypeName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|==
name|changeAt
condition|)
block|{
name|expectedParentNodeNames
operator|.
name|add
argument_list|(
name|next
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|propertyName
init|=
literal|"nextProp"
operator|+
name|i
decl_stmt|;
name|next
operator|.
name|setProperty
argument_list|(
name|propertyName
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|expectedPropertyNames
operator|.
name|add
argument_list|(
name|propertyName
argument_list|)
expr_stmt|;
specifier|final
name|String
name|changedNodeTypeName
init|=
name|i
operator|%
literal|2
operator|==
literal|0
condition|?
literal|"test:evenChanged"
else|:
literal|"test:oddChanged"
decl_stmt|;
name|expectedParentNodeTypes
operator|.
name|add
argument_list|(
name|changedNodeTypeName
argument_list|)
expr_stmt|;
name|expectedAllNodeTypes
operator|.
name|add
argument_list|(
name|changedNodeTypeName
argument_list|)
expr_stmt|;
name|next
operator|.
name|setProperty
argument_list|(
name|JcrConstants
operator|.
name|JCR_PRIMARYTYPE
argument_list|,
name|changedNodeTypeName
argument_list|,
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
block|}
block|}
name|expectedParentPaths
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|root
operator|.
name|commit
argument_list|()
expr_stmt|;
name|ChangeSet
name|changeSet
init|=
name|getSingleChangeSet
argument_list|()
decl_stmt|;
name|assertMatches
argument_list|(
literal|"parentPaths-"
operator|+
name|changeAt
operator|+
literal|"-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentPaths
argument_list|()
argument_list|,
name|expectedParentPaths
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeNames-"
operator|+
name|changeAt
operator|+
literal|"-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentNodeNames
argument_list|()
argument_list|,
name|expectedParentNodeNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"parentNodeTypes-"
operator|+
name|changeAt
operator|+
literal|"-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getParentNodeTypes
argument_list|()
argument_list|,
name|expectedParentNodeTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"allNodeTypes-"
operator|+
name|changeAt
operator|+
literal|"-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getAllNodeTypes
argument_list|()
argument_list|,
name|expectedAllNodeTypes
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|assertMatches
argument_list|(
literal|"propertyNames-"
operator|+
name|changeAt
operator|+
literal|"-"
operator|+
name|maxPathDepth
argument_list|,
name|changeSet
operator|.
name|getPropertyNames
argument_list|()
argument_list|,
name|expectedPropertyNames
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

